
MyFirstBootedApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .image_hdr    00000035  08020000  08020000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  08020200  08020200  00010200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006aa0  08020498  08020498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  08026f38  08026f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08026f70  08026f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08026f78  08026f78  00016f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08026f7c  08026f7c  00016f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000028  20000000  08026f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  20000028  08026fa8  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  20000088  08027008  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002278  200000e8  08027068  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002360  08027068  00022360  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002084c  00000000  00000000  00020116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000349a  00000000  00000000  00040962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00043e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003713e  00000000  00000000  00044cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001341c  00000000  00000000  0007be16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00161693  00000000  00000000  0008f232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f08c5  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000dc8  00000000  00000000  001f0918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ccc  00000000  00000000  001f16e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020498 <__do_global_dtors_aux>:
 8020498:	b510      	push	{r4, lr}
 802049a:	4c05      	ldr	r4, [pc, #20]	; (80204b0 <__do_global_dtors_aux+0x18>)
 802049c:	7823      	ldrb	r3, [r4, #0]
 802049e:	b933      	cbnz	r3, 80204ae <__do_global_dtors_aux+0x16>
 80204a0:	4b04      	ldr	r3, [pc, #16]	; (80204b4 <__do_global_dtors_aux+0x1c>)
 80204a2:	b113      	cbz	r3, 80204aa <__do_global_dtors_aux+0x12>
 80204a4:	4804      	ldr	r0, [pc, #16]	; (80204b8 <__do_global_dtors_aux+0x20>)
 80204a6:	f3af 8000 	nop.w
 80204aa:	2301      	movs	r3, #1
 80204ac:	7023      	strb	r3, [r4, #0]
 80204ae:	bd10      	pop	{r4, pc}
 80204b0:	200000e8 	.word	0x200000e8
 80204b4:	00000000 	.word	0x00000000
 80204b8:	08026f20 	.word	0x08026f20

080204bc <frame_dummy>:
 80204bc:	b508      	push	{r3, lr}
 80204be:	4b03      	ldr	r3, [pc, #12]	; (80204cc <frame_dummy+0x10>)
 80204c0:	b11b      	cbz	r3, 80204ca <frame_dummy+0xe>
 80204c2:	4903      	ldr	r1, [pc, #12]	; (80204d0 <frame_dummy+0x14>)
 80204c4:	4803      	ldr	r0, [pc, #12]	; (80204d4 <frame_dummy+0x18>)
 80204c6:	f3af 8000 	nop.w
 80204ca:	bd08      	pop	{r3, pc}
 80204cc:	00000000 	.word	0x00000000
 80204d0:	200000ec 	.word	0x200000ec
 80204d4:	08026f20 	.word	0x08026f20

080204d8 <__aeabi_uldivmod>:
 80204d8:	b953      	cbnz	r3, 80204f0 <__aeabi_uldivmod+0x18>
 80204da:	b94a      	cbnz	r2, 80204f0 <__aeabi_uldivmod+0x18>
 80204dc:	2900      	cmp	r1, #0
 80204de:	bf08      	it	eq
 80204e0:	2800      	cmpeq	r0, #0
 80204e2:	bf1c      	itt	ne
 80204e4:	f04f 31ff 	movne.w	r1, #4294967295
 80204e8:	f04f 30ff 	movne.w	r0, #4294967295
 80204ec:	f000 b96e 	b.w	80207cc <__aeabi_idiv0>
 80204f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80204f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80204f8:	f000 f806 	bl	8020508 <__udivmoddi4>
 80204fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020504:	b004      	add	sp, #16
 8020506:	4770      	bx	lr

08020508 <__udivmoddi4>:
 8020508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802050c:	9d08      	ldr	r5, [sp, #32]
 802050e:	4604      	mov	r4, r0
 8020510:	468c      	mov	ip, r1
 8020512:	2b00      	cmp	r3, #0
 8020514:	f040 8083 	bne.w	802061e <__udivmoddi4+0x116>
 8020518:	428a      	cmp	r2, r1
 802051a:	4617      	mov	r7, r2
 802051c:	d947      	bls.n	80205ae <__udivmoddi4+0xa6>
 802051e:	fab2 f282 	clz	r2, r2
 8020522:	b142      	cbz	r2, 8020536 <__udivmoddi4+0x2e>
 8020524:	f1c2 0020 	rsb	r0, r2, #32
 8020528:	fa24 f000 	lsr.w	r0, r4, r0
 802052c:	4091      	lsls	r1, r2
 802052e:	4097      	lsls	r7, r2
 8020530:	ea40 0c01 	orr.w	ip, r0, r1
 8020534:	4094      	lsls	r4, r2
 8020536:	ea4f 4817 	mov.w	r8, r7, lsr #16
 802053a:	0c23      	lsrs	r3, r4, #16
 802053c:	fbbc f6f8 	udiv	r6, ip, r8
 8020540:	fa1f fe87 	uxth.w	lr, r7
 8020544:	fb08 c116 	mls	r1, r8, r6, ip
 8020548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802054c:	fb06 f10e 	mul.w	r1, r6, lr
 8020550:	4299      	cmp	r1, r3
 8020552:	d909      	bls.n	8020568 <__udivmoddi4+0x60>
 8020554:	18fb      	adds	r3, r7, r3
 8020556:	f106 30ff 	add.w	r0, r6, #4294967295
 802055a:	f080 8119 	bcs.w	8020790 <__udivmoddi4+0x288>
 802055e:	4299      	cmp	r1, r3
 8020560:	f240 8116 	bls.w	8020790 <__udivmoddi4+0x288>
 8020564:	3e02      	subs	r6, #2
 8020566:	443b      	add	r3, r7
 8020568:	1a5b      	subs	r3, r3, r1
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb3 f0f8 	udiv	r0, r3, r8
 8020570:	fb08 3310 	mls	r3, r8, r0, r3
 8020574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	45a6      	cmp	lr, r4
 802057e:	d909      	bls.n	8020594 <__udivmoddi4+0x8c>
 8020580:	193c      	adds	r4, r7, r4
 8020582:	f100 33ff 	add.w	r3, r0, #4294967295
 8020586:	f080 8105 	bcs.w	8020794 <__udivmoddi4+0x28c>
 802058a:	45a6      	cmp	lr, r4
 802058c:	f240 8102 	bls.w	8020794 <__udivmoddi4+0x28c>
 8020590:	3802      	subs	r0, #2
 8020592:	443c      	add	r4, r7
 8020594:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020598:	eba4 040e 	sub.w	r4, r4, lr
 802059c:	2600      	movs	r6, #0
 802059e:	b11d      	cbz	r5, 80205a8 <__udivmoddi4+0xa0>
 80205a0:	40d4      	lsrs	r4, r2
 80205a2:	2300      	movs	r3, #0
 80205a4:	e9c5 4300 	strd	r4, r3, [r5]
 80205a8:	4631      	mov	r1, r6
 80205aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ae:	b902      	cbnz	r2, 80205b2 <__udivmoddi4+0xaa>
 80205b0:	deff      	udf	#255	; 0xff
 80205b2:	fab2 f282 	clz	r2, r2
 80205b6:	2a00      	cmp	r2, #0
 80205b8:	d150      	bne.n	802065c <__udivmoddi4+0x154>
 80205ba:	1bcb      	subs	r3, r1, r7
 80205bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80205c0:	fa1f f887 	uxth.w	r8, r7
 80205c4:	2601      	movs	r6, #1
 80205c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80205ca:	0c21      	lsrs	r1, r4, #16
 80205cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80205d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80205d4:	fb08 f30c 	mul.w	r3, r8, ip
 80205d8:	428b      	cmp	r3, r1
 80205da:	d907      	bls.n	80205ec <__udivmoddi4+0xe4>
 80205dc:	1879      	adds	r1, r7, r1
 80205de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80205e2:	d202      	bcs.n	80205ea <__udivmoddi4+0xe2>
 80205e4:	428b      	cmp	r3, r1
 80205e6:	f200 80e9 	bhi.w	80207bc <__udivmoddi4+0x2b4>
 80205ea:	4684      	mov	ip, r0
 80205ec:	1ac9      	subs	r1, r1, r3
 80205ee:	b2a3      	uxth	r3, r4
 80205f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80205f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80205f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80205fc:	fb08 f800 	mul.w	r8, r8, r0
 8020600:	45a0      	cmp	r8, r4
 8020602:	d907      	bls.n	8020614 <__udivmoddi4+0x10c>
 8020604:	193c      	adds	r4, r7, r4
 8020606:	f100 33ff 	add.w	r3, r0, #4294967295
 802060a:	d202      	bcs.n	8020612 <__udivmoddi4+0x10a>
 802060c:	45a0      	cmp	r8, r4
 802060e:	f200 80d9 	bhi.w	80207c4 <__udivmoddi4+0x2bc>
 8020612:	4618      	mov	r0, r3
 8020614:	eba4 0408 	sub.w	r4, r4, r8
 8020618:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 802061c:	e7bf      	b.n	802059e <__udivmoddi4+0x96>
 802061e:	428b      	cmp	r3, r1
 8020620:	d909      	bls.n	8020636 <__udivmoddi4+0x12e>
 8020622:	2d00      	cmp	r5, #0
 8020624:	f000 80b1 	beq.w	802078a <__udivmoddi4+0x282>
 8020628:	2600      	movs	r6, #0
 802062a:	e9c5 0100 	strd	r0, r1, [r5]
 802062e:	4630      	mov	r0, r6
 8020630:	4631      	mov	r1, r6
 8020632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020636:	fab3 f683 	clz	r6, r3
 802063a:	2e00      	cmp	r6, #0
 802063c:	d14a      	bne.n	80206d4 <__udivmoddi4+0x1cc>
 802063e:	428b      	cmp	r3, r1
 8020640:	d302      	bcc.n	8020648 <__udivmoddi4+0x140>
 8020642:	4282      	cmp	r2, r0
 8020644:	f200 80b8 	bhi.w	80207b8 <__udivmoddi4+0x2b0>
 8020648:	1a84      	subs	r4, r0, r2
 802064a:	eb61 0103 	sbc.w	r1, r1, r3
 802064e:	2001      	movs	r0, #1
 8020650:	468c      	mov	ip, r1
 8020652:	2d00      	cmp	r5, #0
 8020654:	d0a8      	beq.n	80205a8 <__udivmoddi4+0xa0>
 8020656:	e9c5 4c00 	strd	r4, ip, [r5]
 802065a:	e7a5      	b.n	80205a8 <__udivmoddi4+0xa0>
 802065c:	f1c2 0320 	rsb	r3, r2, #32
 8020660:	fa20 f603 	lsr.w	r6, r0, r3
 8020664:	4097      	lsls	r7, r2
 8020666:	fa01 f002 	lsl.w	r0, r1, r2
 802066a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 802066e:	40d9      	lsrs	r1, r3
 8020670:	4330      	orrs	r0, r6
 8020672:	0c03      	lsrs	r3, r0, #16
 8020674:	fbb1 f6fe 	udiv	r6, r1, lr
 8020678:	fa1f f887 	uxth.w	r8, r7
 802067c:	fb0e 1116 	mls	r1, lr, r6, r1
 8020680:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020684:	fb06 f108 	mul.w	r1, r6, r8
 8020688:	4299      	cmp	r1, r3
 802068a:	fa04 f402 	lsl.w	r4, r4, r2
 802068e:	d909      	bls.n	80206a4 <__udivmoddi4+0x19c>
 8020690:	18fb      	adds	r3, r7, r3
 8020692:	f106 3cff 	add.w	ip, r6, #4294967295
 8020696:	f080 808d 	bcs.w	80207b4 <__udivmoddi4+0x2ac>
 802069a:	4299      	cmp	r1, r3
 802069c:	f240 808a 	bls.w	80207b4 <__udivmoddi4+0x2ac>
 80206a0:	3e02      	subs	r6, #2
 80206a2:	443b      	add	r3, r7
 80206a4:	1a5b      	subs	r3, r3, r1
 80206a6:	b281      	uxth	r1, r0
 80206a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80206ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80206b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80206b4:	fb00 f308 	mul.w	r3, r0, r8
 80206b8:	428b      	cmp	r3, r1
 80206ba:	d907      	bls.n	80206cc <__udivmoddi4+0x1c4>
 80206bc:	1879      	adds	r1, r7, r1
 80206be:	f100 3cff 	add.w	ip, r0, #4294967295
 80206c2:	d273      	bcs.n	80207ac <__udivmoddi4+0x2a4>
 80206c4:	428b      	cmp	r3, r1
 80206c6:	d971      	bls.n	80207ac <__udivmoddi4+0x2a4>
 80206c8:	3802      	subs	r0, #2
 80206ca:	4439      	add	r1, r7
 80206cc:	1acb      	subs	r3, r1, r3
 80206ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80206d2:	e778      	b.n	80205c6 <__udivmoddi4+0xbe>
 80206d4:	f1c6 0c20 	rsb	ip, r6, #32
 80206d8:	fa03 f406 	lsl.w	r4, r3, r6
 80206dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80206e0:	431c      	orrs	r4, r3
 80206e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80206e6:	fa01 f306 	lsl.w	r3, r1, r6
 80206ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80206ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80206f2:	431f      	orrs	r7, r3
 80206f4:	0c3b      	lsrs	r3, r7, #16
 80206f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80206fa:	fa1f f884 	uxth.w	r8, r4
 80206fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8020702:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8020706:	fb09 fa08 	mul.w	sl, r9, r8
 802070a:	458a      	cmp	sl, r1
 802070c:	fa02 f206 	lsl.w	r2, r2, r6
 8020710:	fa00 f306 	lsl.w	r3, r0, r6
 8020714:	d908      	bls.n	8020728 <__udivmoddi4+0x220>
 8020716:	1861      	adds	r1, r4, r1
 8020718:	f109 30ff 	add.w	r0, r9, #4294967295
 802071c:	d248      	bcs.n	80207b0 <__udivmoddi4+0x2a8>
 802071e:	458a      	cmp	sl, r1
 8020720:	d946      	bls.n	80207b0 <__udivmoddi4+0x2a8>
 8020722:	f1a9 0902 	sub.w	r9, r9, #2
 8020726:	4421      	add	r1, r4
 8020728:	eba1 010a 	sub.w	r1, r1, sl
 802072c:	b2bf      	uxth	r7, r7
 802072e:	fbb1 f0fe 	udiv	r0, r1, lr
 8020732:	fb0e 1110 	mls	r1, lr, r0, r1
 8020736:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 802073a:	fb00 f808 	mul.w	r8, r0, r8
 802073e:	45b8      	cmp	r8, r7
 8020740:	d907      	bls.n	8020752 <__udivmoddi4+0x24a>
 8020742:	19e7      	adds	r7, r4, r7
 8020744:	f100 31ff 	add.w	r1, r0, #4294967295
 8020748:	d22e      	bcs.n	80207a8 <__udivmoddi4+0x2a0>
 802074a:	45b8      	cmp	r8, r7
 802074c:	d92c      	bls.n	80207a8 <__udivmoddi4+0x2a0>
 802074e:	3802      	subs	r0, #2
 8020750:	4427      	add	r7, r4
 8020752:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020756:	eba7 0708 	sub.w	r7, r7, r8
 802075a:	fba0 8902 	umull	r8, r9, r0, r2
 802075e:	454f      	cmp	r7, r9
 8020760:	46c6      	mov	lr, r8
 8020762:	4649      	mov	r1, r9
 8020764:	d31a      	bcc.n	802079c <__udivmoddi4+0x294>
 8020766:	d017      	beq.n	8020798 <__udivmoddi4+0x290>
 8020768:	b15d      	cbz	r5, 8020782 <__udivmoddi4+0x27a>
 802076a:	ebb3 020e 	subs.w	r2, r3, lr
 802076e:	eb67 0701 	sbc.w	r7, r7, r1
 8020772:	fa07 fc0c 	lsl.w	ip, r7, ip
 8020776:	40f2      	lsrs	r2, r6
 8020778:	ea4c 0202 	orr.w	r2, ip, r2
 802077c:	40f7      	lsrs	r7, r6
 802077e:	e9c5 2700 	strd	r2, r7, [r5]
 8020782:	2600      	movs	r6, #0
 8020784:	4631      	mov	r1, r6
 8020786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802078a:	462e      	mov	r6, r5
 802078c:	4628      	mov	r0, r5
 802078e:	e70b      	b.n	80205a8 <__udivmoddi4+0xa0>
 8020790:	4606      	mov	r6, r0
 8020792:	e6e9      	b.n	8020568 <__udivmoddi4+0x60>
 8020794:	4618      	mov	r0, r3
 8020796:	e6fd      	b.n	8020594 <__udivmoddi4+0x8c>
 8020798:	4543      	cmp	r3, r8
 802079a:	d2e5      	bcs.n	8020768 <__udivmoddi4+0x260>
 802079c:	ebb8 0e02 	subs.w	lr, r8, r2
 80207a0:	eb69 0104 	sbc.w	r1, r9, r4
 80207a4:	3801      	subs	r0, #1
 80207a6:	e7df      	b.n	8020768 <__udivmoddi4+0x260>
 80207a8:	4608      	mov	r0, r1
 80207aa:	e7d2      	b.n	8020752 <__udivmoddi4+0x24a>
 80207ac:	4660      	mov	r0, ip
 80207ae:	e78d      	b.n	80206cc <__udivmoddi4+0x1c4>
 80207b0:	4681      	mov	r9, r0
 80207b2:	e7b9      	b.n	8020728 <__udivmoddi4+0x220>
 80207b4:	4666      	mov	r6, ip
 80207b6:	e775      	b.n	80206a4 <__udivmoddi4+0x19c>
 80207b8:	4630      	mov	r0, r6
 80207ba:	e74a      	b.n	8020652 <__udivmoddi4+0x14a>
 80207bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80207c0:	4439      	add	r1, r7
 80207c2:	e713      	b.n	80205ec <__udivmoddi4+0xe4>
 80207c4:	3802      	subs	r0, #2
 80207c6:	443c      	add	r4, r7
 80207c8:	e724      	b.n	8020614 <__udivmoddi4+0x10c>
 80207ca:	bf00      	nop

080207cc <__aeabi_idiv0>:
 80207cc:	4770      	bx	lr
 80207ce:	bf00      	nop

080207d0 <app_main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int app_main(void)
{
 80207d0:	b580      	push	{r7, lr}
 80207d2:	b082      	sub	sp, #8
 80207d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80207d6:	f000 fd33 	bl	8021240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80207da:	f000 f825 	bl	8020828 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80207de:	f000 f88f 	bl	8020900 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80207e2:	f000 f9a3 	bl	8020b2c <MX_GPIO_Init>
  MX_SPI1_Init();
 80207e6:	f000 f8f9 	bl	80209dc <MX_SPI1_Init>
  MX_FATFS_Init();
 80207ea:	f005 fdc9 	bl	8026380 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 80207ee:	f000 f949 	bl	8020a84 <MX_USART3_UART_Init>
  MX_ETH_Init();
 80207f2:	f000 f8a1 	bl	8020938 <MX_ETH_Init>
  MX_USB_OTG_FS_USB_Init();
 80207f6:	f000 f991 	bl	8020b1c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  image_hdr_t *image_hdr = (image_hdr_t *) &(__IMAGE_HDR_START__);
 80207fa:	4b09      	ldr	r3, [pc, #36]	; (8020820 <app_main+0x50>)
 80207fc:	607b      	str	r3, [r7, #4]
  uint32_t crc = image_hdr->crc;
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	685b      	ldr	r3, [r3, #4]
 8020802:	603b      	str	r3, [r7, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      //Blink the LED every second
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);		//Blue LED
 8020804:	2180      	movs	r1, #128	; 0x80
 8020806:	4807      	ldr	r0, [pc, #28]	; (8020824 <app_main+0x54>)
 8020808:	f001 fcb3 	bl	8022172 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 802080c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020810:	4804      	ldr	r0, [pc, #16]	; (8020824 <app_main+0x54>)
 8020812:	f001 fcae 	bl	8022172 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8020816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802081a:	f000 fda3 	bl	8021364 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);		//Blue LED
 802081e:	e7f1      	b.n	8020804 <app_main+0x34>
 8020820:	08020000 	.word	0x08020000
 8020824:	58020400 	.word	0x58020400

08020828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020828:	b580      	push	{r7, lr}
 802082a:	b09c      	sub	sp, #112	; 0x70
 802082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020832:	224c      	movs	r2, #76	; 0x4c
 8020834:	2100      	movs	r1, #0
 8020836:	4618      	mov	r0, r3
 8020838:	f006 fb6a 	bl	8026f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802083c:	1d3b      	adds	r3, r7, #4
 802083e:	2220      	movs	r2, #32
 8020840:	2100      	movs	r1, #0
 8020842:	4618      	mov	r0, r3
 8020844:	f006 fb64 	bl	8026f10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8020848:	2002      	movs	r0, #2
 802084a:	f001 fcad 	bl	80221a8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 802084e:	2300      	movs	r3, #0
 8020850:	603b      	str	r3, [r7, #0]
 8020852:	4b29      	ldr	r3, [pc, #164]	; (80208f8 <SystemClock_Config+0xd0>)
 8020854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020856:	4a28      	ldr	r2, [pc, #160]	; (80208f8 <SystemClock_Config+0xd0>)
 8020858:	f023 0301 	bic.w	r3, r3, #1
 802085c:	62d3      	str	r3, [r2, #44]	; 0x2c
 802085e:	4b26      	ldr	r3, [pc, #152]	; (80208f8 <SystemClock_Config+0xd0>)
 8020860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020862:	f003 0301 	and.w	r3, r3, #1
 8020866:	603b      	str	r3, [r7, #0]
 8020868:	4b24      	ldr	r3, [pc, #144]	; (80208fc <SystemClock_Config+0xd4>)
 802086a:	699b      	ldr	r3, [r3, #24]
 802086c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020870:	4a22      	ldr	r2, [pc, #136]	; (80208fc <SystemClock_Config+0xd4>)
 8020872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020876:	6193      	str	r3, [r2, #24]
 8020878:	4b20      	ldr	r3, [pc, #128]	; (80208fc <SystemClock_Config+0xd4>)
 802087a:	699b      	ldr	r3, [r3, #24]
 802087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020880:	603b      	str	r3, [r7, #0]
 8020882:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8020884:	bf00      	nop
 8020886:	4b1d      	ldr	r3, [pc, #116]	; (80208fc <SystemClock_Config+0xd4>)
 8020888:	699b      	ldr	r3, [r3, #24]
 802088a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802088e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020892:	d1f8      	bne.n	8020886 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8020894:	2322      	movs	r3, #34	; 0x22
 8020896:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8020898:	2301      	movs	r3, #1
 802089a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 802089c:	2340      	movs	r3, #64	; 0x40
 802089e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80208a0:	2301      	movs	r3, #1
 80208a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80208a4:	2300      	movs	r3, #0
 80208a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80208a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80208ac:	4618      	mov	r0, r3
 80208ae:	f001 fcb5 	bl	802221c <HAL_RCC_OscConfig>
 80208b2:	4603      	mov	r3, r0
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d001      	beq.n	80208bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80208b8:	f000 fa00 	bl	8020cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80208bc:	233f      	movs	r3, #63	; 0x3f
 80208be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80208c0:	2300      	movs	r3, #0
 80208c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80208c4:	2300      	movs	r3, #0
 80208c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80208c8:	2300      	movs	r3, #0
 80208ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80208cc:	2300      	movs	r3, #0
 80208ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80208d0:	2340      	movs	r3, #64	; 0x40
 80208d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80208d4:	2300      	movs	r3, #0
 80208d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80208d8:	2300      	movs	r3, #0
 80208da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80208dc:	1d3b      	adds	r3, r7, #4
 80208de:	2101      	movs	r1, #1
 80208e0:	4618      	mov	r0, r3
 80208e2:	f002 f8ab 	bl	8022a3c <HAL_RCC_ClockConfig>
 80208e6:	4603      	mov	r3, r0
 80208e8:	2b00      	cmp	r3, #0
 80208ea:	d001      	beq.n	80208f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80208ec:	f000 f9e6 	bl	8020cbc <Error_Handler>
  }
}
 80208f0:	bf00      	nop
 80208f2:	3770      	adds	r7, #112	; 0x70
 80208f4:	46bd      	mov	sp, r7
 80208f6:	bd80      	pop	{r7, pc}
 80208f8:	58000400 	.word	0x58000400
 80208fc:	58024800 	.word	0x58024800

08020900 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8020900:	b580      	push	{r7, lr}
 8020902:	b0b0      	sub	sp, #192	; 0xc0
 8020904:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020906:	1d3b      	adds	r3, r7, #4
 8020908:	22bc      	movs	r2, #188	; 0xbc
 802090a:	2100      	movs	r1, #0
 802090c:	4618      	mov	r0, r3
 802090e:	f006 faff 	bl	8026f10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8020912:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8020916:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8020918:	2300      	movs	r3, #0
 802091a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802091c:	1d3b      	adds	r3, r7, #4
 802091e:	4618      	mov	r0, r3
 8020920:	f002 fc18 	bl	8023154 <HAL_RCCEx_PeriphCLKConfig>
 8020924:	4603      	mov	r3, r0
 8020926:	2b00      	cmp	r3, #0
 8020928:	d001      	beq.n	802092e <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 802092a:	f000 f9c7 	bl	8020cbc <Error_Handler>
  }
}
 802092e:	bf00      	nop
 8020930:	37c0      	adds	r7, #192	; 0xc0
 8020932:	46bd      	mov	sp, r7
 8020934:	bd80      	pop	{r7, pc}
	...

08020938 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8020938:	b580      	push	{r7, lr}
 802093a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 802093c:	4b22      	ldr	r3, [pc, #136]	; (80209c8 <MX_ETH_Init+0x90>)
 802093e:	4a23      	ldr	r2, [pc, #140]	; (80209cc <MX_ETH_Init+0x94>)
 8020940:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8020942:	4b21      	ldr	r3, [pc, #132]	; (80209c8 <MX_ETH_Init+0x90>)
 8020944:	685b      	ldr	r3, [r3, #4]
 8020946:	2200      	movs	r2, #0
 8020948:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 802094a:	4b1f      	ldr	r3, [pc, #124]	; (80209c8 <MX_ETH_Init+0x90>)
 802094c:	685b      	ldr	r3, [r3, #4]
 802094e:	3301      	adds	r3, #1
 8020950:	2280      	movs	r2, #128	; 0x80
 8020952:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8020954:	4b1c      	ldr	r3, [pc, #112]	; (80209c8 <MX_ETH_Init+0x90>)
 8020956:	685b      	ldr	r3, [r3, #4]
 8020958:	3302      	adds	r3, #2
 802095a:	22e1      	movs	r2, #225	; 0xe1
 802095c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 802095e:	4b1a      	ldr	r3, [pc, #104]	; (80209c8 <MX_ETH_Init+0x90>)
 8020960:	685b      	ldr	r3, [r3, #4]
 8020962:	3303      	adds	r3, #3
 8020964:	2200      	movs	r2, #0
 8020966:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8020968:	4b17      	ldr	r3, [pc, #92]	; (80209c8 <MX_ETH_Init+0x90>)
 802096a:	685b      	ldr	r3, [r3, #4]
 802096c:	3304      	adds	r3, #4
 802096e:	2200      	movs	r2, #0
 8020970:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8020972:	4b15      	ldr	r3, [pc, #84]	; (80209c8 <MX_ETH_Init+0x90>)
 8020974:	685b      	ldr	r3, [r3, #4]
 8020976:	3305      	adds	r3, #5
 8020978:	2200      	movs	r2, #0
 802097a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 802097c:	4b12      	ldr	r3, [pc, #72]	; (80209c8 <MX_ETH_Init+0x90>)
 802097e:	2201      	movs	r2, #1
 8020980:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8020982:	4b11      	ldr	r3, [pc, #68]	; (80209c8 <MX_ETH_Init+0x90>)
 8020984:	4a12      	ldr	r2, [pc, #72]	; (80209d0 <MX_ETH_Init+0x98>)
 8020986:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8020988:	4b0f      	ldr	r3, [pc, #60]	; (80209c8 <MX_ETH_Init+0x90>)
 802098a:	4a12      	ldr	r2, [pc, #72]	; (80209d4 <MX_ETH_Init+0x9c>)
 802098c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 802098e:	4b0e      	ldr	r3, [pc, #56]	; (80209c8 <MX_ETH_Init+0x90>)
 8020990:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8020994:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8020996:	480c      	ldr	r0, [pc, #48]	; (80209c8 <MX_ETH_Init+0x90>)
 8020998:	f000 fe0c 	bl	80215b4 <HAL_ETH_Init>
 802099c:	4603      	mov	r3, r0
 802099e:	2b00      	cmp	r3, #0
 80209a0:	d001      	beq.n	80209a6 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80209a2:	f000 f98b 	bl	8020cbc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80209a6:	2234      	movs	r2, #52	; 0x34
 80209a8:	2100      	movs	r1, #0
 80209aa:	480b      	ldr	r0, [pc, #44]	; (80209d8 <MX_ETH_Init+0xa0>)
 80209ac:	f006 fab0 	bl	8026f10 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80209b0:	4b09      	ldr	r3, [pc, #36]	; (80209d8 <MX_ETH_Init+0xa0>)
 80209b2:	2221      	movs	r2, #33	; 0x21
 80209b4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80209b6:	4b08      	ldr	r3, [pc, #32]	; (80209d8 <MX_ETH_Init+0xa0>)
 80209b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80209bc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80209be:	4b06      	ldr	r3, [pc, #24]	; (80209d8 <MX_ETH_Init+0xa0>)
 80209c0:	2200      	movs	r2, #0
 80209c2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80209c4:	bf00      	nop
 80209c6:	bd80      	pop	{r7, pc}
 80209c8:	2000022c 	.word	0x2000022c
 80209cc:	40028000 	.word	0x40028000
 80209d0:	20000088 	.word	0x20000088
 80209d4:	20000028 	.word	0x20000028
 80209d8:	200002b4 	.word	0x200002b4

080209dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80209dc:	b580      	push	{r7, lr}
 80209de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80209e0:	4b26      	ldr	r3, [pc, #152]	; (8020a7c <MX_SPI1_Init+0xa0>)
 80209e2:	4a27      	ldr	r2, [pc, #156]	; (8020a80 <MX_SPI1_Init+0xa4>)
 80209e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80209e6:	4b25      	ldr	r3, [pc, #148]	; (8020a7c <MX_SPI1_Init+0xa0>)
 80209e8:	2200      	movs	r2, #0
 80209ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80209ec:	4b23      	ldr	r3, [pc, #140]	; (8020a7c <MX_SPI1_Init+0xa0>)
 80209ee:	2200      	movs	r2, #0
 80209f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80209f2:	4b22      	ldr	r3, [pc, #136]	; (8020a7c <MX_SPI1_Init+0xa0>)
 80209f4:	2207      	movs	r2, #7
 80209f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209f8:	4b20      	ldr	r3, [pc, #128]	; (8020a7c <MX_SPI1_Init+0xa0>)
 80209fa:	2200      	movs	r2, #0
 80209fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209fe:	4b1f      	ldr	r3, [pc, #124]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a00:	2200      	movs	r2, #0
 8020a02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8020a04:	4b1d      	ldr	r3, [pc, #116]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a06:	2200      	movs	r2, #0
 8020a08:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020a0a:	4b1c      	ldr	r3, [pc, #112]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8020a10:	4b1a      	ldr	r3, [pc, #104]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a12:	2200      	movs	r2, #0
 8020a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8020a16:	4b19      	ldr	r3, [pc, #100]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8020a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x107;
 8020a1e:	4b17      	ldr	r3, [pc, #92]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a20:	f240 1207 	movw	r2, #263	; 0x107
 8020a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8020a26:	4b15      	ldr	r3, [pc, #84]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a28:	2200      	movs	r2, #0
 8020a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8020a2c:	4b13      	ldr	r3, [pc, #76]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a2e:	2200      	movs	r2, #0
 8020a30:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8020a32:	4b12      	ldr	r3, [pc, #72]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a34:	2200      	movs	r2, #0
 8020a36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8020a38:	4b10      	ldr	r3, [pc, #64]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a3a:	2200      	movs	r2, #0
 8020a3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8020a3e:	4b0f      	ldr	r3, [pc, #60]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a40:	2200      	movs	r2, #0
 8020a42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8020a44:	4b0d      	ldr	r3, [pc, #52]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a46:	2200      	movs	r2, #0
 8020a48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8020a4a:	4b0c      	ldr	r3, [pc, #48]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8020a50:	4b0a      	ldr	r3, [pc, #40]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a52:	2200      	movs	r2, #0
 8020a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8020a56:	4b09      	ldr	r3, [pc, #36]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a58:	2200      	movs	r2, #0
 8020a5a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8020a5c:	4b07      	ldr	r3, [pc, #28]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a5e:	2200      	movs	r2, #0
 8020a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8020a62:	4b06      	ldr	r3, [pc, #24]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a64:	2200      	movs	r2, #0
 8020a66:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8020a68:	4804      	ldr	r0, [pc, #16]	; (8020a7c <MX_SPI1_Init+0xa0>)
 8020a6a:	f003 fed5 	bl	8024818 <HAL_SPI_Init>
 8020a6e:	4603      	mov	r3, r0
 8020a70:	2b00      	cmp	r3, #0
 8020a72:	d001      	beq.n	8020a78 <MX_SPI1_Init+0x9c>
  {
    Error_Handler();
 8020a74:	f000 f922 	bl	8020cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8020a78:	bf00      	nop
 8020a7a:	bd80      	pop	{r7, pc}
 8020a7c:	200001a4 	.word	0x200001a4
 8020a80:	40013000 	.word	0x40013000

08020a84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8020a84:	b580      	push	{r7, lr}
 8020a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8020a88:	4b22      	ldr	r3, [pc, #136]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020a8a:	4a23      	ldr	r2, [pc, #140]	; (8020b18 <MX_USART3_UART_Init+0x94>)
 8020a8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8020a8e:	4b21      	ldr	r3, [pc, #132]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020a94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8020a96:	4b1f      	ldr	r3, [pc, #124]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020a98:	2200      	movs	r2, #0
 8020a9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8020a9c:	4b1d      	ldr	r3, [pc, #116]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020a9e:	2200      	movs	r2, #0
 8020aa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8020aa2:	4b1c      	ldr	r3, [pc, #112]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020aa4:	2200      	movs	r2, #0
 8020aa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8020aa8:	4b1a      	ldr	r3, [pc, #104]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020aaa:	220c      	movs	r2, #12
 8020aac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020aae:	4b19      	ldr	r3, [pc, #100]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020ab0:	2200      	movs	r2, #0
 8020ab2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8020ab4:	4b17      	ldr	r3, [pc, #92]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020ab6:	2200      	movs	r2, #0
 8020ab8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020aba:	4b16      	ldr	r3, [pc, #88]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020abc:	2200      	movs	r2, #0
 8020abe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8020ac0:	4b14      	ldr	r3, [pc, #80]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020ac2:	2200      	movs	r2, #0
 8020ac4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020ac6:	4b13      	ldr	r3, [pc, #76]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020ac8:	2200      	movs	r2, #0
 8020aca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8020acc:	4811      	ldr	r0, [pc, #68]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020ace:	f004 fc36 	bl	802533e <HAL_UART_Init>
 8020ad2:	4603      	mov	r3, r0
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	d001      	beq.n	8020adc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8020ad8:	f000 f8f0 	bl	8020cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020adc:	2100      	movs	r1, #0
 8020ade:	480d      	ldr	r0, [pc, #52]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020ae0:	f005 fb84 	bl	80261ec <HAL_UARTEx_SetTxFifoThreshold>
 8020ae4:	4603      	mov	r3, r0
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d001      	beq.n	8020aee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8020aea:	f000 f8e7 	bl	8020cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020aee:	2100      	movs	r1, #0
 8020af0:	4808      	ldr	r0, [pc, #32]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020af2:	f005 fbb9 	bl	8026268 <HAL_UARTEx_SetRxFifoThreshold>
 8020af6:	4603      	mov	r3, r0
 8020af8:	2b00      	cmp	r3, #0
 8020afa:	d001      	beq.n	8020b00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8020afc:	f000 f8de 	bl	8020cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8020b00:	4804      	ldr	r0, [pc, #16]	; (8020b14 <MX_USART3_UART_Init+0x90>)
 8020b02:	f005 fb3a 	bl	802617a <HAL_UARTEx_DisableFifoMode>
 8020b06:	4603      	mov	r3, r0
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	d001      	beq.n	8020b10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8020b0c:	f000 f8d6 	bl	8020cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8020b10:	bf00      	nop
 8020b12:	bd80      	pop	{r7, pc}
 8020b14:	20000114 	.word	0x20000114
 8020b18:	40004800 	.word	0x40004800

08020b1c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8020b1c:	b480      	push	{r7}
 8020b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8020b20:	bf00      	nop
 8020b22:	46bd      	mov	sp, r7
 8020b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b28:	4770      	bx	lr
	...

08020b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020b2c:	b580      	push	{r7, lr}
 8020b2e:	b08c      	sub	sp, #48	; 0x30
 8020b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020b32:	f107 031c 	add.w	r3, r7, #28
 8020b36:	2200      	movs	r2, #0
 8020b38:	601a      	str	r2, [r3, #0]
 8020b3a:	605a      	str	r2, [r3, #4]
 8020b3c:	609a      	str	r2, [r3, #8]
 8020b3e:	60da      	str	r2, [r3, #12]
 8020b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020b42:	4b58      	ldr	r3, [pc, #352]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020b48:	4a56      	ldr	r2, [pc, #344]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b4a:	f043 0304 	orr.w	r3, r3, #4
 8020b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020b52:	4b54      	ldr	r3, [pc, #336]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020b58:	f003 0304 	and.w	r3, r3, #4
 8020b5c:	61bb      	str	r3, [r7, #24]
 8020b5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020b60:	4b50      	ldr	r3, [pc, #320]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020b66:	4a4f      	ldr	r2, [pc, #316]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020b70:	4b4c      	ldr	r3, [pc, #304]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020b7a:	617b      	str	r3, [r7, #20]
 8020b7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020b7e:	4b49      	ldr	r3, [pc, #292]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020b84:	4a47      	ldr	r2, [pc, #284]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b86:	f043 0301 	orr.w	r3, r3, #1
 8020b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020b8e:	4b45      	ldr	r3, [pc, #276]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020b94:	f003 0301 	and.w	r3, r3, #1
 8020b98:	613b      	str	r3, [r7, #16]
 8020b9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020b9c:	4b41      	ldr	r3, [pc, #260]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020ba2:	4a40      	ldr	r2, [pc, #256]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020ba4:	f043 0302 	orr.w	r3, r3, #2
 8020ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020bac:	4b3d      	ldr	r3, [pc, #244]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020bb2:	f003 0302 	and.w	r3, r3, #2
 8020bb6:	60fb      	str	r3, [r7, #12]
 8020bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020bba:	4b3a      	ldr	r3, [pc, #232]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020bc0:	4a38      	ldr	r2, [pc, #224]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020bc2:	f043 0308 	orr.w	r3, r3, #8
 8020bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020bca:	4b36      	ldr	r3, [pc, #216]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020bd0:	f003 0308 	and.w	r3, r3, #8
 8020bd4:	60bb      	str	r3, [r7, #8]
 8020bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020bd8:	4b32      	ldr	r3, [pc, #200]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020bde:	4a31      	ldr	r2, [pc, #196]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020be8:	4b2e      	ldr	r3, [pc, #184]	; (8020ca4 <MX_GPIO_Init+0x178>)
 8020bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020bf2:	607b      	str	r3, [r7, #4]
 8020bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8020bf6:	2200      	movs	r2, #0
 8020bf8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8020bfc:	482a      	ldr	r0, [pc, #168]	; (8020ca8 <MX_GPIO_Init+0x17c>)
 8020bfe:	f001 fa9f 	bl	8022140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8020c02:	2200      	movs	r2, #0
 8020c04:	2140      	movs	r1, #64	; 0x40
 8020c06:	4829      	ldr	r0, [pc, #164]	; (8020cac <MX_GPIO_Init+0x180>)
 8020c08:	f001 fa9a 	bl	8022140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8020c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8020c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8020c12:	4b27      	ldr	r3, [pc, #156]	; (8020cb0 <MX_GPIO_Init+0x184>)
 8020c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020c16:	2300      	movs	r3, #0
 8020c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8020c1a:	f107 031c 	add.w	r3, r7, #28
 8020c1e:	4619      	mov	r1, r3
 8020c20:	4824      	ldr	r0, [pc, #144]	; (8020cb4 <MX_GPIO_Init+0x188>)
 8020c22:	f001 f8dd 	bl	8021de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8020c26:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8020c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020c2c:	2301      	movs	r3, #1
 8020c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020c30:	2300      	movs	r3, #0
 8020c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020c34:	2300      	movs	r3, #0
 8020c36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020c38:	f107 031c 	add.w	r3, r7, #28
 8020c3c:	4619      	mov	r1, r3
 8020c3e:	481a      	ldr	r0, [pc, #104]	; (8020ca8 <MX_GPIO_Init+0x17c>)
 8020c40:	f001 f8ce 	bl	8021de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8020c44:	2340      	movs	r3, #64	; 0x40
 8020c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020c48:	2301      	movs	r3, #1
 8020c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020c4c:	2300      	movs	r3, #0
 8020c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020c50:	2300      	movs	r3, #0
 8020c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8020c54:	f107 031c 	add.w	r3, r7, #28
 8020c58:	4619      	mov	r1, r3
 8020c5a:	4814      	ldr	r0, [pc, #80]	; (8020cac <MX_GPIO_Init+0x180>)
 8020c5c:	f001 f8c0 	bl	8021de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8020c60:	2380      	movs	r3, #128	; 0x80
 8020c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020c64:	2300      	movs	r3, #0
 8020c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020c68:	2300      	movs	r3, #0
 8020c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8020c6c:	f107 031c 	add.w	r3, r7, #28
 8020c70:	4619      	mov	r1, r3
 8020c72:	480e      	ldr	r0, [pc, #56]	; (8020cac <MX_GPIO_Init+0x180>)
 8020c74:	f001 f8b4 	bl	8021de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8020c78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8020c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020c7e:	2302      	movs	r3, #2
 8020c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020c82:	2300      	movs	r3, #0
 8020c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020c86:	2300      	movs	r3, #0
 8020c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8020c8a:	230a      	movs	r3, #10
 8020c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020c8e:	f107 031c 	add.w	r3, r7, #28
 8020c92:	4619      	mov	r1, r3
 8020c94:	4808      	ldr	r0, [pc, #32]	; (8020cb8 <MX_GPIO_Init+0x18c>)
 8020c96:	f001 f8a3 	bl	8021de0 <HAL_GPIO_Init>

}
 8020c9a:	bf00      	nop
 8020c9c:	3730      	adds	r7, #48	; 0x30
 8020c9e:	46bd      	mov	sp, r7
 8020ca0:	bd80      	pop	{r7, pc}
 8020ca2:	bf00      	nop
 8020ca4:	58024400 	.word	0x58024400
 8020ca8:	58020400 	.word	0x58020400
 8020cac:	58021800 	.word	0x58021800
 8020cb0:	11110000 	.word	0x11110000
 8020cb4:	58020800 	.word	0x58020800
 8020cb8:	58020000 	.word	0x58020000

08020cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020cbc:	b480      	push	{r7}
 8020cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020cc0:	b672      	cpsid	i
}
 8020cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020cc4:	e7fe      	b.n	8020cc4 <Error_Handler+0x8>
	...

08020cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020cc8:	b480      	push	{r7}
 8020cca:	b083      	sub	sp, #12
 8020ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020cce:	4b0a      	ldr	r3, [pc, #40]	; (8020cf8 <HAL_MspInit+0x30>)
 8020cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8020cd4:	4a08      	ldr	r2, [pc, #32]	; (8020cf8 <HAL_MspInit+0x30>)
 8020cd6:	f043 0302 	orr.w	r3, r3, #2
 8020cda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8020cde:	4b06      	ldr	r3, [pc, #24]	; (8020cf8 <HAL_MspInit+0x30>)
 8020ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8020ce4:	f003 0302 	and.w	r3, r3, #2
 8020ce8:	607b      	str	r3, [r7, #4]
 8020cea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020cec:	bf00      	nop
 8020cee:	370c      	adds	r7, #12
 8020cf0:	46bd      	mov	sp, r7
 8020cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cf6:	4770      	bx	lr
 8020cf8:	58024400 	.word	0x58024400

08020cfc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8020cfc:	b580      	push	{r7, lr}
 8020cfe:	b08e      	sub	sp, #56	; 0x38
 8020d00:	af00      	add	r7, sp, #0
 8020d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d08:	2200      	movs	r2, #0
 8020d0a:	601a      	str	r2, [r3, #0]
 8020d0c:	605a      	str	r2, [r3, #4]
 8020d0e:	609a      	str	r2, [r3, #8]
 8020d10:	60da      	str	r2, [r3, #12]
 8020d12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8020d14:	687b      	ldr	r3, [r7, #4]
 8020d16:	681b      	ldr	r3, [r3, #0]
 8020d18:	4a59      	ldr	r2, [pc, #356]	; (8020e80 <HAL_ETH_MspInit+0x184>)
 8020d1a:	4293      	cmp	r3, r2
 8020d1c:	f040 80ab 	bne.w	8020e76 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8020d20:	4b58      	ldr	r3, [pc, #352]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020d26:	4a57      	ldr	r2, [pc, #348]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8020d2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8020d30:	4b54      	ldr	r3, [pc, #336]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8020d3a:	623b      	str	r3, [r7, #32]
 8020d3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8020d3e:	4b51      	ldr	r3, [pc, #324]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020d44:	4a4f      	ldr	r2, [pc, #316]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8020d4e:	4b4d      	ldr	r3, [pc, #308]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020d58:	61fb      	str	r3, [r7, #28]
 8020d5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8020d5c:	4b49      	ldr	r3, [pc, #292]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020d62:	4a48      	ldr	r2, [pc, #288]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020d68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8020d6c:	4b45      	ldr	r3, [pc, #276]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8020d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020d76:	61bb      	str	r3, [r7, #24]
 8020d78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020d7a:	4b42      	ldr	r3, [pc, #264]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020d80:	4a40      	ldr	r2, [pc, #256]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d82:	f043 0304 	orr.w	r3, r3, #4
 8020d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020d8a:	4b3e      	ldr	r3, [pc, #248]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020d90:	f003 0304 	and.w	r3, r3, #4
 8020d94:	617b      	str	r3, [r7, #20]
 8020d96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020d98:	4b3a      	ldr	r3, [pc, #232]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020d9e:	4a39      	ldr	r2, [pc, #228]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020da0:	f043 0301 	orr.w	r3, r3, #1
 8020da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020da8:	4b36      	ldr	r3, [pc, #216]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020dae:	f003 0301 	and.w	r3, r3, #1
 8020db2:	613b      	str	r3, [r7, #16]
 8020db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020db6:	4b33      	ldr	r3, [pc, #204]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020dbc:	4a31      	ldr	r2, [pc, #196]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020dbe:	f043 0302 	orr.w	r3, r3, #2
 8020dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020dc6:	4b2f      	ldr	r3, [pc, #188]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020dcc:	f003 0302 	and.w	r3, r3, #2
 8020dd0:	60fb      	str	r3, [r7, #12]
 8020dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8020dd4:	4b2b      	ldr	r3, [pc, #172]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020dda:	4a2a      	ldr	r2, [pc, #168]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020de4:	4b27      	ldr	r3, [pc, #156]	; (8020e84 <HAL_ETH_MspInit+0x188>)
 8020de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020dee:	60bb      	str	r3, [r7, #8]
 8020df0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8020df2:	2332      	movs	r3, #50	; 0x32
 8020df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020df6:	2302      	movs	r3, #2
 8020df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dfa:	2300      	movs	r3, #0
 8020dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020dfe:	2300      	movs	r3, #0
 8020e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020e02:	230b      	movs	r3, #11
 8020e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e0a:	4619      	mov	r1, r3
 8020e0c:	481e      	ldr	r0, [pc, #120]	; (8020e88 <HAL_ETH_MspInit+0x18c>)
 8020e0e:	f000 ffe7 	bl	8021de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 8020e12:	2386      	movs	r3, #134	; 0x86
 8020e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020e16:	2302      	movs	r3, #2
 8020e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e1a:	2300      	movs	r3, #0
 8020e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e1e:	2300      	movs	r3, #0
 8020e20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020e22:	230b      	movs	r3, #11
 8020e24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e2a:	4619      	mov	r1, r3
 8020e2c:	4817      	ldr	r0, [pc, #92]	; (8020e8c <HAL_ETH_MspInit+0x190>)
 8020e2e:	f000 ffd7 	bl	8021de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8020e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8020e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020e38:	2302      	movs	r3, #2
 8020e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e3c:	2300      	movs	r3, #0
 8020e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e40:	2300      	movs	r3, #0
 8020e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020e44:	230b      	movs	r3, #11
 8020e46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8020e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e4c:	4619      	mov	r1, r3
 8020e4e:	4810      	ldr	r0, [pc, #64]	; (8020e90 <HAL_ETH_MspInit+0x194>)
 8020e50:	f000 ffc6 	bl	8021de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8020e54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8020e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020e5a:	2302      	movs	r3, #2
 8020e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e5e:	2300      	movs	r3, #0
 8020e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e62:	2300      	movs	r3, #0
 8020e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020e66:	230b      	movs	r3, #11
 8020e68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e6e:	4619      	mov	r1, r3
 8020e70:	4808      	ldr	r0, [pc, #32]	; (8020e94 <HAL_ETH_MspInit+0x198>)
 8020e72:	f000 ffb5 	bl	8021de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8020e76:	bf00      	nop
 8020e78:	3738      	adds	r7, #56	; 0x38
 8020e7a:	46bd      	mov	sp, r7
 8020e7c:	bd80      	pop	{r7, pc}
 8020e7e:	bf00      	nop
 8020e80:	40028000 	.word	0x40028000
 8020e84:	58024400 	.word	0x58024400
 8020e88:	58020800 	.word	0x58020800
 8020e8c:	58020000 	.word	0x58020000
 8020e90:	58020400 	.word	0x58020400
 8020e94:	58021800 	.word	0x58021800

08020e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8020e98:	b580      	push	{r7, lr}
 8020e9a:	b0ba      	sub	sp, #232	; 0xe8
 8020e9c:	af00      	add	r7, sp, #0
 8020e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020ea0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8020ea4:	2200      	movs	r2, #0
 8020ea6:	601a      	str	r2, [r3, #0]
 8020ea8:	605a      	str	r2, [r3, #4]
 8020eaa:	609a      	str	r2, [r3, #8]
 8020eac:	60da      	str	r2, [r3, #12]
 8020eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020eb0:	f107 0318 	add.w	r3, r7, #24
 8020eb4:	22bc      	movs	r2, #188	; 0xbc
 8020eb6:	2100      	movs	r1, #0
 8020eb8:	4618      	mov	r0, r3
 8020eba:	f006 f829 	bl	8026f10 <memset>
  if(hspi->Instance==SPI1)
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	681b      	ldr	r3, [r3, #0]
 8020ec2:	4a37      	ldr	r2, [pc, #220]	; (8020fa0 <HAL_SPI_MspInit+0x108>)
 8020ec4:	4293      	cmp	r3, r2
 8020ec6:	d166      	bne.n	8020f96 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8020ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020ecc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8020ece:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8020ed2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020ed4:	f107 0318 	add.w	r3, r7, #24
 8020ed8:	4618      	mov	r0, r3
 8020eda:	f002 f93b 	bl	8023154 <HAL_RCCEx_PeriphCLKConfig>
 8020ede:	4603      	mov	r3, r0
 8020ee0:	2b00      	cmp	r3, #0
 8020ee2:	d001      	beq.n	8020ee8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8020ee4:	f7ff feea 	bl	8020cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8020ee8:	4b2e      	ldr	r3, [pc, #184]	; (8020fa4 <HAL_SPI_MspInit+0x10c>)
 8020eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8020eee:	4a2d      	ldr	r2, [pc, #180]	; (8020fa4 <HAL_SPI_MspInit+0x10c>)
 8020ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8020ef4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8020ef8:	4b2a      	ldr	r3, [pc, #168]	; (8020fa4 <HAL_SPI_MspInit+0x10c>)
 8020efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8020efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8020f02:	617b      	str	r3, [r7, #20]
 8020f04:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020f06:	4b27      	ldr	r3, [pc, #156]	; (8020fa4 <HAL_SPI_MspInit+0x10c>)
 8020f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020f0c:	4a25      	ldr	r2, [pc, #148]	; (8020fa4 <HAL_SPI_MspInit+0x10c>)
 8020f0e:	f043 0301 	orr.w	r3, r3, #1
 8020f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020f16:	4b23      	ldr	r3, [pc, #140]	; (8020fa4 <HAL_SPI_MspInit+0x10c>)
 8020f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020f1c:	f003 0301 	and.w	r3, r3, #1
 8020f20:	613b      	str	r3, [r7, #16]
 8020f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8020f24:	4b1f      	ldr	r3, [pc, #124]	; (8020fa4 <HAL_SPI_MspInit+0x10c>)
 8020f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020f2a:	4a1e      	ldr	r2, [pc, #120]	; (8020fa4 <HAL_SPI_MspInit+0x10c>)
 8020f2c:	f043 0308 	orr.w	r3, r3, #8
 8020f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8020f34:	4b1b      	ldr	r3, [pc, #108]	; (8020fa4 <HAL_SPI_MspInit+0x10c>)
 8020f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020f3a:	f003 0308 	and.w	r3, r3, #8
 8020f3e:	60fb      	str	r3, [r7, #12]
 8020f40:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_CS_Pin|SD_SCK_Pin|SD_MISO_Pin;
 8020f42:	2370      	movs	r3, #112	; 0x70
 8020f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020f48:	2302      	movs	r3, #2
 8020f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020f4e:	2300      	movs	r3, #0
 8020f50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020f54:	2300      	movs	r3, #0
 8020f56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8020f5a:	2305      	movs	r3, #5
 8020f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020f60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8020f64:	4619      	mov	r1, r3
 8020f66:	4810      	ldr	r0, [pc, #64]	; (8020fa8 <HAL_SPI_MspInit+0x110>)
 8020f68:	f000 ff3a 	bl	8021de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MOSI_Pin;
 8020f6c:	2380      	movs	r3, #128	; 0x80
 8020f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020f72:	2302      	movs	r3, #2
 8020f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020f78:	2300      	movs	r3, #0
 8020f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020f7e:	2300      	movs	r3, #0
 8020f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8020f84:	2305      	movs	r3, #5
 8020f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8020f8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8020f8e:	4619      	mov	r1, r3
 8020f90:	4806      	ldr	r0, [pc, #24]	; (8020fac <HAL_SPI_MspInit+0x114>)
 8020f92:	f000 ff25 	bl	8021de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8020f96:	bf00      	nop
 8020f98:	37e8      	adds	r7, #232	; 0xe8
 8020f9a:	46bd      	mov	sp, r7
 8020f9c:	bd80      	pop	{r7, pc}
 8020f9e:	bf00      	nop
 8020fa0:	40013000 	.word	0x40013000
 8020fa4:	58024400 	.word	0x58024400
 8020fa8:	58020000 	.word	0x58020000
 8020fac:	58020c00 	.word	0x58020c00

08020fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020fb0:	b580      	push	{r7, lr}
 8020fb2:	b0b8      	sub	sp, #224	; 0xe0
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020fb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	601a      	str	r2, [r3, #0]
 8020fc0:	605a      	str	r2, [r3, #4]
 8020fc2:	609a      	str	r2, [r3, #8]
 8020fc4:	60da      	str	r2, [r3, #12]
 8020fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020fc8:	f107 0310 	add.w	r3, r7, #16
 8020fcc:	22bc      	movs	r2, #188	; 0xbc
 8020fce:	2100      	movs	r1, #0
 8020fd0:	4618      	mov	r0, r3
 8020fd2:	f005 ff9d 	bl	8026f10 <memset>
  if(huart->Instance==USART3)
 8020fd6:	687b      	ldr	r3, [r7, #4]
 8020fd8:	681b      	ldr	r3, [r3, #0]
 8020fda:	4a25      	ldr	r2, [pc, #148]	; (8021070 <HAL_UART_MspInit+0xc0>)
 8020fdc:	4293      	cmp	r3, r2
 8020fde:	d142      	bne.n	8021066 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8020fe0:	2302      	movs	r3, #2
 8020fe2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8020fe4:	2300      	movs	r3, #0
 8020fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020fea:	f107 0310 	add.w	r3, r7, #16
 8020fee:	4618      	mov	r0, r3
 8020ff0:	f002 f8b0 	bl	8023154 <HAL_RCCEx_PeriphCLKConfig>
 8020ff4:	4603      	mov	r3, r0
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d001      	beq.n	8020ffe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8020ffa:	f7ff fe5f 	bl	8020cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8020ffe:	4b1d      	ldr	r3, [pc, #116]	; (8021074 <HAL_UART_MspInit+0xc4>)
 8021000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021004:	4a1b      	ldr	r2, [pc, #108]	; (8021074 <HAL_UART_MspInit+0xc4>)
 8021006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802100a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802100e:	4b19      	ldr	r3, [pc, #100]	; (8021074 <HAL_UART_MspInit+0xc4>)
 8021010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8021014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8021018:	60fb      	str	r3, [r7, #12]
 802101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 802101c:	4b15      	ldr	r3, [pc, #84]	; (8021074 <HAL_UART_MspInit+0xc4>)
 802101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021022:	4a14      	ldr	r2, [pc, #80]	; (8021074 <HAL_UART_MspInit+0xc4>)
 8021024:	f043 0308 	orr.w	r3, r3, #8
 8021028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802102c:	4b11      	ldr	r3, [pc, #68]	; (8021074 <HAL_UART_MspInit+0xc4>)
 802102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021032:	f003 0308 	and.w	r3, r3, #8
 8021036:	60bb      	str	r3, [r7, #8]
 8021038:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 802103a:	f44f 7340 	mov.w	r3, #768	; 0x300
 802103e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021042:	2302      	movs	r3, #2
 8021044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021048:	2300      	movs	r3, #0
 802104a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802104e:	2300      	movs	r3, #0
 8021050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8021054:	2307      	movs	r3, #7
 8021056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802105a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802105e:	4619      	mov	r1, r3
 8021060:	4805      	ldr	r0, [pc, #20]	; (8021078 <HAL_UART_MspInit+0xc8>)
 8021062:	f000 febd 	bl	8021de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8021066:	bf00      	nop
 8021068:	37e0      	adds	r7, #224	; 0xe0
 802106a:	46bd      	mov	sp, r7
 802106c:	bd80      	pop	{r7, pc}
 802106e:	bf00      	nop
 8021070:	40004800 	.word	0x40004800
 8021074:	58024400 	.word	0x58024400
 8021078:	58020c00 	.word	0x58020c00

0802107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802107c:	b480      	push	{r7}
 802107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021080:	e7fe      	b.n	8021080 <NMI_Handler+0x4>

08021082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021082:	b480      	push	{r7}
 8021084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021086:	e7fe      	b.n	8021086 <HardFault_Handler+0x4>

08021088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021088:	b480      	push	{r7}
 802108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802108c:	e7fe      	b.n	802108c <MemManage_Handler+0x4>

0802108e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802108e:	b480      	push	{r7}
 8021090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021092:	e7fe      	b.n	8021092 <BusFault_Handler+0x4>

08021094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021094:	b480      	push	{r7}
 8021096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021098:	e7fe      	b.n	8021098 <UsageFault_Handler+0x4>

0802109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802109a:	b480      	push	{r7}
 802109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802109e:	bf00      	nop
 80210a0:	46bd      	mov	sp, r7
 80210a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210a6:	4770      	bx	lr

080210a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80210a8:	b480      	push	{r7}
 80210aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80210ac:	bf00      	nop
 80210ae:	46bd      	mov	sp, r7
 80210b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210b4:	4770      	bx	lr

080210b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80210b6:	b480      	push	{r7}
 80210b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80210ba:	bf00      	nop
 80210bc:	46bd      	mov	sp, r7
 80210be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210c2:	4770      	bx	lr

080210c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80210c4:	b580      	push	{r7, lr}
 80210c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80210c8:	f000 f92c 	bl	8021324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80210cc:	bf00      	nop
 80210ce:	bd80      	pop	{r7, pc}

080210d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80210d0:	b480      	push	{r7}
 80210d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80210d4:	4b39      	ldr	r3, [pc, #228]	; (80211bc <SystemInit+0xec>)
 80210d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80210da:	4a38      	ldr	r2, [pc, #224]	; (80211bc <SystemInit+0xec>)
 80210dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80210e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80210e4:	4b36      	ldr	r3, [pc, #216]	; (80211c0 <SystemInit+0xf0>)
 80210e6:	681b      	ldr	r3, [r3, #0]
 80210e8:	f003 030f 	and.w	r3, r3, #15
 80210ec:	2b06      	cmp	r3, #6
 80210ee:	d807      	bhi.n	8021100 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80210f0:	4b33      	ldr	r3, [pc, #204]	; (80211c0 <SystemInit+0xf0>)
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	f023 030f 	bic.w	r3, r3, #15
 80210f8:	4a31      	ldr	r2, [pc, #196]	; (80211c0 <SystemInit+0xf0>)
 80210fa:	f043 0307 	orr.w	r3, r3, #7
 80210fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8021100:	4b30      	ldr	r3, [pc, #192]	; (80211c4 <SystemInit+0xf4>)
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	4a2f      	ldr	r2, [pc, #188]	; (80211c4 <SystemInit+0xf4>)
 8021106:	f043 0301 	orr.w	r3, r3, #1
 802110a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802110c:	4b2d      	ldr	r3, [pc, #180]	; (80211c4 <SystemInit+0xf4>)
 802110e:	2200      	movs	r2, #0
 8021110:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8021112:	4b2c      	ldr	r3, [pc, #176]	; (80211c4 <SystemInit+0xf4>)
 8021114:	681a      	ldr	r2, [r3, #0]
 8021116:	492b      	ldr	r1, [pc, #172]	; (80211c4 <SystemInit+0xf4>)
 8021118:	4b2b      	ldr	r3, [pc, #172]	; (80211c8 <SystemInit+0xf8>)
 802111a:	4013      	ands	r3, r2
 802111c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802111e:	4b28      	ldr	r3, [pc, #160]	; (80211c0 <SystemInit+0xf0>)
 8021120:	681b      	ldr	r3, [r3, #0]
 8021122:	f003 0308 	and.w	r3, r3, #8
 8021126:	2b00      	cmp	r3, #0
 8021128:	d007      	beq.n	802113a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802112a:	4b25      	ldr	r3, [pc, #148]	; (80211c0 <SystemInit+0xf0>)
 802112c:	681b      	ldr	r3, [r3, #0]
 802112e:	f023 030f 	bic.w	r3, r3, #15
 8021132:	4a23      	ldr	r2, [pc, #140]	; (80211c0 <SystemInit+0xf0>)
 8021134:	f043 0307 	orr.w	r3, r3, #7
 8021138:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802113a:	4b22      	ldr	r3, [pc, #136]	; (80211c4 <SystemInit+0xf4>)
 802113c:	2200      	movs	r2, #0
 802113e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8021140:	4b20      	ldr	r3, [pc, #128]	; (80211c4 <SystemInit+0xf4>)
 8021142:	2200      	movs	r2, #0
 8021144:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8021146:	4b1f      	ldr	r3, [pc, #124]	; (80211c4 <SystemInit+0xf4>)
 8021148:	2200      	movs	r2, #0
 802114a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802114c:	4b1d      	ldr	r3, [pc, #116]	; (80211c4 <SystemInit+0xf4>)
 802114e:	4a1f      	ldr	r2, [pc, #124]	; (80211cc <SystemInit+0xfc>)
 8021150:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8021152:	4b1c      	ldr	r3, [pc, #112]	; (80211c4 <SystemInit+0xf4>)
 8021154:	4a1e      	ldr	r2, [pc, #120]	; (80211d0 <SystemInit+0x100>)
 8021156:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8021158:	4b1a      	ldr	r3, [pc, #104]	; (80211c4 <SystemInit+0xf4>)
 802115a:	4a1e      	ldr	r2, [pc, #120]	; (80211d4 <SystemInit+0x104>)
 802115c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802115e:	4b19      	ldr	r3, [pc, #100]	; (80211c4 <SystemInit+0xf4>)
 8021160:	2200      	movs	r2, #0
 8021162:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8021164:	4b17      	ldr	r3, [pc, #92]	; (80211c4 <SystemInit+0xf4>)
 8021166:	4a1b      	ldr	r2, [pc, #108]	; (80211d4 <SystemInit+0x104>)
 8021168:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802116a:	4b16      	ldr	r3, [pc, #88]	; (80211c4 <SystemInit+0xf4>)
 802116c:	2200      	movs	r2, #0
 802116e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8021170:	4b14      	ldr	r3, [pc, #80]	; (80211c4 <SystemInit+0xf4>)
 8021172:	4a18      	ldr	r2, [pc, #96]	; (80211d4 <SystemInit+0x104>)
 8021174:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8021176:	4b13      	ldr	r3, [pc, #76]	; (80211c4 <SystemInit+0xf4>)
 8021178:	2200      	movs	r2, #0
 802117a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802117c:	4b11      	ldr	r3, [pc, #68]	; (80211c4 <SystemInit+0xf4>)
 802117e:	681b      	ldr	r3, [r3, #0]
 8021180:	4a10      	ldr	r2, [pc, #64]	; (80211c4 <SystemInit+0xf4>)
 8021182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021186:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8021188:	4b0e      	ldr	r3, [pc, #56]	; (80211c4 <SystemInit+0xf4>)
 802118a:	2200      	movs	r2, #0
 802118c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802118e:	4b12      	ldr	r3, [pc, #72]	; (80211d8 <SystemInit+0x108>)
 8021190:	681a      	ldr	r2, [r3, #0]
 8021192:	4b12      	ldr	r3, [pc, #72]	; (80211dc <SystemInit+0x10c>)
 8021194:	4013      	ands	r3, r2
 8021196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802119a:	d202      	bcs.n	80211a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802119c:	4b10      	ldr	r3, [pc, #64]	; (80211e0 <SystemInit+0x110>)
 802119e:	2201      	movs	r2, #1
 80211a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80211a2:	4b10      	ldr	r3, [pc, #64]	; (80211e4 <SystemInit+0x114>)
 80211a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80211a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80211aa:	4b04      	ldr	r3, [pc, #16]	; (80211bc <SystemInit+0xec>)
 80211ac:	4a0e      	ldr	r2, [pc, #56]	; (80211e8 <SystemInit+0x118>)
 80211ae:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80211b0:	bf00      	nop
 80211b2:	46bd      	mov	sp, r7
 80211b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211b8:	4770      	bx	lr
 80211ba:	bf00      	nop
 80211bc:	e000ed00 	.word	0xe000ed00
 80211c0:	52002000 	.word	0x52002000
 80211c4:	58024400 	.word	0x58024400
 80211c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80211cc:	02020200 	.word	0x02020200
 80211d0:	01ff0000 	.word	0x01ff0000
 80211d4:	01010280 	.word	0x01010280
 80211d8:	5c001000 	.word	0x5c001000
 80211dc:	ffff0000 	.word	0xffff0000
 80211e0:	51008108 	.word	0x51008108
 80211e4:	52004000 	.word	0x52004000
 80211e8:	08020200 	.word	0x08020200

080211ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80211ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021224 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80211f0:	f7ff ff6e 	bl	80210d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80211f4:	480c      	ldr	r0, [pc, #48]	; (8021228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80211f6:	490d      	ldr	r1, [pc, #52]	; (802122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80211f8:	4a0d      	ldr	r2, [pc, #52]	; (8021230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80211fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80211fc:	e002      	b.n	8021204 <LoopCopyDataInit>

080211fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80211fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021202:	3304      	adds	r3, #4

08021204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021208:	d3f9      	bcc.n	80211fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802120a:	4a0a      	ldr	r2, [pc, #40]	; (8021234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802120c:	4c0a      	ldr	r4, [pc, #40]	; (8021238 <LoopFillZerobss+0x22>)
  movs r3, #0
 802120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021210:	e001      	b.n	8021216 <LoopFillZerobss>

08021212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021214:	3204      	adds	r2, #4

08021216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021218:	d3fb      	bcc.n	8021212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802121a:	f005 fe55 	bl	8026ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  app_main
 802121e:	f7ff fad7 	bl	80207d0 <app_main>
  bx  lr
 8021222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8021224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8021228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802122c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8021230:	08026f80 	.word	0x08026f80
  ldr r2, =_sbss
 8021234:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8021238:	20002360 	.word	0x20002360

0802123c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802123c:	e7fe      	b.n	802123c <ADC3_IRQHandler>
	...

08021240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8021240:	b580      	push	{r7, lr}
 8021242:	b082      	sub	sp, #8
 8021244:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021246:	2003      	movs	r0, #3
 8021248:	f000 f982 	bl	8021550 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802124c:	f001 fdac 	bl	8022da8 <HAL_RCC_GetSysClockFreq>
 8021250:	4602      	mov	r2, r0
 8021252:	4b15      	ldr	r3, [pc, #84]	; (80212a8 <HAL_Init+0x68>)
 8021254:	699b      	ldr	r3, [r3, #24]
 8021256:	0a1b      	lsrs	r3, r3, #8
 8021258:	f003 030f 	and.w	r3, r3, #15
 802125c:	4913      	ldr	r1, [pc, #76]	; (80212ac <HAL_Init+0x6c>)
 802125e:	5ccb      	ldrb	r3, [r1, r3]
 8021260:	f003 031f 	and.w	r3, r3, #31
 8021264:	fa22 f303 	lsr.w	r3, r2, r3
 8021268:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802126a:	4b0f      	ldr	r3, [pc, #60]	; (80212a8 <HAL_Init+0x68>)
 802126c:	699b      	ldr	r3, [r3, #24]
 802126e:	f003 030f 	and.w	r3, r3, #15
 8021272:	4a0e      	ldr	r2, [pc, #56]	; (80212ac <HAL_Init+0x6c>)
 8021274:	5cd3      	ldrb	r3, [r2, r3]
 8021276:	f003 031f 	and.w	r3, r3, #31
 802127a:	687a      	ldr	r2, [r7, #4]
 802127c:	fa22 f303 	lsr.w	r3, r2, r3
 8021280:	4a0b      	ldr	r2, [pc, #44]	; (80212b0 <HAL_Init+0x70>)
 8021282:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8021284:	4a0b      	ldr	r2, [pc, #44]	; (80212b4 <HAL_Init+0x74>)
 8021286:	687b      	ldr	r3, [r7, #4]
 8021288:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802128a:	2000      	movs	r0, #0
 802128c:	f000 f814 	bl	80212b8 <HAL_InitTick>
 8021290:	4603      	mov	r3, r0
 8021292:	2b00      	cmp	r3, #0
 8021294:	d001      	beq.n	802129a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8021296:	2301      	movs	r3, #1
 8021298:	e002      	b.n	80212a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802129a:	f7ff fd15 	bl	8020cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802129e:	2300      	movs	r3, #0
}
 80212a0:	4618      	mov	r0, r3
 80212a2:	3708      	adds	r7, #8
 80212a4:	46bd      	mov	sp, r7
 80212a6:	bd80      	pop	{r7, pc}
 80212a8:	58024400 	.word	0x58024400
 80212ac:	08026f38 	.word	0x08026f38
 80212b0:	20000004 	.word	0x20000004
 80212b4:	20000000 	.word	0x20000000

080212b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80212b8:	b580      	push	{r7, lr}
 80212ba:	b082      	sub	sp, #8
 80212bc:	af00      	add	r7, sp, #0
 80212be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80212c0:	4b15      	ldr	r3, [pc, #84]	; (8021318 <HAL_InitTick+0x60>)
 80212c2:	781b      	ldrb	r3, [r3, #0]
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	d101      	bne.n	80212cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80212c8:	2301      	movs	r3, #1
 80212ca:	e021      	b.n	8021310 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80212cc:	4b13      	ldr	r3, [pc, #76]	; (802131c <HAL_InitTick+0x64>)
 80212ce:	681a      	ldr	r2, [r3, #0]
 80212d0:	4b11      	ldr	r3, [pc, #68]	; (8021318 <HAL_InitTick+0x60>)
 80212d2:	781b      	ldrb	r3, [r3, #0]
 80212d4:	4619      	mov	r1, r3
 80212d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80212da:	fbb3 f3f1 	udiv	r3, r3, r1
 80212de:	fbb2 f3f3 	udiv	r3, r2, r3
 80212e2:	4618      	mov	r0, r3
 80212e4:	f000 f959 	bl	802159a <HAL_SYSTICK_Config>
 80212e8:	4603      	mov	r3, r0
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	d001      	beq.n	80212f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80212ee:	2301      	movs	r3, #1
 80212f0:	e00e      	b.n	8021310 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	2b0f      	cmp	r3, #15
 80212f6:	d80a      	bhi.n	802130e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80212f8:	2200      	movs	r2, #0
 80212fa:	6879      	ldr	r1, [r7, #4]
 80212fc:	f04f 30ff 	mov.w	r0, #4294967295
 8021300:	f000 f931 	bl	8021566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8021304:	4a06      	ldr	r2, [pc, #24]	; (8021320 <HAL_InitTick+0x68>)
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802130a:	2300      	movs	r3, #0
 802130c:	e000      	b.n	8021310 <HAL_InitTick+0x58>
    return HAL_ERROR;
 802130e:	2301      	movs	r3, #1
}
 8021310:	4618      	mov	r0, r3
 8021312:	3708      	adds	r7, #8
 8021314:	46bd      	mov	sp, r7
 8021316:	bd80      	pop	{r7, pc}
 8021318:	2000000c 	.word	0x2000000c
 802131c:	20000000 	.word	0x20000000
 8021320:	20000008 	.word	0x20000008

08021324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021324:	b480      	push	{r7}
 8021326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8021328:	4b06      	ldr	r3, [pc, #24]	; (8021344 <HAL_IncTick+0x20>)
 802132a:	781b      	ldrb	r3, [r3, #0]
 802132c:	461a      	mov	r2, r3
 802132e:	4b06      	ldr	r3, [pc, #24]	; (8021348 <HAL_IncTick+0x24>)
 8021330:	681b      	ldr	r3, [r3, #0]
 8021332:	4413      	add	r3, r2
 8021334:	4a04      	ldr	r2, [pc, #16]	; (8021348 <HAL_IncTick+0x24>)
 8021336:	6013      	str	r3, [r2, #0]
}
 8021338:	bf00      	nop
 802133a:	46bd      	mov	sp, r7
 802133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021340:	4770      	bx	lr
 8021342:	bf00      	nop
 8021344:	2000000c 	.word	0x2000000c
 8021348:	200002e8 	.word	0x200002e8

0802134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802134c:	b480      	push	{r7}
 802134e:	af00      	add	r7, sp, #0
  return uwTick;
 8021350:	4b03      	ldr	r3, [pc, #12]	; (8021360 <HAL_GetTick+0x14>)
 8021352:	681b      	ldr	r3, [r3, #0]
}
 8021354:	4618      	mov	r0, r3
 8021356:	46bd      	mov	sp, r7
 8021358:	f85d 7b04 	ldr.w	r7, [sp], #4
 802135c:	4770      	bx	lr
 802135e:	bf00      	nop
 8021360:	200002e8 	.word	0x200002e8

08021364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021364:	b580      	push	{r7, lr}
 8021366:	b084      	sub	sp, #16
 8021368:	af00      	add	r7, sp, #0
 802136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802136c:	f7ff ffee 	bl	802134c <HAL_GetTick>
 8021370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8021376:	68fb      	ldr	r3, [r7, #12]
 8021378:	f1b3 3fff 	cmp.w	r3, #4294967295
 802137c:	d005      	beq.n	802138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802137e:	4b0a      	ldr	r3, [pc, #40]	; (80213a8 <HAL_Delay+0x44>)
 8021380:	781b      	ldrb	r3, [r3, #0]
 8021382:	461a      	mov	r2, r3
 8021384:	68fb      	ldr	r3, [r7, #12]
 8021386:	4413      	add	r3, r2
 8021388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802138a:	bf00      	nop
 802138c:	f7ff ffde 	bl	802134c <HAL_GetTick>
 8021390:	4602      	mov	r2, r0
 8021392:	68bb      	ldr	r3, [r7, #8]
 8021394:	1ad3      	subs	r3, r2, r3
 8021396:	68fa      	ldr	r2, [r7, #12]
 8021398:	429a      	cmp	r2, r3
 802139a:	d8f7      	bhi.n	802138c <HAL_Delay+0x28>
  {
  }
}
 802139c:	bf00      	nop
 802139e:	bf00      	nop
 80213a0:	3710      	adds	r7, #16
 80213a2:	46bd      	mov	sp, r7
 80213a4:	bd80      	pop	{r7, pc}
 80213a6:	bf00      	nop
 80213a8:	2000000c 	.word	0x2000000c

080213ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80213ac:	b480      	push	{r7}
 80213ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80213b0:	4b03      	ldr	r3, [pc, #12]	; (80213c0 <HAL_GetREVID+0x14>)
 80213b2:	681b      	ldr	r3, [r3, #0]
 80213b4:	0c1b      	lsrs	r3, r3, #16
}
 80213b6:	4618      	mov	r0, r3
 80213b8:	46bd      	mov	sp, r7
 80213ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213be:	4770      	bx	lr
 80213c0:	5c001000 	.word	0x5c001000

080213c4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80213c4:	b480      	push	{r7}
 80213c6:	b083      	sub	sp, #12
 80213c8:	af00      	add	r7, sp, #0
 80213ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80213cc:	4b06      	ldr	r3, [pc, #24]	; (80213e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80213ce:	685b      	ldr	r3, [r3, #4]
 80213d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80213d4:	4904      	ldr	r1, [pc, #16]	; (80213e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	4313      	orrs	r3, r2
 80213da:	604b      	str	r3, [r1, #4]
}
 80213dc:	bf00      	nop
 80213de:	370c      	adds	r7, #12
 80213e0:	46bd      	mov	sp, r7
 80213e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213e6:	4770      	bx	lr
 80213e8:	58000400 	.word	0x58000400

080213ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80213ec:	b480      	push	{r7}
 80213ee:	b085      	sub	sp, #20
 80213f0:	af00      	add	r7, sp, #0
 80213f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	f003 0307 	and.w	r3, r3, #7
 80213fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80213fc:	4b0b      	ldr	r3, [pc, #44]	; (802142c <__NVIC_SetPriorityGrouping+0x40>)
 80213fe:	68db      	ldr	r3, [r3, #12]
 8021400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8021402:	68ba      	ldr	r2, [r7, #8]
 8021404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8021408:	4013      	ands	r3, r2
 802140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802140c:	68fb      	ldr	r3, [r7, #12]
 802140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8021410:	68bb      	ldr	r3, [r7, #8]
 8021412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8021414:	4b06      	ldr	r3, [pc, #24]	; (8021430 <__NVIC_SetPriorityGrouping+0x44>)
 8021416:	4313      	orrs	r3, r2
 8021418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802141a:	4a04      	ldr	r2, [pc, #16]	; (802142c <__NVIC_SetPriorityGrouping+0x40>)
 802141c:	68bb      	ldr	r3, [r7, #8]
 802141e:	60d3      	str	r3, [r2, #12]
}
 8021420:	bf00      	nop
 8021422:	3714      	adds	r7, #20
 8021424:	46bd      	mov	sp, r7
 8021426:	f85d 7b04 	ldr.w	r7, [sp], #4
 802142a:	4770      	bx	lr
 802142c:	e000ed00 	.word	0xe000ed00
 8021430:	05fa0000 	.word	0x05fa0000

08021434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8021434:	b480      	push	{r7}
 8021436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021438:	4b04      	ldr	r3, [pc, #16]	; (802144c <__NVIC_GetPriorityGrouping+0x18>)
 802143a:	68db      	ldr	r3, [r3, #12]
 802143c:	0a1b      	lsrs	r3, r3, #8
 802143e:	f003 0307 	and.w	r3, r3, #7
}
 8021442:	4618      	mov	r0, r3
 8021444:	46bd      	mov	sp, r7
 8021446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802144a:	4770      	bx	lr
 802144c:	e000ed00 	.word	0xe000ed00

08021450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8021450:	b480      	push	{r7}
 8021452:	b083      	sub	sp, #12
 8021454:	af00      	add	r7, sp, #0
 8021456:	4603      	mov	r3, r0
 8021458:	6039      	str	r1, [r7, #0]
 802145a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802145c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021460:	2b00      	cmp	r3, #0
 8021462:	db0a      	blt.n	802147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021464:	683b      	ldr	r3, [r7, #0]
 8021466:	b2da      	uxtb	r2, r3
 8021468:	490c      	ldr	r1, [pc, #48]	; (802149c <__NVIC_SetPriority+0x4c>)
 802146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802146e:	0112      	lsls	r2, r2, #4
 8021470:	b2d2      	uxtb	r2, r2
 8021472:	440b      	add	r3, r1
 8021474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8021478:	e00a      	b.n	8021490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802147a:	683b      	ldr	r3, [r7, #0]
 802147c:	b2da      	uxtb	r2, r3
 802147e:	4908      	ldr	r1, [pc, #32]	; (80214a0 <__NVIC_SetPriority+0x50>)
 8021480:	88fb      	ldrh	r3, [r7, #6]
 8021482:	f003 030f 	and.w	r3, r3, #15
 8021486:	3b04      	subs	r3, #4
 8021488:	0112      	lsls	r2, r2, #4
 802148a:	b2d2      	uxtb	r2, r2
 802148c:	440b      	add	r3, r1
 802148e:	761a      	strb	r2, [r3, #24]
}
 8021490:	bf00      	nop
 8021492:	370c      	adds	r7, #12
 8021494:	46bd      	mov	sp, r7
 8021496:	f85d 7b04 	ldr.w	r7, [sp], #4
 802149a:	4770      	bx	lr
 802149c:	e000e100 	.word	0xe000e100
 80214a0:	e000ed00 	.word	0xe000ed00

080214a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80214a4:	b480      	push	{r7}
 80214a6:	b089      	sub	sp, #36	; 0x24
 80214a8:	af00      	add	r7, sp, #0
 80214aa:	60f8      	str	r0, [r7, #12]
 80214ac:	60b9      	str	r1, [r7, #8]
 80214ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80214b0:	68fb      	ldr	r3, [r7, #12]
 80214b2:	f003 0307 	and.w	r3, r3, #7
 80214b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80214b8:	69fb      	ldr	r3, [r7, #28]
 80214ba:	f1c3 0307 	rsb	r3, r3, #7
 80214be:	2b04      	cmp	r3, #4
 80214c0:	bf28      	it	cs
 80214c2:	2304      	movcs	r3, #4
 80214c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80214c6:	69fb      	ldr	r3, [r7, #28]
 80214c8:	3304      	adds	r3, #4
 80214ca:	2b06      	cmp	r3, #6
 80214cc:	d902      	bls.n	80214d4 <NVIC_EncodePriority+0x30>
 80214ce:	69fb      	ldr	r3, [r7, #28]
 80214d0:	3b03      	subs	r3, #3
 80214d2:	e000      	b.n	80214d6 <NVIC_EncodePriority+0x32>
 80214d4:	2300      	movs	r3, #0
 80214d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80214d8:	f04f 32ff 	mov.w	r2, #4294967295
 80214dc:	69bb      	ldr	r3, [r7, #24]
 80214de:	fa02 f303 	lsl.w	r3, r2, r3
 80214e2:	43da      	mvns	r2, r3
 80214e4:	68bb      	ldr	r3, [r7, #8]
 80214e6:	401a      	ands	r2, r3
 80214e8:	697b      	ldr	r3, [r7, #20]
 80214ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80214ec:	f04f 31ff 	mov.w	r1, #4294967295
 80214f0:	697b      	ldr	r3, [r7, #20]
 80214f2:	fa01 f303 	lsl.w	r3, r1, r3
 80214f6:	43d9      	mvns	r1, r3
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80214fc:	4313      	orrs	r3, r2
         );
}
 80214fe:	4618      	mov	r0, r3
 8021500:	3724      	adds	r7, #36	; 0x24
 8021502:	46bd      	mov	sp, r7
 8021504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021508:	4770      	bx	lr
	...

0802150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802150c:	b580      	push	{r7, lr}
 802150e:	b082      	sub	sp, #8
 8021510:	af00      	add	r7, sp, #0
 8021512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	3b01      	subs	r3, #1
 8021518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802151c:	d301      	bcc.n	8021522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802151e:	2301      	movs	r3, #1
 8021520:	e00f      	b.n	8021542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8021522:	4a0a      	ldr	r2, [pc, #40]	; (802154c <SysTick_Config+0x40>)
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	3b01      	subs	r3, #1
 8021528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802152a:	210f      	movs	r1, #15
 802152c:	f04f 30ff 	mov.w	r0, #4294967295
 8021530:	f7ff ff8e 	bl	8021450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021534:	4b05      	ldr	r3, [pc, #20]	; (802154c <SysTick_Config+0x40>)
 8021536:	2200      	movs	r2, #0
 8021538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802153a:	4b04      	ldr	r3, [pc, #16]	; (802154c <SysTick_Config+0x40>)
 802153c:	2207      	movs	r2, #7
 802153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021540:	2300      	movs	r3, #0
}
 8021542:	4618      	mov	r0, r3
 8021544:	3708      	adds	r7, #8
 8021546:	46bd      	mov	sp, r7
 8021548:	bd80      	pop	{r7, pc}
 802154a:	bf00      	nop
 802154c:	e000e010 	.word	0xe000e010

08021550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021550:	b580      	push	{r7, lr}
 8021552:	b082      	sub	sp, #8
 8021554:	af00      	add	r7, sp, #0
 8021556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021558:	6878      	ldr	r0, [r7, #4]
 802155a:	f7ff ff47 	bl	80213ec <__NVIC_SetPriorityGrouping>
}
 802155e:	bf00      	nop
 8021560:	3708      	adds	r7, #8
 8021562:	46bd      	mov	sp, r7
 8021564:	bd80      	pop	{r7, pc}

08021566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021566:	b580      	push	{r7, lr}
 8021568:	b086      	sub	sp, #24
 802156a:	af00      	add	r7, sp, #0
 802156c:	4603      	mov	r3, r0
 802156e:	60b9      	str	r1, [r7, #8]
 8021570:	607a      	str	r2, [r7, #4]
 8021572:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8021574:	f7ff ff5e 	bl	8021434 <__NVIC_GetPriorityGrouping>
 8021578:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802157a:	687a      	ldr	r2, [r7, #4]
 802157c:	68b9      	ldr	r1, [r7, #8]
 802157e:	6978      	ldr	r0, [r7, #20]
 8021580:	f7ff ff90 	bl	80214a4 <NVIC_EncodePriority>
 8021584:	4602      	mov	r2, r0
 8021586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802158a:	4611      	mov	r1, r2
 802158c:	4618      	mov	r0, r3
 802158e:	f7ff ff5f 	bl	8021450 <__NVIC_SetPriority>
}
 8021592:	bf00      	nop
 8021594:	3718      	adds	r7, #24
 8021596:	46bd      	mov	sp, r7
 8021598:	bd80      	pop	{r7, pc}

0802159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802159a:	b580      	push	{r7, lr}
 802159c:	b082      	sub	sp, #8
 802159e:	af00      	add	r7, sp, #0
 80215a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80215a2:	6878      	ldr	r0, [r7, #4]
 80215a4:	f7ff ffb2 	bl	802150c <SysTick_Config>
 80215a8:	4603      	mov	r3, r0
}
 80215aa:	4618      	mov	r0, r3
 80215ac:	3708      	adds	r7, #8
 80215ae:	46bd      	mov	sp, r7
 80215b0:	bd80      	pop	{r7, pc}
	...

080215b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80215b4:	b580      	push	{r7, lr}
 80215b6:	b084      	sub	sp, #16
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	2b00      	cmp	r3, #0
 80215c0:	d101      	bne.n	80215c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80215c2:	2301      	movs	r3, #1
 80215c4:	e0c6      	b.n	8021754 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	d102      	bne.n	80215d4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80215ce:	6878      	ldr	r0, [r7, #4]
 80215d0:	f7ff fb94 	bl	8020cfc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	2223      	movs	r2, #35	; 0x23
 80215d8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80215da:	4b60      	ldr	r3, [pc, #384]	; (802175c <HAL_ETH_Init+0x1a8>)
 80215dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80215e0:	4a5e      	ldr	r2, [pc, #376]	; (802175c <HAL_ETH_Init+0x1a8>)
 80215e2:	f043 0302 	orr.w	r3, r3, #2
 80215e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80215ea:	4b5c      	ldr	r3, [pc, #368]	; (802175c <HAL_ETH_Init+0x1a8>)
 80215ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80215f0:	f003 0302 	and.w	r3, r3, #2
 80215f4:	60bb      	str	r3, [r7, #8]
 80215f6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80215f8:	687b      	ldr	r3, [r7, #4]
 80215fa:	7a1b      	ldrb	r3, [r3, #8]
 80215fc:	2b00      	cmp	r3, #0
 80215fe:	d103      	bne.n	8021608 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8021600:	2000      	movs	r0, #0
 8021602:	f7ff fedf 	bl	80213c4 <HAL_SYSCFG_ETHInterfaceSelect>
 8021606:	e003      	b.n	8021610 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8021608:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 802160c:	f7ff feda 	bl	80213c4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	681b      	ldr	r3, [r3, #0]
 8021614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021618:	681a      	ldr	r2, [r3, #0]
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	681b      	ldr	r3, [r3, #0]
 802161e:	f042 0201 	orr.w	r2, r2, #1
 8021622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8021628:	f7ff fe90 	bl	802134c <HAL_GetTick>
 802162c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 802162e:	e00f      	b.n	8021650 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8021630:	f7ff fe8c 	bl	802134c <HAL_GetTick>
 8021634:	4602      	mov	r2, r0
 8021636:	68fb      	ldr	r3, [r7, #12]
 8021638:	1ad3      	subs	r3, r2, r3
 802163a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802163e:	d907      	bls.n	8021650 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	2204      	movs	r2, #4
 8021644:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	22e0      	movs	r2, #224	; 0xe0
 802164a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 802164c:	2301      	movs	r3, #1
 802164e:	e081      	b.n	8021754 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021658:	681b      	ldr	r3, [r3, #0]
 802165a:	f003 0301 	and.w	r3, r3, #1
 802165e:	2b00      	cmp	r3, #0
 8021660:	d1e6      	bne.n	8021630 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8021662:	6878      	ldr	r0, [r7, #4]
 8021664:	f000 fac0 	bl	8021be8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8021668:	f001 fd18 	bl	802309c <HAL_RCC_GetHCLKFreq>
 802166c:	4603      	mov	r3, r0
 802166e:	4a3c      	ldr	r2, [pc, #240]	; (8021760 <HAL_ETH_Init+0x1ac>)
 8021670:	fba2 2303 	umull	r2, r3, r2, r3
 8021674:	0c9a      	lsrs	r2, r3, #18
 8021676:	687b      	ldr	r3, [r7, #4]
 8021678:	681b      	ldr	r3, [r3, #0]
 802167a:	3a01      	subs	r2, #1
 802167c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8021680:	6878      	ldr	r0, [r7, #4]
 8021682:	f000 fa13 	bl	8021aac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8021694:	687b      	ldr	r3, [r7, #4]
 8021696:	681b      	ldr	r3, [r3, #0]
 8021698:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 802169c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80216a0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	695b      	ldr	r3, [r3, #20]
 80216a6:	f003 0303 	and.w	r3, r3, #3
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d007      	beq.n	80216be <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80216ae:	687b      	ldr	r3, [r7, #4]
 80216b0:	2201      	movs	r2, #1
 80216b2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80216b4:	687b      	ldr	r3, [r7, #4]
 80216b6:	22e0      	movs	r2, #224	; 0xe0
 80216b8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80216ba:	2301      	movs	r3, #1
 80216bc:	e04a      	b.n	8021754 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80216be:	687b      	ldr	r3, [r7, #4]
 80216c0:	681a      	ldr	r2, [r3, #0]
 80216c2:	f241 1308 	movw	r3, #4360	; 0x1108
 80216c6:	4413      	add	r3, r2
 80216c8:	681a      	ldr	r2, [r3, #0]
 80216ca:	4b26      	ldr	r3, [pc, #152]	; (8021764 <HAL_ETH_Init+0x1b0>)
 80216cc:	4013      	ands	r3, r2
 80216ce:	687a      	ldr	r2, [r7, #4]
 80216d0:	6952      	ldr	r2, [r2, #20]
 80216d2:	0052      	lsls	r2, r2, #1
 80216d4:	6879      	ldr	r1, [r7, #4]
 80216d6:	6809      	ldr	r1, [r1, #0]
 80216d8:	431a      	orrs	r2, r3
 80216da:	f241 1308 	movw	r3, #4360	; 0x1108
 80216de:	440b      	add	r3, r1
 80216e0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80216e2:	6878      	ldr	r0, [r7, #4]
 80216e4:	f000 fad8 	bl	8021c98 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80216e8:	6878      	ldr	r0, [r7, #4]
 80216ea:	f000 fb1c 	bl	8021d26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80216ee:	687b      	ldr	r3, [r7, #4]
 80216f0:	685b      	ldr	r3, [r3, #4]
 80216f2:	3305      	adds	r3, #5
 80216f4:	781b      	ldrb	r3, [r3, #0]
 80216f6:	021a      	lsls	r2, r3, #8
 80216f8:	687b      	ldr	r3, [r7, #4]
 80216fa:	685b      	ldr	r3, [r3, #4]
 80216fc:	3304      	adds	r3, #4
 80216fe:	781b      	ldrb	r3, [r3, #0]
 8021700:	4619      	mov	r1, r3
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	430a      	orrs	r2, r1
 8021708:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	685b      	ldr	r3, [r3, #4]
 8021710:	3303      	adds	r3, #3
 8021712:	781b      	ldrb	r3, [r3, #0]
 8021714:	061a      	lsls	r2, r3, #24
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	685b      	ldr	r3, [r3, #4]
 802171a:	3302      	adds	r3, #2
 802171c:	781b      	ldrb	r3, [r3, #0]
 802171e:	041b      	lsls	r3, r3, #16
 8021720:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8021722:	687b      	ldr	r3, [r7, #4]
 8021724:	685b      	ldr	r3, [r3, #4]
 8021726:	3301      	adds	r3, #1
 8021728:	781b      	ldrb	r3, [r3, #0]
 802172a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 802172c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 802172e:	687b      	ldr	r3, [r7, #4]
 8021730:	685b      	ldr	r3, [r3, #4]
 8021732:	781b      	ldrb	r3, [r3, #0]
 8021734:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 802173a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 802173c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8021740:	687b      	ldr	r3, [r7, #4]
 8021742:	2200      	movs	r2, #0
 8021744:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	2210      	movs	r2, #16
 802174a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 802174c:	687b      	ldr	r3, [r7, #4]
 802174e:	2210      	movs	r2, #16
 8021750:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8021752:	2300      	movs	r3, #0
}
 8021754:	4618      	mov	r0, r3
 8021756:	3710      	adds	r7, #16
 8021758:	46bd      	mov	sp, r7
 802175a:	bd80      	pop	{r7, pc}
 802175c:	58024400 	.word	0x58024400
 8021760:	431bde83 	.word	0x431bde83
 8021764:	ffff8001 	.word	0xffff8001

08021768 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8021768:	b480      	push	{r7}
 802176a:	b085      	sub	sp, #20
 802176c:	af00      	add	r7, sp, #0
 802176e:	6078      	str	r0, [r7, #4]
 8021770:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8021772:	683b      	ldr	r3, [r7, #0]
 8021774:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8021776:	683b      	ldr	r3, [r7, #0]
 8021778:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 802177a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 802177c:	683b      	ldr	r3, [r7, #0]
 802177e:	791b      	ldrb	r3, [r3, #4]
 8021780:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8021782:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8021784:	683b      	ldr	r3, [r7, #0]
 8021786:	7b1b      	ldrb	r3, [r3, #12]
 8021788:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 802178a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 802178c:	683b      	ldr	r3, [r7, #0]
 802178e:	7b5b      	ldrb	r3, [r3, #13]
 8021790:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8021792:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8021794:	683b      	ldr	r3, [r7, #0]
 8021796:	7b9b      	ldrb	r3, [r3, #14]
 8021798:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 802179a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 802179c:	683b      	ldr	r3, [r7, #0]
 802179e:	7bdb      	ldrb	r3, [r3, #15]
 80217a0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80217a2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80217a4:	683a      	ldr	r2, [r7, #0]
 80217a6:	7c12      	ldrb	r2, [r2, #16]
 80217a8:	2a00      	cmp	r2, #0
 80217aa:	d102      	bne.n	80217b2 <ETH_SetMACConfig+0x4a>
 80217ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80217b0:	e000      	b.n	80217b4 <ETH_SetMACConfig+0x4c>
 80217b2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80217b4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80217b6:	683a      	ldr	r2, [r7, #0]
 80217b8:	7c52      	ldrb	r2, [r2, #17]
 80217ba:	2a00      	cmp	r2, #0
 80217bc:	d102      	bne.n	80217c4 <ETH_SetMACConfig+0x5c>
 80217be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80217c2:	e000      	b.n	80217c6 <ETH_SetMACConfig+0x5e>
 80217c4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80217c6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80217c8:	683b      	ldr	r3, [r7, #0]
 80217ca:	7c9b      	ldrb	r3, [r3, #18]
 80217cc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80217ce:	431a      	orrs	r2, r3
                                macconf->Speed |
 80217d0:	683b      	ldr	r3, [r7, #0]
 80217d2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80217d4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80217d6:	683b      	ldr	r3, [r7, #0]
 80217d8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80217da:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80217dc:	683b      	ldr	r3, [r7, #0]
 80217de:	7f1b      	ldrb	r3, [r3, #28]
 80217e0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80217e2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80217e4:	683b      	ldr	r3, [r7, #0]
 80217e6:	7f5b      	ldrb	r3, [r3, #29]
 80217e8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80217ea:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80217ec:	683a      	ldr	r2, [r7, #0]
 80217ee:	7f92      	ldrb	r2, [r2, #30]
 80217f0:	2a00      	cmp	r2, #0
 80217f2:	d102      	bne.n	80217fa <ETH_SetMACConfig+0x92>
 80217f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80217f8:	e000      	b.n	80217fc <ETH_SetMACConfig+0x94>
 80217fa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80217fc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80217fe:	683b      	ldr	r3, [r7, #0]
 8021800:	7fdb      	ldrb	r3, [r3, #31]
 8021802:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8021804:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8021806:	683a      	ldr	r2, [r7, #0]
 8021808:	f892 2020 	ldrb.w	r2, [r2, #32]
 802180c:	2a00      	cmp	r2, #0
 802180e:	d102      	bne.n	8021816 <ETH_SetMACConfig+0xae>
 8021810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8021814:	e000      	b.n	8021818 <ETH_SetMACConfig+0xb0>
 8021816:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8021818:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 802181a:	683b      	ldr	r3, [r7, #0]
 802181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 802181e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8021820:	683b      	ldr	r3, [r7, #0]
 8021822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021826:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8021828:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 802182a:	683b      	ldr	r3, [r7, #0]
 802182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 802182e:	4313      	orrs	r3, r2
 8021830:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8021832:	687b      	ldr	r3, [r7, #4]
 8021834:	681b      	ldr	r3, [r3, #0]
 8021836:	681a      	ldr	r2, [r3, #0]
 8021838:	4b56      	ldr	r3, [pc, #344]	; (8021994 <ETH_SetMACConfig+0x22c>)
 802183a:	4013      	ands	r3, r2
 802183c:	687a      	ldr	r2, [r7, #4]
 802183e:	6812      	ldr	r2, [r2, #0]
 8021840:	68f9      	ldr	r1, [r7, #12]
 8021842:	430b      	orrs	r3, r1
 8021844:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8021846:	683b      	ldr	r3, [r7, #0]
 8021848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802184a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 802184c:	683b      	ldr	r3, [r7, #0]
 802184e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8021852:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8021854:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8021856:	683b      	ldr	r3, [r7, #0]
 8021858:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802185c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 802185e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8021860:	683b      	ldr	r3, [r7, #0]
 8021862:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021866:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8021868:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 802186a:	683a      	ldr	r2, [r7, #0]
 802186c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8021870:	2a00      	cmp	r2, #0
 8021872:	d102      	bne.n	802187a <ETH_SetMACConfig+0x112>
 8021874:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8021878:	e000      	b.n	802187c <ETH_SetMACConfig+0x114>
 802187a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 802187c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 802187e:	683b      	ldr	r3, [r7, #0]
 8021880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8021882:	4313      	orrs	r3, r2
 8021884:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8021886:	687b      	ldr	r3, [r7, #4]
 8021888:	681b      	ldr	r3, [r3, #0]
 802188a:	685a      	ldr	r2, [r3, #4]
 802188c:	4b42      	ldr	r3, [pc, #264]	; (8021998 <ETH_SetMACConfig+0x230>)
 802188e:	4013      	ands	r3, r2
 8021890:	687a      	ldr	r2, [r7, #4]
 8021892:	6812      	ldr	r2, [r2, #0]
 8021894:	68f9      	ldr	r1, [r7, #12]
 8021896:	430b      	orrs	r3, r1
 8021898:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 802189a:	683b      	ldr	r3, [r7, #0]
 802189c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80218a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80218a2:	683b      	ldr	r3, [r7, #0]
 80218a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80218a6:	4313      	orrs	r3, r2
 80218a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80218aa:	687b      	ldr	r3, [r7, #4]
 80218ac:	681b      	ldr	r3, [r3, #0]
 80218ae:	68da      	ldr	r2, [r3, #12]
 80218b0:	4b3a      	ldr	r3, [pc, #232]	; (802199c <ETH_SetMACConfig+0x234>)
 80218b2:	4013      	ands	r3, r2
 80218b4:	687a      	ldr	r2, [r7, #4]
 80218b6:	6812      	ldr	r2, [r2, #0]
 80218b8:	68f9      	ldr	r1, [r7, #12]
 80218ba:	430b      	orrs	r3, r1
 80218bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80218be:	683b      	ldr	r3, [r7, #0]
 80218c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80218c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80218c6:	683b      	ldr	r3, [r7, #0]
 80218c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80218ca:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80218cc:	683a      	ldr	r2, [r7, #0]
 80218ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80218d2:	2a00      	cmp	r2, #0
 80218d4:	d101      	bne.n	80218da <ETH_SetMACConfig+0x172>
 80218d6:	2280      	movs	r2, #128	; 0x80
 80218d8:	e000      	b.n	80218dc <ETH_SetMACConfig+0x174>
 80218da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80218dc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80218de:	683b      	ldr	r3, [r7, #0]
 80218e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80218e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80218e4:	4313      	orrs	r3, r2
 80218e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80218e8:	687b      	ldr	r3, [r7, #4]
 80218ea:	681b      	ldr	r3, [r3, #0]
 80218ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80218ee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80218f2:	4013      	ands	r3, r2
 80218f4:	687a      	ldr	r2, [r7, #4]
 80218f6:	6812      	ldr	r2, [r2, #0]
 80218f8:	68f9      	ldr	r1, [r7, #12]
 80218fa:	430b      	orrs	r3, r1
 80218fc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80218fe:	683b      	ldr	r3, [r7, #0]
 8021900:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8021904:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8021906:	683b      	ldr	r3, [r7, #0]
 8021908:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 802190c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 802190e:	4313      	orrs	r3, r2
 8021910:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	681b      	ldr	r3, [r3, #0]
 8021916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802191a:	f023 0103 	bic.w	r1, r3, #3
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	681b      	ldr	r3, [r3, #0]
 8021922:	68fa      	ldr	r2, [r7, #12]
 8021924:	430a      	orrs	r2, r1
 8021926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	681b      	ldr	r3, [r3, #0]
 802192e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8021932:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8021936:	683b      	ldr	r3, [r7, #0]
 8021938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802193a:	687b      	ldr	r3, [r7, #4]
 802193c:	681b      	ldr	r3, [r3, #0]
 802193e:	430a      	orrs	r2, r1
 8021940:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8021944:	683b      	ldr	r3, [r7, #0]
 8021946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8021948:	683a      	ldr	r2, [r7, #0]
 802194a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 802194e:	2a00      	cmp	r2, #0
 8021950:	d101      	bne.n	8021956 <ETH_SetMACConfig+0x1ee>
 8021952:	2240      	movs	r2, #64	; 0x40
 8021954:	e000      	b.n	8021958 <ETH_SetMACConfig+0x1f0>
 8021956:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8021958:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 802195a:	683b      	ldr	r3, [r7, #0]
 802195c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8021960:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8021962:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8021964:	683b      	ldr	r3, [r7, #0]
 8021966:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 802196a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 802196c:	4313      	orrs	r3, r2
 802196e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	681b      	ldr	r3, [r3, #0]
 8021974:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8021978:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	68fa      	ldr	r2, [r7, #12]
 8021982:	430a      	orrs	r2, r1
 8021984:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8021988:	bf00      	nop
 802198a:	3714      	adds	r7, #20
 802198c:	46bd      	mov	sp, r7
 802198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021992:	4770      	bx	lr
 8021994:	00048083 	.word	0x00048083
 8021998:	c0f88000 	.word	0xc0f88000
 802199c:	fffffef0 	.word	0xfffffef0

080219a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80219a0:	b480      	push	{r7}
 80219a2:	b085      	sub	sp, #20
 80219a4:	af00      	add	r7, sp, #0
 80219a6:	6078      	str	r0, [r7, #4]
 80219a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	681b      	ldr	r3, [r3, #0]
 80219ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219b2:	681a      	ldr	r2, [r3, #0]
 80219b4:	4b38      	ldr	r3, [pc, #224]	; (8021a98 <ETH_SetDMAConfig+0xf8>)
 80219b6:	4013      	ands	r3, r2
 80219b8:	683a      	ldr	r2, [r7, #0]
 80219ba:	6812      	ldr	r2, [r2, #0]
 80219bc:	6879      	ldr	r1, [r7, #4]
 80219be:	6809      	ldr	r1, [r1, #0]
 80219c0:	431a      	orrs	r2, r3
 80219c2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80219c6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80219c8:	683b      	ldr	r3, [r7, #0]
 80219ca:	791b      	ldrb	r3, [r3, #4]
 80219cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80219ce:	683b      	ldr	r3, [r7, #0]
 80219d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80219d2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80219d4:	683b      	ldr	r3, [r7, #0]
 80219d6:	7b1b      	ldrb	r3, [r3, #12]
 80219d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80219da:	4313      	orrs	r3, r2
 80219dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	681a      	ldr	r2, [r3, #0]
 80219e2:	f241 0304 	movw	r3, #4100	; 0x1004
 80219e6:	4413      	add	r3, r2
 80219e8:	681a      	ldr	r2, [r3, #0]
 80219ea:	4b2c      	ldr	r3, [pc, #176]	; (8021a9c <ETH_SetDMAConfig+0xfc>)
 80219ec:	4013      	ands	r3, r2
 80219ee:	687a      	ldr	r2, [r7, #4]
 80219f0:	6811      	ldr	r1, [r2, #0]
 80219f2:	68fa      	ldr	r2, [r7, #12]
 80219f4:	431a      	orrs	r2, r3
 80219f6:	f241 0304 	movw	r3, #4100	; 0x1004
 80219fa:	440b      	add	r3, r1
 80219fc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80219fe:	683b      	ldr	r3, [r7, #0]
 8021a00:	7b5b      	ldrb	r3, [r3, #13]
 8021a02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8021a04:	683b      	ldr	r3, [r7, #0]
 8021a06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8021a08:	4313      	orrs	r3, r2
 8021a0a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	681b      	ldr	r3, [r3, #0]
 8021a10:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8021a14:	681a      	ldr	r2, [r3, #0]
 8021a16:	4b22      	ldr	r3, [pc, #136]	; (8021aa0 <ETH_SetDMAConfig+0x100>)
 8021a18:	4013      	ands	r3, r2
 8021a1a:	687a      	ldr	r2, [r7, #4]
 8021a1c:	6811      	ldr	r1, [r2, #0]
 8021a1e:	68fa      	ldr	r2, [r7, #12]
 8021a20:	431a      	orrs	r2, r3
 8021a22:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8021a26:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8021a28:	683b      	ldr	r3, [r7, #0]
 8021a2a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8021a2c:	683b      	ldr	r3, [r7, #0]
 8021a2e:	7d1b      	ldrb	r3, [r3, #20]
 8021a30:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8021a32:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8021a34:	683b      	ldr	r3, [r7, #0]
 8021a36:	7f5b      	ldrb	r3, [r3, #29]
 8021a38:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8021a3a:	4313      	orrs	r3, r2
 8021a3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8021a3e:	687b      	ldr	r3, [r7, #4]
 8021a40:	681a      	ldr	r2, [r3, #0]
 8021a42:	f241 1304 	movw	r3, #4356	; 0x1104
 8021a46:	4413      	add	r3, r2
 8021a48:	681a      	ldr	r2, [r3, #0]
 8021a4a:	4b16      	ldr	r3, [pc, #88]	; (8021aa4 <ETH_SetDMAConfig+0x104>)
 8021a4c:	4013      	ands	r3, r2
 8021a4e:	687a      	ldr	r2, [r7, #4]
 8021a50:	6811      	ldr	r1, [r2, #0]
 8021a52:	68fa      	ldr	r2, [r7, #12]
 8021a54:	431a      	orrs	r2, r3
 8021a56:	f241 1304 	movw	r3, #4356	; 0x1104
 8021a5a:	440b      	add	r3, r1
 8021a5c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8021a5e:	683b      	ldr	r3, [r7, #0]
 8021a60:	7f1b      	ldrb	r3, [r3, #28]
 8021a62:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8021a64:	683b      	ldr	r3, [r7, #0]
 8021a66:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8021a68:	4313      	orrs	r3, r2
 8021a6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	681a      	ldr	r2, [r3, #0]
 8021a70:	f241 1308 	movw	r3, #4360	; 0x1108
 8021a74:	4413      	add	r3, r2
 8021a76:	681a      	ldr	r2, [r3, #0]
 8021a78:	4b0b      	ldr	r3, [pc, #44]	; (8021aa8 <ETH_SetDMAConfig+0x108>)
 8021a7a:	4013      	ands	r3, r2
 8021a7c:	687a      	ldr	r2, [r7, #4]
 8021a7e:	6811      	ldr	r1, [r2, #0]
 8021a80:	68fa      	ldr	r2, [r7, #12]
 8021a82:	431a      	orrs	r2, r3
 8021a84:	f241 1308 	movw	r3, #4360	; 0x1108
 8021a88:	440b      	add	r3, r1
 8021a8a:	601a      	str	r2, [r3, #0]
}
 8021a8c:	bf00      	nop
 8021a8e:	3714      	adds	r7, #20
 8021a90:	46bd      	mov	sp, r7
 8021a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a96:	4770      	bx	lr
 8021a98:	ffff87fd 	.word	0xffff87fd
 8021a9c:	ffff2ffe 	.word	0xffff2ffe
 8021aa0:	fffec000 	.word	0xfffec000
 8021aa4:	ffc0efef 	.word	0xffc0efef
 8021aa8:	7fc0ffff 	.word	0x7fc0ffff

08021aac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8021aac:	b580      	push	{r7, lr}
 8021aae:	b0a4      	sub	sp, #144	; 0x90
 8021ab0:	af00      	add	r7, sp, #0
 8021ab2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8021ab4:	2301      	movs	r3, #1
 8021ab6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8021aba:	2300      	movs	r3, #0
 8021abc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8021abe:	2300      	movs	r3, #0
 8021ac0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8021ac4:	2300      	movs	r3, #0
 8021ac6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8021aca:	2301      	movs	r3, #1
 8021acc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8021ad0:	2301      	movs	r3, #1
 8021ad2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8021ad6:	2301      	movs	r3, #1
 8021ad8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8021adc:	2300      	movs	r3, #0
 8021ade:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8021ae2:	2301      	movs	r3, #1
 8021ae4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8021ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021aec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8021aee:	2300      	movs	r3, #0
 8021af0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8021af4:	2300      	movs	r3, #0
 8021af6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8021af8:	2300      	movs	r3, #0
 8021afa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8021afe:	2300      	movs	r3, #0
 8021b00:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8021b04:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8021b08:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8021b0a:	2300      	movs	r3, #0
 8021b0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8021b10:	2300      	movs	r3, #0
 8021b12:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8021b14:	2301      	movs	r3, #1
 8021b16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8021b1a:	2300      	movs	r3, #0
 8021b1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8021b20:	2300      	movs	r3, #0
 8021b22:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8021b26:	2300      	movs	r3, #0
 8021b28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8021b2a:	2300      	movs	r3, #0
 8021b2c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8021b2e:	2300      	movs	r3, #0
 8021b30:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8021b32:	2300      	movs	r3, #0
 8021b34:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8021b38:	2300      	movs	r3, #0
 8021b3a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8021b3e:	2301      	movs	r3, #1
 8021b40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8021b44:	2320      	movs	r3, #32
 8021b46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8021b4a:	2301      	movs	r3, #1
 8021b4c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8021b50:	2300      	movs	r3, #0
 8021b52:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8021b56:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8021b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8021b5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8021b60:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8021b62:	2300      	movs	r3, #0
 8021b64:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8021b68:	2302      	movs	r3, #2
 8021b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8021b6e:	2300      	movs	r3, #0
 8021b70:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8021b74:	2300      	movs	r3, #0
 8021b76:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8021b7a:	2300      	movs	r3, #0
 8021b7c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8021b80:	2301      	movs	r3, #1
 8021b82:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8021b86:	2300      	movs	r3, #0
 8021b88:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8021b8a:	2301      	movs	r3, #1
 8021b8c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8021b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8021b94:	4619      	mov	r1, r3
 8021b96:	6878      	ldr	r0, [r7, #4]
 8021b98:	f7ff fde6 	bl	8021768 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8021b9c:	2301      	movs	r3, #1
 8021b9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8021ba0:	2301      	movs	r3, #1
 8021ba2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8021ba4:	2300      	movs	r3, #0
 8021ba6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8021ba8:	2300      	movs	r3, #0
 8021baa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8021bae:	2300      	movs	r3, #0
 8021bb0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8021bb2:	2300      	movs	r3, #0
 8021bb4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8021bb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021bba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8021bc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021bc4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8021bc6:	2300      	movs	r3, #0
 8021bc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8021bcc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8021bd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8021bd2:	f107 0308 	add.w	r3, r7, #8
 8021bd6:	4619      	mov	r1, r3
 8021bd8:	6878      	ldr	r0, [r7, #4]
 8021bda:	f7ff fee1 	bl	80219a0 <ETH_SetDMAConfig>
}
 8021bde:	bf00      	nop
 8021be0:	3790      	adds	r7, #144	; 0x90
 8021be2:	46bd      	mov	sp, r7
 8021be4:	bd80      	pop	{r7, pc}
	...

08021be8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8021be8:	b580      	push	{r7, lr}
 8021bea:	b084      	sub	sp, #16
 8021bec:	af00      	add	r7, sp, #0
 8021bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8021bf8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8021bfa:	68fb      	ldr	r3, [r7, #12]
 8021bfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8021c00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8021c02:	f001 fa4b 	bl	802309c <HAL_RCC_GetHCLKFreq>
 8021c06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8021c08:	68bb      	ldr	r3, [r7, #8]
 8021c0a:	4a1e      	ldr	r2, [pc, #120]	; (8021c84 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8021c0c:	4293      	cmp	r3, r2
 8021c0e:	d908      	bls.n	8021c22 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8021c10:	68bb      	ldr	r3, [r7, #8]
 8021c12:	4a1d      	ldr	r2, [pc, #116]	; (8021c88 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8021c14:	4293      	cmp	r3, r2
 8021c16:	d804      	bhi.n	8021c22 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8021c18:	68fb      	ldr	r3, [r7, #12]
 8021c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021c1e:	60fb      	str	r3, [r7, #12]
 8021c20:	e027      	b.n	8021c72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8021c22:	68bb      	ldr	r3, [r7, #8]
 8021c24:	4a18      	ldr	r2, [pc, #96]	; (8021c88 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8021c26:	4293      	cmp	r3, r2
 8021c28:	d908      	bls.n	8021c3c <ETH_MAC_MDIO_ClkConfig+0x54>
 8021c2a:	68bb      	ldr	r3, [r7, #8]
 8021c2c:	4a17      	ldr	r2, [pc, #92]	; (8021c8c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8021c2e:	4293      	cmp	r3, r2
 8021c30:	d204      	bcs.n	8021c3c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8021c32:	68fb      	ldr	r3, [r7, #12]
 8021c34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8021c38:	60fb      	str	r3, [r7, #12]
 8021c3a:	e01a      	b.n	8021c72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8021c3c:	68bb      	ldr	r3, [r7, #8]
 8021c3e:	4a13      	ldr	r2, [pc, #76]	; (8021c8c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8021c40:	4293      	cmp	r3, r2
 8021c42:	d303      	bcc.n	8021c4c <ETH_MAC_MDIO_ClkConfig+0x64>
 8021c44:	68bb      	ldr	r3, [r7, #8]
 8021c46:	4a12      	ldr	r2, [pc, #72]	; (8021c90 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8021c48:	4293      	cmp	r3, r2
 8021c4a:	d911      	bls.n	8021c70 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8021c4c:	68bb      	ldr	r3, [r7, #8]
 8021c4e:	4a10      	ldr	r2, [pc, #64]	; (8021c90 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8021c50:	4293      	cmp	r3, r2
 8021c52:	d908      	bls.n	8021c66 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8021c54:	68bb      	ldr	r3, [r7, #8]
 8021c56:	4a0f      	ldr	r2, [pc, #60]	; (8021c94 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8021c58:	4293      	cmp	r3, r2
 8021c5a:	d804      	bhi.n	8021c66 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8021c5c:	68fb      	ldr	r3, [r7, #12]
 8021c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021c62:	60fb      	str	r3, [r7, #12]
 8021c64:	e005      	b.n	8021c72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8021c66:	68fb      	ldr	r3, [r7, #12]
 8021c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021c6c:	60fb      	str	r3, [r7, #12]
 8021c6e:	e000      	b.n	8021c72 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8021c70:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8021c72:	687b      	ldr	r3, [r7, #4]
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	68fa      	ldr	r2, [r7, #12]
 8021c78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8021c7c:	bf00      	nop
 8021c7e:	3710      	adds	r7, #16
 8021c80:	46bd      	mov	sp, r7
 8021c82:	bd80      	pop	{r7, pc}
 8021c84:	01312cff 	.word	0x01312cff
 8021c88:	02160ebf 	.word	0x02160ebf
 8021c8c:	03938700 	.word	0x03938700
 8021c90:	05f5e0ff 	.word	0x05f5e0ff
 8021c94:	08f0d17f 	.word	0x08f0d17f

08021c98 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8021c98:	b480      	push	{r7}
 8021c9a:	b085      	sub	sp, #20
 8021c9c:	af00      	add	r7, sp, #0
 8021c9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8021ca0:	2300      	movs	r3, #0
 8021ca2:	60fb      	str	r3, [r7, #12]
 8021ca4:	e01d      	b.n	8021ce2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	68d9      	ldr	r1, [r3, #12]
 8021caa:	68fa      	ldr	r2, [r7, #12]
 8021cac:	4613      	mov	r3, r2
 8021cae:	005b      	lsls	r3, r3, #1
 8021cb0:	4413      	add	r3, r2
 8021cb2:	00db      	lsls	r3, r3, #3
 8021cb4:	440b      	add	r3, r1
 8021cb6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8021cb8:	68bb      	ldr	r3, [r7, #8]
 8021cba:	2200      	movs	r2, #0
 8021cbc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8021cbe:	68bb      	ldr	r3, [r7, #8]
 8021cc0:	2200      	movs	r2, #0
 8021cc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8021cc4:	68bb      	ldr	r3, [r7, #8]
 8021cc6:	2200      	movs	r2, #0
 8021cc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8021cca:	68bb      	ldr	r3, [r7, #8]
 8021ccc:	2200      	movs	r2, #0
 8021cce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8021cd0:	68b9      	ldr	r1, [r7, #8]
 8021cd2:	687b      	ldr	r3, [r7, #4]
 8021cd4:	68fa      	ldr	r2, [r7, #12]
 8021cd6:	3206      	adds	r2, #6
 8021cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8021cdc:	68fb      	ldr	r3, [r7, #12]
 8021cde:	3301      	adds	r3, #1
 8021ce0:	60fb      	str	r3, [r7, #12]
 8021ce2:	68fb      	ldr	r3, [r7, #12]
 8021ce4:	2b03      	cmp	r3, #3
 8021ce6:	d9de      	bls.n	8021ca6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8021ce8:	687b      	ldr	r3, [r7, #4]
 8021cea:	2200      	movs	r2, #0
 8021cec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8021cee:	687b      	ldr	r3, [r7, #4]
 8021cf0:	681a      	ldr	r2, [r3, #0]
 8021cf2:	f241 132c 	movw	r3, #4396	; 0x112c
 8021cf6:	4413      	add	r3, r2
 8021cf8:	2203      	movs	r2, #3
 8021cfa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8021cfc:	687b      	ldr	r3, [r7, #4]
 8021cfe:	68d9      	ldr	r1, [r3, #12]
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	681a      	ldr	r2, [r3, #0]
 8021d04:	f241 1314 	movw	r3, #4372	; 0x1114
 8021d08:	4413      	add	r3, r2
 8021d0a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8021d0c:	687b      	ldr	r3, [r7, #4]
 8021d0e:	68da      	ldr	r2, [r3, #12]
 8021d10:	687b      	ldr	r3, [r7, #4]
 8021d12:	681b      	ldr	r3, [r3, #0]
 8021d14:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8021d18:	601a      	str	r2, [r3, #0]
}
 8021d1a:	bf00      	nop
 8021d1c:	3714      	adds	r7, #20
 8021d1e:	46bd      	mov	sp, r7
 8021d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d24:	4770      	bx	lr

08021d26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8021d26:	b480      	push	{r7}
 8021d28:	b085      	sub	sp, #20
 8021d2a:	af00      	add	r7, sp, #0
 8021d2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8021d2e:	2300      	movs	r3, #0
 8021d30:	60fb      	str	r3, [r7, #12]
 8021d32:	e024      	b.n	8021d7e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8021d34:	687b      	ldr	r3, [r7, #4]
 8021d36:	6919      	ldr	r1, [r3, #16]
 8021d38:	68fa      	ldr	r2, [r7, #12]
 8021d3a:	4613      	mov	r3, r2
 8021d3c:	005b      	lsls	r3, r3, #1
 8021d3e:	4413      	add	r3, r2
 8021d40:	00db      	lsls	r3, r3, #3
 8021d42:	440b      	add	r3, r1
 8021d44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8021d46:	68bb      	ldr	r3, [r7, #8]
 8021d48:	2200      	movs	r2, #0
 8021d4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8021d4c:	68bb      	ldr	r3, [r7, #8]
 8021d4e:	2200      	movs	r2, #0
 8021d50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8021d52:	68bb      	ldr	r3, [r7, #8]
 8021d54:	2200      	movs	r2, #0
 8021d56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8021d58:	68bb      	ldr	r3, [r7, #8]
 8021d5a:	2200      	movs	r2, #0
 8021d5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8021d5e:	68bb      	ldr	r3, [r7, #8]
 8021d60:	2200      	movs	r2, #0
 8021d62:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8021d64:	68bb      	ldr	r3, [r7, #8]
 8021d66:	2200      	movs	r2, #0
 8021d68:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8021d6a:	68ba      	ldr	r2, [r7, #8]
 8021d6c:	6879      	ldr	r1, [r7, #4]
 8021d6e:	68fb      	ldr	r3, [r7, #12]
 8021d70:	3310      	adds	r3, #16
 8021d72:	009b      	lsls	r3, r3, #2
 8021d74:	440b      	add	r3, r1
 8021d76:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8021d78:	68fb      	ldr	r3, [r7, #12]
 8021d7a:	3301      	adds	r3, #1
 8021d7c:	60fb      	str	r3, [r7, #12]
 8021d7e:	68fb      	ldr	r3, [r7, #12]
 8021d80:	2b03      	cmp	r3, #3
 8021d82:	d9d7      	bls.n	8021d34 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8021d84:	687b      	ldr	r3, [r7, #4]
 8021d86:	2200      	movs	r2, #0
 8021d88:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	2200      	movs	r2, #0
 8021d8e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	2200      	movs	r2, #0
 8021d94:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8021d96:	687b      	ldr	r3, [r7, #4]
 8021d98:	2200      	movs	r2, #0
 8021d9a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	2200      	movs	r2, #0
 8021da0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	681a      	ldr	r2, [r3, #0]
 8021da6:	f241 1330 	movw	r3, #4400	; 0x1130
 8021daa:	4413      	add	r3, r2
 8021dac:	2203      	movs	r2, #3
 8021dae:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8021db0:	687b      	ldr	r3, [r7, #4]
 8021db2:	6919      	ldr	r1, [r3, #16]
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	681a      	ldr	r2, [r3, #0]
 8021db8:	f241 131c 	movw	r3, #4380	; 0x111c
 8021dbc:	4413      	add	r3, r2
 8021dbe:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	691b      	ldr	r3, [r3, #16]
 8021dc4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8021dc8:	687b      	ldr	r3, [r7, #4]
 8021dca:	681a      	ldr	r2, [r3, #0]
 8021dcc:	f241 1328 	movw	r3, #4392	; 0x1128
 8021dd0:	4413      	add	r3, r2
 8021dd2:	6019      	str	r1, [r3, #0]
}
 8021dd4:	bf00      	nop
 8021dd6:	3714      	adds	r7, #20
 8021dd8:	46bd      	mov	sp, r7
 8021dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dde:	4770      	bx	lr

08021de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021de0:	b480      	push	{r7}
 8021de2:	b089      	sub	sp, #36	; 0x24
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	6078      	str	r0, [r7, #4]
 8021de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8021dea:	2300      	movs	r3, #0
 8021dec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8021dee:	4b89      	ldr	r3, [pc, #548]	; (8022014 <HAL_GPIO_Init+0x234>)
 8021df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8021df2:	e194      	b.n	802211e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8021df4:	683b      	ldr	r3, [r7, #0]
 8021df6:	681a      	ldr	r2, [r3, #0]
 8021df8:	2101      	movs	r1, #1
 8021dfa:	69fb      	ldr	r3, [r7, #28]
 8021dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8021e00:	4013      	ands	r3, r2
 8021e02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8021e04:	693b      	ldr	r3, [r7, #16]
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	f000 8186 	beq.w	8022118 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021e0c:	683b      	ldr	r3, [r7, #0]
 8021e0e:	685b      	ldr	r3, [r3, #4]
 8021e10:	2b01      	cmp	r3, #1
 8021e12:	d00b      	beq.n	8021e2c <HAL_GPIO_Init+0x4c>
 8021e14:	683b      	ldr	r3, [r7, #0]
 8021e16:	685b      	ldr	r3, [r3, #4]
 8021e18:	2b02      	cmp	r3, #2
 8021e1a:	d007      	beq.n	8021e2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021e1c:	683b      	ldr	r3, [r7, #0]
 8021e1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021e20:	2b11      	cmp	r3, #17
 8021e22:	d003      	beq.n	8021e2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021e24:	683b      	ldr	r3, [r7, #0]
 8021e26:	685b      	ldr	r3, [r3, #4]
 8021e28:	2b12      	cmp	r3, #18
 8021e2a:	d130      	bne.n	8021e8e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	689b      	ldr	r3, [r3, #8]
 8021e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8021e32:	69fb      	ldr	r3, [r7, #28]
 8021e34:	005b      	lsls	r3, r3, #1
 8021e36:	2203      	movs	r2, #3
 8021e38:	fa02 f303 	lsl.w	r3, r2, r3
 8021e3c:	43db      	mvns	r3, r3
 8021e3e:	69ba      	ldr	r2, [r7, #24]
 8021e40:	4013      	ands	r3, r2
 8021e42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8021e44:	683b      	ldr	r3, [r7, #0]
 8021e46:	68da      	ldr	r2, [r3, #12]
 8021e48:	69fb      	ldr	r3, [r7, #28]
 8021e4a:	005b      	lsls	r3, r3, #1
 8021e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8021e50:	69ba      	ldr	r2, [r7, #24]
 8021e52:	4313      	orrs	r3, r2
 8021e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	69ba      	ldr	r2, [r7, #24]
 8021e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	685b      	ldr	r3, [r3, #4]
 8021e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8021e62:	2201      	movs	r2, #1
 8021e64:	69fb      	ldr	r3, [r7, #28]
 8021e66:	fa02 f303 	lsl.w	r3, r2, r3
 8021e6a:	43db      	mvns	r3, r3
 8021e6c:	69ba      	ldr	r2, [r7, #24]
 8021e6e:	4013      	ands	r3, r2
 8021e70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8021e72:	683b      	ldr	r3, [r7, #0]
 8021e74:	685b      	ldr	r3, [r3, #4]
 8021e76:	091b      	lsrs	r3, r3, #4
 8021e78:	f003 0201 	and.w	r2, r3, #1
 8021e7c:	69fb      	ldr	r3, [r7, #28]
 8021e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8021e82:	69ba      	ldr	r2, [r7, #24]
 8021e84:	4313      	orrs	r3, r2
 8021e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	69ba      	ldr	r2, [r7, #24]
 8021e8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8021e8e:	687b      	ldr	r3, [r7, #4]
 8021e90:	68db      	ldr	r3, [r3, #12]
 8021e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8021e94:	69fb      	ldr	r3, [r7, #28]
 8021e96:	005b      	lsls	r3, r3, #1
 8021e98:	2203      	movs	r2, #3
 8021e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8021e9e:	43db      	mvns	r3, r3
 8021ea0:	69ba      	ldr	r2, [r7, #24]
 8021ea2:	4013      	ands	r3, r2
 8021ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021ea6:	683b      	ldr	r3, [r7, #0]
 8021ea8:	689a      	ldr	r2, [r3, #8]
 8021eaa:	69fb      	ldr	r3, [r7, #28]
 8021eac:	005b      	lsls	r3, r3, #1
 8021eae:	fa02 f303 	lsl.w	r3, r2, r3
 8021eb2:	69ba      	ldr	r2, [r7, #24]
 8021eb4:	4313      	orrs	r3, r2
 8021eb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8021eb8:	687b      	ldr	r3, [r7, #4]
 8021eba:	69ba      	ldr	r2, [r7, #24]
 8021ebc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021ebe:	683b      	ldr	r3, [r7, #0]
 8021ec0:	685b      	ldr	r3, [r3, #4]
 8021ec2:	2b02      	cmp	r3, #2
 8021ec4:	d003      	beq.n	8021ece <HAL_GPIO_Init+0xee>
 8021ec6:	683b      	ldr	r3, [r7, #0]
 8021ec8:	685b      	ldr	r3, [r3, #4]
 8021eca:	2b12      	cmp	r3, #18
 8021ecc:	d123      	bne.n	8021f16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8021ece:	69fb      	ldr	r3, [r7, #28]
 8021ed0:	08da      	lsrs	r2, r3, #3
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	3208      	adds	r2, #8
 8021ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8021edc:	69fb      	ldr	r3, [r7, #28]
 8021ede:	f003 0307 	and.w	r3, r3, #7
 8021ee2:	009b      	lsls	r3, r3, #2
 8021ee4:	220f      	movs	r2, #15
 8021ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8021eea:	43db      	mvns	r3, r3
 8021eec:	69ba      	ldr	r2, [r7, #24]
 8021eee:	4013      	ands	r3, r2
 8021ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8021ef2:	683b      	ldr	r3, [r7, #0]
 8021ef4:	691a      	ldr	r2, [r3, #16]
 8021ef6:	69fb      	ldr	r3, [r7, #28]
 8021ef8:	f003 0307 	and.w	r3, r3, #7
 8021efc:	009b      	lsls	r3, r3, #2
 8021efe:	fa02 f303 	lsl.w	r3, r2, r3
 8021f02:	69ba      	ldr	r2, [r7, #24]
 8021f04:	4313      	orrs	r3, r2
 8021f06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8021f08:	69fb      	ldr	r3, [r7, #28]
 8021f0a:	08da      	lsrs	r2, r3, #3
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	3208      	adds	r2, #8
 8021f10:	69b9      	ldr	r1, [r7, #24]
 8021f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	681b      	ldr	r3, [r3, #0]
 8021f1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8021f1c:	69fb      	ldr	r3, [r7, #28]
 8021f1e:	005b      	lsls	r3, r3, #1
 8021f20:	2203      	movs	r2, #3
 8021f22:	fa02 f303 	lsl.w	r3, r2, r3
 8021f26:	43db      	mvns	r3, r3
 8021f28:	69ba      	ldr	r2, [r7, #24]
 8021f2a:	4013      	ands	r3, r2
 8021f2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8021f2e:	683b      	ldr	r3, [r7, #0]
 8021f30:	685b      	ldr	r3, [r3, #4]
 8021f32:	f003 0203 	and.w	r2, r3, #3
 8021f36:	69fb      	ldr	r3, [r7, #28]
 8021f38:	005b      	lsls	r3, r3, #1
 8021f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8021f3e:	69ba      	ldr	r2, [r7, #24]
 8021f40:	4313      	orrs	r3, r2
 8021f42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	69ba      	ldr	r2, [r7, #24]
 8021f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8021f4a:	683b      	ldr	r3, [r7, #0]
 8021f4c:	685b      	ldr	r3, [r3, #4]
 8021f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	f000 80e0 	beq.w	8022118 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021f58:	4b2f      	ldr	r3, [pc, #188]	; (8022018 <HAL_GPIO_Init+0x238>)
 8021f5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8021f5e:	4a2e      	ldr	r2, [pc, #184]	; (8022018 <HAL_GPIO_Init+0x238>)
 8021f60:	f043 0302 	orr.w	r3, r3, #2
 8021f64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8021f68:	4b2b      	ldr	r3, [pc, #172]	; (8022018 <HAL_GPIO_Init+0x238>)
 8021f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8021f6e:	f003 0302 	and.w	r3, r3, #2
 8021f72:	60fb      	str	r3, [r7, #12]
 8021f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8021f76:	4a29      	ldr	r2, [pc, #164]	; (802201c <HAL_GPIO_Init+0x23c>)
 8021f78:	69fb      	ldr	r3, [r7, #28]
 8021f7a:	089b      	lsrs	r3, r3, #2
 8021f7c:	3302      	adds	r3, #2
 8021f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8021f84:	69fb      	ldr	r3, [r7, #28]
 8021f86:	f003 0303 	and.w	r3, r3, #3
 8021f8a:	009b      	lsls	r3, r3, #2
 8021f8c:	220f      	movs	r2, #15
 8021f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8021f92:	43db      	mvns	r3, r3
 8021f94:	69ba      	ldr	r2, [r7, #24]
 8021f96:	4013      	ands	r3, r2
 8021f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	4a20      	ldr	r2, [pc, #128]	; (8022020 <HAL_GPIO_Init+0x240>)
 8021f9e:	4293      	cmp	r3, r2
 8021fa0:	d052      	beq.n	8022048 <HAL_GPIO_Init+0x268>
 8021fa2:	687b      	ldr	r3, [r7, #4]
 8021fa4:	4a1f      	ldr	r2, [pc, #124]	; (8022024 <HAL_GPIO_Init+0x244>)
 8021fa6:	4293      	cmp	r3, r2
 8021fa8:	d031      	beq.n	802200e <HAL_GPIO_Init+0x22e>
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	4a1e      	ldr	r2, [pc, #120]	; (8022028 <HAL_GPIO_Init+0x248>)
 8021fae:	4293      	cmp	r3, r2
 8021fb0:	d02b      	beq.n	802200a <HAL_GPIO_Init+0x22a>
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	4a1d      	ldr	r2, [pc, #116]	; (802202c <HAL_GPIO_Init+0x24c>)
 8021fb6:	4293      	cmp	r3, r2
 8021fb8:	d025      	beq.n	8022006 <HAL_GPIO_Init+0x226>
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	4a1c      	ldr	r2, [pc, #112]	; (8022030 <HAL_GPIO_Init+0x250>)
 8021fbe:	4293      	cmp	r3, r2
 8021fc0:	d01f      	beq.n	8022002 <HAL_GPIO_Init+0x222>
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	4a1b      	ldr	r2, [pc, #108]	; (8022034 <HAL_GPIO_Init+0x254>)
 8021fc6:	4293      	cmp	r3, r2
 8021fc8:	d019      	beq.n	8021ffe <HAL_GPIO_Init+0x21e>
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	4a1a      	ldr	r2, [pc, #104]	; (8022038 <HAL_GPIO_Init+0x258>)
 8021fce:	4293      	cmp	r3, r2
 8021fd0:	d013      	beq.n	8021ffa <HAL_GPIO_Init+0x21a>
 8021fd2:	687b      	ldr	r3, [r7, #4]
 8021fd4:	4a19      	ldr	r2, [pc, #100]	; (802203c <HAL_GPIO_Init+0x25c>)
 8021fd6:	4293      	cmp	r3, r2
 8021fd8:	d00d      	beq.n	8021ff6 <HAL_GPIO_Init+0x216>
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	4a18      	ldr	r2, [pc, #96]	; (8022040 <HAL_GPIO_Init+0x260>)
 8021fde:	4293      	cmp	r3, r2
 8021fe0:	d007      	beq.n	8021ff2 <HAL_GPIO_Init+0x212>
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	4a17      	ldr	r2, [pc, #92]	; (8022044 <HAL_GPIO_Init+0x264>)
 8021fe6:	4293      	cmp	r3, r2
 8021fe8:	d101      	bne.n	8021fee <HAL_GPIO_Init+0x20e>
 8021fea:	2309      	movs	r3, #9
 8021fec:	e02d      	b.n	802204a <HAL_GPIO_Init+0x26a>
 8021fee:	230a      	movs	r3, #10
 8021ff0:	e02b      	b.n	802204a <HAL_GPIO_Init+0x26a>
 8021ff2:	2308      	movs	r3, #8
 8021ff4:	e029      	b.n	802204a <HAL_GPIO_Init+0x26a>
 8021ff6:	2307      	movs	r3, #7
 8021ff8:	e027      	b.n	802204a <HAL_GPIO_Init+0x26a>
 8021ffa:	2306      	movs	r3, #6
 8021ffc:	e025      	b.n	802204a <HAL_GPIO_Init+0x26a>
 8021ffe:	2305      	movs	r3, #5
 8022000:	e023      	b.n	802204a <HAL_GPIO_Init+0x26a>
 8022002:	2304      	movs	r3, #4
 8022004:	e021      	b.n	802204a <HAL_GPIO_Init+0x26a>
 8022006:	2303      	movs	r3, #3
 8022008:	e01f      	b.n	802204a <HAL_GPIO_Init+0x26a>
 802200a:	2302      	movs	r3, #2
 802200c:	e01d      	b.n	802204a <HAL_GPIO_Init+0x26a>
 802200e:	2301      	movs	r3, #1
 8022010:	e01b      	b.n	802204a <HAL_GPIO_Init+0x26a>
 8022012:	bf00      	nop
 8022014:	58000080 	.word	0x58000080
 8022018:	58024400 	.word	0x58024400
 802201c:	58000400 	.word	0x58000400
 8022020:	58020000 	.word	0x58020000
 8022024:	58020400 	.word	0x58020400
 8022028:	58020800 	.word	0x58020800
 802202c:	58020c00 	.word	0x58020c00
 8022030:	58021000 	.word	0x58021000
 8022034:	58021400 	.word	0x58021400
 8022038:	58021800 	.word	0x58021800
 802203c:	58021c00 	.word	0x58021c00
 8022040:	58022000 	.word	0x58022000
 8022044:	58022400 	.word	0x58022400
 8022048:	2300      	movs	r3, #0
 802204a:	69fa      	ldr	r2, [r7, #28]
 802204c:	f002 0203 	and.w	r2, r2, #3
 8022050:	0092      	lsls	r2, r2, #2
 8022052:	4093      	lsls	r3, r2
 8022054:	69ba      	ldr	r2, [r7, #24]
 8022056:	4313      	orrs	r3, r2
 8022058:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802205a:	4938      	ldr	r1, [pc, #224]	; (802213c <HAL_GPIO_Init+0x35c>)
 802205c:	69fb      	ldr	r3, [r7, #28]
 802205e:	089b      	lsrs	r3, r3, #2
 8022060:	3302      	adds	r3, #2
 8022062:	69ba      	ldr	r2, [r7, #24]
 8022064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8022068:	697b      	ldr	r3, [r7, #20]
 802206a:	681b      	ldr	r3, [r3, #0]
 802206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802206e:	693b      	ldr	r3, [r7, #16]
 8022070:	43db      	mvns	r3, r3
 8022072:	69ba      	ldr	r2, [r7, #24]
 8022074:	4013      	ands	r3, r2
 8022076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8022078:	683b      	ldr	r3, [r7, #0]
 802207a:	685b      	ldr	r3, [r3, #4]
 802207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022080:	2b00      	cmp	r3, #0
 8022082:	d003      	beq.n	802208c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8022084:	69ba      	ldr	r2, [r7, #24]
 8022086:	693b      	ldr	r3, [r7, #16]
 8022088:	4313      	orrs	r3, r2
 802208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802208c:	697b      	ldr	r3, [r7, #20]
 802208e:	69ba      	ldr	r2, [r7, #24]
 8022090:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8022092:	697b      	ldr	r3, [r7, #20]
 8022094:	685b      	ldr	r3, [r3, #4]
 8022096:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8022098:	693b      	ldr	r3, [r7, #16]
 802209a:	43db      	mvns	r3, r3
 802209c:	69ba      	ldr	r2, [r7, #24]
 802209e:	4013      	ands	r3, r2
 80220a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80220a2:	683b      	ldr	r3, [r7, #0]
 80220a4:	685b      	ldr	r3, [r3, #4]
 80220a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80220aa:	2b00      	cmp	r3, #0
 80220ac:	d003      	beq.n	80220b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80220ae:	69ba      	ldr	r2, [r7, #24]
 80220b0:	693b      	ldr	r3, [r7, #16]
 80220b2:	4313      	orrs	r3, r2
 80220b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80220b6:	697b      	ldr	r3, [r7, #20]
 80220b8:	69ba      	ldr	r2, [r7, #24]
 80220ba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80220bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80220c0:	681b      	ldr	r3, [r3, #0]
 80220c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80220c4:	693b      	ldr	r3, [r7, #16]
 80220c6:	43db      	mvns	r3, r3
 80220c8:	69ba      	ldr	r2, [r7, #24]
 80220ca:	4013      	ands	r3, r2
 80220cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80220ce:	683b      	ldr	r3, [r7, #0]
 80220d0:	685b      	ldr	r3, [r3, #4]
 80220d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	d003      	beq.n	80220e2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80220da:	69ba      	ldr	r2, [r7, #24]
 80220dc:	693b      	ldr	r3, [r7, #16]
 80220de:	4313      	orrs	r3, r2
 80220e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80220e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80220e6:	69bb      	ldr	r3, [r7, #24]
 80220e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80220ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80220ee:	685b      	ldr	r3, [r3, #4]
 80220f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80220f2:	693b      	ldr	r3, [r7, #16]
 80220f4:	43db      	mvns	r3, r3
 80220f6:	69ba      	ldr	r2, [r7, #24]
 80220f8:	4013      	ands	r3, r2
 80220fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80220fc:	683b      	ldr	r3, [r7, #0]
 80220fe:	685b      	ldr	r3, [r3, #4]
 8022100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022104:	2b00      	cmp	r3, #0
 8022106:	d003      	beq.n	8022110 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8022108:	69ba      	ldr	r2, [r7, #24]
 802210a:	693b      	ldr	r3, [r7, #16]
 802210c:	4313      	orrs	r3, r2
 802210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8022110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8022114:	69bb      	ldr	r3, [r7, #24]
 8022116:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8022118:	69fb      	ldr	r3, [r7, #28]
 802211a:	3301      	adds	r3, #1
 802211c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802211e:	683b      	ldr	r3, [r7, #0]
 8022120:	681a      	ldr	r2, [r3, #0]
 8022122:	69fb      	ldr	r3, [r7, #28]
 8022124:	fa22 f303 	lsr.w	r3, r2, r3
 8022128:	2b00      	cmp	r3, #0
 802212a:	f47f ae63 	bne.w	8021df4 <HAL_GPIO_Init+0x14>
  }
}
 802212e:	bf00      	nop
 8022130:	bf00      	nop
 8022132:	3724      	adds	r7, #36	; 0x24
 8022134:	46bd      	mov	sp, r7
 8022136:	f85d 7b04 	ldr.w	r7, [sp], #4
 802213a:	4770      	bx	lr
 802213c:	58000400 	.word	0x58000400

08022140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8022140:	b480      	push	{r7}
 8022142:	b083      	sub	sp, #12
 8022144:	af00      	add	r7, sp, #0
 8022146:	6078      	str	r0, [r7, #4]
 8022148:	460b      	mov	r3, r1
 802214a:	807b      	strh	r3, [r7, #2]
 802214c:	4613      	mov	r3, r2
 802214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8022150:	787b      	ldrb	r3, [r7, #1]
 8022152:	2b00      	cmp	r3, #0
 8022154:	d003      	beq.n	802215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8022156:	887a      	ldrh	r2, [r7, #2]
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802215c:	e003      	b.n	8022166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802215e:	887b      	ldrh	r3, [r7, #2]
 8022160:	041a      	lsls	r2, r3, #16
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	619a      	str	r2, [r3, #24]
}
 8022166:	bf00      	nop
 8022168:	370c      	adds	r7, #12
 802216a:	46bd      	mov	sp, r7
 802216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022170:	4770      	bx	lr

08022172 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8022172:	b480      	push	{r7}
 8022174:	b085      	sub	sp, #20
 8022176:	af00      	add	r7, sp, #0
 8022178:	6078      	str	r0, [r7, #4]
 802217a:	460b      	mov	r3, r1
 802217c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	695b      	ldr	r3, [r3, #20]
 8022182:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8022184:	887a      	ldrh	r2, [r7, #2]
 8022186:	68fb      	ldr	r3, [r7, #12]
 8022188:	4013      	ands	r3, r2
 802218a:	041a      	lsls	r2, r3, #16
 802218c:	68fb      	ldr	r3, [r7, #12]
 802218e:	43d9      	mvns	r1, r3
 8022190:	887b      	ldrh	r3, [r7, #2]
 8022192:	400b      	ands	r3, r1
 8022194:	431a      	orrs	r2, r3
 8022196:	687b      	ldr	r3, [r7, #4]
 8022198:	619a      	str	r2, [r3, #24]
}
 802219a:	bf00      	nop
 802219c:	3714      	adds	r7, #20
 802219e:	46bd      	mov	sp, r7
 80221a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221a4:	4770      	bx	lr
	...

080221a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80221a8:	b580      	push	{r7, lr}
 80221aa:	b084      	sub	sp, #16
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80221b0:	4b19      	ldr	r3, [pc, #100]	; (8022218 <HAL_PWREx_ConfigSupply+0x70>)
 80221b2:	68db      	ldr	r3, [r3, #12]
 80221b4:	f003 0304 	and.w	r3, r3, #4
 80221b8:	2b04      	cmp	r3, #4
 80221ba:	d00a      	beq.n	80221d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80221bc:	4b16      	ldr	r3, [pc, #88]	; (8022218 <HAL_PWREx_ConfigSupply+0x70>)
 80221be:	68db      	ldr	r3, [r3, #12]
 80221c0:	f003 0307 	and.w	r3, r3, #7
 80221c4:	687a      	ldr	r2, [r7, #4]
 80221c6:	429a      	cmp	r2, r3
 80221c8:	d001      	beq.n	80221ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80221ca:	2301      	movs	r3, #1
 80221cc:	e01f      	b.n	802220e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80221ce:	2300      	movs	r3, #0
 80221d0:	e01d      	b.n	802220e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80221d2:	4b11      	ldr	r3, [pc, #68]	; (8022218 <HAL_PWREx_ConfigSupply+0x70>)
 80221d4:	68db      	ldr	r3, [r3, #12]
 80221d6:	f023 0207 	bic.w	r2, r3, #7
 80221da:	490f      	ldr	r1, [pc, #60]	; (8022218 <HAL_PWREx_ConfigSupply+0x70>)
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	4313      	orrs	r3, r2
 80221e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80221e2:	f7ff f8b3 	bl	802134c <HAL_GetTick>
 80221e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80221e8:	e009      	b.n	80221fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80221ea:	f7ff f8af 	bl	802134c <HAL_GetTick>
 80221ee:	4602      	mov	r2, r0
 80221f0:	68fb      	ldr	r3, [r7, #12]
 80221f2:	1ad3      	subs	r3, r2, r3
 80221f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80221f8:	d901      	bls.n	80221fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80221fa:	2301      	movs	r3, #1
 80221fc:	e007      	b.n	802220e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80221fe:	4b06      	ldr	r3, [pc, #24]	; (8022218 <HAL_PWREx_ConfigSupply+0x70>)
 8022200:	685b      	ldr	r3, [r3, #4]
 8022202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802220a:	d1ee      	bne.n	80221ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 802220c:	2300      	movs	r3, #0
}
 802220e:	4618      	mov	r0, r3
 8022210:	3710      	adds	r7, #16
 8022212:	46bd      	mov	sp, r7
 8022214:	bd80      	pop	{r7, pc}
 8022216:	bf00      	nop
 8022218:	58024800 	.word	0x58024800

0802221c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802221c:	b580      	push	{r7, lr}
 802221e:	b08c      	sub	sp, #48	; 0x30
 8022220:	af00      	add	r7, sp, #0
 8022222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	2b00      	cmp	r3, #0
 8022228:	d101      	bne.n	802222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802222a:	2301      	movs	r3, #1
 802222c:	e3ff      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802222e:	687b      	ldr	r3, [r7, #4]
 8022230:	681b      	ldr	r3, [r3, #0]
 8022232:	f003 0301 	and.w	r3, r3, #1
 8022236:	2b00      	cmp	r3, #0
 8022238:	f000 8087 	beq.w	802234a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802223c:	4b99      	ldr	r3, [pc, #612]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 802223e:	691b      	ldr	r3, [r3, #16]
 8022240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8022244:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8022246:	4b97      	ldr	r3, [pc, #604]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802224a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 802224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802224e:	2b10      	cmp	r3, #16
 8022250:	d007      	beq.n	8022262 <HAL_RCC_OscConfig+0x46>
 8022252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022254:	2b18      	cmp	r3, #24
 8022256:	d110      	bne.n	802227a <HAL_RCC_OscConfig+0x5e>
 8022258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802225a:	f003 0303 	and.w	r3, r3, #3
 802225e:	2b02      	cmp	r3, #2
 8022260:	d10b      	bne.n	802227a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022262:	4b90      	ldr	r3, [pc, #576]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802226a:	2b00      	cmp	r3, #0
 802226c:	d06c      	beq.n	8022348 <HAL_RCC_OscConfig+0x12c>
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	685b      	ldr	r3, [r3, #4]
 8022272:	2b00      	cmp	r3, #0
 8022274:	d168      	bne.n	8022348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8022276:	2301      	movs	r3, #1
 8022278:	e3d9      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	685b      	ldr	r3, [r3, #4]
 802227e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022282:	d106      	bne.n	8022292 <HAL_RCC_OscConfig+0x76>
 8022284:	4b87      	ldr	r3, [pc, #540]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022286:	681b      	ldr	r3, [r3, #0]
 8022288:	4a86      	ldr	r2, [pc, #536]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 802228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802228e:	6013      	str	r3, [r2, #0]
 8022290:	e02e      	b.n	80222f0 <HAL_RCC_OscConfig+0xd4>
 8022292:	687b      	ldr	r3, [r7, #4]
 8022294:	685b      	ldr	r3, [r3, #4]
 8022296:	2b00      	cmp	r3, #0
 8022298:	d10c      	bne.n	80222b4 <HAL_RCC_OscConfig+0x98>
 802229a:	4b82      	ldr	r3, [pc, #520]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 802229c:	681b      	ldr	r3, [r3, #0]
 802229e:	4a81      	ldr	r2, [pc, #516]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80222a4:	6013      	str	r3, [r2, #0]
 80222a6:	4b7f      	ldr	r3, [pc, #508]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222a8:	681b      	ldr	r3, [r3, #0]
 80222aa:	4a7e      	ldr	r2, [pc, #504]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80222b0:	6013      	str	r3, [r2, #0]
 80222b2:	e01d      	b.n	80222f0 <HAL_RCC_OscConfig+0xd4>
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	685b      	ldr	r3, [r3, #4]
 80222b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80222bc:	d10c      	bne.n	80222d8 <HAL_RCC_OscConfig+0xbc>
 80222be:	4b79      	ldr	r3, [pc, #484]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222c0:	681b      	ldr	r3, [r3, #0]
 80222c2:	4a78      	ldr	r2, [pc, #480]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80222c8:	6013      	str	r3, [r2, #0]
 80222ca:	4b76      	ldr	r3, [pc, #472]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222cc:	681b      	ldr	r3, [r3, #0]
 80222ce:	4a75      	ldr	r2, [pc, #468]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80222d4:	6013      	str	r3, [r2, #0]
 80222d6:	e00b      	b.n	80222f0 <HAL_RCC_OscConfig+0xd4>
 80222d8:	4b72      	ldr	r3, [pc, #456]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222da:	681b      	ldr	r3, [r3, #0]
 80222dc:	4a71      	ldr	r2, [pc, #452]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80222e2:	6013      	str	r3, [r2, #0]
 80222e4:	4b6f      	ldr	r3, [pc, #444]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222e6:	681b      	ldr	r3, [r3, #0]
 80222e8:	4a6e      	ldr	r2, [pc, #440]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80222ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80222ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80222f0:	687b      	ldr	r3, [r7, #4]
 80222f2:	685b      	ldr	r3, [r3, #4]
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	d013      	beq.n	8022320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80222f8:	f7ff f828 	bl	802134c <HAL_GetTick>
 80222fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80222fe:	e008      	b.n	8022312 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8022300:	f7ff f824 	bl	802134c <HAL_GetTick>
 8022304:	4602      	mov	r2, r0
 8022306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022308:	1ad3      	subs	r3, r2, r3
 802230a:	2b64      	cmp	r3, #100	; 0x64
 802230c:	d901      	bls.n	8022312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 802230e:	2303      	movs	r3, #3
 8022310:	e38d      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8022312:	4b64      	ldr	r3, [pc, #400]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802231a:	2b00      	cmp	r3, #0
 802231c:	d0f0      	beq.n	8022300 <HAL_RCC_OscConfig+0xe4>
 802231e:	e014      	b.n	802234a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022320:	f7ff f814 	bl	802134c <HAL_GetTick>
 8022324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8022326:	e008      	b.n	802233a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8022328:	f7ff f810 	bl	802134c <HAL_GetTick>
 802232c:	4602      	mov	r2, r0
 802232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022330:	1ad3      	subs	r3, r2, r3
 8022332:	2b64      	cmp	r3, #100	; 0x64
 8022334:	d901      	bls.n	802233a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8022336:	2303      	movs	r3, #3
 8022338:	e379      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802233a:	4b5a      	ldr	r3, [pc, #360]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 802233c:	681b      	ldr	r3, [r3, #0]
 802233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022342:	2b00      	cmp	r3, #0
 8022344:	d1f0      	bne.n	8022328 <HAL_RCC_OscConfig+0x10c>
 8022346:	e000      	b.n	802234a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	f003 0302 	and.w	r3, r3, #2
 8022352:	2b00      	cmp	r3, #0
 8022354:	f000 80ae 	beq.w	80224b4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022358:	4b52      	ldr	r3, [pc, #328]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 802235a:	691b      	ldr	r3, [r3, #16]
 802235c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8022360:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8022362:	4b50      	ldr	r3, [pc, #320]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022366:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8022368:	6a3b      	ldr	r3, [r7, #32]
 802236a:	2b00      	cmp	r3, #0
 802236c:	d007      	beq.n	802237e <HAL_RCC_OscConfig+0x162>
 802236e:	6a3b      	ldr	r3, [r7, #32]
 8022370:	2b18      	cmp	r3, #24
 8022372:	d13a      	bne.n	80223ea <HAL_RCC_OscConfig+0x1ce>
 8022374:	69fb      	ldr	r3, [r7, #28]
 8022376:	f003 0303 	and.w	r3, r3, #3
 802237a:	2b00      	cmp	r3, #0
 802237c:	d135      	bne.n	80223ea <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802237e:	4b49      	ldr	r3, [pc, #292]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022380:	681b      	ldr	r3, [r3, #0]
 8022382:	f003 0304 	and.w	r3, r3, #4
 8022386:	2b00      	cmp	r3, #0
 8022388:	d005      	beq.n	8022396 <HAL_RCC_OscConfig+0x17a>
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	68db      	ldr	r3, [r3, #12]
 802238e:	2b00      	cmp	r3, #0
 8022390:	d101      	bne.n	8022396 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8022392:	2301      	movs	r3, #1
 8022394:	e34b      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022396:	f7ff f809 	bl	80213ac <HAL_GetREVID>
 802239a:	4603      	mov	r3, r0
 802239c:	f241 0203 	movw	r2, #4099	; 0x1003
 80223a0:	4293      	cmp	r3, r2
 80223a2:	d817      	bhi.n	80223d4 <HAL_RCC_OscConfig+0x1b8>
 80223a4:	687b      	ldr	r3, [r7, #4]
 80223a6:	691b      	ldr	r3, [r3, #16]
 80223a8:	2b40      	cmp	r3, #64	; 0x40
 80223aa:	d108      	bne.n	80223be <HAL_RCC_OscConfig+0x1a2>
 80223ac:	4b3d      	ldr	r3, [pc, #244]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80223ae:	685b      	ldr	r3, [r3, #4]
 80223b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80223b4:	4a3b      	ldr	r2, [pc, #236]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80223b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80223ba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80223bc:	e07a      	b.n	80224b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80223be:	4b39      	ldr	r3, [pc, #228]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80223c0:	685b      	ldr	r3, [r3, #4]
 80223c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80223c6:	687b      	ldr	r3, [r7, #4]
 80223c8:	691b      	ldr	r3, [r3, #16]
 80223ca:	031b      	lsls	r3, r3, #12
 80223cc:	4935      	ldr	r1, [pc, #212]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80223ce:	4313      	orrs	r3, r2
 80223d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80223d2:	e06f      	b.n	80224b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80223d4:	4b33      	ldr	r3, [pc, #204]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80223d6:	685b      	ldr	r3, [r3, #4]
 80223d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	691b      	ldr	r3, [r3, #16]
 80223e0:	061b      	lsls	r3, r3, #24
 80223e2:	4930      	ldr	r1, [pc, #192]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80223e4:	4313      	orrs	r3, r2
 80223e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80223e8:	e064      	b.n	80224b4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80223ea:	687b      	ldr	r3, [r7, #4]
 80223ec:	68db      	ldr	r3, [r3, #12]
 80223ee:	2b00      	cmp	r3, #0
 80223f0:	d045      	beq.n	802247e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80223f2:	4b2c      	ldr	r3, [pc, #176]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	f023 0219 	bic.w	r2, r3, #25
 80223fa:	687b      	ldr	r3, [r7, #4]
 80223fc:	68db      	ldr	r3, [r3, #12]
 80223fe:	4929      	ldr	r1, [pc, #164]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022400:	4313      	orrs	r3, r2
 8022402:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022404:	f7fe ffa2 	bl	802134c <HAL_GetTick>
 8022408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802240a:	e008      	b.n	802241e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802240c:	f7fe ff9e 	bl	802134c <HAL_GetTick>
 8022410:	4602      	mov	r2, r0
 8022412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022414:	1ad3      	subs	r3, r2, r3
 8022416:	2b02      	cmp	r3, #2
 8022418:	d901      	bls.n	802241e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 802241a:	2303      	movs	r3, #3
 802241c:	e307      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802241e:	4b21      	ldr	r3, [pc, #132]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022420:	681b      	ldr	r3, [r3, #0]
 8022422:	f003 0304 	and.w	r3, r3, #4
 8022426:	2b00      	cmp	r3, #0
 8022428:	d0f0      	beq.n	802240c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802242a:	f7fe ffbf 	bl	80213ac <HAL_GetREVID>
 802242e:	4603      	mov	r3, r0
 8022430:	f241 0203 	movw	r2, #4099	; 0x1003
 8022434:	4293      	cmp	r3, r2
 8022436:	d817      	bhi.n	8022468 <HAL_RCC_OscConfig+0x24c>
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	691b      	ldr	r3, [r3, #16]
 802243c:	2b40      	cmp	r3, #64	; 0x40
 802243e:	d108      	bne.n	8022452 <HAL_RCC_OscConfig+0x236>
 8022440:	4b18      	ldr	r3, [pc, #96]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022442:	685b      	ldr	r3, [r3, #4]
 8022444:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8022448:	4a16      	ldr	r2, [pc, #88]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 802244a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802244e:	6053      	str	r3, [r2, #4]
 8022450:	e030      	b.n	80224b4 <HAL_RCC_OscConfig+0x298>
 8022452:	4b14      	ldr	r3, [pc, #80]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022454:	685b      	ldr	r3, [r3, #4]
 8022456:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	691b      	ldr	r3, [r3, #16]
 802245e:	031b      	lsls	r3, r3, #12
 8022460:	4910      	ldr	r1, [pc, #64]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022462:	4313      	orrs	r3, r2
 8022464:	604b      	str	r3, [r1, #4]
 8022466:	e025      	b.n	80224b4 <HAL_RCC_OscConfig+0x298>
 8022468:	4b0e      	ldr	r3, [pc, #56]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 802246a:	685b      	ldr	r3, [r3, #4]
 802246c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	691b      	ldr	r3, [r3, #16]
 8022474:	061b      	lsls	r3, r3, #24
 8022476:	490b      	ldr	r1, [pc, #44]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022478:	4313      	orrs	r3, r2
 802247a:	604b      	str	r3, [r1, #4]
 802247c:	e01a      	b.n	80224b4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802247e:	4b09      	ldr	r3, [pc, #36]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022480:	681b      	ldr	r3, [r3, #0]
 8022482:	4a08      	ldr	r2, [pc, #32]	; (80224a4 <HAL_RCC_OscConfig+0x288>)
 8022484:	f023 0301 	bic.w	r3, r3, #1
 8022488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802248a:	f7fe ff5f 	bl	802134c <HAL_GetTick>
 802248e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8022490:	e00a      	b.n	80224a8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8022492:	f7fe ff5b 	bl	802134c <HAL_GetTick>
 8022496:	4602      	mov	r2, r0
 8022498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802249a:	1ad3      	subs	r3, r2, r3
 802249c:	2b02      	cmp	r3, #2
 802249e:	d903      	bls.n	80224a8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80224a0:	2303      	movs	r3, #3
 80224a2:	e2c4      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
 80224a4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80224a8:	4ba4      	ldr	r3, [pc, #656]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	f003 0304 	and.w	r3, r3, #4
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	d1ee      	bne.n	8022492 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	681b      	ldr	r3, [r3, #0]
 80224b8:	f003 0310 	and.w	r3, r3, #16
 80224bc:	2b00      	cmp	r3, #0
 80224be:	f000 80a9 	beq.w	8022614 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80224c2:	4b9e      	ldr	r3, [pc, #632]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80224c4:	691b      	ldr	r3, [r3, #16]
 80224c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80224ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80224cc:	4b9b      	ldr	r3, [pc, #620]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80224ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80224d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80224d2:	69bb      	ldr	r3, [r7, #24]
 80224d4:	2b08      	cmp	r3, #8
 80224d6:	d007      	beq.n	80224e8 <HAL_RCC_OscConfig+0x2cc>
 80224d8:	69bb      	ldr	r3, [r7, #24]
 80224da:	2b18      	cmp	r3, #24
 80224dc:	d13a      	bne.n	8022554 <HAL_RCC_OscConfig+0x338>
 80224de:	697b      	ldr	r3, [r7, #20]
 80224e0:	f003 0303 	and.w	r3, r3, #3
 80224e4:	2b01      	cmp	r3, #1
 80224e6:	d135      	bne.n	8022554 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80224e8:	4b94      	ldr	r3, [pc, #592]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80224ea:	681b      	ldr	r3, [r3, #0]
 80224ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d005      	beq.n	8022500 <HAL_RCC_OscConfig+0x2e4>
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	69db      	ldr	r3, [r3, #28]
 80224f8:	2b80      	cmp	r3, #128	; 0x80
 80224fa:	d001      	beq.n	8022500 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80224fc:	2301      	movs	r3, #1
 80224fe:	e296      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8022500:	f7fe ff54 	bl	80213ac <HAL_GetREVID>
 8022504:	4603      	mov	r3, r0
 8022506:	f241 0203 	movw	r2, #4099	; 0x1003
 802250a:	4293      	cmp	r3, r2
 802250c:	d817      	bhi.n	802253e <HAL_RCC_OscConfig+0x322>
 802250e:	687b      	ldr	r3, [r7, #4]
 8022510:	6a1b      	ldr	r3, [r3, #32]
 8022512:	2b20      	cmp	r3, #32
 8022514:	d108      	bne.n	8022528 <HAL_RCC_OscConfig+0x30c>
 8022516:	4b89      	ldr	r3, [pc, #548]	; (802273c <HAL_RCC_OscConfig+0x520>)
 8022518:	685b      	ldr	r3, [r3, #4]
 802251a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 802251e:	4a87      	ldr	r2, [pc, #540]	; (802273c <HAL_RCC_OscConfig+0x520>)
 8022520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8022524:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8022526:	e075      	b.n	8022614 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8022528:	4b84      	ldr	r3, [pc, #528]	; (802273c <HAL_RCC_OscConfig+0x520>)
 802252a:	685b      	ldr	r3, [r3, #4]
 802252c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	6a1b      	ldr	r3, [r3, #32]
 8022534:	069b      	lsls	r3, r3, #26
 8022536:	4981      	ldr	r1, [pc, #516]	; (802273c <HAL_RCC_OscConfig+0x520>)
 8022538:	4313      	orrs	r3, r2
 802253a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802253c:	e06a      	b.n	8022614 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802253e:	4b7f      	ldr	r3, [pc, #508]	; (802273c <HAL_RCC_OscConfig+0x520>)
 8022540:	68db      	ldr	r3, [r3, #12]
 8022542:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	6a1b      	ldr	r3, [r3, #32]
 802254a:	061b      	lsls	r3, r3, #24
 802254c:	497b      	ldr	r1, [pc, #492]	; (802273c <HAL_RCC_OscConfig+0x520>)
 802254e:	4313      	orrs	r3, r2
 8022550:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8022552:	e05f      	b.n	8022614 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	69db      	ldr	r3, [r3, #28]
 8022558:	2b00      	cmp	r3, #0
 802255a:	d042      	beq.n	80225e2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 802255c:	4b77      	ldr	r3, [pc, #476]	; (802273c <HAL_RCC_OscConfig+0x520>)
 802255e:	681b      	ldr	r3, [r3, #0]
 8022560:	4a76      	ldr	r2, [pc, #472]	; (802273c <HAL_RCC_OscConfig+0x520>)
 8022562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022568:	f7fe fef0 	bl	802134c <HAL_GetTick>
 802256c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802256e:	e008      	b.n	8022582 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8022570:	f7fe feec 	bl	802134c <HAL_GetTick>
 8022574:	4602      	mov	r2, r0
 8022576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022578:	1ad3      	subs	r3, r2, r3
 802257a:	2b02      	cmp	r3, #2
 802257c:	d901      	bls.n	8022582 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 802257e:	2303      	movs	r3, #3
 8022580:	e255      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8022582:	4b6e      	ldr	r3, [pc, #440]	; (802273c <HAL_RCC_OscConfig+0x520>)
 8022584:	681b      	ldr	r3, [r3, #0]
 8022586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802258a:	2b00      	cmp	r3, #0
 802258c:	d0f0      	beq.n	8022570 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802258e:	f7fe ff0d 	bl	80213ac <HAL_GetREVID>
 8022592:	4603      	mov	r3, r0
 8022594:	f241 0203 	movw	r2, #4099	; 0x1003
 8022598:	4293      	cmp	r3, r2
 802259a:	d817      	bhi.n	80225cc <HAL_RCC_OscConfig+0x3b0>
 802259c:	687b      	ldr	r3, [r7, #4]
 802259e:	6a1b      	ldr	r3, [r3, #32]
 80225a0:	2b20      	cmp	r3, #32
 80225a2:	d108      	bne.n	80225b6 <HAL_RCC_OscConfig+0x39a>
 80225a4:	4b65      	ldr	r3, [pc, #404]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80225a6:	685b      	ldr	r3, [r3, #4]
 80225a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80225ac:	4a63      	ldr	r2, [pc, #396]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80225ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80225b2:	6053      	str	r3, [r2, #4]
 80225b4:	e02e      	b.n	8022614 <HAL_RCC_OscConfig+0x3f8>
 80225b6:	4b61      	ldr	r3, [pc, #388]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80225b8:	685b      	ldr	r3, [r3, #4]
 80225ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	6a1b      	ldr	r3, [r3, #32]
 80225c2:	069b      	lsls	r3, r3, #26
 80225c4:	495d      	ldr	r1, [pc, #372]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80225c6:	4313      	orrs	r3, r2
 80225c8:	604b      	str	r3, [r1, #4]
 80225ca:	e023      	b.n	8022614 <HAL_RCC_OscConfig+0x3f8>
 80225cc:	4b5b      	ldr	r3, [pc, #364]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80225ce:	68db      	ldr	r3, [r3, #12]
 80225d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	6a1b      	ldr	r3, [r3, #32]
 80225d8:	061b      	lsls	r3, r3, #24
 80225da:	4958      	ldr	r1, [pc, #352]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80225dc:	4313      	orrs	r3, r2
 80225de:	60cb      	str	r3, [r1, #12]
 80225e0:	e018      	b.n	8022614 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80225e2:	4b56      	ldr	r3, [pc, #344]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80225e4:	681b      	ldr	r3, [r3, #0]
 80225e6:	4a55      	ldr	r2, [pc, #340]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80225e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80225ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80225ee:	f7fe fead 	bl	802134c <HAL_GetTick>
 80225f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80225f4:	e008      	b.n	8022608 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80225f6:	f7fe fea9 	bl	802134c <HAL_GetTick>
 80225fa:	4602      	mov	r2, r0
 80225fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225fe:	1ad3      	subs	r3, r2, r3
 8022600:	2b02      	cmp	r3, #2
 8022602:	d901      	bls.n	8022608 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8022604:	2303      	movs	r3, #3
 8022606:	e212      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8022608:	4b4c      	ldr	r3, [pc, #304]	; (802273c <HAL_RCC_OscConfig+0x520>)
 802260a:	681b      	ldr	r3, [r3, #0]
 802260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022610:	2b00      	cmp	r3, #0
 8022612:	d1f0      	bne.n	80225f6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	681b      	ldr	r3, [r3, #0]
 8022618:	f003 0308 	and.w	r3, r3, #8
 802261c:	2b00      	cmp	r3, #0
 802261e:	d036      	beq.n	802268e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8022620:	687b      	ldr	r3, [r7, #4]
 8022622:	695b      	ldr	r3, [r3, #20]
 8022624:	2b00      	cmp	r3, #0
 8022626:	d019      	beq.n	802265c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8022628:	4b44      	ldr	r3, [pc, #272]	; (802273c <HAL_RCC_OscConfig+0x520>)
 802262a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802262c:	4a43      	ldr	r2, [pc, #268]	; (802273c <HAL_RCC_OscConfig+0x520>)
 802262e:	f043 0301 	orr.w	r3, r3, #1
 8022632:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022634:	f7fe fe8a 	bl	802134c <HAL_GetTick>
 8022638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802263a:	e008      	b.n	802264e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802263c:	f7fe fe86 	bl	802134c <HAL_GetTick>
 8022640:	4602      	mov	r2, r0
 8022642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022644:	1ad3      	subs	r3, r2, r3
 8022646:	2b02      	cmp	r3, #2
 8022648:	d901      	bls.n	802264e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 802264a:	2303      	movs	r3, #3
 802264c:	e1ef      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802264e:	4b3b      	ldr	r3, [pc, #236]	; (802273c <HAL_RCC_OscConfig+0x520>)
 8022650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022652:	f003 0302 	and.w	r3, r3, #2
 8022656:	2b00      	cmp	r3, #0
 8022658:	d0f0      	beq.n	802263c <HAL_RCC_OscConfig+0x420>
 802265a:	e018      	b.n	802268e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802265c:	4b37      	ldr	r3, [pc, #220]	; (802273c <HAL_RCC_OscConfig+0x520>)
 802265e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022660:	4a36      	ldr	r2, [pc, #216]	; (802273c <HAL_RCC_OscConfig+0x520>)
 8022662:	f023 0301 	bic.w	r3, r3, #1
 8022666:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022668:	f7fe fe70 	bl	802134c <HAL_GetTick>
 802266c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802266e:	e008      	b.n	8022682 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8022670:	f7fe fe6c 	bl	802134c <HAL_GetTick>
 8022674:	4602      	mov	r2, r0
 8022676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022678:	1ad3      	subs	r3, r2, r3
 802267a:	2b02      	cmp	r3, #2
 802267c:	d901      	bls.n	8022682 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 802267e:	2303      	movs	r3, #3
 8022680:	e1d5      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8022682:	4b2e      	ldr	r3, [pc, #184]	; (802273c <HAL_RCC_OscConfig+0x520>)
 8022684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022686:	f003 0302 	and.w	r3, r3, #2
 802268a:	2b00      	cmp	r3, #0
 802268c:	d1f0      	bne.n	8022670 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 802268e:	687b      	ldr	r3, [r7, #4]
 8022690:	681b      	ldr	r3, [r3, #0]
 8022692:	f003 0320 	and.w	r3, r3, #32
 8022696:	2b00      	cmp	r3, #0
 8022698:	d036      	beq.n	8022708 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 802269a:	687b      	ldr	r3, [r7, #4]
 802269c:	699b      	ldr	r3, [r3, #24]
 802269e:	2b00      	cmp	r3, #0
 80226a0:	d019      	beq.n	80226d6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80226a2:	4b26      	ldr	r3, [pc, #152]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80226a4:	681b      	ldr	r3, [r3, #0]
 80226a6:	4a25      	ldr	r2, [pc, #148]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80226a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80226ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80226ae:	f7fe fe4d 	bl	802134c <HAL_GetTick>
 80226b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80226b4:	e008      	b.n	80226c8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80226b6:	f7fe fe49 	bl	802134c <HAL_GetTick>
 80226ba:	4602      	mov	r2, r0
 80226bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80226be:	1ad3      	subs	r3, r2, r3
 80226c0:	2b02      	cmp	r3, #2
 80226c2:	d901      	bls.n	80226c8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80226c4:	2303      	movs	r3, #3
 80226c6:	e1b2      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80226c8:	4b1c      	ldr	r3, [pc, #112]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	d0f0      	beq.n	80226b6 <HAL_RCC_OscConfig+0x49a>
 80226d4:	e018      	b.n	8022708 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80226d6:	4b19      	ldr	r3, [pc, #100]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80226d8:	681b      	ldr	r3, [r3, #0]
 80226da:	4a18      	ldr	r2, [pc, #96]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80226dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80226e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80226e2:	f7fe fe33 	bl	802134c <HAL_GetTick>
 80226e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80226e8:	e008      	b.n	80226fc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80226ea:	f7fe fe2f 	bl	802134c <HAL_GetTick>
 80226ee:	4602      	mov	r2, r0
 80226f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80226f2:	1ad3      	subs	r3, r2, r3
 80226f4:	2b02      	cmp	r3, #2
 80226f6:	d901      	bls.n	80226fc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80226f8:	2303      	movs	r3, #3
 80226fa:	e198      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80226fc:	4b0f      	ldr	r3, [pc, #60]	; (802273c <HAL_RCC_OscConfig+0x520>)
 80226fe:	681b      	ldr	r3, [r3, #0]
 8022700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022704:	2b00      	cmp	r3, #0
 8022706:	d1f0      	bne.n	80226ea <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	681b      	ldr	r3, [r3, #0]
 802270c:	f003 0304 	and.w	r3, r3, #4
 8022710:	2b00      	cmp	r3, #0
 8022712:	f000 8085 	beq.w	8022820 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8022716:	4b0a      	ldr	r3, [pc, #40]	; (8022740 <HAL_RCC_OscConfig+0x524>)
 8022718:	681b      	ldr	r3, [r3, #0]
 802271a:	4a09      	ldr	r2, [pc, #36]	; (8022740 <HAL_RCC_OscConfig+0x524>)
 802271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022720:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8022722:	f7fe fe13 	bl	802134c <HAL_GetTick>
 8022726:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8022728:	e00c      	b.n	8022744 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802272a:	f7fe fe0f 	bl	802134c <HAL_GetTick>
 802272e:	4602      	mov	r2, r0
 8022730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022732:	1ad3      	subs	r3, r2, r3
 8022734:	2b64      	cmp	r3, #100	; 0x64
 8022736:	d905      	bls.n	8022744 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8022738:	2303      	movs	r3, #3
 802273a:	e178      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
 802273c:	58024400 	.word	0x58024400
 8022740:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8022744:	4b96      	ldr	r3, [pc, #600]	; (80229a0 <HAL_RCC_OscConfig+0x784>)
 8022746:	681b      	ldr	r3, [r3, #0]
 8022748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802274c:	2b00      	cmp	r3, #0
 802274e:	d0ec      	beq.n	802272a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8022750:	687b      	ldr	r3, [r7, #4]
 8022752:	689b      	ldr	r3, [r3, #8]
 8022754:	2b01      	cmp	r3, #1
 8022756:	d106      	bne.n	8022766 <HAL_RCC_OscConfig+0x54a>
 8022758:	4b92      	ldr	r3, [pc, #584]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802275c:	4a91      	ldr	r2, [pc, #580]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802275e:	f043 0301 	orr.w	r3, r3, #1
 8022762:	6713      	str	r3, [r2, #112]	; 0x70
 8022764:	e02d      	b.n	80227c2 <HAL_RCC_OscConfig+0x5a6>
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	689b      	ldr	r3, [r3, #8]
 802276a:	2b00      	cmp	r3, #0
 802276c:	d10c      	bne.n	8022788 <HAL_RCC_OscConfig+0x56c>
 802276e:	4b8d      	ldr	r3, [pc, #564]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022772:	4a8c      	ldr	r2, [pc, #560]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022774:	f023 0301 	bic.w	r3, r3, #1
 8022778:	6713      	str	r3, [r2, #112]	; 0x70
 802277a:	4b8a      	ldr	r3, [pc, #552]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802277e:	4a89      	ldr	r2, [pc, #548]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022780:	f023 0304 	bic.w	r3, r3, #4
 8022784:	6713      	str	r3, [r2, #112]	; 0x70
 8022786:	e01c      	b.n	80227c2 <HAL_RCC_OscConfig+0x5a6>
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	689b      	ldr	r3, [r3, #8]
 802278c:	2b05      	cmp	r3, #5
 802278e:	d10c      	bne.n	80227aa <HAL_RCC_OscConfig+0x58e>
 8022790:	4b84      	ldr	r3, [pc, #528]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022794:	4a83      	ldr	r2, [pc, #524]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022796:	f043 0304 	orr.w	r3, r3, #4
 802279a:	6713      	str	r3, [r2, #112]	; 0x70
 802279c:	4b81      	ldr	r3, [pc, #516]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80227a0:	4a80      	ldr	r2, [pc, #512]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80227a2:	f043 0301 	orr.w	r3, r3, #1
 80227a6:	6713      	str	r3, [r2, #112]	; 0x70
 80227a8:	e00b      	b.n	80227c2 <HAL_RCC_OscConfig+0x5a6>
 80227aa:	4b7e      	ldr	r3, [pc, #504]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80227ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80227ae:	4a7d      	ldr	r2, [pc, #500]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80227b0:	f023 0301 	bic.w	r3, r3, #1
 80227b4:	6713      	str	r3, [r2, #112]	; 0x70
 80227b6:	4b7b      	ldr	r3, [pc, #492]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80227b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80227ba:	4a7a      	ldr	r2, [pc, #488]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80227bc:	f023 0304 	bic.w	r3, r3, #4
 80227c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80227c2:	687b      	ldr	r3, [r7, #4]
 80227c4:	689b      	ldr	r3, [r3, #8]
 80227c6:	2b00      	cmp	r3, #0
 80227c8:	d015      	beq.n	80227f6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80227ca:	f7fe fdbf 	bl	802134c <HAL_GetTick>
 80227ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80227d0:	e00a      	b.n	80227e8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80227d2:	f7fe fdbb 	bl	802134c <HAL_GetTick>
 80227d6:	4602      	mov	r2, r0
 80227d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227da:	1ad3      	subs	r3, r2, r3
 80227dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80227e0:	4293      	cmp	r3, r2
 80227e2:	d901      	bls.n	80227e8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80227e4:	2303      	movs	r3, #3
 80227e6:	e122      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80227e8:	4b6e      	ldr	r3, [pc, #440]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80227ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80227ec:	f003 0302 	and.w	r3, r3, #2
 80227f0:	2b00      	cmp	r3, #0
 80227f2:	d0ee      	beq.n	80227d2 <HAL_RCC_OscConfig+0x5b6>
 80227f4:	e014      	b.n	8022820 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80227f6:	f7fe fda9 	bl	802134c <HAL_GetTick>
 80227fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80227fc:	e00a      	b.n	8022814 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80227fe:	f7fe fda5 	bl	802134c <HAL_GetTick>
 8022802:	4602      	mov	r2, r0
 8022804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022806:	1ad3      	subs	r3, r2, r3
 8022808:	f241 3288 	movw	r2, #5000	; 0x1388
 802280c:	4293      	cmp	r3, r2
 802280e:	d901      	bls.n	8022814 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8022810:	2303      	movs	r3, #3
 8022812:	e10c      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8022814:	4b63      	ldr	r3, [pc, #396]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022818:	f003 0302 	and.w	r3, r3, #2
 802281c:	2b00      	cmp	r3, #0
 802281e:	d1ee      	bne.n	80227fe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8022820:	687b      	ldr	r3, [r7, #4]
 8022822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022824:	2b00      	cmp	r3, #0
 8022826:	f000 8101 	beq.w	8022a2c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 802282a:	4b5e      	ldr	r3, [pc, #376]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802282c:	691b      	ldr	r3, [r3, #16]
 802282e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8022832:	2b18      	cmp	r3, #24
 8022834:	f000 80bc 	beq.w	80229b0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802283c:	2b02      	cmp	r3, #2
 802283e:	f040 8095 	bne.w	802296c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022842:	4b58      	ldr	r3, [pc, #352]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022844:	681b      	ldr	r3, [r3, #0]
 8022846:	4a57      	ldr	r2, [pc, #348]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802284c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802284e:	f7fe fd7d 	bl	802134c <HAL_GetTick>
 8022852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8022854:	e008      	b.n	8022868 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022856:	f7fe fd79 	bl	802134c <HAL_GetTick>
 802285a:	4602      	mov	r2, r0
 802285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802285e:	1ad3      	subs	r3, r2, r3
 8022860:	2b02      	cmp	r3, #2
 8022862:	d901      	bls.n	8022868 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8022864:	2303      	movs	r3, #3
 8022866:	e0e2      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8022868:	4b4e      	ldr	r3, [pc, #312]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802286a:	681b      	ldr	r3, [r3, #0]
 802286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022870:	2b00      	cmp	r3, #0
 8022872:	d1f0      	bne.n	8022856 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8022874:	4b4b      	ldr	r3, [pc, #300]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022878:	4b4b      	ldr	r3, [pc, #300]	; (80229a8 <HAL_RCC_OscConfig+0x78c>)
 802287a:	4013      	ands	r3, r2
 802287c:	687a      	ldr	r2, [r7, #4]
 802287e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8022880:	687a      	ldr	r2, [r7, #4]
 8022882:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8022884:	0112      	lsls	r2, r2, #4
 8022886:	430a      	orrs	r2, r1
 8022888:	4946      	ldr	r1, [pc, #280]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802288a:	4313      	orrs	r3, r2
 802288c:	628b      	str	r3, [r1, #40]	; 0x28
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022892:	3b01      	subs	r3, #1
 8022894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8022898:	687b      	ldr	r3, [r7, #4]
 802289a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802289c:	3b01      	subs	r3, #1
 802289e:	025b      	lsls	r3, r3, #9
 80228a0:	b29b      	uxth	r3, r3
 80228a2:	431a      	orrs	r2, r3
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80228a8:	3b01      	subs	r3, #1
 80228aa:	041b      	lsls	r3, r3, #16
 80228ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80228b0:	431a      	orrs	r2, r3
 80228b2:	687b      	ldr	r3, [r7, #4]
 80228b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80228b6:	3b01      	subs	r3, #1
 80228b8:	061b      	lsls	r3, r3, #24
 80228ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80228be:	4939      	ldr	r1, [pc, #228]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80228c0:	4313      	orrs	r3, r2
 80228c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80228c4:	4b37      	ldr	r3, [pc, #220]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80228c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228c8:	4a36      	ldr	r2, [pc, #216]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80228ca:	f023 0301 	bic.w	r3, r3, #1
 80228ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80228d0:	4b34      	ldr	r3, [pc, #208]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80228d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80228d4:	4b35      	ldr	r3, [pc, #212]	; (80229ac <HAL_RCC_OscConfig+0x790>)
 80228d6:	4013      	ands	r3, r2
 80228d8:	687a      	ldr	r2, [r7, #4]
 80228da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80228dc:	00d2      	lsls	r2, r2, #3
 80228de:	4931      	ldr	r1, [pc, #196]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80228e0:	4313      	orrs	r3, r2
 80228e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80228e4:	4b2f      	ldr	r3, [pc, #188]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80228e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228e8:	f023 020c 	bic.w	r2, r3, #12
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80228f0:	492c      	ldr	r1, [pc, #176]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80228f2:	4313      	orrs	r3, r2
 80228f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80228f6:	4b2b      	ldr	r3, [pc, #172]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 80228f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228fa:	f023 0202 	bic.w	r2, r3, #2
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022902:	4928      	ldr	r1, [pc, #160]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022904:	4313      	orrs	r3, r2
 8022906:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8022908:	4b26      	ldr	r3, [pc, #152]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802290c:	4a25      	ldr	r2, [pc, #148]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802290e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022914:	4b23      	ldr	r3, [pc, #140]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022918:	4a22      	ldr	r2, [pc, #136]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802291a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802291e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8022920:	4b20      	ldr	r3, [pc, #128]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022924:	4a1f      	ldr	r2, [pc, #124]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802292a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 802292c:	4b1d      	ldr	r3, [pc, #116]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022930:	4a1c      	ldr	r2, [pc, #112]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022932:	f043 0301 	orr.w	r3, r3, #1
 8022936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8022938:	4b1a      	ldr	r3, [pc, #104]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	4a19      	ldr	r2, [pc, #100]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8022942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022944:	f7fe fd02 	bl	802134c <HAL_GetTick>
 8022948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802294a:	e008      	b.n	802295e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802294c:	f7fe fcfe 	bl	802134c <HAL_GetTick>
 8022950:	4602      	mov	r2, r0
 8022952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022954:	1ad3      	subs	r3, r2, r3
 8022956:	2b02      	cmp	r3, #2
 8022958:	d901      	bls.n	802295e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 802295a:	2303      	movs	r3, #3
 802295c:	e067      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802295e:	4b11      	ldr	r3, [pc, #68]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022960:	681b      	ldr	r3, [r3, #0]
 8022962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022966:	2b00      	cmp	r3, #0
 8022968:	d0f0      	beq.n	802294c <HAL_RCC_OscConfig+0x730>
 802296a:	e05f      	b.n	8022a2c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802296c:	4b0d      	ldr	r3, [pc, #52]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 802296e:	681b      	ldr	r3, [r3, #0]
 8022970:	4a0c      	ldr	r2, [pc, #48]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8022976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022978:	f7fe fce8 	bl	802134c <HAL_GetTick>
 802297c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802297e:	e008      	b.n	8022992 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022980:	f7fe fce4 	bl	802134c <HAL_GetTick>
 8022984:	4602      	mov	r2, r0
 8022986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022988:	1ad3      	subs	r3, r2, r3
 802298a:	2b02      	cmp	r3, #2
 802298c:	d901      	bls.n	8022992 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 802298e:	2303      	movs	r3, #3
 8022990:	e04d      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8022992:	4b04      	ldr	r3, [pc, #16]	; (80229a4 <HAL_RCC_OscConfig+0x788>)
 8022994:	681b      	ldr	r3, [r3, #0]
 8022996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802299a:	2b00      	cmp	r3, #0
 802299c:	d1f0      	bne.n	8022980 <HAL_RCC_OscConfig+0x764>
 802299e:	e045      	b.n	8022a2c <HAL_RCC_OscConfig+0x810>
 80229a0:	58024800 	.word	0x58024800
 80229a4:	58024400 	.word	0x58024400
 80229a8:	fffffc0c 	.word	0xfffffc0c
 80229ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80229b0:	4b21      	ldr	r3, [pc, #132]	; (8022a38 <HAL_RCC_OscConfig+0x81c>)
 80229b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80229b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80229b6:	4b20      	ldr	r3, [pc, #128]	; (8022a38 <HAL_RCC_OscConfig+0x81c>)
 80229b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80229bc:	687b      	ldr	r3, [r7, #4]
 80229be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80229c0:	2b01      	cmp	r3, #1
 80229c2:	d031      	beq.n	8022a28 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80229c4:	693b      	ldr	r3, [r7, #16]
 80229c6:	f003 0203 	and.w	r2, r3, #3
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80229ce:	429a      	cmp	r2, r3
 80229d0:	d12a      	bne.n	8022a28 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80229d2:	693b      	ldr	r3, [r7, #16]
 80229d4:	091b      	lsrs	r3, r3, #4
 80229d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80229da:	687b      	ldr	r3, [r7, #4]
 80229dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80229de:	429a      	cmp	r2, r3
 80229e0:	d122      	bne.n	8022a28 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80229e2:	68fb      	ldr	r3, [r7, #12]
 80229e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80229ee:	429a      	cmp	r2, r3
 80229f0:	d11a      	bne.n	8022a28 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80229f2:	68fb      	ldr	r3, [r7, #12]
 80229f4:	0a5b      	lsrs	r3, r3, #9
 80229f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80229fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8022a00:	429a      	cmp	r2, r3
 8022a02:	d111      	bne.n	8022a28 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8022a04:	68fb      	ldr	r3, [r7, #12]
 8022a06:	0c1b      	lsrs	r3, r3, #16
 8022a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a10:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8022a12:	429a      	cmp	r2, r3
 8022a14:	d108      	bne.n	8022a28 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8022a16:	68fb      	ldr	r3, [r7, #12]
 8022a18:	0e1b      	lsrs	r3, r3, #24
 8022a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022a1e:	687b      	ldr	r3, [r7, #4]
 8022a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022a22:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8022a24:	429a      	cmp	r2, r3
 8022a26:	d001      	beq.n	8022a2c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8022a28:	2301      	movs	r3, #1
 8022a2a:	e000      	b.n	8022a2e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8022a2c:	2300      	movs	r3, #0
}
 8022a2e:	4618      	mov	r0, r3
 8022a30:	3730      	adds	r7, #48	; 0x30
 8022a32:	46bd      	mov	sp, r7
 8022a34:	bd80      	pop	{r7, pc}
 8022a36:	bf00      	nop
 8022a38:	58024400 	.word	0x58024400

08022a3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8022a3c:	b580      	push	{r7, lr}
 8022a3e:	b086      	sub	sp, #24
 8022a40:	af00      	add	r7, sp, #0
 8022a42:	6078      	str	r0, [r7, #4]
 8022a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d101      	bne.n	8022a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8022a4c:	2301      	movs	r3, #1
 8022a4e:	e19c      	b.n	8022d8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8022a50:	4b8a      	ldr	r3, [pc, #552]	; (8022c7c <HAL_RCC_ClockConfig+0x240>)
 8022a52:	681b      	ldr	r3, [r3, #0]
 8022a54:	f003 030f 	and.w	r3, r3, #15
 8022a58:	683a      	ldr	r2, [r7, #0]
 8022a5a:	429a      	cmp	r2, r3
 8022a5c:	d910      	bls.n	8022a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022a5e:	4b87      	ldr	r3, [pc, #540]	; (8022c7c <HAL_RCC_ClockConfig+0x240>)
 8022a60:	681b      	ldr	r3, [r3, #0]
 8022a62:	f023 020f 	bic.w	r2, r3, #15
 8022a66:	4985      	ldr	r1, [pc, #532]	; (8022c7c <HAL_RCC_ClockConfig+0x240>)
 8022a68:	683b      	ldr	r3, [r7, #0]
 8022a6a:	4313      	orrs	r3, r2
 8022a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022a6e:	4b83      	ldr	r3, [pc, #524]	; (8022c7c <HAL_RCC_ClockConfig+0x240>)
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	f003 030f 	and.w	r3, r3, #15
 8022a76:	683a      	ldr	r2, [r7, #0]
 8022a78:	429a      	cmp	r2, r3
 8022a7a:	d001      	beq.n	8022a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8022a7c:	2301      	movs	r3, #1
 8022a7e:	e184      	b.n	8022d8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	f003 0304 	and.w	r3, r3, #4
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	d010      	beq.n	8022aae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	691a      	ldr	r2, [r3, #16]
 8022a90:	4b7b      	ldr	r3, [pc, #492]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022a92:	699b      	ldr	r3, [r3, #24]
 8022a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8022a98:	429a      	cmp	r2, r3
 8022a9a:	d908      	bls.n	8022aae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8022a9c:	4b78      	ldr	r3, [pc, #480]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022a9e:	699b      	ldr	r3, [r3, #24]
 8022aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8022aa4:	687b      	ldr	r3, [r7, #4]
 8022aa6:	691b      	ldr	r3, [r3, #16]
 8022aa8:	4975      	ldr	r1, [pc, #468]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022aaa:	4313      	orrs	r3, r2
 8022aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022aae:	687b      	ldr	r3, [r7, #4]
 8022ab0:	681b      	ldr	r3, [r3, #0]
 8022ab2:	f003 0308 	and.w	r3, r3, #8
 8022ab6:	2b00      	cmp	r3, #0
 8022ab8:	d010      	beq.n	8022adc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	695a      	ldr	r2, [r3, #20]
 8022abe:	4b70      	ldr	r3, [pc, #448]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022ac0:	69db      	ldr	r3, [r3, #28]
 8022ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8022ac6:	429a      	cmp	r2, r3
 8022ac8:	d908      	bls.n	8022adc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8022aca:	4b6d      	ldr	r3, [pc, #436]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022acc:	69db      	ldr	r3, [r3, #28]
 8022ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8022ad2:	687b      	ldr	r3, [r7, #4]
 8022ad4:	695b      	ldr	r3, [r3, #20]
 8022ad6:	496a      	ldr	r1, [pc, #424]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022ad8:	4313      	orrs	r3, r2
 8022ada:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022adc:	687b      	ldr	r3, [r7, #4]
 8022ade:	681b      	ldr	r3, [r3, #0]
 8022ae0:	f003 0310 	and.w	r3, r3, #16
 8022ae4:	2b00      	cmp	r3, #0
 8022ae6:	d010      	beq.n	8022b0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	699a      	ldr	r2, [r3, #24]
 8022aec:	4b64      	ldr	r3, [pc, #400]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022aee:	69db      	ldr	r3, [r3, #28]
 8022af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8022af4:	429a      	cmp	r2, r3
 8022af6:	d908      	bls.n	8022b0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8022af8:	4b61      	ldr	r3, [pc, #388]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022afa:	69db      	ldr	r3, [r3, #28]
 8022afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	699b      	ldr	r3, [r3, #24]
 8022b04:	495e      	ldr	r1, [pc, #376]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b06:	4313      	orrs	r3, r2
 8022b08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8022b0a:	687b      	ldr	r3, [r7, #4]
 8022b0c:	681b      	ldr	r3, [r3, #0]
 8022b0e:	f003 0320 	and.w	r3, r3, #32
 8022b12:	2b00      	cmp	r3, #0
 8022b14:	d010      	beq.n	8022b38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	69da      	ldr	r2, [r3, #28]
 8022b1a:	4b59      	ldr	r3, [pc, #356]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b1c:	6a1b      	ldr	r3, [r3, #32]
 8022b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8022b22:	429a      	cmp	r2, r3
 8022b24:	d908      	bls.n	8022b38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8022b26:	4b56      	ldr	r3, [pc, #344]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b28:	6a1b      	ldr	r3, [r3, #32]
 8022b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8022b2e:	687b      	ldr	r3, [r7, #4]
 8022b30:	69db      	ldr	r3, [r3, #28]
 8022b32:	4953      	ldr	r1, [pc, #332]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b34:	4313      	orrs	r3, r2
 8022b36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022b38:	687b      	ldr	r3, [r7, #4]
 8022b3a:	681b      	ldr	r3, [r3, #0]
 8022b3c:	f003 0302 	and.w	r3, r3, #2
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	d010      	beq.n	8022b66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	68da      	ldr	r2, [r3, #12]
 8022b48:	4b4d      	ldr	r3, [pc, #308]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b4a:	699b      	ldr	r3, [r3, #24]
 8022b4c:	f003 030f 	and.w	r3, r3, #15
 8022b50:	429a      	cmp	r2, r3
 8022b52:	d908      	bls.n	8022b66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022b54:	4b4a      	ldr	r3, [pc, #296]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b56:	699b      	ldr	r3, [r3, #24]
 8022b58:	f023 020f 	bic.w	r2, r3, #15
 8022b5c:	687b      	ldr	r3, [r7, #4]
 8022b5e:	68db      	ldr	r3, [r3, #12]
 8022b60:	4947      	ldr	r1, [pc, #284]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b62:	4313      	orrs	r3, r2
 8022b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8022b66:	687b      	ldr	r3, [r7, #4]
 8022b68:	681b      	ldr	r3, [r3, #0]
 8022b6a:	f003 0301 	and.w	r3, r3, #1
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	d055      	beq.n	8022c1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8022b72:	4b43      	ldr	r3, [pc, #268]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b74:	699b      	ldr	r3, [r3, #24]
 8022b76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8022b7a:	687b      	ldr	r3, [r7, #4]
 8022b7c:	689b      	ldr	r3, [r3, #8]
 8022b7e:	4940      	ldr	r1, [pc, #256]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b80:	4313      	orrs	r3, r2
 8022b82:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022b84:	687b      	ldr	r3, [r7, #4]
 8022b86:	685b      	ldr	r3, [r3, #4]
 8022b88:	2b02      	cmp	r3, #2
 8022b8a:	d107      	bne.n	8022b9c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8022b8c:	4b3c      	ldr	r3, [pc, #240]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022b8e:	681b      	ldr	r3, [r3, #0]
 8022b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022b94:	2b00      	cmp	r3, #0
 8022b96:	d121      	bne.n	8022bdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8022b98:	2301      	movs	r3, #1
 8022b9a:	e0f6      	b.n	8022d8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	685b      	ldr	r3, [r3, #4]
 8022ba0:	2b03      	cmp	r3, #3
 8022ba2:	d107      	bne.n	8022bb4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8022ba4:	4b36      	ldr	r3, [pc, #216]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022ba6:	681b      	ldr	r3, [r3, #0]
 8022ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	d115      	bne.n	8022bdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8022bb0:	2301      	movs	r3, #1
 8022bb2:	e0ea      	b.n	8022d8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8022bb4:	687b      	ldr	r3, [r7, #4]
 8022bb6:	685b      	ldr	r3, [r3, #4]
 8022bb8:	2b01      	cmp	r3, #1
 8022bba:	d107      	bne.n	8022bcc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8022bbc:	4b30      	ldr	r3, [pc, #192]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022bbe:	681b      	ldr	r3, [r3, #0]
 8022bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	d109      	bne.n	8022bdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8022bc8:	2301      	movs	r3, #1
 8022bca:	e0de      	b.n	8022d8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8022bcc:	4b2c      	ldr	r3, [pc, #176]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022bce:	681b      	ldr	r3, [r3, #0]
 8022bd0:	f003 0304 	and.w	r3, r3, #4
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	d101      	bne.n	8022bdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8022bd8:	2301      	movs	r3, #1
 8022bda:	e0d6      	b.n	8022d8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8022bdc:	4b28      	ldr	r3, [pc, #160]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022bde:	691b      	ldr	r3, [r3, #16]
 8022be0:	f023 0207 	bic.w	r2, r3, #7
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	685b      	ldr	r3, [r3, #4]
 8022be8:	4925      	ldr	r1, [pc, #148]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022bea:	4313      	orrs	r3, r2
 8022bec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022bee:	f7fe fbad 	bl	802134c <HAL_GetTick>
 8022bf2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022bf4:	e00a      	b.n	8022c0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022bf6:	f7fe fba9 	bl	802134c <HAL_GetTick>
 8022bfa:	4602      	mov	r2, r0
 8022bfc:	697b      	ldr	r3, [r7, #20]
 8022bfe:	1ad3      	subs	r3, r2, r3
 8022c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8022c04:	4293      	cmp	r3, r2
 8022c06:	d901      	bls.n	8022c0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8022c08:	2303      	movs	r3, #3
 8022c0a:	e0be      	b.n	8022d8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022c0c:	4b1c      	ldr	r3, [pc, #112]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022c0e:	691b      	ldr	r3, [r3, #16]
 8022c10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	685b      	ldr	r3, [r3, #4]
 8022c18:	00db      	lsls	r3, r3, #3
 8022c1a:	429a      	cmp	r2, r3
 8022c1c:	d1eb      	bne.n	8022bf6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022c1e:	687b      	ldr	r3, [r7, #4]
 8022c20:	681b      	ldr	r3, [r3, #0]
 8022c22:	f003 0302 	and.w	r3, r3, #2
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	d010      	beq.n	8022c4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8022c2a:	687b      	ldr	r3, [r7, #4]
 8022c2c:	68da      	ldr	r2, [r3, #12]
 8022c2e:	4b14      	ldr	r3, [pc, #80]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022c30:	699b      	ldr	r3, [r3, #24]
 8022c32:	f003 030f 	and.w	r3, r3, #15
 8022c36:	429a      	cmp	r2, r3
 8022c38:	d208      	bcs.n	8022c4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022c3a:	4b11      	ldr	r3, [pc, #68]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022c3c:	699b      	ldr	r3, [r3, #24]
 8022c3e:	f023 020f 	bic.w	r2, r3, #15
 8022c42:	687b      	ldr	r3, [r7, #4]
 8022c44:	68db      	ldr	r3, [r3, #12]
 8022c46:	490e      	ldr	r1, [pc, #56]	; (8022c80 <HAL_RCC_ClockConfig+0x244>)
 8022c48:	4313      	orrs	r3, r2
 8022c4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8022c4c:	4b0b      	ldr	r3, [pc, #44]	; (8022c7c <HAL_RCC_ClockConfig+0x240>)
 8022c4e:	681b      	ldr	r3, [r3, #0]
 8022c50:	f003 030f 	and.w	r3, r3, #15
 8022c54:	683a      	ldr	r2, [r7, #0]
 8022c56:	429a      	cmp	r2, r3
 8022c58:	d214      	bcs.n	8022c84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022c5a:	4b08      	ldr	r3, [pc, #32]	; (8022c7c <HAL_RCC_ClockConfig+0x240>)
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	f023 020f 	bic.w	r2, r3, #15
 8022c62:	4906      	ldr	r1, [pc, #24]	; (8022c7c <HAL_RCC_ClockConfig+0x240>)
 8022c64:	683b      	ldr	r3, [r7, #0]
 8022c66:	4313      	orrs	r3, r2
 8022c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022c6a:	4b04      	ldr	r3, [pc, #16]	; (8022c7c <HAL_RCC_ClockConfig+0x240>)
 8022c6c:	681b      	ldr	r3, [r3, #0]
 8022c6e:	f003 030f 	and.w	r3, r3, #15
 8022c72:	683a      	ldr	r2, [r7, #0]
 8022c74:	429a      	cmp	r2, r3
 8022c76:	d005      	beq.n	8022c84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8022c78:	2301      	movs	r3, #1
 8022c7a:	e086      	b.n	8022d8a <HAL_RCC_ClockConfig+0x34e>
 8022c7c:	52002000 	.word	0x52002000
 8022c80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	681b      	ldr	r3, [r3, #0]
 8022c88:	f003 0304 	and.w	r3, r3, #4
 8022c8c:	2b00      	cmp	r3, #0
 8022c8e:	d010      	beq.n	8022cb2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	691a      	ldr	r2, [r3, #16]
 8022c94:	4b3f      	ldr	r3, [pc, #252]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022c96:	699b      	ldr	r3, [r3, #24]
 8022c98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8022c9c:	429a      	cmp	r2, r3
 8022c9e:	d208      	bcs.n	8022cb2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8022ca0:	4b3c      	ldr	r3, [pc, #240]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022ca2:	699b      	ldr	r3, [r3, #24]
 8022ca4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	691b      	ldr	r3, [r3, #16]
 8022cac:	4939      	ldr	r1, [pc, #228]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022cae:	4313      	orrs	r3, r2
 8022cb0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022cb2:	687b      	ldr	r3, [r7, #4]
 8022cb4:	681b      	ldr	r3, [r3, #0]
 8022cb6:	f003 0308 	and.w	r3, r3, #8
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	d010      	beq.n	8022ce0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8022cbe:	687b      	ldr	r3, [r7, #4]
 8022cc0:	695a      	ldr	r2, [r3, #20]
 8022cc2:	4b34      	ldr	r3, [pc, #208]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022cc4:	69db      	ldr	r3, [r3, #28]
 8022cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8022cca:	429a      	cmp	r2, r3
 8022ccc:	d208      	bcs.n	8022ce0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8022cce:	4b31      	ldr	r3, [pc, #196]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022cd0:	69db      	ldr	r3, [r3, #28]
 8022cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	695b      	ldr	r3, [r3, #20]
 8022cda:	492e      	ldr	r1, [pc, #184]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022cdc:	4313      	orrs	r3, r2
 8022cde:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022ce0:	687b      	ldr	r3, [r7, #4]
 8022ce2:	681b      	ldr	r3, [r3, #0]
 8022ce4:	f003 0310 	and.w	r3, r3, #16
 8022ce8:	2b00      	cmp	r3, #0
 8022cea:	d010      	beq.n	8022d0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8022cec:	687b      	ldr	r3, [r7, #4]
 8022cee:	699a      	ldr	r2, [r3, #24]
 8022cf0:	4b28      	ldr	r3, [pc, #160]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022cf2:	69db      	ldr	r3, [r3, #28]
 8022cf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8022cf8:	429a      	cmp	r2, r3
 8022cfa:	d208      	bcs.n	8022d0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8022cfc:	4b25      	ldr	r3, [pc, #148]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022cfe:	69db      	ldr	r3, [r3, #28]
 8022d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8022d04:	687b      	ldr	r3, [r7, #4]
 8022d06:	699b      	ldr	r3, [r3, #24]
 8022d08:	4922      	ldr	r1, [pc, #136]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022d0a:	4313      	orrs	r3, r2
 8022d0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	681b      	ldr	r3, [r3, #0]
 8022d12:	f003 0320 	and.w	r3, r3, #32
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	d010      	beq.n	8022d3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8022d1a:	687b      	ldr	r3, [r7, #4]
 8022d1c:	69da      	ldr	r2, [r3, #28]
 8022d1e:	4b1d      	ldr	r3, [pc, #116]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022d20:	6a1b      	ldr	r3, [r3, #32]
 8022d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8022d26:	429a      	cmp	r2, r3
 8022d28:	d208      	bcs.n	8022d3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8022d2a:	4b1a      	ldr	r3, [pc, #104]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022d2c:	6a1b      	ldr	r3, [r3, #32]
 8022d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8022d32:	687b      	ldr	r3, [r7, #4]
 8022d34:	69db      	ldr	r3, [r3, #28]
 8022d36:	4917      	ldr	r1, [pc, #92]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022d38:	4313      	orrs	r3, r2
 8022d3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8022d3c:	f000 f834 	bl	8022da8 <HAL_RCC_GetSysClockFreq>
 8022d40:	4602      	mov	r2, r0
 8022d42:	4b14      	ldr	r3, [pc, #80]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022d44:	699b      	ldr	r3, [r3, #24]
 8022d46:	0a1b      	lsrs	r3, r3, #8
 8022d48:	f003 030f 	and.w	r3, r3, #15
 8022d4c:	4912      	ldr	r1, [pc, #72]	; (8022d98 <HAL_RCC_ClockConfig+0x35c>)
 8022d4e:	5ccb      	ldrb	r3, [r1, r3]
 8022d50:	f003 031f 	and.w	r3, r3, #31
 8022d54:	fa22 f303 	lsr.w	r3, r2, r3
 8022d58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8022d5a:	4b0e      	ldr	r3, [pc, #56]	; (8022d94 <HAL_RCC_ClockConfig+0x358>)
 8022d5c:	699b      	ldr	r3, [r3, #24]
 8022d5e:	f003 030f 	and.w	r3, r3, #15
 8022d62:	4a0d      	ldr	r2, [pc, #52]	; (8022d98 <HAL_RCC_ClockConfig+0x35c>)
 8022d64:	5cd3      	ldrb	r3, [r2, r3]
 8022d66:	f003 031f 	and.w	r3, r3, #31
 8022d6a:	693a      	ldr	r2, [r7, #16]
 8022d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8022d70:	4a0a      	ldr	r2, [pc, #40]	; (8022d9c <HAL_RCC_ClockConfig+0x360>)
 8022d72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8022d74:	4a0a      	ldr	r2, [pc, #40]	; (8022da0 <HAL_RCC_ClockConfig+0x364>)
 8022d76:	693b      	ldr	r3, [r7, #16]
 8022d78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8022d7a:	4b0a      	ldr	r3, [pc, #40]	; (8022da4 <HAL_RCC_ClockConfig+0x368>)
 8022d7c:	681b      	ldr	r3, [r3, #0]
 8022d7e:	4618      	mov	r0, r3
 8022d80:	f7fe fa9a 	bl	80212b8 <HAL_InitTick>
 8022d84:	4603      	mov	r3, r0
 8022d86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8022d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	3718      	adds	r7, #24
 8022d8e:	46bd      	mov	sp, r7
 8022d90:	bd80      	pop	{r7, pc}
 8022d92:	bf00      	nop
 8022d94:	58024400 	.word	0x58024400
 8022d98:	08026f38 	.word	0x08026f38
 8022d9c:	20000004 	.word	0x20000004
 8022da0:	20000000 	.word	0x20000000
 8022da4:	20000008 	.word	0x20000008

08022da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022da8:	b480      	push	{r7}
 8022daa:	b089      	sub	sp, #36	; 0x24
 8022dac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022dae:	4bb3      	ldr	r3, [pc, #716]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022db0:	691b      	ldr	r3, [r3, #16]
 8022db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8022db6:	2b18      	cmp	r3, #24
 8022db8:	f200 8155 	bhi.w	8023066 <HAL_RCC_GetSysClockFreq+0x2be>
 8022dbc:	a201      	add	r2, pc, #4	; (adr r2, 8022dc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8022dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022dc2:	bf00      	nop
 8022dc4:	08022e29 	.word	0x08022e29
 8022dc8:	08023067 	.word	0x08023067
 8022dcc:	08023067 	.word	0x08023067
 8022dd0:	08023067 	.word	0x08023067
 8022dd4:	08023067 	.word	0x08023067
 8022dd8:	08023067 	.word	0x08023067
 8022ddc:	08023067 	.word	0x08023067
 8022de0:	08023067 	.word	0x08023067
 8022de4:	08022e4f 	.word	0x08022e4f
 8022de8:	08023067 	.word	0x08023067
 8022dec:	08023067 	.word	0x08023067
 8022df0:	08023067 	.word	0x08023067
 8022df4:	08023067 	.word	0x08023067
 8022df8:	08023067 	.word	0x08023067
 8022dfc:	08023067 	.word	0x08023067
 8022e00:	08023067 	.word	0x08023067
 8022e04:	08022e55 	.word	0x08022e55
 8022e08:	08023067 	.word	0x08023067
 8022e0c:	08023067 	.word	0x08023067
 8022e10:	08023067 	.word	0x08023067
 8022e14:	08023067 	.word	0x08023067
 8022e18:	08023067 	.word	0x08023067
 8022e1c:	08023067 	.word	0x08023067
 8022e20:	08023067 	.word	0x08023067
 8022e24:	08022e5b 	.word	0x08022e5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8022e28:	4b94      	ldr	r3, [pc, #592]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022e2a:	681b      	ldr	r3, [r3, #0]
 8022e2c:	f003 0320 	and.w	r3, r3, #32
 8022e30:	2b00      	cmp	r3, #0
 8022e32:	d009      	beq.n	8022e48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8022e34:	4b91      	ldr	r3, [pc, #580]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022e36:	681b      	ldr	r3, [r3, #0]
 8022e38:	08db      	lsrs	r3, r3, #3
 8022e3a:	f003 0303 	and.w	r3, r3, #3
 8022e3e:	4a90      	ldr	r2, [pc, #576]	; (8023080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8022e40:	fa22 f303 	lsr.w	r3, r2, r3
 8022e44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8022e46:	e111      	b.n	802306c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8022e48:	4b8d      	ldr	r3, [pc, #564]	; (8023080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8022e4a:	61bb      	str	r3, [r7, #24]
    break;
 8022e4c:	e10e      	b.n	802306c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8022e4e:	4b8d      	ldr	r3, [pc, #564]	; (8023084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8022e50:	61bb      	str	r3, [r7, #24]
    break;
 8022e52:	e10b      	b.n	802306c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8022e54:	4b8c      	ldr	r3, [pc, #560]	; (8023088 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8022e56:	61bb      	str	r3, [r7, #24]
    break;
 8022e58:	e108      	b.n	802306c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8022e5a:	4b88      	ldr	r3, [pc, #544]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e5e:	f003 0303 	and.w	r3, r3, #3
 8022e62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8022e64:	4b85      	ldr	r3, [pc, #532]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e68:	091b      	lsrs	r3, r3, #4
 8022e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8022e6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8022e70:	4b82      	ldr	r3, [pc, #520]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022e74:	f003 0301 	and.w	r3, r3, #1
 8022e78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8022e7a:	4b80      	ldr	r3, [pc, #512]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022e7e:	08db      	lsrs	r3, r3, #3
 8022e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022e84:	68fa      	ldr	r2, [r7, #12]
 8022e86:	fb02 f303 	mul.w	r3, r2, r3
 8022e8a:	ee07 3a90 	vmov	s15, r3
 8022e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022e92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8022e96:	693b      	ldr	r3, [r7, #16]
 8022e98:	2b00      	cmp	r3, #0
 8022e9a:	f000 80e1 	beq.w	8023060 <HAL_RCC_GetSysClockFreq+0x2b8>
 8022e9e:	697b      	ldr	r3, [r7, #20]
 8022ea0:	2b02      	cmp	r3, #2
 8022ea2:	f000 8083 	beq.w	8022fac <HAL_RCC_GetSysClockFreq+0x204>
 8022ea6:	697b      	ldr	r3, [r7, #20]
 8022ea8:	2b02      	cmp	r3, #2
 8022eaa:	f200 80a1 	bhi.w	8022ff0 <HAL_RCC_GetSysClockFreq+0x248>
 8022eae:	697b      	ldr	r3, [r7, #20]
 8022eb0:	2b00      	cmp	r3, #0
 8022eb2:	d003      	beq.n	8022ebc <HAL_RCC_GetSysClockFreq+0x114>
 8022eb4:	697b      	ldr	r3, [r7, #20]
 8022eb6:	2b01      	cmp	r3, #1
 8022eb8:	d056      	beq.n	8022f68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8022eba:	e099      	b.n	8022ff0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8022ebc:	4b6f      	ldr	r3, [pc, #444]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022ebe:	681b      	ldr	r3, [r3, #0]
 8022ec0:	f003 0320 	and.w	r3, r3, #32
 8022ec4:	2b00      	cmp	r3, #0
 8022ec6:	d02d      	beq.n	8022f24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8022ec8:	4b6c      	ldr	r3, [pc, #432]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022eca:	681b      	ldr	r3, [r3, #0]
 8022ecc:	08db      	lsrs	r3, r3, #3
 8022ece:	f003 0303 	and.w	r3, r3, #3
 8022ed2:	4a6b      	ldr	r2, [pc, #428]	; (8023080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8022ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8022ed8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8022eda:	687b      	ldr	r3, [r7, #4]
 8022edc:	ee07 3a90 	vmov	s15, r3
 8022ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022ee4:	693b      	ldr	r3, [r7, #16]
 8022ee6:	ee07 3a90 	vmov	s15, r3
 8022eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022ef2:	4b62      	ldr	r3, [pc, #392]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022efa:	ee07 3a90 	vmov	s15, r3
 8022efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8022f06:	eddf 5a61 	vldr	s11, [pc, #388]	; 802308c <HAL_RCC_GetSysClockFreq+0x2e4>
 8022f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8022f22:	e087      	b.n	8023034 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8022f24:	693b      	ldr	r3, [r7, #16]
 8022f26:	ee07 3a90 	vmov	s15, r3
 8022f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022f2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8023090 <HAL_RCC_GetSysClockFreq+0x2e8>
 8022f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022f36:	4b51      	ldr	r3, [pc, #324]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022f3e:	ee07 3a90 	vmov	s15, r3
 8022f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8022f4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 802308c <HAL_RCC_GetSysClockFreq+0x2e4>
 8022f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8022f66:	e065      	b.n	8023034 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8022f68:	693b      	ldr	r3, [r7, #16]
 8022f6a:	ee07 3a90 	vmov	s15, r3
 8022f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022f72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8023094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8022f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022f7a:	4b40      	ldr	r3, [pc, #256]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022f82:	ee07 3a90 	vmov	s15, r3
 8022f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8022f8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802308c <HAL_RCC_GetSysClockFreq+0x2e4>
 8022f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8022faa:	e043      	b.n	8023034 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8022fac:	693b      	ldr	r3, [r7, #16]
 8022fae:	ee07 3a90 	vmov	s15, r3
 8022fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022fb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8023098 <HAL_RCC_GetSysClockFreq+0x2f0>
 8022fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022fbe:	4b2f      	ldr	r3, [pc, #188]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022fc6:	ee07 3a90 	vmov	s15, r3
 8022fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8022fd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 802308c <HAL_RCC_GetSysClockFreq+0x2e4>
 8022fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8022fee:	e021      	b.n	8023034 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8022ff0:	693b      	ldr	r3, [r7, #16]
 8022ff2:	ee07 3a90 	vmov	s15, r3
 8022ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022ffa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8023094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8022ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8023002:	4b1e      	ldr	r3, [pc, #120]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8023004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802300a:	ee07 3a90 	vmov	s15, r3
 802300e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8023012:	ed97 6a02 	vldr	s12, [r7, #8]
 8023016:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802308c <HAL_RCC_GetSysClockFreq+0x2e4>
 802301a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802301e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802302a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802302e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8023032:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8023034:	4b11      	ldr	r3, [pc, #68]	; (802307c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8023036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023038:	0a5b      	lsrs	r3, r3, #9
 802303a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802303e:	3301      	adds	r3, #1
 8023040:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8023042:	683b      	ldr	r3, [r7, #0]
 8023044:	ee07 3a90 	vmov	s15, r3
 8023048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802304c:	edd7 6a07 	vldr	s13, [r7, #28]
 8023050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023058:	ee17 3a90 	vmov	r3, s15
 802305c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 802305e:	e005      	b.n	802306c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8023060:	2300      	movs	r3, #0
 8023062:	61bb      	str	r3, [r7, #24]
    break;
 8023064:	e002      	b.n	802306c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8023066:	4b07      	ldr	r3, [pc, #28]	; (8023084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8023068:	61bb      	str	r3, [r7, #24]
    break;
 802306a:	bf00      	nop
  }

  return sysclockfreq;
 802306c:	69bb      	ldr	r3, [r7, #24]
}
 802306e:	4618      	mov	r0, r3
 8023070:	3724      	adds	r7, #36	; 0x24
 8023072:	46bd      	mov	sp, r7
 8023074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023078:	4770      	bx	lr
 802307a:	bf00      	nop
 802307c:	58024400 	.word	0x58024400
 8023080:	03d09000 	.word	0x03d09000
 8023084:	003d0900 	.word	0x003d0900
 8023088:	017d7840 	.word	0x017d7840
 802308c:	46000000 	.word	0x46000000
 8023090:	4c742400 	.word	0x4c742400
 8023094:	4a742400 	.word	0x4a742400
 8023098:	4bbebc20 	.word	0x4bbebc20

0802309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802309c:	b580      	push	{r7, lr}
 802309e:	b082      	sub	sp, #8
 80230a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80230a2:	f7ff fe81 	bl	8022da8 <HAL_RCC_GetSysClockFreq>
 80230a6:	4602      	mov	r2, r0
 80230a8:	4b10      	ldr	r3, [pc, #64]	; (80230ec <HAL_RCC_GetHCLKFreq+0x50>)
 80230aa:	699b      	ldr	r3, [r3, #24]
 80230ac:	0a1b      	lsrs	r3, r3, #8
 80230ae:	f003 030f 	and.w	r3, r3, #15
 80230b2:	490f      	ldr	r1, [pc, #60]	; (80230f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80230b4:	5ccb      	ldrb	r3, [r1, r3]
 80230b6:	f003 031f 	and.w	r3, r3, #31
 80230ba:	fa22 f303 	lsr.w	r3, r2, r3
 80230be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80230c0:	4b0a      	ldr	r3, [pc, #40]	; (80230ec <HAL_RCC_GetHCLKFreq+0x50>)
 80230c2:	699b      	ldr	r3, [r3, #24]
 80230c4:	f003 030f 	and.w	r3, r3, #15
 80230c8:	4a09      	ldr	r2, [pc, #36]	; (80230f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80230ca:	5cd3      	ldrb	r3, [r2, r3]
 80230cc:	f003 031f 	and.w	r3, r3, #31
 80230d0:	687a      	ldr	r2, [r7, #4]
 80230d2:	fa22 f303 	lsr.w	r3, r2, r3
 80230d6:	4a07      	ldr	r2, [pc, #28]	; (80230f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80230d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80230da:	4a07      	ldr	r2, [pc, #28]	; (80230f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80230dc:	687b      	ldr	r3, [r7, #4]
 80230de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80230e0:	4b04      	ldr	r3, [pc, #16]	; (80230f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80230e2:	681b      	ldr	r3, [r3, #0]
}
 80230e4:	4618      	mov	r0, r3
 80230e6:	3708      	adds	r7, #8
 80230e8:	46bd      	mov	sp, r7
 80230ea:	bd80      	pop	{r7, pc}
 80230ec:	58024400 	.word	0x58024400
 80230f0:	08026f38 	.word	0x08026f38
 80230f4:	20000004 	.word	0x20000004
 80230f8:	20000000 	.word	0x20000000

080230fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80230fc:	b580      	push	{r7, lr}
 80230fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8023100:	f7ff ffcc 	bl	802309c <HAL_RCC_GetHCLKFreq>
 8023104:	4602      	mov	r2, r0
 8023106:	4b06      	ldr	r3, [pc, #24]	; (8023120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8023108:	69db      	ldr	r3, [r3, #28]
 802310a:	091b      	lsrs	r3, r3, #4
 802310c:	f003 0307 	and.w	r3, r3, #7
 8023110:	4904      	ldr	r1, [pc, #16]	; (8023124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8023112:	5ccb      	ldrb	r3, [r1, r3]
 8023114:	f003 031f 	and.w	r3, r3, #31
 8023118:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 802311c:	4618      	mov	r0, r3
 802311e:	bd80      	pop	{r7, pc}
 8023120:	58024400 	.word	0x58024400
 8023124:	08026f38 	.word	0x08026f38

08023128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8023128:	b580      	push	{r7, lr}
 802312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 802312c:	f7ff ffb6 	bl	802309c <HAL_RCC_GetHCLKFreq>
 8023130:	4602      	mov	r2, r0
 8023132:	4b06      	ldr	r3, [pc, #24]	; (802314c <HAL_RCC_GetPCLK2Freq+0x24>)
 8023134:	69db      	ldr	r3, [r3, #28]
 8023136:	0a1b      	lsrs	r3, r3, #8
 8023138:	f003 0307 	and.w	r3, r3, #7
 802313c:	4904      	ldr	r1, [pc, #16]	; (8023150 <HAL_RCC_GetPCLK2Freq+0x28>)
 802313e:	5ccb      	ldrb	r3, [r1, r3]
 8023140:	f003 031f 	and.w	r3, r3, #31
 8023144:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8023148:	4618      	mov	r0, r3
 802314a:	bd80      	pop	{r7, pc}
 802314c:	58024400 	.word	0x58024400
 8023150:	08026f38 	.word	0x08026f38

08023154 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8023154:	b580      	push	{r7, lr}
 8023156:	b086      	sub	sp, #24
 8023158:	af00      	add	r7, sp, #0
 802315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 802315c:	2300      	movs	r3, #0
 802315e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8023160:	2300      	movs	r3, #0
 8023162:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	681b      	ldr	r3, [r3, #0]
 8023168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802316c:	2b00      	cmp	r3, #0
 802316e:	d03f      	beq.n	80231f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023174:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8023178:	d02a      	beq.n	80231d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 802317a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 802317e:	d824      	bhi.n	80231ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8023180:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8023184:	d018      	beq.n	80231b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8023186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802318a:	d81e      	bhi.n	80231ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 802318c:	2b00      	cmp	r3, #0
 802318e:	d003      	beq.n	8023198 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8023190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8023194:	d007      	beq.n	80231a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8023196:	e018      	b.n	80231ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023198:	4bab      	ldr	r3, [pc, #684]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 802319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802319c:	4aaa      	ldr	r2, [pc, #680]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 802319e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80231a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80231a4:	e015      	b.n	80231d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80231a6:	687b      	ldr	r3, [r7, #4]
 80231a8:	3304      	adds	r3, #4
 80231aa:	2102      	movs	r1, #2
 80231ac:	4618      	mov	r0, r3
 80231ae:	f001 f9cf 	bl	8024550 <RCCEx_PLL2_Config>
 80231b2:	4603      	mov	r3, r0
 80231b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80231b6:	e00c      	b.n	80231d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	3324      	adds	r3, #36	; 0x24
 80231bc:	2102      	movs	r1, #2
 80231be:	4618      	mov	r0, r3
 80231c0:	f001 fa78 	bl	80246b4 <RCCEx_PLL3_Config>
 80231c4:	4603      	mov	r3, r0
 80231c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80231c8:	e003      	b.n	80231d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80231ca:	2301      	movs	r3, #1
 80231cc:	75fb      	strb	r3, [r7, #23]
      break;
 80231ce:	e000      	b.n	80231d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80231d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80231d2:	7dfb      	ldrb	r3, [r7, #23]
 80231d4:	2b00      	cmp	r3, #0
 80231d6:	d109      	bne.n	80231ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80231d8:	4b9b      	ldr	r3, [pc, #620]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80231da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80231dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80231e0:	687b      	ldr	r3, [r7, #4]
 80231e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80231e4:	4998      	ldr	r1, [pc, #608]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80231e6:	4313      	orrs	r3, r2
 80231e8:	650b      	str	r3, [r1, #80]	; 0x50
 80231ea:	e001      	b.n	80231f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80231ec:	7dfb      	ldrb	r3, [r7, #23]
 80231ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80231f0:	687b      	ldr	r3, [r7, #4]
 80231f2:	681b      	ldr	r3, [r3, #0]
 80231f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80231f8:	2b00      	cmp	r3, #0
 80231fa:	d03d      	beq.n	8023278 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80231fc:	687b      	ldr	r3, [r7, #4]
 80231fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023200:	2b04      	cmp	r3, #4
 8023202:	d826      	bhi.n	8023252 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8023204:	a201      	add	r2, pc, #4	; (adr r2, 802320c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8023206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802320a:	bf00      	nop
 802320c:	08023221 	.word	0x08023221
 8023210:	0802322f 	.word	0x0802322f
 8023214:	08023241 	.word	0x08023241
 8023218:	08023259 	.word	0x08023259
 802321c:	08023259 	.word	0x08023259
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023220:	4b89      	ldr	r3, [pc, #548]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8023222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023224:	4a88      	ldr	r2, [pc, #544]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8023226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802322a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 802322c:	e015      	b.n	802325a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	3304      	adds	r3, #4
 8023232:	2100      	movs	r1, #0
 8023234:	4618      	mov	r0, r3
 8023236:	f001 f98b 	bl	8024550 <RCCEx_PLL2_Config>
 802323a:	4603      	mov	r3, r0
 802323c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 802323e:	e00c      	b.n	802325a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8023240:	687b      	ldr	r3, [r7, #4]
 8023242:	3324      	adds	r3, #36	; 0x24
 8023244:	2100      	movs	r1, #0
 8023246:	4618      	mov	r0, r3
 8023248:	f001 fa34 	bl	80246b4 <RCCEx_PLL3_Config>
 802324c:	4603      	mov	r3, r0
 802324e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8023250:	e003      	b.n	802325a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023252:	2301      	movs	r3, #1
 8023254:	75fb      	strb	r3, [r7, #23]
      break;
 8023256:	e000      	b.n	802325a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8023258:	bf00      	nop
    }

    if(ret == HAL_OK)
 802325a:	7dfb      	ldrb	r3, [r7, #23]
 802325c:	2b00      	cmp	r3, #0
 802325e:	d109      	bne.n	8023274 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8023260:	4b79      	ldr	r3, [pc, #484]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8023262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023264:	f023 0207 	bic.w	r2, r3, #7
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802326c:	4976      	ldr	r1, [pc, #472]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 802326e:	4313      	orrs	r3, r2
 8023270:	650b      	str	r3, [r1, #80]	; 0x50
 8023272:	e001      	b.n	8023278 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023274:	7dfb      	ldrb	r3, [r7, #23]
 8023276:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8023278:	687b      	ldr	r3, [r7, #4]
 802327a:	681b      	ldr	r3, [r3, #0]
 802327c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8023280:	2b00      	cmp	r3, #0
 8023282:	d042      	beq.n	802330a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8023284:	687b      	ldr	r3, [r7, #4]
 8023286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802328c:	d02b      	beq.n	80232e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 802328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023292:	d825      	bhi.n	80232e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8023294:	2bc0      	cmp	r3, #192	; 0xc0
 8023296:	d028      	beq.n	80232ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8023298:	2bc0      	cmp	r3, #192	; 0xc0
 802329a:	d821      	bhi.n	80232e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 802329c:	2b80      	cmp	r3, #128	; 0x80
 802329e:	d016      	beq.n	80232ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80232a0:	2b80      	cmp	r3, #128	; 0x80
 80232a2:	d81d      	bhi.n	80232e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	d002      	beq.n	80232ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80232a8:	2b40      	cmp	r3, #64	; 0x40
 80232aa:	d007      	beq.n	80232bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80232ac:	e018      	b.n	80232e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80232ae:	4b66      	ldr	r3, [pc, #408]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80232b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80232b2:	4a65      	ldr	r2, [pc, #404]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80232b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80232b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80232ba:	e017      	b.n	80232ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80232bc:	687b      	ldr	r3, [r7, #4]
 80232be:	3304      	adds	r3, #4
 80232c0:	2100      	movs	r1, #0
 80232c2:	4618      	mov	r0, r3
 80232c4:	f001 f944 	bl	8024550 <RCCEx_PLL2_Config>
 80232c8:	4603      	mov	r3, r0
 80232ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80232cc:	e00e      	b.n	80232ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80232ce:	687b      	ldr	r3, [r7, #4]
 80232d0:	3324      	adds	r3, #36	; 0x24
 80232d2:	2100      	movs	r1, #0
 80232d4:	4618      	mov	r0, r3
 80232d6:	f001 f9ed 	bl	80246b4 <RCCEx_PLL3_Config>
 80232da:	4603      	mov	r3, r0
 80232dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80232de:	e005      	b.n	80232ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80232e0:	2301      	movs	r3, #1
 80232e2:	75fb      	strb	r3, [r7, #23]
      break;
 80232e4:	e002      	b.n	80232ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80232e6:	bf00      	nop
 80232e8:	e000      	b.n	80232ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80232ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80232ec:	7dfb      	ldrb	r3, [r7, #23]
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	d109      	bne.n	8023306 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80232f2:	4b55      	ldr	r3, [pc, #340]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80232f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80232f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80232fe:	4952      	ldr	r1, [pc, #328]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8023300:	4313      	orrs	r3, r2
 8023302:	650b      	str	r3, [r1, #80]	; 0x50
 8023304:	e001      	b.n	802330a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023306:	7dfb      	ldrb	r3, [r7, #23]
 8023308:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	681b      	ldr	r3, [r3, #0]
 802330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023312:	2b00      	cmp	r3, #0
 8023314:	d049      	beq.n	80233aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8023316:	687b      	ldr	r3, [r7, #4]
 8023318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802331c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8023320:	d030      	beq.n	8023384 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8023322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8023326:	d82a      	bhi.n	802337e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8023328:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 802332c:	d02c      	beq.n	8023388 <HAL_RCCEx_PeriphCLKConfig+0x234>
 802332e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8023332:	d824      	bhi.n	802337e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8023334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8023338:	d018      	beq.n	802336c <HAL_RCCEx_PeriphCLKConfig+0x218>
 802333a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802333e:	d81e      	bhi.n	802337e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8023340:	2b00      	cmp	r3, #0
 8023342:	d003      	beq.n	802334c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8023344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8023348:	d007      	beq.n	802335a <HAL_RCCEx_PeriphCLKConfig+0x206>
 802334a:	e018      	b.n	802337e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802334c:	4b3e      	ldr	r3, [pc, #248]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 802334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023350:	4a3d      	ldr	r2, [pc, #244]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8023352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8023358:	e017      	b.n	802338a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	3304      	adds	r3, #4
 802335e:	2100      	movs	r1, #0
 8023360:	4618      	mov	r0, r3
 8023362:	f001 f8f5 	bl	8024550 <RCCEx_PLL2_Config>
 8023366:	4603      	mov	r3, r0
 8023368:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 802336a:	e00e      	b.n	802338a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 802336c:	687b      	ldr	r3, [r7, #4]
 802336e:	3324      	adds	r3, #36	; 0x24
 8023370:	2100      	movs	r1, #0
 8023372:	4618      	mov	r0, r3
 8023374:	f001 f99e 	bl	80246b4 <RCCEx_PLL3_Config>
 8023378:	4603      	mov	r3, r0
 802337a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 802337c:	e005      	b.n	802338a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 802337e:	2301      	movs	r3, #1
 8023380:	75fb      	strb	r3, [r7, #23]
      break;
 8023382:	e002      	b.n	802338a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8023384:	bf00      	nop
 8023386:	e000      	b.n	802338a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8023388:	bf00      	nop
    }

    if(ret == HAL_OK)
 802338a:	7dfb      	ldrb	r3, [r7, #23]
 802338c:	2b00      	cmp	r3, #0
 802338e:	d10a      	bne.n	80233a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8023390:	4b2d      	ldr	r3, [pc, #180]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8023392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023394:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802339e:	492a      	ldr	r1, [pc, #168]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80233a0:	4313      	orrs	r3, r2
 80233a2:	658b      	str	r3, [r1, #88]	; 0x58
 80233a4:	e001      	b.n	80233aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80233a6:	7dfb      	ldrb	r3, [r7, #23]
 80233a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	681b      	ldr	r3, [r3, #0]
 80233ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d04c      	beq.n	8023450 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80233b6:	687b      	ldr	r3, [r7, #4]
 80233b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80233bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80233c0:	d030      	beq.n	8023424 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80233c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80233c6:	d82a      	bhi.n	802341e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80233c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80233cc:	d02c      	beq.n	8023428 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80233ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80233d2:	d824      	bhi.n	802341e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80233d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80233d8:	d018      	beq.n	802340c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80233da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80233de:	d81e      	bhi.n	802341e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d003      	beq.n	80233ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80233e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80233e8:	d007      	beq.n	80233fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80233ea:	e018      	b.n	802341e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80233ec:	4b16      	ldr	r3, [pc, #88]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80233ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80233f0:	4a15      	ldr	r2, [pc, #84]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80233f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80233f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80233f8:	e017      	b.n	802342a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80233fa:	687b      	ldr	r3, [r7, #4]
 80233fc:	3304      	adds	r3, #4
 80233fe:	2100      	movs	r1, #0
 8023400:	4618      	mov	r0, r3
 8023402:	f001 f8a5 	bl	8024550 <RCCEx_PLL2_Config>
 8023406:	4603      	mov	r3, r0
 8023408:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 802340a:	e00e      	b.n	802342a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	3324      	adds	r3, #36	; 0x24
 8023410:	2100      	movs	r1, #0
 8023412:	4618      	mov	r0, r3
 8023414:	f001 f94e 	bl	80246b4 <RCCEx_PLL3_Config>
 8023418:	4603      	mov	r3, r0
 802341a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 802341c:	e005      	b.n	802342a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 802341e:	2301      	movs	r3, #1
 8023420:	75fb      	strb	r3, [r7, #23]
      break;
 8023422:	e002      	b.n	802342a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8023424:	bf00      	nop
 8023426:	e000      	b.n	802342a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8023428:	bf00      	nop
    }

    if(ret == HAL_OK)
 802342a:	7dfb      	ldrb	r3, [r7, #23]
 802342c:	2b00      	cmp	r3, #0
 802342e:	d10d      	bne.n	802344c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8023430:	4b05      	ldr	r3, [pc, #20]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8023432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023434:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8023438:	687b      	ldr	r3, [r7, #4]
 802343a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 802343e:	4902      	ldr	r1, [pc, #8]	; (8023448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8023440:	4313      	orrs	r3, r2
 8023442:	658b      	str	r3, [r1, #88]	; 0x58
 8023444:	e004      	b.n	8023450 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8023446:	bf00      	nop
 8023448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802344c:	7dfb      	ldrb	r3, [r7, #23]
 802344e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8023450:	687b      	ldr	r3, [r7, #4]
 8023452:	681b      	ldr	r3, [r3, #0]
 8023454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023458:	2b00      	cmp	r3, #0
 802345a:	d032      	beq.n	80234c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 802345c:	687b      	ldr	r3, [r7, #4]
 802345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023460:	2b30      	cmp	r3, #48	; 0x30
 8023462:	d01c      	beq.n	802349e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8023464:	2b30      	cmp	r3, #48	; 0x30
 8023466:	d817      	bhi.n	8023498 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8023468:	2b20      	cmp	r3, #32
 802346a:	d00c      	beq.n	8023486 <HAL_RCCEx_PeriphCLKConfig+0x332>
 802346c:	2b20      	cmp	r3, #32
 802346e:	d813      	bhi.n	8023498 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8023470:	2b00      	cmp	r3, #0
 8023472:	d016      	beq.n	80234a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8023474:	2b10      	cmp	r3, #16
 8023476:	d10f      	bne.n	8023498 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023478:	4baf      	ldr	r3, [pc, #700]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 802347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802347c:	4aae      	ldr	r2, [pc, #696]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 802347e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8023484:	e00e      	b.n	80234a4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8023486:	687b      	ldr	r3, [r7, #4]
 8023488:	3304      	adds	r3, #4
 802348a:	2102      	movs	r1, #2
 802348c:	4618      	mov	r0, r3
 802348e:	f001 f85f 	bl	8024550 <RCCEx_PLL2_Config>
 8023492:	4603      	mov	r3, r0
 8023494:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8023496:	e005      	b.n	80234a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8023498:	2301      	movs	r3, #1
 802349a:	75fb      	strb	r3, [r7, #23]
      break;
 802349c:	e002      	b.n	80234a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 802349e:	bf00      	nop
 80234a0:	e000      	b.n	80234a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80234a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80234a4:	7dfb      	ldrb	r3, [r7, #23]
 80234a6:	2b00      	cmp	r3, #0
 80234a8:	d109      	bne.n	80234be <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80234aa:	4ba3      	ldr	r3, [pc, #652]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80234ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80234ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80234b2:	687b      	ldr	r3, [r7, #4]
 80234b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80234b6:	49a0      	ldr	r1, [pc, #640]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80234b8:	4313      	orrs	r3, r2
 80234ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80234bc:	e001      	b.n	80234c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80234be:	7dfb      	ldrb	r3, [r7, #23]
 80234c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80234c2:	687b      	ldr	r3, [r7, #4]
 80234c4:	681b      	ldr	r3, [r3, #0]
 80234c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d047      	beq.n	802355e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80234d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80234d6:	d030      	beq.n	802353a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80234d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80234dc:	d82a      	bhi.n	8023534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80234de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80234e2:	d02c      	beq.n	802353e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80234e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80234e8:	d824      	bhi.n	8023534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80234ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80234ee:	d018      	beq.n	8023522 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80234f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80234f4:	d81e      	bhi.n	8023534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80234f6:	2b00      	cmp	r3, #0
 80234f8:	d003      	beq.n	8023502 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80234fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80234fe:	d007      	beq.n	8023510 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8023500:	e018      	b.n	8023534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023502:	4b8d      	ldr	r3, [pc, #564]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8023504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023506:	4a8c      	ldr	r2, [pc, #560]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8023508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802350c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 802350e:	e017      	b.n	8023540 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	3304      	adds	r3, #4
 8023514:	2100      	movs	r1, #0
 8023516:	4618      	mov	r0, r3
 8023518:	f001 f81a 	bl	8024550 <RCCEx_PLL2_Config>
 802351c:	4603      	mov	r3, r0
 802351e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8023520:	e00e      	b.n	8023540 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	3324      	adds	r3, #36	; 0x24
 8023526:	2100      	movs	r1, #0
 8023528:	4618      	mov	r0, r3
 802352a:	f001 f8c3 	bl	80246b4 <RCCEx_PLL3_Config>
 802352e:	4603      	mov	r3, r0
 8023530:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8023532:	e005      	b.n	8023540 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023534:	2301      	movs	r3, #1
 8023536:	75fb      	strb	r3, [r7, #23]
      break;
 8023538:	e002      	b.n	8023540 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 802353a:	bf00      	nop
 802353c:	e000      	b.n	8023540 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 802353e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023540:	7dfb      	ldrb	r3, [r7, #23]
 8023542:	2b00      	cmp	r3, #0
 8023544:	d109      	bne.n	802355a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8023546:	4b7c      	ldr	r3, [pc, #496]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8023548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802354a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 802354e:	687b      	ldr	r3, [r7, #4]
 8023550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023552:	4979      	ldr	r1, [pc, #484]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8023554:	4313      	orrs	r3, r2
 8023556:	650b      	str	r3, [r1, #80]	; 0x50
 8023558:	e001      	b.n	802355e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802355a:	7dfb      	ldrb	r3, [r7, #23]
 802355c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 802355e:	687b      	ldr	r3, [r7, #4]
 8023560:	681b      	ldr	r3, [r3, #0]
 8023562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8023566:	2b00      	cmp	r3, #0
 8023568:	d049      	beq.n	80235fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802356e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8023572:	d02e      	beq.n	80235d2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8023574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8023578:	d828      	bhi.n	80235cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 802357a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802357e:	d02a      	beq.n	80235d6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8023580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8023584:	d822      	bhi.n	80235cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8023586:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802358a:	d026      	beq.n	80235da <HAL_RCCEx_PeriphCLKConfig+0x486>
 802358c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8023590:	d81c      	bhi.n	80235cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8023592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8023596:	d010      	beq.n	80235ba <HAL_RCCEx_PeriphCLKConfig+0x466>
 8023598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802359c:	d816      	bhi.n	80235cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 802359e:	2b00      	cmp	r3, #0
 80235a0:	d01d      	beq.n	80235de <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80235a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80235a6:	d111      	bne.n	80235cc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80235a8:	687b      	ldr	r3, [r7, #4]
 80235aa:	3304      	adds	r3, #4
 80235ac:	2101      	movs	r1, #1
 80235ae:	4618      	mov	r0, r3
 80235b0:	f000 ffce 	bl	8024550 <RCCEx_PLL2_Config>
 80235b4:	4603      	mov	r3, r0
 80235b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80235b8:	e012      	b.n	80235e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	3324      	adds	r3, #36	; 0x24
 80235be:	2101      	movs	r1, #1
 80235c0:	4618      	mov	r0, r3
 80235c2:	f001 f877 	bl	80246b4 <RCCEx_PLL3_Config>
 80235c6:	4603      	mov	r3, r0
 80235c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80235ca:	e009      	b.n	80235e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80235cc:	2301      	movs	r3, #1
 80235ce:	75fb      	strb	r3, [r7, #23]
      break;
 80235d0:	e006      	b.n	80235e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80235d2:	bf00      	nop
 80235d4:	e004      	b.n	80235e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80235d6:	bf00      	nop
 80235d8:	e002      	b.n	80235e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80235da:	bf00      	nop
 80235dc:	e000      	b.n	80235e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80235de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80235e0:	7dfb      	ldrb	r3, [r7, #23]
 80235e2:	2b00      	cmp	r3, #0
 80235e4:	d109      	bne.n	80235fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80235e6:	4b54      	ldr	r3, [pc, #336]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80235e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80235ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80235f2:	4951      	ldr	r1, [pc, #324]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80235f4:	4313      	orrs	r3, r2
 80235f6:	650b      	str	r3, [r1, #80]	; 0x50
 80235f8:	e001      	b.n	80235fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80235fa:	7dfb      	ldrb	r3, [r7, #23]
 80235fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80235fe:	687b      	ldr	r3, [r7, #4]
 8023600:	681b      	ldr	r3, [r3, #0]
 8023602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023606:	2b00      	cmp	r3, #0
 8023608:	d04b      	beq.n	80236a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 802360a:	687b      	ldr	r3, [r7, #4]
 802360c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8023610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8023614:	d02e      	beq.n	8023674 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8023616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802361a:	d828      	bhi.n	802366e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 802361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023620:	d02a      	beq.n	8023678 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8023622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023626:	d822      	bhi.n	802366e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8023628:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 802362c:	d026      	beq.n	802367c <HAL_RCCEx_PeriphCLKConfig+0x528>
 802362e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8023632:	d81c      	bhi.n	802366e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8023634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8023638:	d010      	beq.n	802365c <HAL_RCCEx_PeriphCLKConfig+0x508>
 802363a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802363e:	d816      	bhi.n	802366e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8023640:	2b00      	cmp	r3, #0
 8023642:	d01d      	beq.n	8023680 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8023644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8023648:	d111      	bne.n	802366e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 802364a:	687b      	ldr	r3, [r7, #4]
 802364c:	3304      	adds	r3, #4
 802364e:	2101      	movs	r1, #1
 8023650:	4618      	mov	r0, r3
 8023652:	f000 ff7d 	bl	8024550 <RCCEx_PLL2_Config>
 8023656:	4603      	mov	r3, r0
 8023658:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 802365a:	e012      	b.n	8023682 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 802365c:	687b      	ldr	r3, [r7, #4]
 802365e:	3324      	adds	r3, #36	; 0x24
 8023660:	2101      	movs	r1, #1
 8023662:	4618      	mov	r0, r3
 8023664:	f001 f826 	bl	80246b4 <RCCEx_PLL3_Config>
 8023668:	4603      	mov	r3, r0
 802366a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 802366c:	e009      	b.n	8023682 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 802366e:	2301      	movs	r3, #1
 8023670:	75fb      	strb	r3, [r7, #23]
      break;
 8023672:	e006      	b.n	8023682 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8023674:	bf00      	nop
 8023676:	e004      	b.n	8023682 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8023678:	bf00      	nop
 802367a:	e002      	b.n	8023682 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 802367c:	bf00      	nop
 802367e:	e000      	b.n	8023682 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8023680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023682:	7dfb      	ldrb	r3, [r7, #23]
 8023684:	2b00      	cmp	r3, #0
 8023686:	d10a      	bne.n	802369e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8023688:	4b2b      	ldr	r3, [pc, #172]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 802368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802368c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8023696:	4928      	ldr	r1, [pc, #160]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8023698:	4313      	orrs	r3, r2
 802369a:	658b      	str	r3, [r1, #88]	; 0x58
 802369c:	e001      	b.n	80236a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802369e:	7dfb      	ldrb	r3, [r7, #23]
 80236a0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80236a2:	687b      	ldr	r3, [r7, #4]
 80236a4:	681b      	ldr	r3, [r3, #0]
 80236a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d02f      	beq.n	802370e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80236ae:	687b      	ldr	r3, [r7, #4]
 80236b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80236b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80236b6:	d00e      	beq.n	80236d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80236b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80236bc:	d814      	bhi.n	80236e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80236be:	2b00      	cmp	r3, #0
 80236c0:	d015      	beq.n	80236ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80236c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80236c6:	d10f      	bne.n	80236e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80236c8:	4b1b      	ldr	r3, [pc, #108]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80236ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80236cc:	4a1a      	ldr	r2, [pc, #104]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80236ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80236d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80236d4:	e00c      	b.n	80236f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	3304      	adds	r3, #4
 80236da:	2101      	movs	r1, #1
 80236dc:	4618      	mov	r0, r3
 80236de:	f000 ff37 	bl	8024550 <RCCEx_PLL2_Config>
 80236e2:	4603      	mov	r3, r0
 80236e4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80236e6:	e003      	b.n	80236f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80236e8:	2301      	movs	r3, #1
 80236ea:	75fb      	strb	r3, [r7, #23]
      break;
 80236ec:	e000      	b.n	80236f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80236ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80236f0:	7dfb      	ldrb	r3, [r7, #23]
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	d109      	bne.n	802370a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80236f6:	4b10      	ldr	r3, [pc, #64]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80236f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80236fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023702:	490d      	ldr	r1, [pc, #52]	; (8023738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8023704:	4313      	orrs	r3, r2
 8023706:	650b      	str	r3, [r1, #80]	; 0x50
 8023708:	e001      	b.n	802370e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802370a:	7dfb      	ldrb	r3, [r7, #23]
 802370c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 802370e:	687b      	ldr	r3, [r7, #4]
 8023710:	681b      	ldr	r3, [r3, #0]
 8023712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023716:	2b00      	cmp	r3, #0
 8023718:	d033      	beq.n	8023782 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 802371a:	687b      	ldr	r3, [r7, #4]
 802371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802371e:	2b03      	cmp	r3, #3
 8023720:	d81c      	bhi.n	802375c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8023722:	a201      	add	r2, pc, #4	; (adr r2, 8023728 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8023724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023728:	08023763 	.word	0x08023763
 802372c:	0802373d 	.word	0x0802373d
 8023730:	0802374b 	.word	0x0802374b
 8023734:	08023763 	.word	0x08023763
 8023738:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802373c:	4bb8      	ldr	r3, [pc, #736]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 802373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023740:	4ab7      	ldr	r2, [pc, #732]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8023748:	e00c      	b.n	8023764 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	3304      	adds	r3, #4
 802374e:	2102      	movs	r1, #2
 8023750:	4618      	mov	r0, r3
 8023752:	f000 fefd 	bl	8024550 <RCCEx_PLL2_Config>
 8023756:	4603      	mov	r3, r0
 8023758:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 802375a:	e003      	b.n	8023764 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 802375c:	2301      	movs	r3, #1
 802375e:	75fb      	strb	r3, [r7, #23]
      break;
 8023760:	e000      	b.n	8023764 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8023762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023764:	7dfb      	ldrb	r3, [r7, #23]
 8023766:	2b00      	cmp	r3, #0
 8023768:	d109      	bne.n	802377e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802376a:	4bad      	ldr	r3, [pc, #692]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 802376c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802376e:	f023 0203 	bic.w	r2, r3, #3
 8023772:	687b      	ldr	r3, [r7, #4]
 8023774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023776:	49aa      	ldr	r1, [pc, #680]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023778:	4313      	orrs	r3, r2
 802377a:	64cb      	str	r3, [r1, #76]	; 0x4c
 802377c:	e001      	b.n	8023782 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802377e:	7dfb      	ldrb	r3, [r7, #23]
 8023780:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8023782:	687b      	ldr	r3, [r7, #4]
 8023784:	681b      	ldr	r3, [r3, #0]
 8023786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802378a:	2b00      	cmp	r3, #0
 802378c:	f000 8086 	beq.w	802389c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8023790:	4ba4      	ldr	r3, [pc, #656]	; (8023a24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8023792:	681b      	ldr	r3, [r3, #0]
 8023794:	4aa3      	ldr	r2, [pc, #652]	; (8023a24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8023796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802379a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802379c:	f7fd fdd6 	bl	802134c <HAL_GetTick>
 80237a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80237a2:	e009      	b.n	80237b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80237a4:	f7fd fdd2 	bl	802134c <HAL_GetTick>
 80237a8:	4602      	mov	r2, r0
 80237aa:	693b      	ldr	r3, [r7, #16]
 80237ac:	1ad3      	subs	r3, r2, r3
 80237ae:	2b64      	cmp	r3, #100	; 0x64
 80237b0:	d902      	bls.n	80237b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80237b2:	2303      	movs	r3, #3
 80237b4:	75fb      	strb	r3, [r7, #23]
        break;
 80237b6:	e005      	b.n	80237c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80237b8:	4b9a      	ldr	r3, [pc, #616]	; (8023a24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80237ba:	681b      	ldr	r3, [r3, #0]
 80237bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80237c0:	2b00      	cmp	r3, #0
 80237c2:	d0ef      	beq.n	80237a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80237c4:	7dfb      	ldrb	r3, [r7, #23]
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	d166      	bne.n	8023898 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80237ca:	4b95      	ldr	r3, [pc, #596]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80237cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80237ce:	687b      	ldr	r3, [r7, #4]
 80237d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80237d4:	4053      	eors	r3, r2
 80237d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80237da:	2b00      	cmp	r3, #0
 80237dc:	d013      	beq.n	8023806 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80237de:	4b90      	ldr	r3, [pc, #576]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80237e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80237e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80237e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80237e8:	4b8d      	ldr	r3, [pc, #564]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80237ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80237ec:	4a8c      	ldr	r2, [pc, #560]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80237ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80237f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80237f4:	4b8a      	ldr	r3, [pc, #552]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80237f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80237f8:	4a89      	ldr	r2, [pc, #548]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80237fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80237fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8023800:	4a87      	ldr	r2, [pc, #540]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023802:	68fb      	ldr	r3, [r7, #12]
 8023804:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802380c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023810:	d115      	bne.n	802383e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023812:	f7fd fd9b 	bl	802134c <HAL_GetTick>
 8023816:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8023818:	e00b      	b.n	8023832 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802381a:	f7fd fd97 	bl	802134c <HAL_GetTick>
 802381e:	4602      	mov	r2, r0
 8023820:	693b      	ldr	r3, [r7, #16]
 8023822:	1ad3      	subs	r3, r2, r3
 8023824:	f241 3288 	movw	r2, #5000	; 0x1388
 8023828:	4293      	cmp	r3, r2
 802382a:	d902      	bls.n	8023832 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 802382c:	2303      	movs	r3, #3
 802382e:	75fb      	strb	r3, [r7, #23]
            break;
 8023830:	e005      	b.n	802383e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8023832:	4b7b      	ldr	r3, [pc, #492]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023836:	f003 0302 	and.w	r3, r3, #2
 802383a:	2b00      	cmp	r3, #0
 802383c:	d0ed      	beq.n	802381a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 802383e:	7dfb      	ldrb	r3, [r7, #23]
 8023840:	2b00      	cmp	r3, #0
 8023842:	d126      	bne.n	8023892 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8023844:	687b      	ldr	r3, [r7, #4]
 8023846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 802384a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802384e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8023852:	d10d      	bne.n	8023870 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8023854:	4b72      	ldr	r3, [pc, #456]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023856:	691b      	ldr	r3, [r3, #16]
 8023858:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 802385c:	687b      	ldr	r3, [r7, #4]
 802385e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8023862:	0919      	lsrs	r1, r3, #4
 8023864:	4b70      	ldr	r3, [pc, #448]	; (8023a28 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8023866:	400b      	ands	r3, r1
 8023868:	496d      	ldr	r1, [pc, #436]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 802386a:	4313      	orrs	r3, r2
 802386c:	610b      	str	r3, [r1, #16]
 802386e:	e005      	b.n	802387c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8023870:	4b6b      	ldr	r3, [pc, #428]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023872:	691b      	ldr	r3, [r3, #16]
 8023874:	4a6a      	ldr	r2, [pc, #424]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023876:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802387a:	6113      	str	r3, [r2, #16]
 802387c:	4b68      	ldr	r3, [pc, #416]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 802387e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8023880:	687b      	ldr	r3, [r7, #4]
 8023882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8023886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802388a:	4965      	ldr	r1, [pc, #404]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 802388c:	4313      	orrs	r3, r2
 802388e:	670b      	str	r3, [r1, #112]	; 0x70
 8023890:	e004      	b.n	802389c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8023892:	7dfb      	ldrb	r3, [r7, #23]
 8023894:	75bb      	strb	r3, [r7, #22]
 8023896:	e001      	b.n	802389c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023898:	7dfb      	ldrb	r3, [r7, #23]
 802389a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 802389c:	687b      	ldr	r3, [r7, #4]
 802389e:	681b      	ldr	r3, [r3, #0]
 80238a0:	f003 0301 	and.w	r3, r3, #1
 80238a4:	2b00      	cmp	r3, #0
 80238a6:	d07e      	beq.n	80239a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80238ac:	2b28      	cmp	r3, #40	; 0x28
 80238ae:	d867      	bhi.n	8023980 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80238b0:	a201      	add	r2, pc, #4	; (adr r2, 80238b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80238b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80238b6:	bf00      	nop
 80238b8:	08023987 	.word	0x08023987
 80238bc:	08023981 	.word	0x08023981
 80238c0:	08023981 	.word	0x08023981
 80238c4:	08023981 	.word	0x08023981
 80238c8:	08023981 	.word	0x08023981
 80238cc:	08023981 	.word	0x08023981
 80238d0:	08023981 	.word	0x08023981
 80238d4:	08023981 	.word	0x08023981
 80238d8:	0802395d 	.word	0x0802395d
 80238dc:	08023981 	.word	0x08023981
 80238e0:	08023981 	.word	0x08023981
 80238e4:	08023981 	.word	0x08023981
 80238e8:	08023981 	.word	0x08023981
 80238ec:	08023981 	.word	0x08023981
 80238f0:	08023981 	.word	0x08023981
 80238f4:	08023981 	.word	0x08023981
 80238f8:	0802396f 	.word	0x0802396f
 80238fc:	08023981 	.word	0x08023981
 8023900:	08023981 	.word	0x08023981
 8023904:	08023981 	.word	0x08023981
 8023908:	08023981 	.word	0x08023981
 802390c:	08023981 	.word	0x08023981
 8023910:	08023981 	.word	0x08023981
 8023914:	08023981 	.word	0x08023981
 8023918:	08023987 	.word	0x08023987
 802391c:	08023981 	.word	0x08023981
 8023920:	08023981 	.word	0x08023981
 8023924:	08023981 	.word	0x08023981
 8023928:	08023981 	.word	0x08023981
 802392c:	08023981 	.word	0x08023981
 8023930:	08023981 	.word	0x08023981
 8023934:	08023981 	.word	0x08023981
 8023938:	08023987 	.word	0x08023987
 802393c:	08023981 	.word	0x08023981
 8023940:	08023981 	.word	0x08023981
 8023944:	08023981 	.word	0x08023981
 8023948:	08023981 	.word	0x08023981
 802394c:	08023981 	.word	0x08023981
 8023950:	08023981 	.word	0x08023981
 8023954:	08023981 	.word	0x08023981
 8023958:	08023987 	.word	0x08023987
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 802395c:	687b      	ldr	r3, [r7, #4]
 802395e:	3304      	adds	r3, #4
 8023960:	2101      	movs	r1, #1
 8023962:	4618      	mov	r0, r3
 8023964:	f000 fdf4 	bl	8024550 <RCCEx_PLL2_Config>
 8023968:	4603      	mov	r3, r0
 802396a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 802396c:	e00c      	b.n	8023988 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 802396e:	687b      	ldr	r3, [r7, #4]
 8023970:	3324      	adds	r3, #36	; 0x24
 8023972:	2101      	movs	r1, #1
 8023974:	4618      	mov	r0, r3
 8023976:	f000 fe9d 	bl	80246b4 <RCCEx_PLL3_Config>
 802397a:	4603      	mov	r3, r0
 802397c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 802397e:	e003      	b.n	8023988 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023980:	2301      	movs	r3, #1
 8023982:	75fb      	strb	r3, [r7, #23]
      break;
 8023984:	e000      	b.n	8023988 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8023986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023988:	7dfb      	ldrb	r3, [r7, #23]
 802398a:	2b00      	cmp	r3, #0
 802398c:	d109      	bne.n	80239a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 802398e:	4b24      	ldr	r3, [pc, #144]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023992:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8023996:	687b      	ldr	r3, [r7, #4]
 8023998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802399a:	4921      	ldr	r1, [pc, #132]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 802399c:	4313      	orrs	r3, r2
 802399e:	654b      	str	r3, [r1, #84]	; 0x54
 80239a0:	e001      	b.n	80239a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80239a2:	7dfb      	ldrb	r3, [r7, #23]
 80239a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	681b      	ldr	r3, [r3, #0]
 80239aa:	f003 0302 	and.w	r3, r3, #2
 80239ae:	2b00      	cmp	r3, #0
 80239b0:	d03e      	beq.n	8023a30 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80239b6:	2b05      	cmp	r3, #5
 80239b8:	d820      	bhi.n	80239fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80239ba:	a201      	add	r2, pc, #4	; (adr r2, 80239c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80239bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80239c0:	08023a03 	.word	0x08023a03
 80239c4:	080239d9 	.word	0x080239d9
 80239c8:	080239eb 	.word	0x080239eb
 80239cc:	08023a03 	.word	0x08023a03
 80239d0:	08023a03 	.word	0x08023a03
 80239d4:	08023a03 	.word	0x08023a03
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	3304      	adds	r3, #4
 80239dc:	2101      	movs	r1, #1
 80239de:	4618      	mov	r0, r3
 80239e0:	f000 fdb6 	bl	8024550 <RCCEx_PLL2_Config>
 80239e4:	4603      	mov	r3, r0
 80239e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80239e8:	e00c      	b.n	8023a04 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80239ea:	687b      	ldr	r3, [r7, #4]
 80239ec:	3324      	adds	r3, #36	; 0x24
 80239ee:	2101      	movs	r1, #1
 80239f0:	4618      	mov	r0, r3
 80239f2:	f000 fe5f 	bl	80246b4 <RCCEx_PLL3_Config>
 80239f6:	4603      	mov	r3, r0
 80239f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80239fa:	e003      	b.n	8023a04 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80239fc:	2301      	movs	r3, #1
 80239fe:	75fb      	strb	r3, [r7, #23]
      break;
 8023a00:	e000      	b.n	8023a04 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8023a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023a04:	7dfb      	ldrb	r3, [r7, #23]
 8023a06:	2b00      	cmp	r3, #0
 8023a08:	d110      	bne.n	8023a2c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8023a0a:	4b05      	ldr	r3, [pc, #20]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023a0e:	f023 0207 	bic.w	r2, r3, #7
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8023a16:	4902      	ldr	r1, [pc, #8]	; (8023a20 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8023a18:	4313      	orrs	r3, r2
 8023a1a:	654b      	str	r3, [r1, #84]	; 0x54
 8023a1c:	e008      	b.n	8023a30 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8023a1e:	bf00      	nop
 8023a20:	58024400 	.word	0x58024400
 8023a24:	58024800 	.word	0x58024800
 8023a28:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023a2c:	7dfb      	ldrb	r3, [r7, #23]
 8023a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	681b      	ldr	r3, [r3, #0]
 8023a34:	f003 0304 	and.w	r3, r3, #4
 8023a38:	2b00      	cmp	r3, #0
 8023a3a:	d039      	beq.n	8023ab0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8023a42:	2b05      	cmp	r3, #5
 8023a44:	d820      	bhi.n	8023a88 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8023a46:	a201      	add	r2, pc, #4	; (adr r2, 8023a4c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8023a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023a4c:	08023a8f 	.word	0x08023a8f
 8023a50:	08023a65 	.word	0x08023a65
 8023a54:	08023a77 	.word	0x08023a77
 8023a58:	08023a8f 	.word	0x08023a8f
 8023a5c:	08023a8f 	.word	0x08023a8f
 8023a60:	08023a8f 	.word	0x08023a8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	3304      	adds	r3, #4
 8023a68:	2101      	movs	r1, #1
 8023a6a:	4618      	mov	r0, r3
 8023a6c:	f000 fd70 	bl	8024550 <RCCEx_PLL2_Config>
 8023a70:	4603      	mov	r3, r0
 8023a72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8023a74:	e00c      	b.n	8023a90 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	3324      	adds	r3, #36	; 0x24
 8023a7a:	2101      	movs	r1, #1
 8023a7c:	4618      	mov	r0, r3
 8023a7e:	f000 fe19 	bl	80246b4 <RCCEx_PLL3_Config>
 8023a82:	4603      	mov	r3, r0
 8023a84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8023a86:	e003      	b.n	8023a90 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023a88:	2301      	movs	r3, #1
 8023a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8023a8c:	e000      	b.n	8023a90 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8023a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023a90:	7dfb      	ldrb	r3, [r7, #23]
 8023a92:	2b00      	cmp	r3, #0
 8023a94:	d10a      	bne.n	8023aac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8023a96:	4bb7      	ldr	r3, [pc, #732]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023a9a:	f023 0207 	bic.w	r2, r3, #7
 8023a9e:	687b      	ldr	r3, [r7, #4]
 8023aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8023aa4:	49b3      	ldr	r1, [pc, #716]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023aa6:	4313      	orrs	r3, r2
 8023aa8:	658b      	str	r3, [r1, #88]	; 0x58
 8023aaa:	e001      	b.n	8023ab0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023aac:	7dfb      	ldrb	r3, [r7, #23]
 8023aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	681b      	ldr	r3, [r3, #0]
 8023ab4:	f003 0320 	and.w	r3, r3, #32
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	d04b      	beq.n	8023b54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8023abc:	687b      	ldr	r3, [r7, #4]
 8023abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8023ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8023ac6:	d02e      	beq.n	8023b26 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8023ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8023acc:	d828      	bhi.n	8023b20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8023ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023ad2:	d02a      	beq.n	8023b2a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8023ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023ad8:	d822      	bhi.n	8023b20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8023ada:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8023ade:	d026      	beq.n	8023b2e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8023ae0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8023ae4:	d81c      	bhi.n	8023b20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8023ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8023aea:	d010      	beq.n	8023b0e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8023aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8023af0:	d816      	bhi.n	8023b20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8023af2:	2b00      	cmp	r3, #0
 8023af4:	d01d      	beq.n	8023b32 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8023af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8023afa:	d111      	bne.n	8023b20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8023afc:	687b      	ldr	r3, [r7, #4]
 8023afe:	3304      	adds	r3, #4
 8023b00:	2100      	movs	r1, #0
 8023b02:	4618      	mov	r0, r3
 8023b04:	f000 fd24 	bl	8024550 <RCCEx_PLL2_Config>
 8023b08:	4603      	mov	r3, r0
 8023b0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8023b0c:	e012      	b.n	8023b34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	3324      	adds	r3, #36	; 0x24
 8023b12:	2102      	movs	r1, #2
 8023b14:	4618      	mov	r0, r3
 8023b16:	f000 fdcd 	bl	80246b4 <RCCEx_PLL3_Config>
 8023b1a:	4603      	mov	r3, r0
 8023b1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8023b1e:	e009      	b.n	8023b34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023b20:	2301      	movs	r3, #1
 8023b22:	75fb      	strb	r3, [r7, #23]
      break;
 8023b24:	e006      	b.n	8023b34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8023b26:	bf00      	nop
 8023b28:	e004      	b.n	8023b34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8023b2a:	bf00      	nop
 8023b2c:	e002      	b.n	8023b34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8023b2e:	bf00      	nop
 8023b30:	e000      	b.n	8023b34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8023b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023b34:	7dfb      	ldrb	r3, [r7, #23]
 8023b36:	2b00      	cmp	r3, #0
 8023b38:	d10a      	bne.n	8023b50 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8023b3a:	4b8e      	ldr	r3, [pc, #568]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023b3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8023b42:	687b      	ldr	r3, [r7, #4]
 8023b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8023b48:	498a      	ldr	r1, [pc, #552]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023b4a:	4313      	orrs	r3, r2
 8023b4c:	654b      	str	r3, [r1, #84]	; 0x54
 8023b4e:	e001      	b.n	8023b54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023b50:	7dfb      	ldrb	r3, [r7, #23]
 8023b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8023b54:	687b      	ldr	r3, [r7, #4]
 8023b56:	681b      	ldr	r3, [r3, #0]
 8023b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023b5c:	2b00      	cmp	r3, #0
 8023b5e:	d04b      	beq.n	8023bf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8023b60:	687b      	ldr	r3, [r7, #4]
 8023b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8023b66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8023b6a:	d02e      	beq.n	8023bca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8023b6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8023b70:	d828      	bhi.n	8023bc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8023b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023b76:	d02a      	beq.n	8023bce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8023b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023b7c:	d822      	bhi.n	8023bc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8023b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8023b82:	d026      	beq.n	8023bd2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8023b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8023b88:	d81c      	bhi.n	8023bc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8023b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8023b8e:	d010      	beq.n	8023bb2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8023b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8023b94:	d816      	bhi.n	8023bc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d01d      	beq.n	8023bd6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8023b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8023b9e:	d111      	bne.n	8023bc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8023ba0:	687b      	ldr	r3, [r7, #4]
 8023ba2:	3304      	adds	r3, #4
 8023ba4:	2100      	movs	r1, #0
 8023ba6:	4618      	mov	r0, r3
 8023ba8:	f000 fcd2 	bl	8024550 <RCCEx_PLL2_Config>
 8023bac:	4603      	mov	r3, r0
 8023bae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8023bb0:	e012      	b.n	8023bd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8023bb2:	687b      	ldr	r3, [r7, #4]
 8023bb4:	3324      	adds	r3, #36	; 0x24
 8023bb6:	2102      	movs	r1, #2
 8023bb8:	4618      	mov	r0, r3
 8023bba:	f000 fd7b 	bl	80246b4 <RCCEx_PLL3_Config>
 8023bbe:	4603      	mov	r3, r0
 8023bc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8023bc2:	e009      	b.n	8023bd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023bc4:	2301      	movs	r3, #1
 8023bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8023bc8:	e006      	b.n	8023bd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8023bca:	bf00      	nop
 8023bcc:	e004      	b.n	8023bd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8023bce:	bf00      	nop
 8023bd0:	e002      	b.n	8023bd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8023bd2:	bf00      	nop
 8023bd4:	e000      	b.n	8023bd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8023bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023bd8:	7dfb      	ldrb	r3, [r7, #23]
 8023bda:	2b00      	cmp	r3, #0
 8023bdc:	d10a      	bne.n	8023bf4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8023bde:	4b65      	ldr	r3, [pc, #404]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023be2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8023be6:	687b      	ldr	r3, [r7, #4]
 8023be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8023bec:	4961      	ldr	r1, [pc, #388]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023bee:	4313      	orrs	r3, r2
 8023bf0:	658b      	str	r3, [r1, #88]	; 0x58
 8023bf2:	e001      	b.n	8023bf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023bf4:	7dfb      	ldrb	r3, [r7, #23]
 8023bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8023bf8:	687b      	ldr	r3, [r7, #4]
 8023bfa:	681b      	ldr	r3, [r3, #0]
 8023bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c00:	2b00      	cmp	r3, #0
 8023c02:	d04b      	beq.n	8023c9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8023c0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8023c0e:	d02e      	beq.n	8023c6e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8023c10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8023c14:	d828      	bhi.n	8023c68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8023c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8023c1a:	d02a      	beq.n	8023c72 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8023c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8023c20:	d822      	bhi.n	8023c68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8023c22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8023c26:	d026      	beq.n	8023c76 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8023c28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8023c2c:	d81c      	bhi.n	8023c68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8023c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8023c32:	d010      	beq.n	8023c56 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8023c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8023c38:	d816      	bhi.n	8023c68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8023c3a:	2b00      	cmp	r3, #0
 8023c3c:	d01d      	beq.n	8023c7a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8023c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023c42:	d111      	bne.n	8023c68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8023c44:	687b      	ldr	r3, [r7, #4]
 8023c46:	3304      	adds	r3, #4
 8023c48:	2100      	movs	r1, #0
 8023c4a:	4618      	mov	r0, r3
 8023c4c:	f000 fc80 	bl	8024550 <RCCEx_PLL2_Config>
 8023c50:	4603      	mov	r3, r0
 8023c52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8023c54:	e012      	b.n	8023c7c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8023c56:	687b      	ldr	r3, [r7, #4]
 8023c58:	3324      	adds	r3, #36	; 0x24
 8023c5a:	2102      	movs	r1, #2
 8023c5c:	4618      	mov	r0, r3
 8023c5e:	f000 fd29 	bl	80246b4 <RCCEx_PLL3_Config>
 8023c62:	4603      	mov	r3, r0
 8023c64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8023c66:	e009      	b.n	8023c7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023c68:	2301      	movs	r3, #1
 8023c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8023c6c:	e006      	b.n	8023c7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8023c6e:	bf00      	nop
 8023c70:	e004      	b.n	8023c7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8023c72:	bf00      	nop
 8023c74:	e002      	b.n	8023c7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8023c76:	bf00      	nop
 8023c78:	e000      	b.n	8023c7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8023c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023c7c:	7dfb      	ldrb	r3, [r7, #23]
 8023c7e:	2b00      	cmp	r3, #0
 8023c80:	d10a      	bne.n	8023c98 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8023c82:	4b3c      	ldr	r3, [pc, #240]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8023c90:	4938      	ldr	r1, [pc, #224]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023c92:	4313      	orrs	r3, r2
 8023c94:	658b      	str	r3, [r1, #88]	; 0x58
 8023c96:	e001      	b.n	8023c9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023c98:	7dfb      	ldrb	r3, [r7, #23]
 8023c9a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8023c9c:	687b      	ldr	r3, [r7, #4]
 8023c9e:	681b      	ldr	r3, [r3, #0]
 8023ca0:	f003 0308 	and.w	r3, r3, #8
 8023ca4:	2b00      	cmp	r3, #0
 8023ca6:	d01a      	beq.n	8023cde <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8023ca8:	687b      	ldr	r3, [r7, #4]
 8023caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8023cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023cb2:	d10a      	bne.n	8023cca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	3324      	adds	r3, #36	; 0x24
 8023cb8:	2102      	movs	r1, #2
 8023cba:	4618      	mov	r0, r3
 8023cbc:	f000 fcfa 	bl	80246b4 <RCCEx_PLL3_Config>
 8023cc0:	4603      	mov	r3, r0
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	d001      	beq.n	8023cca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8023cc6:	2301      	movs	r3, #1
 8023cc8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8023cca:	4b2a      	ldr	r3, [pc, #168]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023cce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8023cd2:	687b      	ldr	r3, [r7, #4]
 8023cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8023cd8:	4926      	ldr	r1, [pc, #152]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023cda:	4313      	orrs	r3, r2
 8023cdc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	681b      	ldr	r3, [r3, #0]
 8023ce2:	f003 0310 	and.w	r3, r3, #16
 8023ce6:	2b00      	cmp	r3, #0
 8023ce8:	d01a      	beq.n	8023d20 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8023cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023cf4:	d10a      	bne.n	8023d0c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8023cf6:	687b      	ldr	r3, [r7, #4]
 8023cf8:	3324      	adds	r3, #36	; 0x24
 8023cfa:	2102      	movs	r1, #2
 8023cfc:	4618      	mov	r0, r3
 8023cfe:	f000 fcd9 	bl	80246b4 <RCCEx_PLL3_Config>
 8023d02:	4603      	mov	r3, r0
 8023d04:	2b00      	cmp	r3, #0
 8023d06:	d001      	beq.n	8023d0c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8023d08:	2301      	movs	r3, #1
 8023d0a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8023d0c:	4b19      	ldr	r3, [pc, #100]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8023d14:	687b      	ldr	r3, [r7, #4]
 8023d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8023d1a:	4916      	ldr	r1, [pc, #88]	; (8023d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8023d1c:	4313      	orrs	r3, r2
 8023d1e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	681b      	ldr	r3, [r3, #0]
 8023d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023d28:	2b00      	cmp	r3, #0
 8023d2a:	d036      	beq.n	8023d9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8023d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8023d36:	d01f      	beq.n	8023d78 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8023d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8023d3c:	d817      	bhi.n	8023d6e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8023d3e:	2b00      	cmp	r3, #0
 8023d40:	d003      	beq.n	8023d4a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8023d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023d46:	d009      	beq.n	8023d5c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8023d48:	e011      	b.n	8023d6e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8023d4a:	687b      	ldr	r3, [r7, #4]
 8023d4c:	3304      	adds	r3, #4
 8023d4e:	2100      	movs	r1, #0
 8023d50:	4618      	mov	r0, r3
 8023d52:	f000 fbfd 	bl	8024550 <RCCEx_PLL2_Config>
 8023d56:	4603      	mov	r3, r0
 8023d58:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8023d5a:	e00e      	b.n	8023d7a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8023d5c:	687b      	ldr	r3, [r7, #4]
 8023d5e:	3324      	adds	r3, #36	; 0x24
 8023d60:	2102      	movs	r1, #2
 8023d62:	4618      	mov	r0, r3
 8023d64:	f000 fca6 	bl	80246b4 <RCCEx_PLL3_Config>
 8023d68:	4603      	mov	r3, r0
 8023d6a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8023d6c:	e005      	b.n	8023d7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023d6e:	2301      	movs	r3, #1
 8023d70:	75fb      	strb	r3, [r7, #23]
      break;
 8023d72:	e002      	b.n	8023d7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8023d74:	58024400 	.word	0x58024400
      break;
 8023d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023d7a:	7dfb      	ldrb	r3, [r7, #23]
 8023d7c:	2b00      	cmp	r3, #0
 8023d7e:	d10a      	bne.n	8023d96 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8023d80:	4b93      	ldr	r3, [pc, #588]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8023d88:	687b      	ldr	r3, [r7, #4]
 8023d8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8023d8e:	4990      	ldr	r1, [pc, #576]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023d90:	4313      	orrs	r3, r2
 8023d92:	658b      	str	r3, [r1, #88]	; 0x58
 8023d94:	e001      	b.n	8023d9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023d96:	7dfb      	ldrb	r3, [r7, #23]
 8023d98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8023d9a:	687b      	ldr	r3, [r7, #4]
 8023d9c:	681b      	ldr	r3, [r3, #0]
 8023d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023da2:	2b00      	cmp	r3, #0
 8023da4:	d033      	beq.n	8023e0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8023da6:	687b      	ldr	r3, [r7, #4]
 8023da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8023dac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8023db0:	d01c      	beq.n	8023dec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8023db2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8023db6:	d816      	bhi.n	8023de6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8023db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8023dbc:	d003      	beq.n	8023dc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8023dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8023dc2:	d007      	beq.n	8023dd4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8023dc4:	e00f      	b.n	8023de6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023dc6:	4b82      	ldr	r3, [pc, #520]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023dca:	4a81      	ldr	r2, [pc, #516]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8023dd2:	e00c      	b.n	8023dee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8023dd4:	687b      	ldr	r3, [r7, #4]
 8023dd6:	3324      	adds	r3, #36	; 0x24
 8023dd8:	2101      	movs	r1, #1
 8023dda:	4618      	mov	r0, r3
 8023ddc:	f000 fc6a 	bl	80246b4 <RCCEx_PLL3_Config>
 8023de0:	4603      	mov	r3, r0
 8023de2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8023de4:	e003      	b.n	8023dee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023de6:	2301      	movs	r3, #1
 8023de8:	75fb      	strb	r3, [r7, #23]
      break;
 8023dea:	e000      	b.n	8023dee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8023dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023dee:	7dfb      	ldrb	r3, [r7, #23]
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d10a      	bne.n	8023e0a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8023df4:	4b76      	ldr	r3, [pc, #472]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8023dfc:	687b      	ldr	r3, [r7, #4]
 8023dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8023e02:	4973      	ldr	r1, [pc, #460]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023e04:	4313      	orrs	r3, r2
 8023e06:	654b      	str	r3, [r1, #84]	; 0x54
 8023e08:	e001      	b.n	8023e0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023e0a:	7dfb      	ldrb	r3, [r7, #23]
 8023e0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8023e0e:	687b      	ldr	r3, [r7, #4]
 8023e10:	681b      	ldr	r3, [r3, #0]
 8023e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023e16:	2b00      	cmp	r3, #0
 8023e18:	d029      	beq.n	8023e6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8023e1a:	687b      	ldr	r3, [r7, #4]
 8023e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	d003      	beq.n	8023e2a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8023e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023e26:	d007      	beq.n	8023e38 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8023e28:	e00f      	b.n	8023e4a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023e2a:	4b69      	ldr	r3, [pc, #420]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023e2e:	4a68      	ldr	r2, [pc, #416]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023e34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8023e36:	e00b      	b.n	8023e50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8023e38:	687b      	ldr	r3, [r7, #4]
 8023e3a:	3304      	adds	r3, #4
 8023e3c:	2102      	movs	r1, #2
 8023e3e:	4618      	mov	r0, r3
 8023e40:	f000 fb86 	bl	8024550 <RCCEx_PLL2_Config>
 8023e44:	4603      	mov	r3, r0
 8023e46:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8023e48:	e002      	b.n	8023e50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8023e4a:	2301      	movs	r3, #1
 8023e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8023e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023e50:	7dfb      	ldrb	r3, [r7, #23]
 8023e52:	2b00      	cmp	r3, #0
 8023e54:	d109      	bne.n	8023e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8023e56:	4b5e      	ldr	r3, [pc, #376]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023e5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8023e5e:	687b      	ldr	r3, [r7, #4]
 8023e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023e62:	495b      	ldr	r1, [pc, #364]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023e64:	4313      	orrs	r3, r2
 8023e66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8023e68:	e001      	b.n	8023e6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023e6a:	7dfb      	ldrb	r3, [r7, #23]
 8023e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8023e6e:	687b      	ldr	r3, [r7, #4]
 8023e70:	681b      	ldr	r3, [r3, #0]
 8023e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8023e76:	2b00      	cmp	r3, #0
 8023e78:	d00a      	beq.n	8023e90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8023e7a:	687b      	ldr	r3, [r7, #4]
 8023e7c:	3324      	adds	r3, #36	; 0x24
 8023e7e:	2102      	movs	r1, #2
 8023e80:	4618      	mov	r0, r3
 8023e82:	f000 fc17 	bl	80246b4 <RCCEx_PLL3_Config>
 8023e86:	4603      	mov	r3, r0
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	d001      	beq.n	8023e90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8023e8c:	2301      	movs	r3, #1
 8023e8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	681b      	ldr	r3, [r3, #0]
 8023e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023e98:	2b00      	cmp	r3, #0
 8023e9a:	d030      	beq.n	8023efe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8023e9c:	687b      	ldr	r3, [r7, #4]
 8023e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8023ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8023ea4:	d017      	beq.n	8023ed6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8023ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8023eaa:	d811      	bhi.n	8023ed0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8023eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023eb0:	d013      	beq.n	8023eda <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8023eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023eb6:	d80b      	bhi.n	8023ed0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	d010      	beq.n	8023ede <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8023ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023ec0:	d106      	bne.n	8023ed0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023ec2:	4b43      	ldr	r3, [pc, #268]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ec6:	4a42      	ldr	r2, [pc, #264]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8023ece:	e007      	b.n	8023ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8023ed0:	2301      	movs	r3, #1
 8023ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8023ed4:	e004      	b.n	8023ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8023ed6:	bf00      	nop
 8023ed8:	e002      	b.n	8023ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8023eda:	bf00      	nop
 8023edc:	e000      	b.n	8023ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8023ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8023ee0:	7dfb      	ldrb	r3, [r7, #23]
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	d109      	bne.n	8023efa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8023ee6:	4b3a      	ldr	r3, [pc, #232]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023eea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8023eee:	687b      	ldr	r3, [r7, #4]
 8023ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8023ef2:	4937      	ldr	r1, [pc, #220]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023ef4:	4313      	orrs	r3, r2
 8023ef6:	654b      	str	r3, [r1, #84]	; 0x54
 8023ef8:	e001      	b.n	8023efe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023efa:	7dfb      	ldrb	r3, [r7, #23]
 8023efc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8023efe:	687b      	ldr	r3, [r7, #4]
 8023f00:	681b      	ldr	r3, [r3, #0]
 8023f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023f06:	2b00      	cmp	r3, #0
 8023f08:	d008      	beq.n	8023f1c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8023f0a:	4b31      	ldr	r3, [pc, #196]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023f0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8023f12:	687b      	ldr	r3, [r7, #4]
 8023f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023f16:	492e      	ldr	r1, [pc, #184]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f18:	4313      	orrs	r3, r2
 8023f1a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	681b      	ldr	r3, [r3, #0]
 8023f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023f24:	2b00      	cmp	r3, #0
 8023f26:	d009      	beq.n	8023f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8023f28:	4b29      	ldr	r3, [pc, #164]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f2a:	691b      	ldr	r3, [r3, #16]
 8023f2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8023f30:	687b      	ldr	r3, [r7, #4]
 8023f32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8023f36:	4926      	ldr	r1, [pc, #152]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f38:	4313      	orrs	r3, r2
 8023f3a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8023f3c:	687b      	ldr	r3, [r7, #4]
 8023f3e:	681b      	ldr	r3, [r3, #0]
 8023f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8023f44:	2b00      	cmp	r3, #0
 8023f46:	d008      	beq.n	8023f5a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8023f48:	4b21      	ldr	r3, [pc, #132]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023f4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f54:	491e      	ldr	r1, [pc, #120]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f56:	4313      	orrs	r3, r2
 8023f58:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8023f5a:	687b      	ldr	r3, [r7, #4]
 8023f5c:	681b      	ldr	r3, [r3, #0]
 8023f5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	d00d      	beq.n	8023f82 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8023f66:	4b1a      	ldr	r3, [pc, #104]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f68:	691b      	ldr	r3, [r3, #16]
 8023f6a:	4a19      	ldr	r2, [pc, #100]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8023f70:	6113      	str	r3, [r2, #16]
 8023f72:	4b17      	ldr	r3, [pc, #92]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f74:	691a      	ldr	r2, [r3, #16]
 8023f76:	687b      	ldr	r3, [r7, #4]
 8023f78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8023f7c:	4914      	ldr	r1, [pc, #80]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f7e:	4313      	orrs	r3, r2
 8023f80:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8023f82:	687b      	ldr	r3, [r7, #4]
 8023f84:	681b      	ldr	r3, [r3, #0]
 8023f86:	2b00      	cmp	r3, #0
 8023f88:	da08      	bge.n	8023f9c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8023f8a:	4b11      	ldr	r3, [pc, #68]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8023f92:	687b      	ldr	r3, [r7, #4]
 8023f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023f96:	490e      	ldr	r1, [pc, #56]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023f98:	4313      	orrs	r3, r2
 8023f9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8023f9c:	687b      	ldr	r3, [r7, #4]
 8023f9e:	681b      	ldr	r3, [r3, #0]
 8023fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	d009      	beq.n	8023fbc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8023fa8:	4b09      	ldr	r3, [pc, #36]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023fac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8023fb0:	687b      	ldr	r3, [r7, #4]
 8023fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023fb6:	4906      	ldr	r1, [pc, #24]	; (8023fd0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8023fb8:	4313      	orrs	r3, r2
 8023fba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8023fbc:	7dbb      	ldrb	r3, [r7, #22]
 8023fbe:	2b00      	cmp	r3, #0
 8023fc0:	d101      	bne.n	8023fc6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8023fc2:	2300      	movs	r3, #0
 8023fc4:	e000      	b.n	8023fc8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8023fc6:	2301      	movs	r3, #1
}
 8023fc8:	4618      	mov	r0, r3
 8023fca:	3718      	adds	r7, #24
 8023fcc:	46bd      	mov	sp, r7
 8023fce:	bd80      	pop	{r7, pc}
 8023fd0:	58024400 	.word	0x58024400

08023fd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8023fd4:	b580      	push	{r7, lr}
 8023fd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8023fd8:	f7ff f860 	bl	802309c <HAL_RCC_GetHCLKFreq>
 8023fdc:	4602      	mov	r2, r0
 8023fde:	4b06      	ldr	r3, [pc, #24]	; (8023ff8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8023fe0:	6a1b      	ldr	r3, [r3, #32]
 8023fe2:	091b      	lsrs	r3, r3, #4
 8023fe4:	f003 0307 	and.w	r3, r3, #7
 8023fe8:	4904      	ldr	r1, [pc, #16]	; (8023ffc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8023fea:	5ccb      	ldrb	r3, [r1, r3]
 8023fec:	f003 031f 	and.w	r3, r3, #31
 8023ff0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8023ff4:	4618      	mov	r0, r3
 8023ff6:	bd80      	pop	{r7, pc}
 8023ff8:	58024400 	.word	0x58024400
 8023ffc:	08026f38 	.word	0x08026f38

08024000 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8024000:	b480      	push	{r7}
 8024002:	b089      	sub	sp, #36	; 0x24
 8024004:	af00      	add	r7, sp, #0
 8024006:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8024008:	4ba1      	ldr	r3, [pc, #644]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802400c:	f003 0303 	and.w	r3, r3, #3
 8024010:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8024012:	4b9f      	ldr	r3, [pc, #636]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024016:	0b1b      	lsrs	r3, r3, #12
 8024018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802401c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 802401e:	4b9c      	ldr	r3, [pc, #624]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024022:	091b      	lsrs	r3, r3, #4
 8024024:	f003 0301 	and.w	r3, r3, #1
 8024028:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 802402a:	4b99      	ldr	r3, [pc, #612]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802402e:	08db      	lsrs	r3, r3, #3
 8024030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024034:	693a      	ldr	r2, [r7, #16]
 8024036:	fb02 f303 	mul.w	r3, r2, r3
 802403a:	ee07 3a90 	vmov	s15, r3
 802403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024042:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8024046:	697b      	ldr	r3, [r7, #20]
 8024048:	2b00      	cmp	r3, #0
 802404a:	f000 8111 	beq.w	8024270 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 802404e:	69bb      	ldr	r3, [r7, #24]
 8024050:	2b02      	cmp	r3, #2
 8024052:	f000 8083 	beq.w	802415c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8024056:	69bb      	ldr	r3, [r7, #24]
 8024058:	2b02      	cmp	r3, #2
 802405a:	f200 80a1 	bhi.w	80241a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 802405e:	69bb      	ldr	r3, [r7, #24]
 8024060:	2b00      	cmp	r3, #0
 8024062:	d003      	beq.n	802406c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8024064:	69bb      	ldr	r3, [r7, #24]
 8024066:	2b01      	cmp	r3, #1
 8024068:	d056      	beq.n	8024118 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 802406a:	e099      	b.n	80241a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802406c:	4b88      	ldr	r3, [pc, #544]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802406e:	681b      	ldr	r3, [r3, #0]
 8024070:	f003 0320 	and.w	r3, r3, #32
 8024074:	2b00      	cmp	r3, #0
 8024076:	d02d      	beq.n	80240d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8024078:	4b85      	ldr	r3, [pc, #532]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802407a:	681b      	ldr	r3, [r3, #0]
 802407c:	08db      	lsrs	r3, r3, #3
 802407e:	f003 0303 	and.w	r3, r3, #3
 8024082:	4a84      	ldr	r2, [pc, #528]	; (8024294 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8024084:	fa22 f303 	lsr.w	r3, r2, r3
 8024088:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 802408a:	68bb      	ldr	r3, [r7, #8]
 802408c:	ee07 3a90 	vmov	s15, r3
 8024090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8024094:	697b      	ldr	r3, [r7, #20]
 8024096:	ee07 3a90 	vmov	s15, r3
 802409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80240a2:	4b7b      	ldr	r3, [pc, #492]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80240a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80240a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80240aa:	ee07 3a90 	vmov	s15, r3
 80240ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80240b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80240b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8024298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80240ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80240be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80240c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80240c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80240ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80240ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80240d2:	e087      	b.n	80241e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80240d4:	697b      	ldr	r3, [r7, #20]
 80240d6:	ee07 3a90 	vmov	s15, r3
 80240da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80240de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 802429c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80240e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80240e6:	4b6a      	ldr	r3, [pc, #424]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80240e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80240ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80240ee:	ee07 3a90 	vmov	s15, r3
 80240f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80240f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80240fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8024298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80240fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8024102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8024116:	e065      	b.n	80241e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8024118:	697b      	ldr	r3, [r7, #20]
 802411a:	ee07 3a90 	vmov	s15, r3
 802411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024122:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80242a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8024126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802412a:	4b59      	ldr	r3, [pc, #356]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024132:	ee07 3a90 	vmov	s15, r3
 8024136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802413a:	ed97 6a03 	vldr	s12, [r7, #12]
 802413e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8024298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8024142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8024146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802414a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802414e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 802415a:	e043      	b.n	80241e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 802415c:	697b      	ldr	r3, [r7, #20]
 802415e:	ee07 3a90 	vmov	s15, r3
 8024162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024166:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80242a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 802416a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802416e:	4b48      	ldr	r3, [pc, #288]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024176:	ee07 3a90 	vmov	s15, r3
 802417a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802417e:	ed97 6a03 	vldr	s12, [r7, #12]
 8024182:	eddf 5a45 	vldr	s11, [pc, #276]	; 8024298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8024186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802418a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802418e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024196:	ee67 7a27 	vmul.f32	s15, s14, s15
 802419a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 802419e:	e021      	b.n	80241e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80241a0:	697b      	ldr	r3, [r7, #20]
 80241a2:	ee07 3a90 	vmov	s15, r3
 80241a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80241aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80242a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80241ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80241b2:	4b37      	ldr	r3, [pc, #220]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80241b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80241b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80241ba:	ee07 3a90 	vmov	s15, r3
 80241be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80241c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80241c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8024298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80241ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80241ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80241d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80241d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80241da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80241de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80241e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80241e4:	4b2a      	ldr	r3, [pc, #168]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80241e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80241e8:	0a5b      	lsrs	r3, r3, #9
 80241ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80241ee:	ee07 3a90 	vmov	s15, r3
 80241f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80241f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80241fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80241fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8024202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802420a:	ee17 2a90 	vmov	r2, s15
 802420e:	687b      	ldr	r3, [r7, #4]
 8024210:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8024212:	4b1f      	ldr	r3, [pc, #124]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024216:	0c1b      	lsrs	r3, r3, #16
 8024218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802421c:	ee07 3a90 	vmov	s15, r3
 8024220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024228:	ee37 7a87 	vadd.f32	s14, s15, s14
 802422c:	edd7 6a07 	vldr	s13, [r7, #28]
 8024230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024238:	ee17 2a90 	vmov	r2, s15
 802423c:	687b      	ldr	r3, [r7, #4]
 802423e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8024240:	4b13      	ldr	r3, [pc, #76]	; (8024290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024244:	0e1b      	lsrs	r3, r3, #24
 8024246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802424a:	ee07 3a90 	vmov	s15, r3
 802424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024256:	ee37 7a87 	vadd.f32	s14, s15, s14
 802425a:	edd7 6a07 	vldr	s13, [r7, #28]
 802425e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024266:	ee17 2a90 	vmov	r2, s15
 802426a:	687b      	ldr	r3, [r7, #4]
 802426c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 802426e:	e008      	b.n	8024282 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8024270:	687b      	ldr	r3, [r7, #4]
 8024272:	2200      	movs	r2, #0
 8024274:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	2200      	movs	r2, #0
 802427a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 802427c:	687b      	ldr	r3, [r7, #4]
 802427e:	2200      	movs	r2, #0
 8024280:	609a      	str	r2, [r3, #8]
}
 8024282:	bf00      	nop
 8024284:	3724      	adds	r7, #36	; 0x24
 8024286:	46bd      	mov	sp, r7
 8024288:	f85d 7b04 	ldr.w	r7, [sp], #4
 802428c:	4770      	bx	lr
 802428e:	bf00      	nop
 8024290:	58024400 	.word	0x58024400
 8024294:	03d09000 	.word	0x03d09000
 8024298:	46000000 	.word	0x46000000
 802429c:	4c742400 	.word	0x4c742400
 80242a0:	4a742400 	.word	0x4a742400
 80242a4:	4bbebc20 	.word	0x4bbebc20

080242a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80242a8:	b480      	push	{r7}
 80242aa:	b089      	sub	sp, #36	; 0x24
 80242ac:	af00      	add	r7, sp, #0
 80242ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80242b0:	4ba1      	ldr	r3, [pc, #644]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80242b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80242b4:	f003 0303 	and.w	r3, r3, #3
 80242b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80242ba:	4b9f      	ldr	r3, [pc, #636]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80242bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80242be:	0d1b      	lsrs	r3, r3, #20
 80242c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80242c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80242c6:	4b9c      	ldr	r3, [pc, #624]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80242c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242ca:	0a1b      	lsrs	r3, r3, #8
 80242cc:	f003 0301 	and.w	r3, r3, #1
 80242d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80242d2:	4b99      	ldr	r3, [pc, #612]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80242d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80242d6:	08db      	lsrs	r3, r3, #3
 80242d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80242dc:	693a      	ldr	r2, [r7, #16]
 80242de:	fb02 f303 	mul.w	r3, r2, r3
 80242e2:	ee07 3a90 	vmov	s15, r3
 80242e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80242ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80242ee:	697b      	ldr	r3, [r7, #20]
 80242f0:	2b00      	cmp	r3, #0
 80242f2:	f000 8111 	beq.w	8024518 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80242f6:	69bb      	ldr	r3, [r7, #24]
 80242f8:	2b02      	cmp	r3, #2
 80242fa:	f000 8083 	beq.w	8024404 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80242fe:	69bb      	ldr	r3, [r7, #24]
 8024300:	2b02      	cmp	r3, #2
 8024302:	f200 80a1 	bhi.w	8024448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8024306:	69bb      	ldr	r3, [r7, #24]
 8024308:	2b00      	cmp	r3, #0
 802430a:	d003      	beq.n	8024314 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 802430c:	69bb      	ldr	r3, [r7, #24]
 802430e:	2b01      	cmp	r3, #1
 8024310:	d056      	beq.n	80243c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8024312:	e099      	b.n	8024448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8024314:	4b88      	ldr	r3, [pc, #544]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	f003 0320 	and.w	r3, r3, #32
 802431c:	2b00      	cmp	r3, #0
 802431e:	d02d      	beq.n	802437c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8024320:	4b85      	ldr	r3, [pc, #532]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8024322:	681b      	ldr	r3, [r3, #0]
 8024324:	08db      	lsrs	r3, r3, #3
 8024326:	f003 0303 	and.w	r3, r3, #3
 802432a:	4a84      	ldr	r2, [pc, #528]	; (802453c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 802432c:	fa22 f303 	lsr.w	r3, r2, r3
 8024330:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8024332:	68bb      	ldr	r3, [r7, #8]
 8024334:	ee07 3a90 	vmov	s15, r3
 8024338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802433c:	697b      	ldr	r3, [r7, #20]
 802433e:	ee07 3a90 	vmov	s15, r3
 8024342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802434a:	4b7b      	ldr	r3, [pc, #492]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024352:	ee07 3a90 	vmov	s15, r3
 8024356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802435a:	ed97 6a03 	vldr	s12, [r7, #12]
 802435e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8024540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8024362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8024366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802436a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802436e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024376:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 802437a:	e087      	b.n	802448c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 802437c:	697b      	ldr	r3, [r7, #20]
 802437e:	ee07 3a90 	vmov	s15, r3
 8024382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024386:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8024544 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 802438a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802438e:	4b6a      	ldr	r3, [pc, #424]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8024390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024396:	ee07 3a90 	vmov	s15, r3
 802439a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802439e:	ed97 6a03 	vldr	s12, [r7, #12]
 80243a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8024540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80243a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80243aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80243ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80243b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80243b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80243ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80243be:	e065      	b.n	802448c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80243c0:	697b      	ldr	r3, [r7, #20]
 80243c2:	ee07 3a90 	vmov	s15, r3
 80243c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80243ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8024548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80243ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80243d2:	4b59      	ldr	r3, [pc, #356]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80243d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80243d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80243da:	ee07 3a90 	vmov	s15, r3
 80243de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80243e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80243e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8024540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80243ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80243ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80243f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80243f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80243fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80243fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8024402:	e043      	b.n	802448c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8024404:	697b      	ldr	r3, [r7, #20]
 8024406:	ee07 3a90 	vmov	s15, r3
 802440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802440e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 802454c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8024412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8024416:	4b48      	ldr	r3, [pc, #288]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8024418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802441a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802441e:	ee07 3a90 	vmov	s15, r3
 8024422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8024426:	ed97 6a03 	vldr	s12, [r7, #12]
 802442a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8024540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802442e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8024432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802443a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024442:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8024446:	e021      	b.n	802448c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8024448:	697b      	ldr	r3, [r7, #20]
 802444a:	ee07 3a90 	vmov	s15, r3
 802444e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024452:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8024548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8024456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802445a:	4b37      	ldr	r3, [pc, #220]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802445e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024462:	ee07 3a90 	vmov	s15, r3
 8024466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802446a:	ed97 6a03 	vldr	s12, [r7, #12]
 802446e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8024540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8024472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8024476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802447a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802447e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 802448a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 802448c:	4b2a      	ldr	r3, [pc, #168]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024490:	0a5b      	lsrs	r3, r3, #9
 8024492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024496:	ee07 3a90 	vmov	s15, r3
 802449a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802449e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80244a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80244a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80244aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80244ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80244b2:	ee17 2a90 	vmov	r2, s15
 80244b6:	687b      	ldr	r3, [r7, #4]
 80244b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80244ba:	4b1f      	ldr	r3, [pc, #124]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80244bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80244be:	0c1b      	lsrs	r3, r3, #16
 80244c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80244c4:	ee07 3a90 	vmov	s15, r3
 80244c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80244cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80244d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80244d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80244d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80244dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80244e0:	ee17 2a90 	vmov	r2, s15
 80244e4:	687b      	ldr	r3, [r7, #4]
 80244e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80244e8:	4b13      	ldr	r3, [pc, #76]	; (8024538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80244ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80244ec:	0e1b      	lsrs	r3, r3, #24
 80244ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80244f2:	ee07 3a90 	vmov	s15, r3
 80244f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80244fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80244fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8024502:	edd7 6a07 	vldr	s13, [r7, #28]
 8024506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802450a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802450e:	ee17 2a90 	vmov	r2, s15
 8024512:	687b      	ldr	r3, [r7, #4]
 8024514:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8024516:	e008      	b.n	802452a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8024518:	687b      	ldr	r3, [r7, #4]
 802451a:	2200      	movs	r2, #0
 802451c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 802451e:	687b      	ldr	r3, [r7, #4]
 8024520:	2200      	movs	r2, #0
 8024522:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	2200      	movs	r2, #0
 8024528:	609a      	str	r2, [r3, #8]
}
 802452a:	bf00      	nop
 802452c:	3724      	adds	r7, #36	; 0x24
 802452e:	46bd      	mov	sp, r7
 8024530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024534:	4770      	bx	lr
 8024536:	bf00      	nop
 8024538:	58024400 	.word	0x58024400
 802453c:	03d09000 	.word	0x03d09000
 8024540:	46000000 	.word	0x46000000
 8024544:	4c742400 	.word	0x4c742400
 8024548:	4a742400 	.word	0x4a742400
 802454c:	4bbebc20 	.word	0x4bbebc20

08024550 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8024550:	b580      	push	{r7, lr}
 8024552:	b084      	sub	sp, #16
 8024554:	af00      	add	r7, sp, #0
 8024556:	6078      	str	r0, [r7, #4]
 8024558:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802455a:	2300      	movs	r3, #0
 802455c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802455e:	4b53      	ldr	r3, [pc, #332]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024562:	f003 0303 	and.w	r3, r3, #3
 8024566:	2b03      	cmp	r3, #3
 8024568:	d101      	bne.n	802456e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802456a:	2301      	movs	r3, #1
 802456c:	e099      	b.n	80246a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 802456e:	4b4f      	ldr	r3, [pc, #316]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024570:	681b      	ldr	r3, [r3, #0]
 8024572:	4a4e      	ldr	r2, [pc, #312]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024574:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8024578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802457a:	f7fc fee7 	bl	802134c <HAL_GetTick>
 802457e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8024580:	e008      	b.n	8024594 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8024582:	f7fc fee3 	bl	802134c <HAL_GetTick>
 8024586:	4602      	mov	r2, r0
 8024588:	68bb      	ldr	r3, [r7, #8]
 802458a:	1ad3      	subs	r3, r2, r3
 802458c:	2b02      	cmp	r3, #2
 802458e:	d901      	bls.n	8024594 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8024590:	2303      	movs	r3, #3
 8024592:	e086      	b.n	80246a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8024594:	4b45      	ldr	r3, [pc, #276]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024596:	681b      	ldr	r3, [r3, #0]
 8024598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802459c:	2b00      	cmp	r3, #0
 802459e:	d1f0      	bne.n	8024582 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80245a0:	4b42      	ldr	r3, [pc, #264]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 80245a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80245a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80245a8:	687b      	ldr	r3, [r7, #4]
 80245aa:	681b      	ldr	r3, [r3, #0]
 80245ac:	031b      	lsls	r3, r3, #12
 80245ae:	493f      	ldr	r1, [pc, #252]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 80245b0:	4313      	orrs	r3, r2
 80245b2:	628b      	str	r3, [r1, #40]	; 0x28
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	685b      	ldr	r3, [r3, #4]
 80245b8:	3b01      	subs	r3, #1
 80245ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80245be:	687b      	ldr	r3, [r7, #4]
 80245c0:	689b      	ldr	r3, [r3, #8]
 80245c2:	3b01      	subs	r3, #1
 80245c4:	025b      	lsls	r3, r3, #9
 80245c6:	b29b      	uxth	r3, r3
 80245c8:	431a      	orrs	r2, r3
 80245ca:	687b      	ldr	r3, [r7, #4]
 80245cc:	68db      	ldr	r3, [r3, #12]
 80245ce:	3b01      	subs	r3, #1
 80245d0:	041b      	lsls	r3, r3, #16
 80245d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80245d6:	431a      	orrs	r2, r3
 80245d8:	687b      	ldr	r3, [r7, #4]
 80245da:	691b      	ldr	r3, [r3, #16]
 80245dc:	3b01      	subs	r3, #1
 80245de:	061b      	lsls	r3, r3, #24
 80245e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80245e4:	4931      	ldr	r1, [pc, #196]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 80245e6:	4313      	orrs	r3, r2
 80245e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80245ea:	4b30      	ldr	r3, [pc, #192]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 80245ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80245ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80245f2:	687b      	ldr	r3, [r7, #4]
 80245f4:	695b      	ldr	r3, [r3, #20]
 80245f6:	492d      	ldr	r1, [pc, #180]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 80245f8:	4313      	orrs	r3, r2
 80245fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80245fc:	4b2b      	ldr	r3, [pc, #172]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 80245fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024600:	f023 0220 	bic.w	r2, r3, #32
 8024604:	687b      	ldr	r3, [r7, #4]
 8024606:	699b      	ldr	r3, [r3, #24]
 8024608:	4928      	ldr	r1, [pc, #160]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 802460a:	4313      	orrs	r3, r2
 802460c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 802460e:	4b27      	ldr	r3, [pc, #156]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024612:	4a26      	ldr	r2, [pc, #152]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024614:	f023 0310 	bic.w	r3, r3, #16
 8024618:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 802461a:	4b24      	ldr	r3, [pc, #144]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 802461c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802461e:	4b24      	ldr	r3, [pc, #144]	; (80246b0 <RCCEx_PLL2_Config+0x160>)
 8024620:	4013      	ands	r3, r2
 8024622:	687a      	ldr	r2, [r7, #4]
 8024624:	69d2      	ldr	r2, [r2, #28]
 8024626:	00d2      	lsls	r2, r2, #3
 8024628:	4920      	ldr	r1, [pc, #128]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 802462a:	4313      	orrs	r3, r2
 802462c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 802462e:	4b1f      	ldr	r3, [pc, #124]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024632:	4a1e      	ldr	r2, [pc, #120]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024634:	f043 0310 	orr.w	r3, r3, #16
 8024638:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 802463a:	683b      	ldr	r3, [r7, #0]
 802463c:	2b00      	cmp	r3, #0
 802463e:	d106      	bne.n	802464e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8024640:	4b1a      	ldr	r3, [pc, #104]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024644:	4a19      	ldr	r2, [pc, #100]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802464a:	62d3      	str	r3, [r2, #44]	; 0x2c
 802464c:	e00f      	b.n	802466e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 802464e:	683b      	ldr	r3, [r7, #0]
 8024650:	2b01      	cmp	r3, #1
 8024652:	d106      	bne.n	8024662 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8024654:	4b15      	ldr	r3, [pc, #84]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024658:	4a14      	ldr	r2, [pc, #80]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 802465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802465e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8024660:	e005      	b.n	802466e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8024662:	4b12      	ldr	r3, [pc, #72]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024666:	4a11      	ldr	r2, [pc, #68]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802466c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 802466e:	4b0f      	ldr	r3, [pc, #60]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024670:	681b      	ldr	r3, [r3, #0]
 8024672:	4a0e      	ldr	r2, [pc, #56]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8024678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802467a:	f7fc fe67 	bl	802134c <HAL_GetTick>
 802467e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8024680:	e008      	b.n	8024694 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8024682:	f7fc fe63 	bl	802134c <HAL_GetTick>
 8024686:	4602      	mov	r2, r0
 8024688:	68bb      	ldr	r3, [r7, #8]
 802468a:	1ad3      	subs	r3, r2, r3
 802468c:	2b02      	cmp	r3, #2
 802468e:	d901      	bls.n	8024694 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8024690:	2303      	movs	r3, #3
 8024692:	e006      	b.n	80246a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8024694:	4b05      	ldr	r3, [pc, #20]	; (80246ac <RCCEx_PLL2_Config+0x15c>)
 8024696:	681b      	ldr	r3, [r3, #0]
 8024698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802469c:	2b00      	cmp	r3, #0
 802469e:	d0f0      	beq.n	8024682 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80246a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80246a2:	4618      	mov	r0, r3
 80246a4:	3710      	adds	r7, #16
 80246a6:	46bd      	mov	sp, r7
 80246a8:	bd80      	pop	{r7, pc}
 80246aa:	bf00      	nop
 80246ac:	58024400 	.word	0x58024400
 80246b0:	ffff0007 	.word	0xffff0007

080246b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80246b4:	b580      	push	{r7, lr}
 80246b6:	b084      	sub	sp, #16
 80246b8:	af00      	add	r7, sp, #0
 80246ba:	6078      	str	r0, [r7, #4]
 80246bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80246be:	2300      	movs	r3, #0
 80246c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80246c2:	4b53      	ldr	r3, [pc, #332]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80246c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80246c6:	f003 0303 	and.w	r3, r3, #3
 80246ca:	2b03      	cmp	r3, #3
 80246cc:	d101      	bne.n	80246d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80246ce:	2301      	movs	r3, #1
 80246d0:	e099      	b.n	8024806 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80246d2:	4b4f      	ldr	r3, [pc, #316]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80246d4:	681b      	ldr	r3, [r3, #0]
 80246d6:	4a4e      	ldr	r2, [pc, #312]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80246d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80246dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80246de:	f7fc fe35 	bl	802134c <HAL_GetTick>
 80246e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80246e4:	e008      	b.n	80246f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80246e6:	f7fc fe31 	bl	802134c <HAL_GetTick>
 80246ea:	4602      	mov	r2, r0
 80246ec:	68bb      	ldr	r3, [r7, #8]
 80246ee:	1ad3      	subs	r3, r2, r3
 80246f0:	2b02      	cmp	r3, #2
 80246f2:	d901      	bls.n	80246f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80246f4:	2303      	movs	r3, #3
 80246f6:	e086      	b.n	8024806 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80246f8:	4b45      	ldr	r3, [pc, #276]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80246fa:	681b      	ldr	r3, [r3, #0]
 80246fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8024700:	2b00      	cmp	r3, #0
 8024702:	d1f0      	bne.n	80246e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8024704:	4b42      	ldr	r3, [pc, #264]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 8024706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024708:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 802470c:	687b      	ldr	r3, [r7, #4]
 802470e:	681b      	ldr	r3, [r3, #0]
 8024710:	051b      	lsls	r3, r3, #20
 8024712:	493f      	ldr	r1, [pc, #252]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 8024714:	4313      	orrs	r3, r2
 8024716:	628b      	str	r3, [r1, #40]	; 0x28
 8024718:	687b      	ldr	r3, [r7, #4]
 802471a:	685b      	ldr	r3, [r3, #4]
 802471c:	3b01      	subs	r3, #1
 802471e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8024722:	687b      	ldr	r3, [r7, #4]
 8024724:	689b      	ldr	r3, [r3, #8]
 8024726:	3b01      	subs	r3, #1
 8024728:	025b      	lsls	r3, r3, #9
 802472a:	b29b      	uxth	r3, r3
 802472c:	431a      	orrs	r2, r3
 802472e:	687b      	ldr	r3, [r7, #4]
 8024730:	68db      	ldr	r3, [r3, #12]
 8024732:	3b01      	subs	r3, #1
 8024734:	041b      	lsls	r3, r3, #16
 8024736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802473a:	431a      	orrs	r2, r3
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	691b      	ldr	r3, [r3, #16]
 8024740:	3b01      	subs	r3, #1
 8024742:	061b      	lsls	r3, r3, #24
 8024744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8024748:	4931      	ldr	r1, [pc, #196]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 802474a:	4313      	orrs	r3, r2
 802474c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 802474e:	4b30      	ldr	r3, [pc, #192]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 8024750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024752:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8024756:	687b      	ldr	r3, [r7, #4]
 8024758:	695b      	ldr	r3, [r3, #20]
 802475a:	492d      	ldr	r1, [pc, #180]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 802475c:	4313      	orrs	r3, r2
 802475e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8024760:	4b2b      	ldr	r3, [pc, #172]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 8024762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024764:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8024768:	687b      	ldr	r3, [r7, #4]
 802476a:	699b      	ldr	r3, [r3, #24]
 802476c:	4928      	ldr	r1, [pc, #160]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 802476e:	4313      	orrs	r3, r2
 8024770:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8024772:	4b27      	ldr	r3, [pc, #156]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 8024774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024776:	4a26      	ldr	r2, [pc, #152]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 8024778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802477c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 802477e:	4b24      	ldr	r3, [pc, #144]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 8024780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8024782:	4b24      	ldr	r3, [pc, #144]	; (8024814 <RCCEx_PLL3_Config+0x160>)
 8024784:	4013      	ands	r3, r2
 8024786:	687a      	ldr	r2, [r7, #4]
 8024788:	69d2      	ldr	r2, [r2, #28]
 802478a:	00d2      	lsls	r2, r2, #3
 802478c:	4920      	ldr	r1, [pc, #128]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 802478e:	4313      	orrs	r3, r2
 8024790:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8024792:	4b1f      	ldr	r3, [pc, #124]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 8024794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024796:	4a1e      	ldr	r2, [pc, #120]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 8024798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802479c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 802479e:	683b      	ldr	r3, [r7, #0]
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	d106      	bne.n	80247b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80247a4:	4b1a      	ldr	r3, [pc, #104]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80247a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80247a8:	4a19      	ldr	r2, [pc, #100]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80247aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80247ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80247b0:	e00f      	b.n	80247d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80247b2:	683b      	ldr	r3, [r7, #0]
 80247b4:	2b01      	cmp	r3, #1
 80247b6:	d106      	bne.n	80247c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80247b8:	4b15      	ldr	r3, [pc, #84]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80247ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80247bc:	4a14      	ldr	r2, [pc, #80]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80247be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80247c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80247c4:	e005      	b.n	80247d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80247c6:	4b12      	ldr	r3, [pc, #72]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80247c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80247ca:	4a11      	ldr	r2, [pc, #68]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80247cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80247d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80247d2:	4b0f      	ldr	r3, [pc, #60]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80247d4:	681b      	ldr	r3, [r3, #0]
 80247d6:	4a0e      	ldr	r2, [pc, #56]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80247d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80247dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80247de:	f7fc fdb5 	bl	802134c <HAL_GetTick>
 80247e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80247e4:	e008      	b.n	80247f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80247e6:	f7fc fdb1 	bl	802134c <HAL_GetTick>
 80247ea:	4602      	mov	r2, r0
 80247ec:	68bb      	ldr	r3, [r7, #8]
 80247ee:	1ad3      	subs	r3, r2, r3
 80247f0:	2b02      	cmp	r3, #2
 80247f2:	d901      	bls.n	80247f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80247f4:	2303      	movs	r3, #3
 80247f6:	e006      	b.n	8024806 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80247f8:	4b05      	ldr	r3, [pc, #20]	; (8024810 <RCCEx_PLL3_Config+0x15c>)
 80247fa:	681b      	ldr	r3, [r3, #0]
 80247fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8024800:	2b00      	cmp	r3, #0
 8024802:	d0f0      	beq.n	80247e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8024804:	7bfb      	ldrb	r3, [r7, #15]
}
 8024806:	4618      	mov	r0, r3
 8024808:	3710      	adds	r7, #16
 802480a:	46bd      	mov	sp, r7
 802480c:	bd80      	pop	{r7, pc}
 802480e:	bf00      	nop
 8024810:	58024400 	.word	0x58024400
 8024814:	ffff0007 	.word	0xffff0007

08024818 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8024818:	b580      	push	{r7, lr}
 802481a:	b084      	sub	sp, #16
 802481c:	af00      	add	r7, sp, #0
 802481e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8024820:	687b      	ldr	r3, [r7, #4]
 8024822:	2b00      	cmp	r3, #0
 8024824:	d101      	bne.n	802482a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8024826:	2301      	movs	r3, #1
 8024828:	e190      	b.n	8024b4c <HAL_SPI_Init+0x334>
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 802482a:	687b      	ldr	r3, [r7, #4]
 802482c:	681b      	ldr	r3, [r3, #0]
 802482e:	4a83      	ldr	r2, [pc, #524]	; (8024a3c <HAL_SPI_Init+0x224>)
 8024830:	4293      	cmp	r3, r2
 8024832:	d00f      	beq.n	8024854 <HAL_SPI_Init+0x3c>
 8024834:	687b      	ldr	r3, [r7, #4]
 8024836:	681b      	ldr	r3, [r3, #0]
 8024838:	4a81      	ldr	r2, [pc, #516]	; (8024a40 <HAL_SPI_Init+0x228>)
 802483a:	4293      	cmp	r3, r2
 802483c:	d00a      	beq.n	8024854 <HAL_SPI_Init+0x3c>
 802483e:	687b      	ldr	r3, [r7, #4]
 8024840:	681b      	ldr	r3, [r3, #0]
 8024842:	4a80      	ldr	r2, [pc, #512]	; (8024a44 <HAL_SPI_Init+0x22c>)
 8024844:	4293      	cmp	r3, r2
 8024846:	d005      	beq.n	8024854 <HAL_SPI_Init+0x3c>
 8024848:	687b      	ldr	r3, [r7, #4]
 802484a:	68db      	ldr	r3, [r3, #12]
 802484c:	2b0f      	cmp	r3, #15
 802484e:	d901      	bls.n	8024854 <HAL_SPI_Init+0x3c>
  {
    return HAL_ERROR;
 8024850:	2301      	movs	r3, #1
 8024852:	e17b      	b.n	8024b4c <HAL_SPI_Init+0x334>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8024854:	6878      	ldr	r0, [r7, #4]
 8024856:	f000 fd57 	bl	8025308 <SPI_GetPacketSize>
 802485a:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 802485c:	687b      	ldr	r3, [r7, #4]
 802485e:	681b      	ldr	r3, [r3, #0]
 8024860:	4a76      	ldr	r2, [pc, #472]	; (8024a3c <HAL_SPI_Init+0x224>)
 8024862:	4293      	cmp	r3, r2
 8024864:	d00c      	beq.n	8024880 <HAL_SPI_Init+0x68>
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	681b      	ldr	r3, [r3, #0]
 802486a:	4a75      	ldr	r2, [pc, #468]	; (8024a40 <HAL_SPI_Init+0x228>)
 802486c:	4293      	cmp	r3, r2
 802486e:	d007      	beq.n	8024880 <HAL_SPI_Init+0x68>
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	681b      	ldr	r3, [r3, #0]
 8024874:	4a73      	ldr	r2, [pc, #460]	; (8024a44 <HAL_SPI_Init+0x22c>)
 8024876:	4293      	cmp	r3, r2
 8024878:	d002      	beq.n	8024880 <HAL_SPI_Init+0x68>
 802487a:	68bb      	ldr	r3, [r7, #8]
 802487c:	2b08      	cmp	r3, #8
 802487e:	d811      	bhi.n	80248a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8024880:	687b      	ldr	r3, [r7, #4]
 8024882:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8024884:	4a6d      	ldr	r2, [pc, #436]	; (8024a3c <HAL_SPI_Init+0x224>)
 8024886:	4293      	cmp	r3, r2
 8024888:	d009      	beq.n	802489e <HAL_SPI_Init+0x86>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	681b      	ldr	r3, [r3, #0]
 802488e:	4a6c      	ldr	r2, [pc, #432]	; (8024a40 <HAL_SPI_Init+0x228>)
 8024890:	4293      	cmp	r3, r2
 8024892:	d004      	beq.n	802489e <HAL_SPI_Init+0x86>
 8024894:	687b      	ldr	r3, [r7, #4]
 8024896:	681b      	ldr	r3, [r3, #0]
 8024898:	4a6a      	ldr	r2, [pc, #424]	; (8024a44 <HAL_SPI_Init+0x22c>)
 802489a:	4293      	cmp	r3, r2
 802489c:	d104      	bne.n	80248a8 <HAL_SPI_Init+0x90>
 802489e:	68bb      	ldr	r3, [r7, #8]
 80248a0:	2b10      	cmp	r3, #16
 80248a2:	d901      	bls.n	80248a8 <HAL_SPI_Init+0x90>
  {
    return HAL_ERROR;
 80248a4:	2301      	movs	r3, #1
 80248a6:	e151      	b.n	8024b4c <HAL_SPI_Init+0x334>
  }

#if (USE_SPI_CRC != 0UL)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80248a8:	687b      	ldr	r3, [r7, #4]
 80248aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80248ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80248b0:	d129      	bne.n	8024906 <HAL_SPI_Init+0xee>
  {
    /* Verify that the SPI instance supports CRC Length higher than 16bits */
    if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 80248b2:	687b      	ldr	r3, [r7, #4]
 80248b4:	681b      	ldr	r3, [r3, #0]
 80248b6:	4a61      	ldr	r2, [pc, #388]	; (8024a3c <HAL_SPI_Init+0x224>)
 80248b8:	4293      	cmp	r3, r2
 80248ba:	d010      	beq.n	80248de <HAL_SPI_Init+0xc6>
 80248bc:	687b      	ldr	r3, [r7, #4]
 80248be:	681b      	ldr	r3, [r3, #0]
 80248c0:	4a5f      	ldr	r2, [pc, #380]	; (8024a40 <HAL_SPI_Init+0x228>)
 80248c2:	4293      	cmp	r3, r2
 80248c4:	d00b      	beq.n	80248de <HAL_SPI_Init+0xc6>
 80248c6:	687b      	ldr	r3, [r7, #4]
 80248c8:	681b      	ldr	r3, [r3, #0]
 80248ca:	4a5e      	ldr	r2, [pc, #376]	; (8024a44 <HAL_SPI_Init+0x22c>)
 80248cc:	4293      	cmp	r3, r2
 80248ce:	d006      	beq.n	80248de <HAL_SPI_Init+0xc6>
 80248d0:	687b      	ldr	r3, [r7, #4]
 80248d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80248d4:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80248d8:	d901      	bls.n	80248de <HAL_SPI_Init+0xc6>
    {
      return HAL_ERROR;
 80248da:	2301      	movs	r3, #1
 80248dc:	e136      	b.n	8024b4c <HAL_SPI_Init+0x334>
    }

    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80248de:	687b      	ldr	r3, [r7, #4]
 80248e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80248e2:	2b00      	cmp	r3, #0
 80248e4:	d104      	bne.n	80248f0 <HAL_SPI_Init+0xd8>
    {
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 80248e6:	687b      	ldr	r3, [r7, #4]
 80248e8:	68db      	ldr	r3, [r3, #12]
 80248ea:	041b      	lsls	r3, r3, #16
 80248ec:	60fb      	str	r3, [r7, #12]
 80248ee:	e002      	b.n	80248f6 <HAL_SPI_Init+0xde>
    }
    else
    {
      crc_length = hspi->Init.CRCLength;
 80248f0:	687b      	ldr	r3, [r7, #4]
 80248f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80248f4:	60fb      	str	r3, [r7, #12]
    }

    /* Verify that the CRC Length is higher than DataSize */
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 80248f6:	687b      	ldr	r3, [r7, #4]
 80248f8:	68da      	ldr	r2, [r3, #12]
 80248fa:	68fb      	ldr	r3, [r7, #12]
 80248fc:	0c1b      	lsrs	r3, r3, #16
 80248fe:	429a      	cmp	r2, r3
 8024900:	d905      	bls.n	802490e <HAL_SPI_Init+0xf6>
    {
      return HAL_ERROR;
 8024902:	2301      	movs	r3, #1
 8024904:	e122      	b.n	8024b4c <HAL_SPI_Init+0x334>
    }
  }
  else
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 8024906:	687b      	ldr	r3, [r7, #4]
 8024908:	68db      	ldr	r3, [r3, #12]
 802490a:	041b      	lsls	r3, r3, #16
 802490c:	60fb      	str	r3, [r7, #12]
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802490e:	687b      	ldr	r3, [r7, #4]
 8024910:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8024914:	b2db      	uxtb	r3, r3
 8024916:	2b00      	cmp	r3, #0
 8024918:	d106      	bne.n	8024928 <HAL_SPI_Init+0x110>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802491a:	687b      	ldr	r3, [r7, #4]
 802491c:	2200      	movs	r2, #0
 802491e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8024922:	6878      	ldr	r0, [r7, #4]
 8024924:	f7fc fab8 	bl	8020e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8024928:	687b      	ldr	r3, [r7, #4]
 802492a:	2202      	movs	r2, #2
 802492c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8024930:	687b      	ldr	r3, [r7, #4]
 8024932:	681b      	ldr	r3, [r3, #0]
 8024934:	681a      	ldr	r2, [r3, #0]
 8024936:	687b      	ldr	r3, [r7, #4]
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	f022 0201 	bic.w	r2, r2, #1
 802493e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8024940:	687b      	ldr	r3, [r7, #4]
 8024942:	699b      	ldr	r3, [r3, #24]
 8024944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8024948:	d119      	bne.n	802497e <HAL_SPI_Init+0x166>
 802494a:	687b      	ldr	r3, [r7, #4]
 802494c:	685b      	ldr	r3, [r3, #4]
 802494e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8024952:	d103      	bne.n	802495c <HAL_SPI_Init+0x144>
 8024954:	687b      	ldr	r3, [r7, #4]
 8024956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024958:	2b00      	cmp	r3, #0
 802495a:	d008      	beq.n	802496e <HAL_SPI_Init+0x156>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 802495c:	687b      	ldr	r3, [r7, #4]
 802495e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8024960:	2b00      	cmp	r3, #0
 8024962:	d10c      	bne.n	802497e <HAL_SPI_Init+0x166>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8024964:	687b      	ldr	r3, [r7, #4]
 8024966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802496c:	d107      	bne.n	802497e <HAL_SPI_Init+0x166>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 802496e:	687b      	ldr	r3, [r7, #4]
 8024970:	681b      	ldr	r3, [r3, #0]
 8024972:	681a      	ldr	r2, [r3, #0]
 8024974:	687b      	ldr	r3, [r7, #4]
 8024976:	681b      	ldr	r3, [r3, #0]
 8024978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802497c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 802497e:	687b      	ldr	r3, [r7, #4]
 8024980:	69da      	ldr	r2, [r3, #28]
 8024982:	687b      	ldr	r3, [r7, #4]
 8024984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024986:	431a      	orrs	r2, r3
 8024988:	68fb      	ldr	r3, [r7, #12]
 802498a:	431a      	orrs	r2, r3
 802498c:	687b      	ldr	r3, [r7, #4]
 802498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024990:	ea42 0103 	orr.w	r1, r2, r3
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	68da      	ldr	r2, [r3, #12]
 8024998:	687b      	ldr	r3, [r7, #4]
 802499a:	681b      	ldr	r3, [r3, #0]
 802499c:	430a      	orrs	r2, r1
 802499e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80249a0:	687b      	ldr	r3, [r7, #4]
 80249a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80249a4:	687b      	ldr	r3, [r7, #4]
 80249a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80249a8:	431a      	orrs	r2, r3
 80249aa:	687b      	ldr	r3, [r7, #4]
 80249ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80249ae:	431a      	orrs	r2, r3
 80249b0:	687b      	ldr	r3, [r7, #4]
 80249b2:	699b      	ldr	r3, [r3, #24]
 80249b4:	431a      	orrs	r2, r3
 80249b6:	687b      	ldr	r3, [r7, #4]
 80249b8:	691b      	ldr	r3, [r3, #16]
 80249ba:	431a      	orrs	r2, r3
 80249bc:	687b      	ldr	r3, [r7, #4]
 80249be:	695b      	ldr	r3, [r3, #20]
 80249c0:	431a      	orrs	r2, r3
 80249c2:	687b      	ldr	r3, [r7, #4]
 80249c4:	6a1b      	ldr	r3, [r3, #32]
 80249c6:	431a      	orrs	r2, r3
 80249c8:	687b      	ldr	r3, [r7, #4]
 80249ca:	685b      	ldr	r3, [r3, #4]
 80249cc:	431a      	orrs	r2, r3
 80249ce:	687b      	ldr	r3, [r7, #4]
 80249d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80249d2:	431a      	orrs	r2, r3
 80249d4:	687b      	ldr	r3, [r7, #4]
 80249d6:	689b      	ldr	r3, [r3, #8]
 80249d8:	431a      	orrs	r2, r3
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80249de:	ea42 0103 	orr.w	r1, r2, r3
 80249e2:	687b      	ldr	r3, [r7, #4]
 80249e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80249e6:	687b      	ldr	r3, [r7, #4]
 80249e8:	681b      	ldr	r3, [r3, #0]
 80249ea:	430a      	orrs	r2, r1
 80249ec:	60da      	str	r2, [r3, #12]
                                   hspi->Init.Direction    | hspi->Init.MasterSSIdleness | hspi->Init.IOSwap));

#if (USE_SPI_CRC != 0UL)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80249ee:	687b      	ldr	r3, [r7, #4]
 80249f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80249f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80249f6:	d16b      	bne.n	8024ad0 <HAL_SPI_Init+0x2b8>
  {
    /* Initialize TXCRC Pattern Initial Value */
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 80249f8:	687b      	ldr	r3, [r7, #4]
 80249fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249fc:	2b01      	cmp	r3, #1
 80249fe:	d108      	bne.n	8024a12 <HAL_SPI_Init+0x1fa>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	681b      	ldr	r3, [r3, #0]
 8024a04:	681a      	ldr	r2, [r3, #0]
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	681b      	ldr	r3, [r3, #0]
 8024a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8024a0e:	601a      	str	r2, [r3, #0]
 8024a10:	e007      	b.n	8024a22 <HAL_SPI_Init+0x20a>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8024a12:	687b      	ldr	r3, [r7, #4]
 8024a14:	681b      	ldr	r3, [r3, #0]
 8024a16:	681a      	ldr	r2, [r3, #0]
 8024a18:	687b      	ldr	r3, [r7, #4]
 8024a1a:	681b      	ldr	r3, [r3, #0]
 8024a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8024a20:	601a      	str	r2, [r3, #0]
    }

    /* Initialize RXCRC Pattern Initial Value */
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8024a22:	687b      	ldr	r3, [r7, #4]
 8024a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024a26:	2b01      	cmp	r3, #1
 8024a28:	d10e      	bne.n	8024a48 <HAL_SPI_Init+0x230>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8024a2a:	687b      	ldr	r3, [r7, #4]
 8024a2c:	681b      	ldr	r3, [r3, #0]
 8024a2e:	681a      	ldr	r2, [r3, #0]
 8024a30:	687b      	ldr	r3, [r7, #4]
 8024a32:	681b      	ldr	r3, [r3, #0]
 8024a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8024a38:	601a      	str	r2, [r3, #0]
 8024a3a:	e00d      	b.n	8024a58 <HAL_SPI_Init+0x240>
 8024a3c:	40013000 	.word	0x40013000
 8024a40:	40003800 	.word	0x40003800
 8024a44:	40003c00 	.word	0x40003c00
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	681b      	ldr	r3, [r3, #0]
 8024a4c:	681a      	ldr	r2, [r3, #0]
 8024a4e:	687b      	ldr	r3, [r7, #4]
 8024a50:	681b      	ldr	r3, [r3, #0]
 8024a52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8024a56:	601a      	str	r2, [r3, #0]
    }

    /* Enable 33/17 bits CRC computation */
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 8024a58:	687b      	ldr	r3, [r7, #4]
 8024a5a:	681b      	ldr	r3, [r3, #0]
 8024a5c:	4a3d      	ldr	r2, [pc, #244]	; (8024b54 <HAL_SPI_Init+0x33c>)
 8024a5e:	4293      	cmp	r3, r2
 8024a60:	d00d      	beq.n	8024a7e <HAL_SPI_Init+0x266>
 8024a62:	687b      	ldr	r3, [r7, #4]
 8024a64:	681b      	ldr	r3, [r3, #0]
 8024a66:	4a3c      	ldr	r2, [pc, #240]	; (8024b58 <HAL_SPI_Init+0x340>)
 8024a68:	4293      	cmp	r3, r2
 8024a6a:	d008      	beq.n	8024a7e <HAL_SPI_Init+0x266>
 8024a6c:	687b      	ldr	r3, [r7, #4]
 8024a6e:	681b      	ldr	r3, [r3, #0]
 8024a70:	4a3a      	ldr	r2, [pc, #232]	; (8024b5c <HAL_SPI_Init+0x344>)
 8024a72:	4293      	cmp	r3, r2
 8024a74:	d003      	beq.n	8024a7e <HAL_SPI_Init+0x266>
 8024a76:	68fb      	ldr	r3, [r7, #12]
 8024a78:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8024a7c:	d012      	beq.n	8024aa4 <HAL_SPI_Init+0x28c>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 8024a7e:	687b      	ldr	r3, [r7, #4]
 8024a80:	681b      	ldr	r3, [r3, #0]
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 8024a82:	4a34      	ldr	r2, [pc, #208]	; (8024b54 <HAL_SPI_Init+0x33c>)
 8024a84:	4293      	cmp	r3, r2
 8024a86:	d009      	beq.n	8024a9c <HAL_SPI_Init+0x284>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 8024a88:	687b      	ldr	r3, [r7, #4]
 8024a8a:	681b      	ldr	r3, [r3, #0]
 8024a8c:	4a32      	ldr	r2, [pc, #200]	; (8024b58 <HAL_SPI_Init+0x340>)
 8024a8e:	4293      	cmp	r3, r2
 8024a90:	d004      	beq.n	8024a9c <HAL_SPI_Init+0x284>
 8024a92:	687b      	ldr	r3, [r7, #4]
 8024a94:	681b      	ldr	r3, [r3, #0]
 8024a96:	4a31      	ldr	r2, [pc, #196]	; (8024b5c <HAL_SPI_Init+0x344>)
 8024a98:	4293      	cmp	r3, r2
 8024a9a:	d10c      	bne.n	8024ab6 <HAL_SPI_Init+0x29e>
 8024a9c:	68fb      	ldr	r3, [r7, #12]
 8024a9e:	f5b3 1ff8 	cmp.w	r3, #2031616	; 0x1f0000
 8024aa2:	d108      	bne.n	8024ab6 <HAL_SPI_Init+0x29e>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8024aa4:	687b      	ldr	r3, [r7, #4]
 8024aa6:	681b      	ldr	r3, [r3, #0]
 8024aa8:	681a      	ldr	r2, [r3, #0]
 8024aaa:	687b      	ldr	r3, [r7, #4]
 8024aac:	681b      	ldr	r3, [r3, #0]
 8024aae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8024ab2:	601a      	str	r2, [r3, #0]
 8024ab4:	e007      	b.n	8024ac6 <HAL_SPI_Init+0x2ae>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8024ab6:	687b      	ldr	r3, [r7, #4]
 8024ab8:	681b      	ldr	r3, [r3, #0]
 8024aba:	681a      	ldr	r2, [r3, #0]
 8024abc:	687b      	ldr	r3, [r7, #4]
 8024abe:	681b      	ldr	r3, [r3, #0]
 8024ac0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8024ac4:	601a      	str	r2, [r3, #0]
    }

    /* Write CRC polynomial in SPI Register */
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 8024ac6:	687b      	ldr	r3, [r7, #4]
 8024ac8:	681b      	ldr	r3, [r3, #0]
 8024aca:	687a      	ldr	r2, [r7, #4]
 8024acc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8024ace:	641a      	str	r2, [r3, #64]	; 0x40
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8024ad0:	687b      	ldr	r3, [r7, #4]
 8024ad2:	685b      	ldr	r3, [r3, #4]
 8024ad4:	2b00      	cmp	r3, #0
 8024ad6:	d117      	bne.n	8024b08 <HAL_SPI_Init+0x2f0>
  {
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
 8024ad8:	687b      	ldr	r3, [r7, #4]
 8024ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024adc:	2b00      	cmp	r3, #0
 8024ade:	d109      	bne.n	8024af4 <HAL_SPI_Init+0x2dc>
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8024ae0:	687b      	ldr	r3, [r7, #4]
 8024ae2:	681b      	ldr	r3, [r3, #0]
 8024ae4:	689b      	ldr	r3, [r3, #8]
 8024ae6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8024aea:	687b      	ldr	r3, [r7, #4]
 8024aec:	681b      	ldr	r3, [r3, #0]
 8024aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8024af2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	681b      	ldr	r3, [r3, #0]
 8024af8:	689b      	ldr	r3, [r3, #8]
 8024afa:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	681b      	ldr	r3, [r3, #0]
 8024b02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8024b06:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8024b08:	687b      	ldr	r3, [r7, #4]
 8024b0a:	681b      	ldr	r3, [r3, #0]
 8024b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024b0e:	687b      	ldr	r3, [r7, #4]
 8024b10:	681b      	ldr	r3, [r3, #0]
 8024b12:	f022 0201 	bic.w	r2, r2, #1
 8024b16:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8024b18:	687b      	ldr	r3, [r7, #4]
 8024b1a:	685b      	ldr	r3, [r3, #4]
 8024b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024b20:	2b00      	cmp	r3, #0
 8024b22:	d00a      	beq.n	8024b3a <HAL_SPI_Init+0x322>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8024b24:	687b      	ldr	r3, [r7, #4]
 8024b26:	681b      	ldr	r3, [r3, #0]
 8024b28:	68db      	ldr	r3, [r3, #12]
 8024b2a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024b2e:	687b      	ldr	r3, [r7, #4]
 8024b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024b32:	687b      	ldr	r3, [r7, #4]
 8024b34:	681b      	ldr	r3, [r3, #0]
 8024b36:	430a      	orrs	r2, r1
 8024b38:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8024b3a:	687b      	ldr	r3, [r7, #4]
 8024b3c:	2200      	movs	r2, #0
 8024b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8024b42:	687b      	ldr	r3, [r7, #4]
 8024b44:	2201      	movs	r2, #1
 8024b46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8024b4a:	2300      	movs	r3, #0
}
 8024b4c:	4618      	mov	r0, r3
 8024b4e:	3710      	adds	r7, #16
 8024b50:	46bd      	mov	sp, r7
 8024b52:	bd80      	pop	{r7, pc}
 8024b54:	40013000 	.word	0x40013000
 8024b58:	40003800 	.word	0x40003800
 8024b5c:	40003c00 	.word	0x40003c00

08024b60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8024b60:	b580      	push	{r7, lr}
 8024b62:	b08e      	sub	sp, #56	; 0x38
 8024b64:	af02      	add	r7, sp, #8
 8024b66:	60f8      	str	r0, [r7, #12]
 8024b68:	60b9      	str	r1, [r7, #8]
 8024b6a:	607a      	str	r2, [r7, #4]
 8024b6c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8024b6e:	2300      	movs	r3, #0
 8024b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8024b74:	68fb      	ldr	r3, [r7, #12]
 8024b76:	681b      	ldr	r3, [r3, #0]
 8024b78:	3320      	adds	r3, #32
 8024b7a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8024b7c:	68fb      	ldr	r3, [r7, #12]
 8024b7e:	681b      	ldr	r3, [r3, #0]
 8024b80:	3330      	adds	r3, #48	; 0x30
 8024b82:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8024b84:	68fb      	ldr	r3, [r7, #12]
 8024b86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8024b8a:	2b01      	cmp	r3, #1
 8024b8c:	d101      	bne.n	8024b92 <HAL_SPI_TransmitReceive+0x32>
 8024b8e:	2302      	movs	r3, #2
 8024b90:	e2ce      	b.n	8025130 <HAL_SPI_TransmitReceive+0x5d0>
 8024b92:	68fb      	ldr	r3, [r7, #12]
 8024b94:	2201      	movs	r2, #1
 8024b96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8024b9a:	f7fc fbd7 	bl	802134c <HAL_GetTick>
 8024b9e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8024ba0:	887b      	ldrh	r3, [r7, #2]
 8024ba2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8024ba4:	887b      	ldrh	r3, [r7, #2]
 8024ba6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8024ba8:	68fb      	ldr	r3, [r7, #12]
 8024baa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8024bae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8024bb0:	68fb      	ldr	r3, [r7, #12]
 8024bb2:	685b      	ldr	r3, [r3, #4]
 8024bb4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8024bb6:	7efb      	ldrb	r3, [r7, #27]
 8024bb8:	2b01      	cmp	r3, #1
 8024bba:	d014      	beq.n	8024be6 <HAL_SPI_TransmitReceive+0x86>
 8024bbc:	697b      	ldr	r3, [r7, #20]
 8024bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8024bc2:	d106      	bne.n	8024bd2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8024bc4:	68fb      	ldr	r3, [r7, #12]
 8024bc6:	689b      	ldr	r3, [r3, #8]
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	d102      	bne.n	8024bd2 <HAL_SPI_TransmitReceive+0x72>
 8024bcc:	7efb      	ldrb	r3, [r7, #27]
 8024bce:	2b04      	cmp	r3, #4
 8024bd0:	d009      	beq.n	8024be6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8024bd2:	2302      	movs	r3, #2
 8024bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8024bd8:	68fb      	ldr	r3, [r7, #12]
 8024bda:	2200      	movs	r2, #0
 8024bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8024be0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8024be4:	e2a4      	b.n	8025130 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8024be6:	68bb      	ldr	r3, [r7, #8]
 8024be8:	2b00      	cmp	r3, #0
 8024bea:	d005      	beq.n	8024bf8 <HAL_SPI_TransmitReceive+0x98>
 8024bec:	687b      	ldr	r3, [r7, #4]
 8024bee:	2b00      	cmp	r3, #0
 8024bf0:	d002      	beq.n	8024bf8 <HAL_SPI_TransmitReceive+0x98>
 8024bf2:	887b      	ldrh	r3, [r7, #2]
 8024bf4:	2b00      	cmp	r3, #0
 8024bf6:	d109      	bne.n	8024c0c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8024bf8:	2301      	movs	r3, #1
 8024bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8024bfe:	68fb      	ldr	r3, [r7, #12]
 8024c00:	2200      	movs	r2, #0
 8024c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8024c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8024c0a:	e291      	b.n	8025130 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8024c0c:	68fb      	ldr	r3, [r7, #12]
 8024c0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8024c12:	b2db      	uxtb	r3, r3
 8024c14:	2b04      	cmp	r3, #4
 8024c16:	d003      	beq.n	8024c20 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8024c18:	68fb      	ldr	r3, [r7, #12]
 8024c1a:	2205      	movs	r2, #5
 8024c1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8024c20:	68fb      	ldr	r3, [r7, #12]
 8024c22:	2200      	movs	r2, #0
 8024c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8024c28:	68fb      	ldr	r3, [r7, #12]
 8024c2a:	687a      	ldr	r2, [r7, #4]
 8024c2c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8024c2e:	68fb      	ldr	r3, [r7, #12]
 8024c30:	887a      	ldrh	r2, [r7, #2]
 8024c32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8024c36:	68fb      	ldr	r3, [r7, #12]
 8024c38:	887a      	ldrh	r2, [r7, #2]
 8024c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8024c3e:	68fb      	ldr	r3, [r7, #12]
 8024c40:	68ba      	ldr	r2, [r7, #8]
 8024c42:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8024c44:	68fb      	ldr	r3, [r7, #12]
 8024c46:	887a      	ldrh	r2, [r7, #2]
 8024c48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8024c4c:	68fb      	ldr	r3, [r7, #12]
 8024c4e:	887a      	ldrh	r2, [r7, #2]
 8024c50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8024c54:	68fb      	ldr	r3, [r7, #12]
 8024c56:	2200      	movs	r2, #0
 8024c58:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8024c5a:	68fb      	ldr	r3, [r7, #12]
 8024c5c:	2200      	movs	r2, #0
 8024c5e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8024c60:	68fb      	ldr	r3, [r7, #12]
 8024c62:	681b      	ldr	r3, [r3, #0]
 8024c64:	685a      	ldr	r2, [r3, #4]
 8024c66:	4b9f      	ldr	r3, [pc, #636]	; (8024ee4 <HAL_SPI_TransmitReceive+0x384>)
 8024c68:	4013      	ands	r3, r2
 8024c6a:	8879      	ldrh	r1, [r7, #2]
 8024c6c:	68fa      	ldr	r2, [r7, #12]
 8024c6e:	6812      	ldr	r2, [r2, #0]
 8024c70:	430b      	orrs	r3, r1
 8024c72:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8024c74:	68fb      	ldr	r3, [r7, #12]
 8024c76:	681b      	ldr	r3, [r3, #0]
 8024c78:	681a      	ldr	r2, [r3, #0]
 8024c7a:	68fb      	ldr	r3, [r7, #12]
 8024c7c:	681b      	ldr	r3, [r3, #0]
 8024c7e:	f042 0201 	orr.w	r2, r2, #1
 8024c82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8024c84:	68fb      	ldr	r3, [r7, #12]
 8024c86:	685b      	ldr	r3, [r3, #4]
 8024c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8024c8c:	d107      	bne.n	8024c9e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8024c8e:	68fb      	ldr	r3, [r7, #12]
 8024c90:	681b      	ldr	r3, [r3, #0]
 8024c92:	681a      	ldr	r2, [r3, #0]
 8024c94:	68fb      	ldr	r3, [r7, #12]
 8024c96:	681b      	ldr	r3, [r3, #0]
 8024c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024c9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8024c9e:	68fb      	ldr	r3, [r7, #12]
 8024ca0:	68db      	ldr	r3, [r3, #12]
 8024ca2:	2b0f      	cmp	r3, #15
 8024ca4:	d970      	bls.n	8024d88 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8024ca6:	e068      	b.n	8024d7a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8024ca8:	68fb      	ldr	r3, [r7, #12]
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	695b      	ldr	r3, [r3, #20]
 8024cae:	f003 0302 	and.w	r3, r3, #2
 8024cb2:	2b02      	cmp	r3, #2
 8024cb4:	d11a      	bne.n	8024cec <HAL_SPI_TransmitReceive+0x18c>
 8024cb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024cb8:	2b00      	cmp	r3, #0
 8024cba:	d017      	beq.n	8024cec <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8024cbc:	68fb      	ldr	r3, [r7, #12]
 8024cbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024cc0:	68fb      	ldr	r3, [r7, #12]
 8024cc2:	681b      	ldr	r3, [r3, #0]
 8024cc4:	6812      	ldr	r2, [r2, #0]
 8024cc6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8024cc8:	68fb      	ldr	r3, [r7, #12]
 8024cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024ccc:	1d1a      	adds	r2, r3, #4
 8024cce:	68fb      	ldr	r3, [r7, #12]
 8024cd0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8024cd2:	68fb      	ldr	r3, [r7, #12]
 8024cd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024cd8:	b29b      	uxth	r3, r3
 8024cda:	3b01      	subs	r3, #1
 8024cdc:	b29a      	uxth	r2, r3
 8024cde:	68fb      	ldr	r3, [r7, #12]
 8024ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8024ce4:	68fb      	ldr	r3, [r7, #12]
 8024ce6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024cea:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8024cec:	68fb      	ldr	r3, [r7, #12]
 8024cee:	681b      	ldr	r3, [r3, #0]
 8024cf0:	695a      	ldr	r2, [r3, #20]
 8024cf2:	f248 0308 	movw	r3, #32776	; 0x8008
 8024cf6:	4013      	ands	r3, r2
 8024cf8:	2b00      	cmp	r3, #0
 8024cfa:	d01a      	beq.n	8024d32 <HAL_SPI_TransmitReceive+0x1d2>
 8024cfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024cfe:	2b00      	cmp	r3, #0
 8024d00:	d017      	beq.n	8024d32 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8024d02:	68fb      	ldr	r3, [r7, #12]
 8024d04:	681a      	ldr	r2, [r3, #0]
 8024d06:	68fb      	ldr	r3, [r7, #12]
 8024d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024d0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8024d0c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8024d0e:	68fb      	ldr	r3, [r7, #12]
 8024d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024d12:	1d1a      	adds	r2, r3, #4
 8024d14:	68fb      	ldr	r3, [r7, #12]
 8024d16:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8024d18:	68fb      	ldr	r3, [r7, #12]
 8024d1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8024d1e:	b29b      	uxth	r3, r3
 8024d20:	3b01      	subs	r3, #1
 8024d22:	b29a      	uxth	r2, r3
 8024d24:	68fb      	ldr	r3, [r7, #12]
 8024d26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8024d2a:	68fb      	ldr	r3, [r7, #12]
 8024d2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8024d30:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8024d32:	f7fc fb0b 	bl	802134c <HAL_GetTick>
 8024d36:	4602      	mov	r2, r0
 8024d38:	69fb      	ldr	r3, [r7, #28]
 8024d3a:	1ad3      	subs	r3, r2, r3
 8024d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024d3e:	429a      	cmp	r2, r3
 8024d40:	d803      	bhi.n	8024d4a <HAL_SPI_TransmitReceive+0x1ea>
 8024d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024d48:	d102      	bne.n	8024d50 <HAL_SPI_TransmitReceive+0x1f0>
 8024d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024d4c:	2b00      	cmp	r3, #0
 8024d4e:	d114      	bne.n	8024d7a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8024d50:	68f8      	ldr	r0, [r7, #12]
 8024d52:	f000 f9f1 	bl	8025138 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8024d56:	68fb      	ldr	r3, [r7, #12]
 8024d58:	2200      	movs	r2, #0
 8024d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8024d5e:	68fb      	ldr	r3, [r7, #12]
 8024d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8024d64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8024d68:	68fb      	ldr	r3, [r7, #12]
 8024d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8024d6e:	68fb      	ldr	r3, [r7, #12]
 8024d70:	2201      	movs	r2, #1
 8024d72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8024d76:	2301      	movs	r3, #1
 8024d78:	e1da      	b.n	8025130 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8024d7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024d7c:	2b00      	cmp	r3, #0
 8024d7e:	d193      	bne.n	8024ca8 <HAL_SPI_TransmitReceive+0x148>
 8024d80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024d82:	2b00      	cmp	r3, #0
 8024d84:	d190      	bne.n	8024ca8 <HAL_SPI_TransmitReceive+0x148>
 8024d86:	e1ac      	b.n	80250e2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024d88:	68fb      	ldr	r3, [r7, #12]
 8024d8a:	68db      	ldr	r3, [r3, #12]
 8024d8c:	2b07      	cmp	r3, #7
 8024d8e:	f240 81a0 	bls.w	80250d2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8024d92:	e0a9      	b.n	8024ee8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8024d94:	68fb      	ldr	r3, [r7, #12]
 8024d96:	681b      	ldr	r3, [r3, #0]
 8024d98:	695b      	ldr	r3, [r3, #20]
 8024d9a:	f003 0302 	and.w	r3, r3, #2
 8024d9e:	2b02      	cmp	r3, #2
 8024da0:	d139      	bne.n	8024e16 <HAL_SPI_TransmitReceive+0x2b6>
 8024da2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024da4:	2b00      	cmp	r3, #0
 8024da6:	d036      	beq.n	8024e16 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8024da8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024daa:	2b01      	cmp	r3, #1
 8024dac:	d91c      	bls.n	8024de8 <HAL_SPI_TransmitReceive+0x288>
 8024dae:	68fb      	ldr	r3, [r7, #12]
 8024db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024db2:	2b00      	cmp	r3, #0
 8024db4:	d018      	beq.n	8024de8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8024db6:	68fb      	ldr	r3, [r7, #12]
 8024db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024dba:	68fb      	ldr	r3, [r7, #12]
 8024dbc:	681b      	ldr	r3, [r3, #0]
 8024dbe:	6812      	ldr	r2, [r2, #0]
 8024dc0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8024dc2:	68fb      	ldr	r3, [r7, #12]
 8024dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024dc6:	1d1a      	adds	r2, r3, #4
 8024dc8:	68fb      	ldr	r3, [r7, #12]
 8024dca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8024dcc:	68fb      	ldr	r3, [r7, #12]
 8024dce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024dd2:	b29b      	uxth	r3, r3
 8024dd4:	3b02      	subs	r3, #2
 8024dd6:	b29a      	uxth	r2, r3
 8024dd8:	68fb      	ldr	r3, [r7, #12]
 8024dda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8024dde:	68fb      	ldr	r3, [r7, #12]
 8024de0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024de4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8024de6:	e016      	b.n	8024e16 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8024de8:	68fb      	ldr	r3, [r7, #12]
 8024dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024dec:	881a      	ldrh	r2, [r3, #0]
 8024dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024df0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8024df2:	68fb      	ldr	r3, [r7, #12]
 8024df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024df6:	1c9a      	adds	r2, r3, #2
 8024df8:	68fb      	ldr	r3, [r7, #12]
 8024dfa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8024dfc:	68fb      	ldr	r3, [r7, #12]
 8024dfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024e02:	b29b      	uxth	r3, r3
 8024e04:	3b01      	subs	r3, #1
 8024e06:	b29a      	uxth	r2, r3
 8024e08:	68fb      	ldr	r3, [r7, #12]
 8024e0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8024e0e:	68fb      	ldr	r3, [r7, #12]
 8024e10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024e14:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8024e16:	68fb      	ldr	r3, [r7, #12]
 8024e18:	681b      	ldr	r3, [r3, #0]
 8024e1a:	695b      	ldr	r3, [r3, #20]
 8024e1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8024e20:	2b00      	cmp	r3, #0
 8024e22:	d03a      	beq.n	8024e9a <HAL_SPI_TransmitReceive+0x33a>
 8024e24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024e26:	2b00      	cmp	r3, #0
 8024e28:	d037      	beq.n	8024e9a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8024e2a:	68fb      	ldr	r3, [r7, #12]
 8024e2c:	681b      	ldr	r3, [r3, #0]
 8024e2e:	695b      	ldr	r3, [r3, #20]
 8024e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024e34:	2b00      	cmp	r3, #0
 8024e36:	d018      	beq.n	8024e6a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8024e38:	68fb      	ldr	r3, [r7, #12]
 8024e3a:	681a      	ldr	r2, [r3, #0]
 8024e3c:	68fb      	ldr	r3, [r7, #12]
 8024e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024e40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8024e42:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8024e44:	68fb      	ldr	r3, [r7, #12]
 8024e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024e48:	1d1a      	adds	r2, r3, #4
 8024e4a:	68fb      	ldr	r3, [r7, #12]
 8024e4c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8024e4e:	68fb      	ldr	r3, [r7, #12]
 8024e50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8024e54:	b29b      	uxth	r3, r3
 8024e56:	3b02      	subs	r3, #2
 8024e58:	b29a      	uxth	r2, r3
 8024e5a:	68fb      	ldr	r3, [r7, #12]
 8024e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8024e60:	68fb      	ldr	r3, [r7, #12]
 8024e62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8024e66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8024e68:	e017      	b.n	8024e9a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8024e6a:	68fb      	ldr	r3, [r7, #12]
 8024e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024e6e:	6a3a      	ldr	r2, [r7, #32]
 8024e70:	8812      	ldrh	r2, [r2, #0]
 8024e72:	b292      	uxth	r2, r2
 8024e74:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8024e76:	68fb      	ldr	r3, [r7, #12]
 8024e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024e7a:	1c9a      	adds	r2, r3, #2
 8024e7c:	68fb      	ldr	r3, [r7, #12]
 8024e7e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8024e80:	68fb      	ldr	r3, [r7, #12]
 8024e82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8024e86:	b29b      	uxth	r3, r3
 8024e88:	3b01      	subs	r3, #1
 8024e8a:	b29a      	uxth	r2, r3
 8024e8c:	68fb      	ldr	r3, [r7, #12]
 8024e8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8024e92:	68fb      	ldr	r3, [r7, #12]
 8024e94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8024e98:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8024e9a:	f7fc fa57 	bl	802134c <HAL_GetTick>
 8024e9e:	4602      	mov	r2, r0
 8024ea0:	69fb      	ldr	r3, [r7, #28]
 8024ea2:	1ad3      	subs	r3, r2, r3
 8024ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024ea6:	429a      	cmp	r2, r3
 8024ea8:	d803      	bhi.n	8024eb2 <HAL_SPI_TransmitReceive+0x352>
 8024eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024eb0:	d102      	bne.n	8024eb8 <HAL_SPI_TransmitReceive+0x358>
 8024eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024eb4:	2b00      	cmp	r3, #0
 8024eb6:	d117      	bne.n	8024ee8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8024eb8:	68f8      	ldr	r0, [r7, #12]
 8024eba:	f000 f93d 	bl	8025138 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8024ebe:	68fb      	ldr	r3, [r7, #12]
 8024ec0:	2200      	movs	r2, #0
 8024ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8024ec6:	68fb      	ldr	r3, [r7, #12]
 8024ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8024ecc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8024ed0:	68fb      	ldr	r3, [r7, #12]
 8024ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8024ed6:	68fb      	ldr	r3, [r7, #12]
 8024ed8:	2201      	movs	r2, #1
 8024eda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8024ede:	2301      	movs	r3, #1
 8024ee0:	e126      	b.n	8025130 <HAL_SPI_TransmitReceive+0x5d0>
 8024ee2:	bf00      	nop
 8024ee4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8024ee8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024eea:	2b00      	cmp	r3, #0
 8024eec:	f47f af52 	bne.w	8024d94 <HAL_SPI_TransmitReceive+0x234>
 8024ef0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024ef2:	2b00      	cmp	r3, #0
 8024ef4:	f47f af4e 	bne.w	8024d94 <HAL_SPI_TransmitReceive+0x234>
 8024ef8:	e0f3      	b.n	80250e2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8024efa:	68fb      	ldr	r3, [r7, #12]
 8024efc:	681b      	ldr	r3, [r3, #0]
 8024efe:	695b      	ldr	r3, [r3, #20]
 8024f00:	f003 0302 	and.w	r3, r3, #2
 8024f04:	2b02      	cmp	r3, #2
 8024f06:	d15a      	bne.n	8024fbe <HAL_SPI_TransmitReceive+0x45e>
 8024f08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024f0a:	2b00      	cmp	r3, #0
 8024f0c:	d057      	beq.n	8024fbe <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8024f0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024f10:	2b03      	cmp	r3, #3
 8024f12:	d91c      	bls.n	8024f4e <HAL_SPI_TransmitReceive+0x3ee>
 8024f14:	68fb      	ldr	r3, [r7, #12]
 8024f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024f18:	2b40      	cmp	r3, #64	; 0x40
 8024f1a:	d918      	bls.n	8024f4e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8024f1c:	68fb      	ldr	r3, [r7, #12]
 8024f1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024f20:	68fb      	ldr	r3, [r7, #12]
 8024f22:	681b      	ldr	r3, [r3, #0]
 8024f24:	6812      	ldr	r2, [r2, #0]
 8024f26:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8024f28:	68fb      	ldr	r3, [r7, #12]
 8024f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024f2c:	1d1a      	adds	r2, r3, #4
 8024f2e:	68fb      	ldr	r3, [r7, #12]
 8024f30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8024f32:	68fb      	ldr	r3, [r7, #12]
 8024f34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024f38:	b29b      	uxth	r3, r3
 8024f3a:	3b04      	subs	r3, #4
 8024f3c:	b29a      	uxth	r2, r3
 8024f3e:	68fb      	ldr	r3, [r7, #12]
 8024f40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8024f44:	68fb      	ldr	r3, [r7, #12]
 8024f46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024f4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8024f4c:	e037      	b.n	8024fbe <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8024f4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024f50:	2b01      	cmp	r3, #1
 8024f52:	d91b      	bls.n	8024f8c <HAL_SPI_TransmitReceive+0x42c>
 8024f54:	68fb      	ldr	r3, [r7, #12]
 8024f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024f58:	2b00      	cmp	r3, #0
 8024f5a:	d017      	beq.n	8024f8c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8024f5c:	68fb      	ldr	r3, [r7, #12]
 8024f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024f60:	881a      	ldrh	r2, [r3, #0]
 8024f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f64:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8024f66:	68fb      	ldr	r3, [r7, #12]
 8024f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024f6a:	1c9a      	adds	r2, r3, #2
 8024f6c:	68fb      	ldr	r3, [r7, #12]
 8024f6e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8024f70:	68fb      	ldr	r3, [r7, #12]
 8024f72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024f76:	b29b      	uxth	r3, r3
 8024f78:	3b02      	subs	r3, #2
 8024f7a:	b29a      	uxth	r2, r3
 8024f7c:	68fb      	ldr	r3, [r7, #12]
 8024f7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8024f82:	68fb      	ldr	r3, [r7, #12]
 8024f84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024f88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8024f8a:	e018      	b.n	8024fbe <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8024f8c:	68fb      	ldr	r3, [r7, #12]
 8024f8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024f90:	68fb      	ldr	r3, [r7, #12]
 8024f92:	681b      	ldr	r3, [r3, #0]
 8024f94:	3320      	adds	r3, #32
 8024f96:	7812      	ldrb	r2, [r2, #0]
 8024f98:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8024f9a:	68fb      	ldr	r3, [r7, #12]
 8024f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024f9e:	1c5a      	adds	r2, r3, #1
 8024fa0:	68fb      	ldr	r3, [r7, #12]
 8024fa2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8024fa4:	68fb      	ldr	r3, [r7, #12]
 8024fa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024faa:	b29b      	uxth	r3, r3
 8024fac:	3b01      	subs	r3, #1
 8024fae:	b29a      	uxth	r2, r3
 8024fb0:	68fb      	ldr	r3, [r7, #12]
 8024fb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8024fb6:	68fb      	ldr	r3, [r7, #12]
 8024fb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8024fbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8024fbe:	68fb      	ldr	r3, [r7, #12]
 8024fc0:	681b      	ldr	r3, [r3, #0]
 8024fc2:	695b      	ldr	r3, [r3, #20]
 8024fc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8024fc8:	2b00      	cmp	r3, #0
 8024fca:	d05e      	beq.n	802508a <HAL_SPI_TransmitReceive+0x52a>
 8024fcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024fce:	2b00      	cmp	r3, #0
 8024fd0:	d05b      	beq.n	802508a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8024fd2:	68fb      	ldr	r3, [r7, #12]
 8024fd4:	681b      	ldr	r3, [r3, #0]
 8024fd6:	695b      	ldr	r3, [r3, #20]
 8024fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024fdc:	2b00      	cmp	r3, #0
 8024fde:	d018      	beq.n	8025012 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8024fe0:	68fb      	ldr	r3, [r7, #12]
 8024fe2:	681a      	ldr	r2, [r3, #0]
 8024fe4:	68fb      	ldr	r3, [r7, #12]
 8024fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024fe8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8024fea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8024fec:	68fb      	ldr	r3, [r7, #12]
 8024fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024ff0:	1d1a      	adds	r2, r3, #4
 8024ff2:	68fb      	ldr	r3, [r7, #12]
 8024ff4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8024ff6:	68fb      	ldr	r3, [r7, #12]
 8024ff8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8024ffc:	b29b      	uxth	r3, r3
 8024ffe:	3b04      	subs	r3, #4
 8025000:	b29a      	uxth	r2, r3
 8025002:	68fb      	ldr	r3, [r7, #12]
 8025004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8025008:	68fb      	ldr	r3, [r7, #12]
 802500a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802500e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8025010:	e03b      	b.n	802508a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8025012:	68fb      	ldr	r3, [r7, #12]
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	695b      	ldr	r3, [r3, #20]
 8025018:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 802501c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8025020:	d918      	bls.n	8025054 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8025022:	68fb      	ldr	r3, [r7, #12]
 8025024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025026:	6a3a      	ldr	r2, [r7, #32]
 8025028:	8812      	ldrh	r2, [r2, #0]
 802502a:	b292      	uxth	r2, r2
 802502c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 802502e:	68fb      	ldr	r3, [r7, #12]
 8025030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025032:	1c9a      	adds	r2, r3, #2
 8025034:	68fb      	ldr	r3, [r7, #12]
 8025036:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8025038:	68fb      	ldr	r3, [r7, #12]
 802503a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 802503e:	b29b      	uxth	r3, r3
 8025040:	3b02      	subs	r3, #2
 8025042:	b29a      	uxth	r2, r3
 8025044:	68fb      	ldr	r3, [r7, #12]
 8025046:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 802504a:	68fb      	ldr	r3, [r7, #12]
 802504c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8025050:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8025052:	e01a      	b.n	802508a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8025054:	68fb      	ldr	r3, [r7, #12]
 8025056:	681b      	ldr	r3, [r3, #0]
 8025058:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802505c:	68fb      	ldr	r3, [r7, #12]
 802505e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025060:	7812      	ldrb	r2, [r2, #0]
 8025062:	b2d2      	uxtb	r2, r2
 8025064:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8025066:	68fb      	ldr	r3, [r7, #12]
 8025068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802506a:	1c5a      	adds	r2, r3, #1
 802506c:	68fb      	ldr	r3, [r7, #12]
 802506e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8025070:	68fb      	ldr	r3, [r7, #12]
 8025072:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8025076:	b29b      	uxth	r3, r3
 8025078:	3b01      	subs	r3, #1
 802507a:	b29a      	uxth	r2, r3
 802507c:	68fb      	ldr	r3, [r7, #12]
 802507e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8025082:	68fb      	ldr	r3, [r7, #12]
 8025084:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8025088:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802508a:	f7fc f95f 	bl	802134c <HAL_GetTick>
 802508e:	4602      	mov	r2, r0
 8025090:	69fb      	ldr	r3, [r7, #28]
 8025092:	1ad3      	subs	r3, r2, r3
 8025094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025096:	429a      	cmp	r2, r3
 8025098:	d803      	bhi.n	80250a2 <HAL_SPI_TransmitReceive+0x542>
 802509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80250a0:	d102      	bne.n	80250a8 <HAL_SPI_TransmitReceive+0x548>
 80250a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80250a4:	2b00      	cmp	r3, #0
 80250a6:	d114      	bne.n	80250d2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80250a8:	68f8      	ldr	r0, [r7, #12]
 80250aa:	f000 f845 	bl	8025138 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80250ae:	68fb      	ldr	r3, [r7, #12]
 80250b0:	2200      	movs	r2, #0
 80250b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80250b6:	68fb      	ldr	r3, [r7, #12]
 80250b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80250bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80250c0:	68fb      	ldr	r3, [r7, #12]
 80250c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80250c6:	68fb      	ldr	r3, [r7, #12]
 80250c8:	2201      	movs	r2, #1
 80250ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80250ce:	2301      	movs	r3, #1
 80250d0:	e02e      	b.n	8025130 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80250d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80250d4:	2b00      	cmp	r3, #0
 80250d6:	f47f af10 	bne.w	8024efa <HAL_SPI_TransmitReceive+0x39a>
 80250da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80250dc:	2b00      	cmp	r3, #0
 80250de:	f47f af0c 	bne.w	8024efa <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80250e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80250e4:	9300      	str	r3, [sp, #0]
 80250e6:	69fb      	ldr	r3, [r7, #28]
 80250e8:	2200      	movs	r2, #0
 80250ea:	2108      	movs	r1, #8
 80250ec:	68f8      	ldr	r0, [r7, #12]
 80250ee:	f000 f8dd 	bl	80252ac <SPI_WaitOnFlagUntilTimeout>
 80250f2:	4603      	mov	r3, r0
 80250f4:	2b00      	cmp	r3, #0
 80250f6:	d007      	beq.n	8025108 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80250f8:	68fb      	ldr	r3, [r7, #12]
 80250fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80250fe:	f043 0220 	orr.w	r2, r3, #32
 8025102:	68fb      	ldr	r3, [r7, #12]
 8025104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8025108:	68f8      	ldr	r0, [r7, #12]
 802510a:	f000 f815 	bl	8025138 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802510e:	68fb      	ldr	r3, [r7, #12]
 8025110:	2200      	movs	r2, #0
 8025112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8025116:	68fb      	ldr	r3, [r7, #12]
 8025118:	2201      	movs	r2, #1
 802511a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802511e:	68fb      	ldr	r3, [r7, #12]
 8025120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8025124:	2b00      	cmp	r3, #0
 8025126:	d001      	beq.n	802512c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8025128:	2301      	movs	r3, #1
 802512a:	e001      	b.n	8025130 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 802512c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8025130:	4618      	mov	r0, r3
 8025132:	3730      	adds	r7, #48	; 0x30
 8025134:	46bd      	mov	sp, r7
 8025136:	bd80      	pop	{r7, pc}

08025138 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8025138:	b480      	push	{r7}
 802513a:	b085      	sub	sp, #20
 802513c:	af00      	add	r7, sp, #0
 802513e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8025140:	687b      	ldr	r3, [r7, #4]
 8025142:	681b      	ldr	r3, [r3, #0]
 8025144:	695b      	ldr	r3, [r3, #20]
 8025146:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8025148:	687b      	ldr	r3, [r7, #4]
 802514a:	681b      	ldr	r3, [r3, #0]
 802514c:	699a      	ldr	r2, [r3, #24]
 802514e:	687b      	ldr	r3, [r7, #4]
 8025150:	681b      	ldr	r3, [r3, #0]
 8025152:	f042 0208 	orr.w	r2, r2, #8
 8025156:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8025158:	687b      	ldr	r3, [r7, #4]
 802515a:	681b      	ldr	r3, [r3, #0]
 802515c:	699a      	ldr	r2, [r3, #24]
 802515e:	687b      	ldr	r3, [r7, #4]
 8025160:	681b      	ldr	r3, [r3, #0]
 8025162:	f042 0210 	orr.w	r2, r2, #16
 8025166:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8025168:	687b      	ldr	r3, [r7, #4]
 802516a:	681b      	ldr	r3, [r3, #0]
 802516c:	681a      	ldr	r2, [r3, #0]
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	681b      	ldr	r3, [r3, #0]
 8025172:	f022 0201 	bic.w	r2, r2, #1
 8025176:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8025178:	687b      	ldr	r3, [r7, #4]
 802517a:	681b      	ldr	r3, [r3, #0]
 802517c:	6919      	ldr	r1, [r3, #16]
 802517e:	687b      	ldr	r3, [r7, #4]
 8025180:	681a      	ldr	r2, [r3, #0]
 8025182:	4b49      	ldr	r3, [pc, #292]	; (80252a8 <SPI_CloseTransfer+0x170>)
 8025184:	400b      	ands	r3, r1
 8025186:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8025188:	687b      	ldr	r3, [r7, #4]
 802518a:	681b      	ldr	r3, [r3, #0]
 802518c:	689a      	ldr	r2, [r3, #8]
 802518e:	687b      	ldr	r3, [r7, #4]
 8025190:	681b      	ldr	r3, [r3, #0]
 8025192:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8025196:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8025198:	687b      	ldr	r3, [r7, #4]
 802519a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 802519e:	b2db      	uxtb	r3, r3
 80251a0:	2b04      	cmp	r3, #4
 80251a2:	d014      	beq.n	80251ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80251a4:	68fb      	ldr	r3, [r7, #12]
 80251a6:	f003 0320 	and.w	r3, r3, #32
 80251aa:	2b00      	cmp	r3, #0
 80251ac:	d00f      	beq.n	80251ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80251ae:	687b      	ldr	r3, [r7, #4]
 80251b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80251b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80251b8:	687b      	ldr	r3, [r7, #4]
 80251ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80251be:	687b      	ldr	r3, [r7, #4]
 80251c0:	681b      	ldr	r3, [r3, #0]
 80251c2:	699a      	ldr	r2, [r3, #24]
 80251c4:	687b      	ldr	r3, [r7, #4]
 80251c6:	681b      	ldr	r3, [r3, #0]
 80251c8:	f042 0220 	orr.w	r2, r2, #32
 80251cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80251ce:	687b      	ldr	r3, [r7, #4]
 80251d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80251d4:	b2db      	uxtb	r3, r3
 80251d6:	2b03      	cmp	r3, #3
 80251d8:	d02e      	beq.n	8025238 <SPI_CloseTransfer+0x100>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80251da:	68fb      	ldr	r3, [r7, #12]
 80251dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	d00f      	beq.n	8025204 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80251e4:	687b      	ldr	r3, [r7, #4]
 80251e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80251ea:	f043 0204 	orr.w	r2, r3, #4
 80251ee:	687b      	ldr	r3, [r7, #4]
 80251f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80251f4:	687b      	ldr	r3, [r7, #4]
 80251f6:	681b      	ldr	r3, [r3, #0]
 80251f8:	699a      	ldr	r2, [r3, #24]
 80251fa:	687b      	ldr	r3, [r7, #4]
 80251fc:	681b      	ldr	r3, [r3, #0]
 80251fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025202:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802520c:	d114      	bne.n	8025238 <SPI_CloseTransfer+0x100>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 802520e:	68fb      	ldr	r3, [r7, #12]
 8025210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025214:	2b00      	cmp	r3, #0
 8025216:	d00f      	beq.n	8025238 <SPI_CloseTransfer+0x100>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8025218:	687b      	ldr	r3, [r7, #4]
 802521a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802521e:	f043 0202 	orr.w	r2, r3, #2
 8025222:	687b      	ldr	r3, [r7, #4]
 8025224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8025228:	687b      	ldr	r3, [r7, #4]
 802522a:	681b      	ldr	r3, [r3, #0]
 802522c:	699a      	ldr	r2, [r3, #24]
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	681b      	ldr	r3, [r3, #0]
 8025232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8025236:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8025238:	68fb      	ldr	r3, [r7, #12]
 802523a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802523e:	2b00      	cmp	r3, #0
 8025240:	d00f      	beq.n	8025262 <SPI_CloseTransfer+0x12a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8025242:	687b      	ldr	r3, [r7, #4]
 8025244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8025248:	f043 0201 	orr.w	r2, r3, #1
 802524c:	687b      	ldr	r3, [r7, #4]
 802524e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8025252:	687b      	ldr	r3, [r7, #4]
 8025254:	681b      	ldr	r3, [r3, #0]
 8025256:	699a      	ldr	r2, [r3, #24]
 8025258:	687b      	ldr	r3, [r7, #4]
 802525a:	681b      	ldr	r3, [r3, #0]
 802525c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8025260:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8025262:	68fb      	ldr	r3, [r7, #12]
 8025264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025268:	2b00      	cmp	r3, #0
 802526a:	d00f      	beq.n	802528c <SPI_CloseTransfer+0x154>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802526c:	687b      	ldr	r3, [r7, #4]
 802526e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8025272:	f043 0208 	orr.w	r2, r3, #8
 8025276:	687b      	ldr	r3, [r7, #4]
 8025278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	681b      	ldr	r3, [r3, #0]
 8025280:	699a      	ldr	r2, [r3, #24]
 8025282:	687b      	ldr	r3, [r7, #4]
 8025284:	681b      	ldr	r3, [r3, #0]
 8025286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802528a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	2200      	movs	r2, #0
 8025290:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8025294:	687b      	ldr	r3, [r7, #4]
 8025296:	2200      	movs	r2, #0
 8025298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 802529c:	bf00      	nop
 802529e:	3714      	adds	r7, #20
 80252a0:	46bd      	mov	sp, r7
 80252a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252a6:	4770      	bx	lr
 80252a8:	fffffc90 	.word	0xfffffc90

080252ac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80252ac:	b580      	push	{r7, lr}
 80252ae:	b084      	sub	sp, #16
 80252b0:	af00      	add	r7, sp, #0
 80252b2:	60f8      	str	r0, [r7, #12]
 80252b4:	60b9      	str	r1, [r7, #8]
 80252b6:	603b      	str	r3, [r7, #0]
 80252b8:	4613      	mov	r3, r2
 80252ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80252bc:	e010      	b.n	80252e0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80252be:	f7fc f845 	bl	802134c <HAL_GetTick>
 80252c2:	4602      	mov	r2, r0
 80252c4:	683b      	ldr	r3, [r7, #0]
 80252c6:	1ad3      	subs	r3, r2, r3
 80252c8:	69ba      	ldr	r2, [r7, #24]
 80252ca:	429a      	cmp	r2, r3
 80252cc:	d803      	bhi.n	80252d6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80252ce:	69bb      	ldr	r3, [r7, #24]
 80252d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80252d4:	d102      	bne.n	80252dc <SPI_WaitOnFlagUntilTimeout+0x30>
 80252d6:	69bb      	ldr	r3, [r7, #24]
 80252d8:	2b00      	cmp	r3, #0
 80252da:	d101      	bne.n	80252e0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80252dc:	2303      	movs	r3, #3
 80252de:	e00f      	b.n	8025300 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80252e0:	68fb      	ldr	r3, [r7, #12]
 80252e2:	681b      	ldr	r3, [r3, #0]
 80252e4:	695a      	ldr	r2, [r3, #20]
 80252e6:	68bb      	ldr	r3, [r7, #8]
 80252e8:	4013      	ands	r3, r2
 80252ea:	68ba      	ldr	r2, [r7, #8]
 80252ec:	429a      	cmp	r2, r3
 80252ee:	bf0c      	ite	eq
 80252f0:	2301      	moveq	r3, #1
 80252f2:	2300      	movne	r3, #0
 80252f4:	b2db      	uxtb	r3, r3
 80252f6:	461a      	mov	r2, r3
 80252f8:	79fb      	ldrb	r3, [r7, #7]
 80252fa:	429a      	cmp	r2, r3
 80252fc:	d0df      	beq.n	80252be <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80252fe:	2300      	movs	r3, #0
}
 8025300:	4618      	mov	r0, r3
 8025302:	3710      	adds	r7, #16
 8025304:	46bd      	mov	sp, r7
 8025306:	bd80      	pop	{r7, pc}

08025308 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8025308:	b480      	push	{r7}
 802530a:	b085      	sub	sp, #20
 802530c:	af00      	add	r7, sp, #0
 802530e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025314:	095b      	lsrs	r3, r3, #5
 8025316:	3301      	adds	r3, #1
 8025318:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 802531a:	687b      	ldr	r3, [r7, #4]
 802531c:	68db      	ldr	r3, [r3, #12]
 802531e:	3301      	adds	r3, #1
 8025320:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8025322:	68bb      	ldr	r3, [r7, #8]
 8025324:	3307      	adds	r3, #7
 8025326:	08db      	lsrs	r3, r3, #3
 8025328:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 802532a:	68bb      	ldr	r3, [r7, #8]
 802532c:	68fa      	ldr	r2, [r7, #12]
 802532e:	fb02 f303 	mul.w	r3, r2, r3
}
 8025332:	4618      	mov	r0, r3
 8025334:	3714      	adds	r7, #20
 8025336:	46bd      	mov	sp, r7
 8025338:	f85d 7b04 	ldr.w	r7, [sp], #4
 802533c:	4770      	bx	lr

0802533e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802533e:	b580      	push	{r7, lr}
 8025340:	b082      	sub	sp, #8
 8025342:	af00      	add	r7, sp, #0
 8025344:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8025346:	687b      	ldr	r3, [r7, #4]
 8025348:	2b00      	cmp	r3, #0
 802534a:	d101      	bne.n	8025350 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802534c:	2301      	movs	r3, #1
 802534e:	e042      	b.n	80253d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8025350:	687b      	ldr	r3, [r7, #4]
 8025352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8025356:	2b00      	cmp	r3, #0
 8025358:	d106      	bne.n	8025368 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802535a:	687b      	ldr	r3, [r7, #4]
 802535c:	2200      	movs	r2, #0
 802535e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8025362:	6878      	ldr	r0, [r7, #4]
 8025364:	f7fb fe24 	bl	8020fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8025368:	687b      	ldr	r3, [r7, #4]
 802536a:	2224      	movs	r2, #36	; 0x24
 802536c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8025370:	687b      	ldr	r3, [r7, #4]
 8025372:	681b      	ldr	r3, [r3, #0]
 8025374:	681a      	ldr	r2, [r3, #0]
 8025376:	687b      	ldr	r3, [r7, #4]
 8025378:	681b      	ldr	r3, [r3, #0]
 802537a:	f022 0201 	bic.w	r2, r2, #1
 802537e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8025380:	6878      	ldr	r0, [r7, #4]
 8025382:	f000 f82d 	bl	80253e0 <UART_SetConfig>
 8025386:	4603      	mov	r3, r0
 8025388:	2b01      	cmp	r3, #1
 802538a:	d101      	bne.n	8025390 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 802538c:	2301      	movs	r3, #1
 802538e:	e022      	b.n	80253d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025394:	2b00      	cmp	r3, #0
 8025396:	d002      	beq.n	802539e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8025398:	6878      	ldr	r0, [r7, #4]
 802539a:	f000 fd81 	bl	8025ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802539e:	687b      	ldr	r3, [r7, #4]
 80253a0:	681b      	ldr	r3, [r3, #0]
 80253a2:	685a      	ldr	r2, [r3, #4]
 80253a4:	687b      	ldr	r3, [r7, #4]
 80253a6:	681b      	ldr	r3, [r3, #0]
 80253a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80253ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80253ae:	687b      	ldr	r3, [r7, #4]
 80253b0:	681b      	ldr	r3, [r3, #0]
 80253b2:	689a      	ldr	r2, [r3, #8]
 80253b4:	687b      	ldr	r3, [r7, #4]
 80253b6:	681b      	ldr	r3, [r3, #0]
 80253b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80253bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80253be:	687b      	ldr	r3, [r7, #4]
 80253c0:	681b      	ldr	r3, [r3, #0]
 80253c2:	681a      	ldr	r2, [r3, #0]
 80253c4:	687b      	ldr	r3, [r7, #4]
 80253c6:	681b      	ldr	r3, [r3, #0]
 80253c8:	f042 0201 	orr.w	r2, r2, #1
 80253cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80253ce:	6878      	ldr	r0, [r7, #4]
 80253d0:	f000 fe08 	bl	8025fe4 <UART_CheckIdleState>
 80253d4:	4603      	mov	r3, r0
}
 80253d6:	4618      	mov	r0, r3
 80253d8:	3708      	adds	r7, #8
 80253da:	46bd      	mov	sp, r7
 80253dc:	bd80      	pop	{r7, pc}
	...

080253e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80253e0:	b5b0      	push	{r4, r5, r7, lr}
 80253e2:	b08e      	sub	sp, #56	; 0x38
 80253e4:	af00      	add	r7, sp, #0
 80253e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80253e8:	2300      	movs	r3, #0
 80253ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80253ee:	687b      	ldr	r3, [r7, #4]
 80253f0:	689a      	ldr	r2, [r3, #8]
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	691b      	ldr	r3, [r3, #16]
 80253f6:	431a      	orrs	r2, r3
 80253f8:	687b      	ldr	r3, [r7, #4]
 80253fa:	695b      	ldr	r3, [r3, #20]
 80253fc:	431a      	orrs	r2, r3
 80253fe:	687b      	ldr	r3, [r7, #4]
 8025400:	69db      	ldr	r3, [r3, #28]
 8025402:	4313      	orrs	r3, r2
 8025404:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8025406:	687b      	ldr	r3, [r7, #4]
 8025408:	681b      	ldr	r3, [r3, #0]
 802540a:	681a      	ldr	r2, [r3, #0]
 802540c:	4bbf      	ldr	r3, [pc, #764]	; (802570c <UART_SetConfig+0x32c>)
 802540e:	4013      	ands	r3, r2
 8025410:	687a      	ldr	r2, [r7, #4]
 8025412:	6812      	ldr	r2, [r2, #0]
 8025414:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025416:	430b      	orrs	r3, r1
 8025418:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802541a:	687b      	ldr	r3, [r7, #4]
 802541c:	681b      	ldr	r3, [r3, #0]
 802541e:	685b      	ldr	r3, [r3, #4]
 8025420:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8025424:	687b      	ldr	r3, [r7, #4]
 8025426:	68da      	ldr	r2, [r3, #12]
 8025428:	687b      	ldr	r3, [r7, #4]
 802542a:	681b      	ldr	r3, [r3, #0]
 802542c:	430a      	orrs	r2, r1
 802542e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	699b      	ldr	r3, [r3, #24]
 8025434:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8025436:	687b      	ldr	r3, [r7, #4]
 8025438:	681b      	ldr	r3, [r3, #0]
 802543a:	4ab5      	ldr	r2, [pc, #724]	; (8025710 <UART_SetConfig+0x330>)
 802543c:	4293      	cmp	r3, r2
 802543e:	d004      	beq.n	802544a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8025440:	687b      	ldr	r3, [r7, #4]
 8025442:	6a1b      	ldr	r3, [r3, #32]
 8025444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025446:	4313      	orrs	r3, r2
 8025448:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802544a:	687b      	ldr	r3, [r7, #4]
 802544c:	681b      	ldr	r3, [r3, #0]
 802544e:	689a      	ldr	r2, [r3, #8]
 8025450:	4bb0      	ldr	r3, [pc, #704]	; (8025714 <UART_SetConfig+0x334>)
 8025452:	4013      	ands	r3, r2
 8025454:	687a      	ldr	r2, [r7, #4]
 8025456:	6812      	ldr	r2, [r2, #0]
 8025458:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802545a:	430b      	orrs	r3, r1
 802545c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 802545e:	687b      	ldr	r3, [r7, #4]
 8025460:	681b      	ldr	r3, [r3, #0]
 8025462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025464:	f023 010f 	bic.w	r1, r3, #15
 8025468:	687b      	ldr	r3, [r7, #4]
 802546a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	681b      	ldr	r3, [r3, #0]
 8025470:	430a      	orrs	r2, r1
 8025472:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8025474:	687b      	ldr	r3, [r7, #4]
 8025476:	681b      	ldr	r3, [r3, #0]
 8025478:	4aa7      	ldr	r2, [pc, #668]	; (8025718 <UART_SetConfig+0x338>)
 802547a:	4293      	cmp	r3, r2
 802547c:	d176      	bne.n	802556c <UART_SetConfig+0x18c>
 802547e:	4ba7      	ldr	r3, [pc, #668]	; (802571c <UART_SetConfig+0x33c>)
 8025480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8025486:	2b28      	cmp	r3, #40	; 0x28
 8025488:	d86c      	bhi.n	8025564 <UART_SetConfig+0x184>
 802548a:	a201      	add	r2, pc, #4	; (adr r2, 8025490 <UART_SetConfig+0xb0>)
 802548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025490:	08025535 	.word	0x08025535
 8025494:	08025565 	.word	0x08025565
 8025498:	08025565 	.word	0x08025565
 802549c:	08025565 	.word	0x08025565
 80254a0:	08025565 	.word	0x08025565
 80254a4:	08025565 	.word	0x08025565
 80254a8:	08025565 	.word	0x08025565
 80254ac:	08025565 	.word	0x08025565
 80254b0:	0802553d 	.word	0x0802553d
 80254b4:	08025565 	.word	0x08025565
 80254b8:	08025565 	.word	0x08025565
 80254bc:	08025565 	.word	0x08025565
 80254c0:	08025565 	.word	0x08025565
 80254c4:	08025565 	.word	0x08025565
 80254c8:	08025565 	.word	0x08025565
 80254cc:	08025565 	.word	0x08025565
 80254d0:	08025545 	.word	0x08025545
 80254d4:	08025565 	.word	0x08025565
 80254d8:	08025565 	.word	0x08025565
 80254dc:	08025565 	.word	0x08025565
 80254e0:	08025565 	.word	0x08025565
 80254e4:	08025565 	.word	0x08025565
 80254e8:	08025565 	.word	0x08025565
 80254ec:	08025565 	.word	0x08025565
 80254f0:	0802554d 	.word	0x0802554d
 80254f4:	08025565 	.word	0x08025565
 80254f8:	08025565 	.word	0x08025565
 80254fc:	08025565 	.word	0x08025565
 8025500:	08025565 	.word	0x08025565
 8025504:	08025565 	.word	0x08025565
 8025508:	08025565 	.word	0x08025565
 802550c:	08025565 	.word	0x08025565
 8025510:	08025555 	.word	0x08025555
 8025514:	08025565 	.word	0x08025565
 8025518:	08025565 	.word	0x08025565
 802551c:	08025565 	.word	0x08025565
 8025520:	08025565 	.word	0x08025565
 8025524:	08025565 	.word	0x08025565
 8025528:	08025565 	.word	0x08025565
 802552c:	08025565 	.word	0x08025565
 8025530:	0802555d 	.word	0x0802555d
 8025534:	2301      	movs	r3, #1
 8025536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802553a:	e222      	b.n	8025982 <UART_SetConfig+0x5a2>
 802553c:	2304      	movs	r3, #4
 802553e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025542:	e21e      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025544:	2308      	movs	r3, #8
 8025546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802554a:	e21a      	b.n	8025982 <UART_SetConfig+0x5a2>
 802554c:	2310      	movs	r3, #16
 802554e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025552:	e216      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025554:	2320      	movs	r3, #32
 8025556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802555a:	e212      	b.n	8025982 <UART_SetConfig+0x5a2>
 802555c:	2340      	movs	r3, #64	; 0x40
 802555e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025562:	e20e      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025564:	2380      	movs	r3, #128	; 0x80
 8025566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802556a:	e20a      	b.n	8025982 <UART_SetConfig+0x5a2>
 802556c:	687b      	ldr	r3, [r7, #4]
 802556e:	681b      	ldr	r3, [r3, #0]
 8025570:	4a6b      	ldr	r2, [pc, #428]	; (8025720 <UART_SetConfig+0x340>)
 8025572:	4293      	cmp	r3, r2
 8025574:	d130      	bne.n	80255d8 <UART_SetConfig+0x1f8>
 8025576:	4b69      	ldr	r3, [pc, #420]	; (802571c <UART_SetConfig+0x33c>)
 8025578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802557a:	f003 0307 	and.w	r3, r3, #7
 802557e:	2b05      	cmp	r3, #5
 8025580:	d826      	bhi.n	80255d0 <UART_SetConfig+0x1f0>
 8025582:	a201      	add	r2, pc, #4	; (adr r2, 8025588 <UART_SetConfig+0x1a8>)
 8025584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025588:	080255a1 	.word	0x080255a1
 802558c:	080255a9 	.word	0x080255a9
 8025590:	080255b1 	.word	0x080255b1
 8025594:	080255b9 	.word	0x080255b9
 8025598:	080255c1 	.word	0x080255c1
 802559c:	080255c9 	.word	0x080255c9
 80255a0:	2300      	movs	r3, #0
 80255a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80255a6:	e1ec      	b.n	8025982 <UART_SetConfig+0x5a2>
 80255a8:	2304      	movs	r3, #4
 80255aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80255ae:	e1e8      	b.n	8025982 <UART_SetConfig+0x5a2>
 80255b0:	2308      	movs	r3, #8
 80255b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80255b6:	e1e4      	b.n	8025982 <UART_SetConfig+0x5a2>
 80255b8:	2310      	movs	r3, #16
 80255ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80255be:	e1e0      	b.n	8025982 <UART_SetConfig+0x5a2>
 80255c0:	2320      	movs	r3, #32
 80255c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80255c6:	e1dc      	b.n	8025982 <UART_SetConfig+0x5a2>
 80255c8:	2340      	movs	r3, #64	; 0x40
 80255ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80255ce:	e1d8      	b.n	8025982 <UART_SetConfig+0x5a2>
 80255d0:	2380      	movs	r3, #128	; 0x80
 80255d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80255d6:	e1d4      	b.n	8025982 <UART_SetConfig+0x5a2>
 80255d8:	687b      	ldr	r3, [r7, #4]
 80255da:	681b      	ldr	r3, [r3, #0]
 80255dc:	4a51      	ldr	r2, [pc, #324]	; (8025724 <UART_SetConfig+0x344>)
 80255de:	4293      	cmp	r3, r2
 80255e0:	d130      	bne.n	8025644 <UART_SetConfig+0x264>
 80255e2:	4b4e      	ldr	r3, [pc, #312]	; (802571c <UART_SetConfig+0x33c>)
 80255e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80255e6:	f003 0307 	and.w	r3, r3, #7
 80255ea:	2b05      	cmp	r3, #5
 80255ec:	d826      	bhi.n	802563c <UART_SetConfig+0x25c>
 80255ee:	a201      	add	r2, pc, #4	; (adr r2, 80255f4 <UART_SetConfig+0x214>)
 80255f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80255f4:	0802560d 	.word	0x0802560d
 80255f8:	08025615 	.word	0x08025615
 80255fc:	0802561d 	.word	0x0802561d
 8025600:	08025625 	.word	0x08025625
 8025604:	0802562d 	.word	0x0802562d
 8025608:	08025635 	.word	0x08025635
 802560c:	2300      	movs	r3, #0
 802560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025612:	e1b6      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025614:	2304      	movs	r3, #4
 8025616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802561a:	e1b2      	b.n	8025982 <UART_SetConfig+0x5a2>
 802561c:	2308      	movs	r3, #8
 802561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025622:	e1ae      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025624:	2310      	movs	r3, #16
 8025626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802562a:	e1aa      	b.n	8025982 <UART_SetConfig+0x5a2>
 802562c:	2320      	movs	r3, #32
 802562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025632:	e1a6      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025634:	2340      	movs	r3, #64	; 0x40
 8025636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802563a:	e1a2      	b.n	8025982 <UART_SetConfig+0x5a2>
 802563c:	2380      	movs	r3, #128	; 0x80
 802563e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025642:	e19e      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025644:	687b      	ldr	r3, [r7, #4]
 8025646:	681b      	ldr	r3, [r3, #0]
 8025648:	4a37      	ldr	r2, [pc, #220]	; (8025728 <UART_SetConfig+0x348>)
 802564a:	4293      	cmp	r3, r2
 802564c:	d130      	bne.n	80256b0 <UART_SetConfig+0x2d0>
 802564e:	4b33      	ldr	r3, [pc, #204]	; (802571c <UART_SetConfig+0x33c>)
 8025650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025652:	f003 0307 	and.w	r3, r3, #7
 8025656:	2b05      	cmp	r3, #5
 8025658:	d826      	bhi.n	80256a8 <UART_SetConfig+0x2c8>
 802565a:	a201      	add	r2, pc, #4	; (adr r2, 8025660 <UART_SetConfig+0x280>)
 802565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025660:	08025679 	.word	0x08025679
 8025664:	08025681 	.word	0x08025681
 8025668:	08025689 	.word	0x08025689
 802566c:	08025691 	.word	0x08025691
 8025670:	08025699 	.word	0x08025699
 8025674:	080256a1 	.word	0x080256a1
 8025678:	2300      	movs	r3, #0
 802567a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802567e:	e180      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025680:	2304      	movs	r3, #4
 8025682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025686:	e17c      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025688:	2308      	movs	r3, #8
 802568a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802568e:	e178      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025690:	2310      	movs	r3, #16
 8025692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025696:	e174      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025698:	2320      	movs	r3, #32
 802569a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802569e:	e170      	b.n	8025982 <UART_SetConfig+0x5a2>
 80256a0:	2340      	movs	r3, #64	; 0x40
 80256a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80256a6:	e16c      	b.n	8025982 <UART_SetConfig+0x5a2>
 80256a8:	2380      	movs	r3, #128	; 0x80
 80256aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80256ae:	e168      	b.n	8025982 <UART_SetConfig+0x5a2>
 80256b0:	687b      	ldr	r3, [r7, #4]
 80256b2:	681b      	ldr	r3, [r3, #0]
 80256b4:	4a1d      	ldr	r2, [pc, #116]	; (802572c <UART_SetConfig+0x34c>)
 80256b6:	4293      	cmp	r3, r2
 80256b8:	d142      	bne.n	8025740 <UART_SetConfig+0x360>
 80256ba:	4b18      	ldr	r3, [pc, #96]	; (802571c <UART_SetConfig+0x33c>)
 80256bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80256be:	f003 0307 	and.w	r3, r3, #7
 80256c2:	2b05      	cmp	r3, #5
 80256c4:	d838      	bhi.n	8025738 <UART_SetConfig+0x358>
 80256c6:	a201      	add	r2, pc, #4	; (adr r2, 80256cc <UART_SetConfig+0x2ec>)
 80256c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80256cc:	080256e5 	.word	0x080256e5
 80256d0:	080256ed 	.word	0x080256ed
 80256d4:	080256f5 	.word	0x080256f5
 80256d8:	080256fd 	.word	0x080256fd
 80256dc:	08025705 	.word	0x08025705
 80256e0:	08025731 	.word	0x08025731
 80256e4:	2300      	movs	r3, #0
 80256e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80256ea:	e14a      	b.n	8025982 <UART_SetConfig+0x5a2>
 80256ec:	2304      	movs	r3, #4
 80256ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80256f2:	e146      	b.n	8025982 <UART_SetConfig+0x5a2>
 80256f4:	2308      	movs	r3, #8
 80256f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80256fa:	e142      	b.n	8025982 <UART_SetConfig+0x5a2>
 80256fc:	2310      	movs	r3, #16
 80256fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025702:	e13e      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025704:	2320      	movs	r3, #32
 8025706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802570a:	e13a      	b.n	8025982 <UART_SetConfig+0x5a2>
 802570c:	cfff69f3 	.word	0xcfff69f3
 8025710:	58000c00 	.word	0x58000c00
 8025714:	11fff4ff 	.word	0x11fff4ff
 8025718:	40011000 	.word	0x40011000
 802571c:	58024400 	.word	0x58024400
 8025720:	40004400 	.word	0x40004400
 8025724:	40004800 	.word	0x40004800
 8025728:	40004c00 	.word	0x40004c00
 802572c:	40005000 	.word	0x40005000
 8025730:	2340      	movs	r3, #64	; 0x40
 8025732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025736:	e124      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025738:	2380      	movs	r3, #128	; 0x80
 802573a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802573e:	e120      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025740:	687b      	ldr	r3, [r7, #4]
 8025742:	681b      	ldr	r3, [r3, #0]
 8025744:	4acc      	ldr	r2, [pc, #816]	; (8025a78 <UART_SetConfig+0x698>)
 8025746:	4293      	cmp	r3, r2
 8025748:	d176      	bne.n	8025838 <UART_SetConfig+0x458>
 802574a:	4bcc      	ldr	r3, [pc, #816]	; (8025a7c <UART_SetConfig+0x69c>)
 802574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802574e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8025752:	2b28      	cmp	r3, #40	; 0x28
 8025754:	d86c      	bhi.n	8025830 <UART_SetConfig+0x450>
 8025756:	a201      	add	r2, pc, #4	; (adr r2, 802575c <UART_SetConfig+0x37c>)
 8025758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802575c:	08025801 	.word	0x08025801
 8025760:	08025831 	.word	0x08025831
 8025764:	08025831 	.word	0x08025831
 8025768:	08025831 	.word	0x08025831
 802576c:	08025831 	.word	0x08025831
 8025770:	08025831 	.word	0x08025831
 8025774:	08025831 	.word	0x08025831
 8025778:	08025831 	.word	0x08025831
 802577c:	08025809 	.word	0x08025809
 8025780:	08025831 	.word	0x08025831
 8025784:	08025831 	.word	0x08025831
 8025788:	08025831 	.word	0x08025831
 802578c:	08025831 	.word	0x08025831
 8025790:	08025831 	.word	0x08025831
 8025794:	08025831 	.word	0x08025831
 8025798:	08025831 	.word	0x08025831
 802579c:	08025811 	.word	0x08025811
 80257a0:	08025831 	.word	0x08025831
 80257a4:	08025831 	.word	0x08025831
 80257a8:	08025831 	.word	0x08025831
 80257ac:	08025831 	.word	0x08025831
 80257b0:	08025831 	.word	0x08025831
 80257b4:	08025831 	.word	0x08025831
 80257b8:	08025831 	.word	0x08025831
 80257bc:	08025819 	.word	0x08025819
 80257c0:	08025831 	.word	0x08025831
 80257c4:	08025831 	.word	0x08025831
 80257c8:	08025831 	.word	0x08025831
 80257cc:	08025831 	.word	0x08025831
 80257d0:	08025831 	.word	0x08025831
 80257d4:	08025831 	.word	0x08025831
 80257d8:	08025831 	.word	0x08025831
 80257dc:	08025821 	.word	0x08025821
 80257e0:	08025831 	.word	0x08025831
 80257e4:	08025831 	.word	0x08025831
 80257e8:	08025831 	.word	0x08025831
 80257ec:	08025831 	.word	0x08025831
 80257f0:	08025831 	.word	0x08025831
 80257f4:	08025831 	.word	0x08025831
 80257f8:	08025831 	.word	0x08025831
 80257fc:	08025829 	.word	0x08025829
 8025800:	2301      	movs	r3, #1
 8025802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025806:	e0bc      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025808:	2304      	movs	r3, #4
 802580a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802580e:	e0b8      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025810:	2308      	movs	r3, #8
 8025812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025816:	e0b4      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025818:	2310      	movs	r3, #16
 802581a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802581e:	e0b0      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025820:	2320      	movs	r3, #32
 8025822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025826:	e0ac      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025828:	2340      	movs	r3, #64	; 0x40
 802582a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802582e:	e0a8      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025830:	2380      	movs	r3, #128	; 0x80
 8025832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025836:	e0a4      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025838:	687b      	ldr	r3, [r7, #4]
 802583a:	681b      	ldr	r3, [r3, #0]
 802583c:	4a90      	ldr	r2, [pc, #576]	; (8025a80 <UART_SetConfig+0x6a0>)
 802583e:	4293      	cmp	r3, r2
 8025840:	d130      	bne.n	80258a4 <UART_SetConfig+0x4c4>
 8025842:	4b8e      	ldr	r3, [pc, #568]	; (8025a7c <UART_SetConfig+0x69c>)
 8025844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025846:	f003 0307 	and.w	r3, r3, #7
 802584a:	2b05      	cmp	r3, #5
 802584c:	d826      	bhi.n	802589c <UART_SetConfig+0x4bc>
 802584e:	a201      	add	r2, pc, #4	; (adr r2, 8025854 <UART_SetConfig+0x474>)
 8025850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025854:	0802586d 	.word	0x0802586d
 8025858:	08025875 	.word	0x08025875
 802585c:	0802587d 	.word	0x0802587d
 8025860:	08025885 	.word	0x08025885
 8025864:	0802588d 	.word	0x0802588d
 8025868:	08025895 	.word	0x08025895
 802586c:	2300      	movs	r3, #0
 802586e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025872:	e086      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025874:	2304      	movs	r3, #4
 8025876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802587a:	e082      	b.n	8025982 <UART_SetConfig+0x5a2>
 802587c:	2308      	movs	r3, #8
 802587e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025882:	e07e      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025884:	2310      	movs	r3, #16
 8025886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802588a:	e07a      	b.n	8025982 <UART_SetConfig+0x5a2>
 802588c:	2320      	movs	r3, #32
 802588e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025892:	e076      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025894:	2340      	movs	r3, #64	; 0x40
 8025896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802589a:	e072      	b.n	8025982 <UART_SetConfig+0x5a2>
 802589c:	2380      	movs	r3, #128	; 0x80
 802589e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80258a2:	e06e      	b.n	8025982 <UART_SetConfig+0x5a2>
 80258a4:	687b      	ldr	r3, [r7, #4]
 80258a6:	681b      	ldr	r3, [r3, #0]
 80258a8:	4a76      	ldr	r2, [pc, #472]	; (8025a84 <UART_SetConfig+0x6a4>)
 80258aa:	4293      	cmp	r3, r2
 80258ac:	d130      	bne.n	8025910 <UART_SetConfig+0x530>
 80258ae:	4b73      	ldr	r3, [pc, #460]	; (8025a7c <UART_SetConfig+0x69c>)
 80258b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80258b2:	f003 0307 	and.w	r3, r3, #7
 80258b6:	2b05      	cmp	r3, #5
 80258b8:	d826      	bhi.n	8025908 <UART_SetConfig+0x528>
 80258ba:	a201      	add	r2, pc, #4	; (adr r2, 80258c0 <UART_SetConfig+0x4e0>)
 80258bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80258c0:	080258d9 	.word	0x080258d9
 80258c4:	080258e1 	.word	0x080258e1
 80258c8:	080258e9 	.word	0x080258e9
 80258cc:	080258f1 	.word	0x080258f1
 80258d0:	080258f9 	.word	0x080258f9
 80258d4:	08025901 	.word	0x08025901
 80258d8:	2300      	movs	r3, #0
 80258da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80258de:	e050      	b.n	8025982 <UART_SetConfig+0x5a2>
 80258e0:	2304      	movs	r3, #4
 80258e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80258e6:	e04c      	b.n	8025982 <UART_SetConfig+0x5a2>
 80258e8:	2308      	movs	r3, #8
 80258ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80258ee:	e048      	b.n	8025982 <UART_SetConfig+0x5a2>
 80258f0:	2310      	movs	r3, #16
 80258f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80258f6:	e044      	b.n	8025982 <UART_SetConfig+0x5a2>
 80258f8:	2320      	movs	r3, #32
 80258fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80258fe:	e040      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025900:	2340      	movs	r3, #64	; 0x40
 8025902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025906:	e03c      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025908:	2380      	movs	r3, #128	; 0x80
 802590a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802590e:	e038      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025910:	687b      	ldr	r3, [r7, #4]
 8025912:	681b      	ldr	r3, [r3, #0]
 8025914:	4a5c      	ldr	r2, [pc, #368]	; (8025a88 <UART_SetConfig+0x6a8>)
 8025916:	4293      	cmp	r3, r2
 8025918:	d130      	bne.n	802597c <UART_SetConfig+0x59c>
 802591a:	4b58      	ldr	r3, [pc, #352]	; (8025a7c <UART_SetConfig+0x69c>)
 802591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802591e:	f003 0307 	and.w	r3, r3, #7
 8025922:	2b05      	cmp	r3, #5
 8025924:	d826      	bhi.n	8025974 <UART_SetConfig+0x594>
 8025926:	a201      	add	r2, pc, #4	; (adr r2, 802592c <UART_SetConfig+0x54c>)
 8025928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802592c:	08025945 	.word	0x08025945
 8025930:	0802594d 	.word	0x0802594d
 8025934:	08025955 	.word	0x08025955
 8025938:	0802595d 	.word	0x0802595d
 802593c:	08025965 	.word	0x08025965
 8025940:	0802596d 	.word	0x0802596d
 8025944:	2302      	movs	r3, #2
 8025946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802594a:	e01a      	b.n	8025982 <UART_SetConfig+0x5a2>
 802594c:	2304      	movs	r3, #4
 802594e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025952:	e016      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025954:	2308      	movs	r3, #8
 8025956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802595a:	e012      	b.n	8025982 <UART_SetConfig+0x5a2>
 802595c:	2310      	movs	r3, #16
 802595e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025962:	e00e      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025964:	2320      	movs	r3, #32
 8025966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802596a:	e00a      	b.n	8025982 <UART_SetConfig+0x5a2>
 802596c:	2340      	movs	r3, #64	; 0x40
 802596e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8025972:	e006      	b.n	8025982 <UART_SetConfig+0x5a2>
 8025974:	2380      	movs	r3, #128	; 0x80
 8025976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802597a:	e002      	b.n	8025982 <UART_SetConfig+0x5a2>
 802597c:	2380      	movs	r3, #128	; 0x80
 802597e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8025982:	687b      	ldr	r3, [r7, #4]
 8025984:	681b      	ldr	r3, [r3, #0]
 8025986:	4a40      	ldr	r2, [pc, #256]	; (8025a88 <UART_SetConfig+0x6a8>)
 8025988:	4293      	cmp	r3, r2
 802598a:	f040 80ef 	bne.w	8025b6c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802598e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8025992:	2b20      	cmp	r3, #32
 8025994:	dc46      	bgt.n	8025a24 <UART_SetConfig+0x644>
 8025996:	2b02      	cmp	r3, #2
 8025998:	f2c0 8081 	blt.w	8025a9e <UART_SetConfig+0x6be>
 802599c:	3b02      	subs	r3, #2
 802599e:	2b1e      	cmp	r3, #30
 80259a0:	d87d      	bhi.n	8025a9e <UART_SetConfig+0x6be>
 80259a2:	a201      	add	r2, pc, #4	; (adr r2, 80259a8 <UART_SetConfig+0x5c8>)
 80259a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80259a8:	08025a2b 	.word	0x08025a2b
 80259ac:	08025a9f 	.word	0x08025a9f
 80259b0:	08025a33 	.word	0x08025a33
 80259b4:	08025a9f 	.word	0x08025a9f
 80259b8:	08025a9f 	.word	0x08025a9f
 80259bc:	08025a9f 	.word	0x08025a9f
 80259c0:	08025a43 	.word	0x08025a43
 80259c4:	08025a9f 	.word	0x08025a9f
 80259c8:	08025a9f 	.word	0x08025a9f
 80259cc:	08025a9f 	.word	0x08025a9f
 80259d0:	08025a9f 	.word	0x08025a9f
 80259d4:	08025a9f 	.word	0x08025a9f
 80259d8:	08025a9f 	.word	0x08025a9f
 80259dc:	08025a9f 	.word	0x08025a9f
 80259e0:	08025a53 	.word	0x08025a53
 80259e4:	08025a9f 	.word	0x08025a9f
 80259e8:	08025a9f 	.word	0x08025a9f
 80259ec:	08025a9f 	.word	0x08025a9f
 80259f0:	08025a9f 	.word	0x08025a9f
 80259f4:	08025a9f 	.word	0x08025a9f
 80259f8:	08025a9f 	.word	0x08025a9f
 80259fc:	08025a9f 	.word	0x08025a9f
 8025a00:	08025a9f 	.word	0x08025a9f
 8025a04:	08025a9f 	.word	0x08025a9f
 8025a08:	08025a9f 	.word	0x08025a9f
 8025a0c:	08025a9f 	.word	0x08025a9f
 8025a10:	08025a9f 	.word	0x08025a9f
 8025a14:	08025a9f 	.word	0x08025a9f
 8025a18:	08025a9f 	.word	0x08025a9f
 8025a1c:	08025a9f 	.word	0x08025a9f
 8025a20:	08025a91 	.word	0x08025a91
 8025a24:	2b40      	cmp	r3, #64	; 0x40
 8025a26:	d036      	beq.n	8025a96 <UART_SetConfig+0x6b6>
 8025a28:	e039      	b.n	8025a9e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8025a2a:	f7fe fad3 	bl	8023fd4 <HAL_RCCEx_GetD3PCLK1Freq>
 8025a2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8025a30:	e03b      	b.n	8025aaa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8025a32:	f107 0314 	add.w	r3, r7, #20
 8025a36:	4618      	mov	r0, r3
 8025a38:	f7fe fae2 	bl	8024000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8025a3c:	69bb      	ldr	r3, [r7, #24]
 8025a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025a40:	e033      	b.n	8025aaa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8025a42:	f107 0308 	add.w	r3, r7, #8
 8025a46:	4618      	mov	r0, r3
 8025a48:	f7fe fc2e 	bl	80242a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8025a4c:	68fb      	ldr	r3, [r7, #12]
 8025a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025a50:	e02b      	b.n	8025aaa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8025a52:	4b0a      	ldr	r3, [pc, #40]	; (8025a7c <UART_SetConfig+0x69c>)
 8025a54:	681b      	ldr	r3, [r3, #0]
 8025a56:	f003 0320 	and.w	r3, r3, #32
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d009      	beq.n	8025a72 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8025a5e:	4b07      	ldr	r3, [pc, #28]	; (8025a7c <UART_SetConfig+0x69c>)
 8025a60:	681b      	ldr	r3, [r3, #0]
 8025a62:	08db      	lsrs	r3, r3, #3
 8025a64:	f003 0303 	and.w	r3, r3, #3
 8025a68:	4a08      	ldr	r2, [pc, #32]	; (8025a8c <UART_SetConfig+0x6ac>)
 8025a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8025a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8025a70:	e01b      	b.n	8025aaa <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8025a72:	4b06      	ldr	r3, [pc, #24]	; (8025a8c <UART_SetConfig+0x6ac>)
 8025a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025a76:	e018      	b.n	8025aaa <UART_SetConfig+0x6ca>
 8025a78:	40011400 	.word	0x40011400
 8025a7c:	58024400 	.word	0x58024400
 8025a80:	40007800 	.word	0x40007800
 8025a84:	40007c00 	.word	0x40007c00
 8025a88:	58000c00 	.word	0x58000c00
 8025a8c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8025a90:	4bc4      	ldr	r3, [pc, #784]	; (8025da4 <UART_SetConfig+0x9c4>)
 8025a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025a94:	e009      	b.n	8025aaa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8025a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025a9c:	e005      	b.n	8025aaa <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8025a9e:	2300      	movs	r3, #0
 8025aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8025aa2:	2301      	movs	r3, #1
 8025aa4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8025aa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8025aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025aac:	2b00      	cmp	r3, #0
 8025aae:	f000 81da 	beq.w	8025e66 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8025ab2:	687b      	ldr	r3, [r7, #4]
 8025ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025ab6:	4abc      	ldr	r2, [pc, #752]	; (8025da8 <UART_SetConfig+0x9c8>)
 8025ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025abc:	461a      	mov	r2, r3
 8025abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8025ac4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8025ac6:	687b      	ldr	r3, [r7, #4]
 8025ac8:	685a      	ldr	r2, [r3, #4]
 8025aca:	4613      	mov	r3, r2
 8025acc:	005b      	lsls	r3, r3, #1
 8025ace:	4413      	add	r3, r2
 8025ad0:	6a3a      	ldr	r2, [r7, #32]
 8025ad2:	429a      	cmp	r2, r3
 8025ad4:	d305      	bcc.n	8025ae2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8025ad6:	687b      	ldr	r3, [r7, #4]
 8025ad8:	685b      	ldr	r3, [r3, #4]
 8025ada:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8025adc:	6a3a      	ldr	r2, [r7, #32]
 8025ade:	429a      	cmp	r2, r3
 8025ae0:	d903      	bls.n	8025aea <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8025ae2:	2301      	movs	r3, #1
 8025ae4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8025ae8:	e1bd      	b.n	8025e66 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025aec:	4618      	mov	r0, r3
 8025aee:	f04f 0100 	mov.w	r1, #0
 8025af2:	687b      	ldr	r3, [r7, #4]
 8025af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025af6:	4aac      	ldr	r2, [pc, #688]	; (8025da8 <UART_SetConfig+0x9c8>)
 8025af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025afc:	b29a      	uxth	r2, r3
 8025afe:	f04f 0300 	mov.w	r3, #0
 8025b02:	f7fa fce9 	bl	80204d8 <__aeabi_uldivmod>
 8025b06:	4602      	mov	r2, r0
 8025b08:	460b      	mov	r3, r1
 8025b0a:	4610      	mov	r0, r2
 8025b0c:	4619      	mov	r1, r3
 8025b0e:	f04f 0200 	mov.w	r2, #0
 8025b12:	f04f 0300 	mov.w	r3, #0
 8025b16:	020b      	lsls	r3, r1, #8
 8025b18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8025b1c:	0202      	lsls	r2, r0, #8
 8025b1e:	6879      	ldr	r1, [r7, #4]
 8025b20:	6849      	ldr	r1, [r1, #4]
 8025b22:	0849      	lsrs	r1, r1, #1
 8025b24:	4608      	mov	r0, r1
 8025b26:	f04f 0100 	mov.w	r1, #0
 8025b2a:	1814      	adds	r4, r2, r0
 8025b2c:	eb43 0501 	adc.w	r5, r3, r1
 8025b30:	687b      	ldr	r3, [r7, #4]
 8025b32:	685b      	ldr	r3, [r3, #4]
 8025b34:	461a      	mov	r2, r3
 8025b36:	f04f 0300 	mov.w	r3, #0
 8025b3a:	4620      	mov	r0, r4
 8025b3c:	4629      	mov	r1, r5
 8025b3e:	f7fa fccb 	bl	80204d8 <__aeabi_uldivmod>
 8025b42:	4602      	mov	r2, r0
 8025b44:	460b      	mov	r3, r1
 8025b46:	4613      	mov	r3, r2
 8025b48:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8025b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8025b50:	d308      	bcc.n	8025b64 <UART_SetConfig+0x784>
 8025b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8025b58:	d204      	bcs.n	8025b64 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8025b5a:	687b      	ldr	r3, [r7, #4]
 8025b5c:	681b      	ldr	r3, [r3, #0]
 8025b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025b60:	60da      	str	r2, [r3, #12]
 8025b62:	e180      	b.n	8025e66 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8025b64:	2301      	movs	r3, #1
 8025b66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8025b6a:	e17c      	b.n	8025e66 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8025b6c:	687b      	ldr	r3, [r7, #4]
 8025b6e:	69db      	ldr	r3, [r3, #28]
 8025b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025b74:	f040 80bf 	bne.w	8025cf6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8025b78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8025b7c:	2b20      	cmp	r3, #32
 8025b7e:	dc49      	bgt.n	8025c14 <UART_SetConfig+0x834>
 8025b80:	2b00      	cmp	r3, #0
 8025b82:	db7c      	blt.n	8025c7e <UART_SetConfig+0x89e>
 8025b84:	2b20      	cmp	r3, #32
 8025b86:	d87a      	bhi.n	8025c7e <UART_SetConfig+0x89e>
 8025b88:	a201      	add	r2, pc, #4	; (adr r2, 8025b90 <UART_SetConfig+0x7b0>)
 8025b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025b8e:	bf00      	nop
 8025b90:	08025c1b 	.word	0x08025c1b
 8025b94:	08025c23 	.word	0x08025c23
 8025b98:	08025c7f 	.word	0x08025c7f
 8025b9c:	08025c7f 	.word	0x08025c7f
 8025ba0:	08025c2b 	.word	0x08025c2b
 8025ba4:	08025c7f 	.word	0x08025c7f
 8025ba8:	08025c7f 	.word	0x08025c7f
 8025bac:	08025c7f 	.word	0x08025c7f
 8025bb0:	08025c3b 	.word	0x08025c3b
 8025bb4:	08025c7f 	.word	0x08025c7f
 8025bb8:	08025c7f 	.word	0x08025c7f
 8025bbc:	08025c7f 	.word	0x08025c7f
 8025bc0:	08025c7f 	.word	0x08025c7f
 8025bc4:	08025c7f 	.word	0x08025c7f
 8025bc8:	08025c7f 	.word	0x08025c7f
 8025bcc:	08025c7f 	.word	0x08025c7f
 8025bd0:	08025c4b 	.word	0x08025c4b
 8025bd4:	08025c7f 	.word	0x08025c7f
 8025bd8:	08025c7f 	.word	0x08025c7f
 8025bdc:	08025c7f 	.word	0x08025c7f
 8025be0:	08025c7f 	.word	0x08025c7f
 8025be4:	08025c7f 	.word	0x08025c7f
 8025be8:	08025c7f 	.word	0x08025c7f
 8025bec:	08025c7f 	.word	0x08025c7f
 8025bf0:	08025c7f 	.word	0x08025c7f
 8025bf4:	08025c7f 	.word	0x08025c7f
 8025bf8:	08025c7f 	.word	0x08025c7f
 8025bfc:	08025c7f 	.word	0x08025c7f
 8025c00:	08025c7f 	.word	0x08025c7f
 8025c04:	08025c7f 	.word	0x08025c7f
 8025c08:	08025c7f 	.word	0x08025c7f
 8025c0c:	08025c7f 	.word	0x08025c7f
 8025c10:	08025c71 	.word	0x08025c71
 8025c14:	2b40      	cmp	r3, #64	; 0x40
 8025c16:	d02e      	beq.n	8025c76 <UART_SetConfig+0x896>
 8025c18:	e031      	b.n	8025c7e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8025c1a:	f7fd fa6f 	bl	80230fc <HAL_RCC_GetPCLK1Freq>
 8025c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8025c20:	e033      	b.n	8025c8a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8025c22:	f7fd fa81 	bl	8023128 <HAL_RCC_GetPCLK2Freq>
 8025c26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8025c28:	e02f      	b.n	8025c8a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8025c2a:	f107 0314 	add.w	r3, r7, #20
 8025c2e:	4618      	mov	r0, r3
 8025c30:	f7fe f9e6 	bl	8024000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8025c34:	69bb      	ldr	r3, [r7, #24]
 8025c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025c38:	e027      	b.n	8025c8a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8025c3a:	f107 0308 	add.w	r3, r7, #8
 8025c3e:	4618      	mov	r0, r3
 8025c40:	f7fe fb32 	bl	80242a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8025c44:	68fb      	ldr	r3, [r7, #12]
 8025c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025c48:	e01f      	b.n	8025c8a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8025c4a:	4b58      	ldr	r3, [pc, #352]	; (8025dac <UART_SetConfig+0x9cc>)
 8025c4c:	681b      	ldr	r3, [r3, #0]
 8025c4e:	f003 0320 	and.w	r3, r3, #32
 8025c52:	2b00      	cmp	r3, #0
 8025c54:	d009      	beq.n	8025c6a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8025c56:	4b55      	ldr	r3, [pc, #340]	; (8025dac <UART_SetConfig+0x9cc>)
 8025c58:	681b      	ldr	r3, [r3, #0]
 8025c5a:	08db      	lsrs	r3, r3, #3
 8025c5c:	f003 0303 	and.w	r3, r3, #3
 8025c60:	4a53      	ldr	r2, [pc, #332]	; (8025db0 <UART_SetConfig+0x9d0>)
 8025c62:	fa22 f303 	lsr.w	r3, r2, r3
 8025c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8025c68:	e00f      	b.n	8025c8a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8025c6a:	4b51      	ldr	r3, [pc, #324]	; (8025db0 <UART_SetConfig+0x9d0>)
 8025c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025c6e:	e00c      	b.n	8025c8a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8025c70:	4b4c      	ldr	r3, [pc, #304]	; (8025da4 <UART_SetConfig+0x9c4>)
 8025c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025c74:	e009      	b.n	8025c8a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8025c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025c7c:	e005      	b.n	8025c8a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8025c7e:	2300      	movs	r3, #0
 8025c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8025c82:	2301      	movs	r3, #1
 8025c84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8025c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8025c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025c8c:	2b00      	cmp	r3, #0
 8025c8e:	f000 80ea 	beq.w	8025e66 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025c92:	687b      	ldr	r3, [r7, #4]
 8025c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c96:	4a44      	ldr	r2, [pc, #272]	; (8025da8 <UART_SetConfig+0x9c8>)
 8025c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025c9c:	461a      	mov	r2, r3
 8025c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8025ca4:	005a      	lsls	r2, r3, #1
 8025ca6:	687b      	ldr	r3, [r7, #4]
 8025ca8:	685b      	ldr	r3, [r3, #4]
 8025caa:	085b      	lsrs	r3, r3, #1
 8025cac:	441a      	add	r2, r3
 8025cae:	687b      	ldr	r3, [r7, #4]
 8025cb0:	685b      	ldr	r3, [r3, #4]
 8025cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8025cb6:	b29b      	uxth	r3, r3
 8025cb8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8025cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025cbc:	2b0f      	cmp	r3, #15
 8025cbe:	d916      	bls.n	8025cee <UART_SetConfig+0x90e>
 8025cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025cc6:	d212      	bcs.n	8025cee <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8025cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025cca:	b29b      	uxth	r3, r3
 8025ccc:	f023 030f 	bic.w	r3, r3, #15
 8025cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8025cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025cd4:	085b      	lsrs	r3, r3, #1
 8025cd6:	b29b      	uxth	r3, r3
 8025cd8:	f003 0307 	and.w	r3, r3, #7
 8025cdc:	b29a      	uxth	r2, r3
 8025cde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025ce0:	4313      	orrs	r3, r2
 8025ce2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8025ce4:	687b      	ldr	r3, [r7, #4]
 8025ce6:	681b      	ldr	r3, [r3, #0]
 8025ce8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025cea:	60da      	str	r2, [r3, #12]
 8025cec:	e0bb      	b.n	8025e66 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8025cee:	2301      	movs	r3, #1
 8025cf0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8025cf4:	e0b7      	b.n	8025e66 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8025cf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8025cfa:	2b20      	cmp	r3, #32
 8025cfc:	dc4a      	bgt.n	8025d94 <UART_SetConfig+0x9b4>
 8025cfe:	2b00      	cmp	r3, #0
 8025d00:	f2c0 8086 	blt.w	8025e10 <UART_SetConfig+0xa30>
 8025d04:	2b20      	cmp	r3, #32
 8025d06:	f200 8083 	bhi.w	8025e10 <UART_SetConfig+0xa30>
 8025d0a:	a201      	add	r2, pc, #4	; (adr r2, 8025d10 <UART_SetConfig+0x930>)
 8025d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025d10:	08025d9b 	.word	0x08025d9b
 8025d14:	08025db5 	.word	0x08025db5
 8025d18:	08025e11 	.word	0x08025e11
 8025d1c:	08025e11 	.word	0x08025e11
 8025d20:	08025dbd 	.word	0x08025dbd
 8025d24:	08025e11 	.word	0x08025e11
 8025d28:	08025e11 	.word	0x08025e11
 8025d2c:	08025e11 	.word	0x08025e11
 8025d30:	08025dcd 	.word	0x08025dcd
 8025d34:	08025e11 	.word	0x08025e11
 8025d38:	08025e11 	.word	0x08025e11
 8025d3c:	08025e11 	.word	0x08025e11
 8025d40:	08025e11 	.word	0x08025e11
 8025d44:	08025e11 	.word	0x08025e11
 8025d48:	08025e11 	.word	0x08025e11
 8025d4c:	08025e11 	.word	0x08025e11
 8025d50:	08025ddd 	.word	0x08025ddd
 8025d54:	08025e11 	.word	0x08025e11
 8025d58:	08025e11 	.word	0x08025e11
 8025d5c:	08025e11 	.word	0x08025e11
 8025d60:	08025e11 	.word	0x08025e11
 8025d64:	08025e11 	.word	0x08025e11
 8025d68:	08025e11 	.word	0x08025e11
 8025d6c:	08025e11 	.word	0x08025e11
 8025d70:	08025e11 	.word	0x08025e11
 8025d74:	08025e11 	.word	0x08025e11
 8025d78:	08025e11 	.word	0x08025e11
 8025d7c:	08025e11 	.word	0x08025e11
 8025d80:	08025e11 	.word	0x08025e11
 8025d84:	08025e11 	.word	0x08025e11
 8025d88:	08025e11 	.word	0x08025e11
 8025d8c:	08025e11 	.word	0x08025e11
 8025d90:	08025e03 	.word	0x08025e03
 8025d94:	2b40      	cmp	r3, #64	; 0x40
 8025d96:	d037      	beq.n	8025e08 <UART_SetConfig+0xa28>
 8025d98:	e03a      	b.n	8025e10 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8025d9a:	f7fd f9af 	bl	80230fc <HAL_RCC_GetPCLK1Freq>
 8025d9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8025da0:	e03c      	b.n	8025e1c <UART_SetConfig+0xa3c>
 8025da2:	bf00      	nop
 8025da4:	003d0900 	.word	0x003d0900
 8025da8:	08026f48 	.word	0x08026f48
 8025dac:	58024400 	.word	0x58024400
 8025db0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8025db4:	f7fd f9b8 	bl	8023128 <HAL_RCC_GetPCLK2Freq>
 8025db8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8025dba:	e02f      	b.n	8025e1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8025dbc:	f107 0314 	add.w	r3, r7, #20
 8025dc0:	4618      	mov	r0, r3
 8025dc2:	f7fe f91d 	bl	8024000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8025dc6:	69bb      	ldr	r3, [r7, #24]
 8025dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025dca:	e027      	b.n	8025e1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8025dcc:	f107 0308 	add.w	r3, r7, #8
 8025dd0:	4618      	mov	r0, r3
 8025dd2:	f7fe fa69 	bl	80242a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8025dd6:	68fb      	ldr	r3, [r7, #12]
 8025dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025dda:	e01f      	b.n	8025e1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8025ddc:	4b2c      	ldr	r3, [pc, #176]	; (8025e90 <UART_SetConfig+0xab0>)
 8025dde:	681b      	ldr	r3, [r3, #0]
 8025de0:	f003 0320 	and.w	r3, r3, #32
 8025de4:	2b00      	cmp	r3, #0
 8025de6:	d009      	beq.n	8025dfc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8025de8:	4b29      	ldr	r3, [pc, #164]	; (8025e90 <UART_SetConfig+0xab0>)
 8025dea:	681b      	ldr	r3, [r3, #0]
 8025dec:	08db      	lsrs	r3, r3, #3
 8025dee:	f003 0303 	and.w	r3, r3, #3
 8025df2:	4a28      	ldr	r2, [pc, #160]	; (8025e94 <UART_SetConfig+0xab4>)
 8025df4:	fa22 f303 	lsr.w	r3, r2, r3
 8025df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8025dfa:	e00f      	b.n	8025e1c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8025dfc:	4b25      	ldr	r3, [pc, #148]	; (8025e94 <UART_SetConfig+0xab4>)
 8025dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025e00:	e00c      	b.n	8025e1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8025e02:	4b25      	ldr	r3, [pc, #148]	; (8025e98 <UART_SetConfig+0xab8>)
 8025e04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025e06:	e009      	b.n	8025e1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8025e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8025e0e:	e005      	b.n	8025e1c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8025e10:	2300      	movs	r3, #0
 8025e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8025e14:	2301      	movs	r3, #1
 8025e16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8025e1a:	bf00      	nop
    }

    if (pclk != 0U)
 8025e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e1e:	2b00      	cmp	r3, #0
 8025e20:	d021      	beq.n	8025e66 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025e22:	687b      	ldr	r3, [r7, #4]
 8025e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025e26:	4a1d      	ldr	r2, [pc, #116]	; (8025e9c <UART_SetConfig+0xabc>)
 8025e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025e2c:	461a      	mov	r2, r3
 8025e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e30:	fbb3 f2f2 	udiv	r2, r3, r2
 8025e34:	687b      	ldr	r3, [r7, #4]
 8025e36:	685b      	ldr	r3, [r3, #4]
 8025e38:	085b      	lsrs	r3, r3, #1
 8025e3a:	441a      	add	r2, r3
 8025e3c:	687b      	ldr	r3, [r7, #4]
 8025e3e:	685b      	ldr	r3, [r3, #4]
 8025e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8025e44:	b29b      	uxth	r3, r3
 8025e46:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8025e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e4a:	2b0f      	cmp	r3, #15
 8025e4c:	d908      	bls.n	8025e60 <UART_SetConfig+0xa80>
 8025e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025e54:	d204      	bcs.n	8025e60 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8025e56:	687b      	ldr	r3, [r7, #4]
 8025e58:	681b      	ldr	r3, [r3, #0]
 8025e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025e5c:	60da      	str	r2, [r3, #12]
 8025e5e:	e002      	b.n	8025e66 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8025e60:	2301      	movs	r3, #1
 8025e62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8025e66:	687b      	ldr	r3, [r7, #4]
 8025e68:	2201      	movs	r2, #1
 8025e6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8025e6e:	687b      	ldr	r3, [r7, #4]
 8025e70:	2201      	movs	r2, #1
 8025e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8025e76:	687b      	ldr	r3, [r7, #4]
 8025e78:	2200      	movs	r2, #0
 8025e7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8025e7c:	687b      	ldr	r3, [r7, #4]
 8025e7e:	2200      	movs	r2, #0
 8025e80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8025e82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8025e86:	4618      	mov	r0, r3
 8025e88:	3738      	adds	r7, #56	; 0x38
 8025e8a:	46bd      	mov	sp, r7
 8025e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8025e8e:	bf00      	nop
 8025e90:	58024400 	.word	0x58024400
 8025e94:	03d09000 	.word	0x03d09000
 8025e98:	003d0900 	.word	0x003d0900
 8025e9c:	08026f48 	.word	0x08026f48

08025ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8025ea0:	b480      	push	{r7}
 8025ea2:	b083      	sub	sp, #12
 8025ea4:	af00      	add	r7, sp, #0
 8025ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8025ea8:	687b      	ldr	r3, [r7, #4]
 8025eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025eac:	f003 0301 	and.w	r3, r3, #1
 8025eb0:	2b00      	cmp	r3, #0
 8025eb2:	d00a      	beq.n	8025eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8025eb4:	687b      	ldr	r3, [r7, #4]
 8025eb6:	681b      	ldr	r3, [r3, #0]
 8025eb8:	685b      	ldr	r3, [r3, #4]
 8025eba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8025ebe:	687b      	ldr	r3, [r7, #4]
 8025ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025ec2:	687b      	ldr	r3, [r7, #4]
 8025ec4:	681b      	ldr	r3, [r3, #0]
 8025ec6:	430a      	orrs	r2, r1
 8025ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8025eca:	687b      	ldr	r3, [r7, #4]
 8025ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025ece:	f003 0302 	and.w	r3, r3, #2
 8025ed2:	2b00      	cmp	r3, #0
 8025ed4:	d00a      	beq.n	8025eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8025ed6:	687b      	ldr	r3, [r7, #4]
 8025ed8:	681b      	ldr	r3, [r3, #0]
 8025eda:	685b      	ldr	r3, [r3, #4]
 8025edc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8025ee0:	687b      	ldr	r3, [r7, #4]
 8025ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025ee4:	687b      	ldr	r3, [r7, #4]
 8025ee6:	681b      	ldr	r3, [r3, #0]
 8025ee8:	430a      	orrs	r2, r1
 8025eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8025eec:	687b      	ldr	r3, [r7, #4]
 8025eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025ef0:	f003 0304 	and.w	r3, r3, #4
 8025ef4:	2b00      	cmp	r3, #0
 8025ef6:	d00a      	beq.n	8025f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8025ef8:	687b      	ldr	r3, [r7, #4]
 8025efa:	681b      	ldr	r3, [r3, #0]
 8025efc:	685b      	ldr	r3, [r3, #4]
 8025efe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8025f02:	687b      	ldr	r3, [r7, #4]
 8025f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025f06:	687b      	ldr	r3, [r7, #4]
 8025f08:	681b      	ldr	r3, [r3, #0]
 8025f0a:	430a      	orrs	r2, r1
 8025f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8025f0e:	687b      	ldr	r3, [r7, #4]
 8025f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025f12:	f003 0308 	and.w	r3, r3, #8
 8025f16:	2b00      	cmp	r3, #0
 8025f18:	d00a      	beq.n	8025f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8025f1a:	687b      	ldr	r3, [r7, #4]
 8025f1c:	681b      	ldr	r3, [r3, #0]
 8025f1e:	685b      	ldr	r3, [r3, #4]
 8025f20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8025f24:	687b      	ldr	r3, [r7, #4]
 8025f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8025f28:	687b      	ldr	r3, [r7, #4]
 8025f2a:	681b      	ldr	r3, [r3, #0]
 8025f2c:	430a      	orrs	r2, r1
 8025f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8025f30:	687b      	ldr	r3, [r7, #4]
 8025f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025f34:	f003 0310 	and.w	r3, r3, #16
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	d00a      	beq.n	8025f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8025f3c:	687b      	ldr	r3, [r7, #4]
 8025f3e:	681b      	ldr	r3, [r3, #0]
 8025f40:	689b      	ldr	r3, [r3, #8]
 8025f42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8025f46:	687b      	ldr	r3, [r7, #4]
 8025f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8025f4a:	687b      	ldr	r3, [r7, #4]
 8025f4c:	681b      	ldr	r3, [r3, #0]
 8025f4e:	430a      	orrs	r2, r1
 8025f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8025f52:	687b      	ldr	r3, [r7, #4]
 8025f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025f56:	f003 0320 	and.w	r3, r3, #32
 8025f5a:	2b00      	cmp	r3, #0
 8025f5c:	d00a      	beq.n	8025f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8025f5e:	687b      	ldr	r3, [r7, #4]
 8025f60:	681b      	ldr	r3, [r3, #0]
 8025f62:	689b      	ldr	r3, [r3, #8]
 8025f64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8025f68:	687b      	ldr	r3, [r7, #4]
 8025f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8025f6c:	687b      	ldr	r3, [r7, #4]
 8025f6e:	681b      	ldr	r3, [r3, #0]
 8025f70:	430a      	orrs	r2, r1
 8025f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8025f74:	687b      	ldr	r3, [r7, #4]
 8025f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025f7c:	2b00      	cmp	r3, #0
 8025f7e:	d01a      	beq.n	8025fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8025f80:	687b      	ldr	r3, [r7, #4]
 8025f82:	681b      	ldr	r3, [r3, #0]
 8025f84:	685b      	ldr	r3, [r3, #4]
 8025f86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8025f8a:	687b      	ldr	r3, [r7, #4]
 8025f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8025f8e:	687b      	ldr	r3, [r7, #4]
 8025f90:	681b      	ldr	r3, [r3, #0]
 8025f92:	430a      	orrs	r2, r1
 8025f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8025f96:	687b      	ldr	r3, [r7, #4]
 8025f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8025f9e:	d10a      	bne.n	8025fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8025fa0:	687b      	ldr	r3, [r7, #4]
 8025fa2:	681b      	ldr	r3, [r3, #0]
 8025fa4:	685b      	ldr	r3, [r3, #4]
 8025fa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8025faa:	687b      	ldr	r3, [r7, #4]
 8025fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8025fae:	687b      	ldr	r3, [r7, #4]
 8025fb0:	681b      	ldr	r3, [r3, #0]
 8025fb2:	430a      	orrs	r2, r1
 8025fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8025fb6:	687b      	ldr	r3, [r7, #4]
 8025fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025fbe:	2b00      	cmp	r3, #0
 8025fc0:	d00a      	beq.n	8025fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8025fc2:	687b      	ldr	r3, [r7, #4]
 8025fc4:	681b      	ldr	r3, [r3, #0]
 8025fc6:	685b      	ldr	r3, [r3, #4]
 8025fc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8025fcc:	687b      	ldr	r3, [r7, #4]
 8025fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8025fd0:	687b      	ldr	r3, [r7, #4]
 8025fd2:	681b      	ldr	r3, [r3, #0]
 8025fd4:	430a      	orrs	r2, r1
 8025fd6:	605a      	str	r2, [r3, #4]
  }
}
 8025fd8:	bf00      	nop
 8025fda:	370c      	adds	r7, #12
 8025fdc:	46bd      	mov	sp, r7
 8025fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fe2:	4770      	bx	lr

08025fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8025fe4:	b580      	push	{r7, lr}
 8025fe6:	b086      	sub	sp, #24
 8025fe8:	af02      	add	r7, sp, #8
 8025fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8025fec:	687b      	ldr	r3, [r7, #4]
 8025fee:	2200      	movs	r2, #0
 8025ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8025ff4:	f7fb f9aa 	bl	802134c <HAL_GetTick>
 8025ff8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8025ffa:	687b      	ldr	r3, [r7, #4]
 8025ffc:	681b      	ldr	r3, [r3, #0]
 8025ffe:	681b      	ldr	r3, [r3, #0]
 8026000:	f003 0308 	and.w	r3, r3, #8
 8026004:	2b08      	cmp	r3, #8
 8026006:	d10e      	bne.n	8026026 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8026008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802600c:	9300      	str	r3, [sp, #0]
 802600e:	68fb      	ldr	r3, [r7, #12]
 8026010:	2200      	movs	r2, #0
 8026012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8026016:	6878      	ldr	r0, [r7, #4]
 8026018:	f000 f82f 	bl	802607a <UART_WaitOnFlagUntilTimeout>
 802601c:	4603      	mov	r3, r0
 802601e:	2b00      	cmp	r3, #0
 8026020:	d001      	beq.n	8026026 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8026022:	2303      	movs	r3, #3
 8026024:	e025      	b.n	8026072 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8026026:	687b      	ldr	r3, [r7, #4]
 8026028:	681b      	ldr	r3, [r3, #0]
 802602a:	681b      	ldr	r3, [r3, #0]
 802602c:	f003 0304 	and.w	r3, r3, #4
 8026030:	2b04      	cmp	r3, #4
 8026032:	d10e      	bne.n	8026052 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8026034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8026038:	9300      	str	r3, [sp, #0]
 802603a:	68fb      	ldr	r3, [r7, #12]
 802603c:	2200      	movs	r2, #0
 802603e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8026042:	6878      	ldr	r0, [r7, #4]
 8026044:	f000 f819 	bl	802607a <UART_WaitOnFlagUntilTimeout>
 8026048:	4603      	mov	r3, r0
 802604a:	2b00      	cmp	r3, #0
 802604c:	d001      	beq.n	8026052 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802604e:	2303      	movs	r3, #3
 8026050:	e00f      	b.n	8026072 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8026052:	687b      	ldr	r3, [r7, #4]
 8026054:	2220      	movs	r2, #32
 8026056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 802605a:	687b      	ldr	r3, [r7, #4]
 802605c:	2220      	movs	r2, #32
 802605e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8026062:	687b      	ldr	r3, [r7, #4]
 8026064:	2200      	movs	r2, #0
 8026066:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8026068:	687b      	ldr	r3, [r7, #4]
 802606a:	2200      	movs	r2, #0
 802606c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8026070:	2300      	movs	r3, #0
}
 8026072:	4618      	mov	r0, r3
 8026074:	3710      	adds	r7, #16
 8026076:	46bd      	mov	sp, r7
 8026078:	bd80      	pop	{r7, pc}

0802607a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802607a:	b580      	push	{r7, lr}
 802607c:	b084      	sub	sp, #16
 802607e:	af00      	add	r7, sp, #0
 8026080:	60f8      	str	r0, [r7, #12]
 8026082:	60b9      	str	r1, [r7, #8]
 8026084:	603b      	str	r3, [r7, #0]
 8026086:	4613      	mov	r3, r2
 8026088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802608a:	e062      	b.n	8026152 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802608c:	69bb      	ldr	r3, [r7, #24]
 802608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026092:	d05e      	beq.n	8026152 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8026094:	f7fb f95a 	bl	802134c <HAL_GetTick>
 8026098:	4602      	mov	r2, r0
 802609a:	683b      	ldr	r3, [r7, #0]
 802609c:	1ad3      	subs	r3, r2, r3
 802609e:	69ba      	ldr	r2, [r7, #24]
 80260a0:	429a      	cmp	r2, r3
 80260a2:	d302      	bcc.n	80260aa <UART_WaitOnFlagUntilTimeout+0x30>
 80260a4:	69bb      	ldr	r3, [r7, #24]
 80260a6:	2b00      	cmp	r3, #0
 80260a8:	d11d      	bne.n	80260e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80260aa:	68fb      	ldr	r3, [r7, #12]
 80260ac:	681b      	ldr	r3, [r3, #0]
 80260ae:	681a      	ldr	r2, [r3, #0]
 80260b0:	68fb      	ldr	r3, [r7, #12]
 80260b2:	681b      	ldr	r3, [r3, #0]
 80260b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80260b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80260ba:	68fb      	ldr	r3, [r7, #12]
 80260bc:	681b      	ldr	r3, [r3, #0]
 80260be:	689a      	ldr	r2, [r3, #8]
 80260c0:	68fb      	ldr	r3, [r7, #12]
 80260c2:	681b      	ldr	r3, [r3, #0]
 80260c4:	f022 0201 	bic.w	r2, r2, #1
 80260c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80260ca:	68fb      	ldr	r3, [r7, #12]
 80260cc:	2220      	movs	r2, #32
 80260ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80260d2:	68fb      	ldr	r3, [r7, #12]
 80260d4:	2220      	movs	r2, #32
 80260d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80260da:	68fb      	ldr	r3, [r7, #12]
 80260dc:	2200      	movs	r2, #0
 80260de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80260e2:	2303      	movs	r3, #3
 80260e4:	e045      	b.n	8026172 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80260e6:	68fb      	ldr	r3, [r7, #12]
 80260e8:	681b      	ldr	r3, [r3, #0]
 80260ea:	681b      	ldr	r3, [r3, #0]
 80260ec:	f003 0304 	and.w	r3, r3, #4
 80260f0:	2b00      	cmp	r3, #0
 80260f2:	d02e      	beq.n	8026152 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80260f4:	68fb      	ldr	r3, [r7, #12]
 80260f6:	681b      	ldr	r3, [r3, #0]
 80260f8:	69db      	ldr	r3, [r3, #28]
 80260fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80260fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8026102:	d126      	bne.n	8026152 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8026104:	68fb      	ldr	r3, [r7, #12]
 8026106:	681b      	ldr	r3, [r3, #0]
 8026108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802610c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 802610e:	68fb      	ldr	r3, [r7, #12]
 8026110:	681b      	ldr	r3, [r3, #0]
 8026112:	681a      	ldr	r2, [r3, #0]
 8026114:	68fb      	ldr	r3, [r7, #12]
 8026116:	681b      	ldr	r3, [r3, #0]
 8026118:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 802611c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802611e:	68fb      	ldr	r3, [r7, #12]
 8026120:	681b      	ldr	r3, [r3, #0]
 8026122:	689a      	ldr	r2, [r3, #8]
 8026124:	68fb      	ldr	r3, [r7, #12]
 8026126:	681b      	ldr	r3, [r3, #0]
 8026128:	f022 0201 	bic.w	r2, r2, #1
 802612c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 802612e:	68fb      	ldr	r3, [r7, #12]
 8026130:	2220      	movs	r2, #32
 8026132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8026136:	68fb      	ldr	r3, [r7, #12]
 8026138:	2220      	movs	r2, #32
 802613a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802613e:	68fb      	ldr	r3, [r7, #12]
 8026140:	2220      	movs	r2, #32
 8026142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8026146:	68fb      	ldr	r3, [r7, #12]
 8026148:	2200      	movs	r2, #0
 802614a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 802614e:	2303      	movs	r3, #3
 8026150:	e00f      	b.n	8026172 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8026152:	68fb      	ldr	r3, [r7, #12]
 8026154:	681b      	ldr	r3, [r3, #0]
 8026156:	69da      	ldr	r2, [r3, #28]
 8026158:	68bb      	ldr	r3, [r7, #8]
 802615a:	4013      	ands	r3, r2
 802615c:	68ba      	ldr	r2, [r7, #8]
 802615e:	429a      	cmp	r2, r3
 8026160:	bf0c      	ite	eq
 8026162:	2301      	moveq	r3, #1
 8026164:	2300      	movne	r3, #0
 8026166:	b2db      	uxtb	r3, r3
 8026168:	461a      	mov	r2, r3
 802616a:	79fb      	ldrb	r3, [r7, #7]
 802616c:	429a      	cmp	r2, r3
 802616e:	d08d      	beq.n	802608c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8026170:	2300      	movs	r3, #0
}
 8026172:	4618      	mov	r0, r3
 8026174:	3710      	adds	r7, #16
 8026176:	46bd      	mov	sp, r7
 8026178:	bd80      	pop	{r7, pc}

0802617a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802617a:	b480      	push	{r7}
 802617c:	b085      	sub	sp, #20
 802617e:	af00      	add	r7, sp, #0
 8026180:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8026182:	687b      	ldr	r3, [r7, #4]
 8026184:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8026188:	2b01      	cmp	r3, #1
 802618a:	d101      	bne.n	8026190 <HAL_UARTEx_DisableFifoMode+0x16>
 802618c:	2302      	movs	r3, #2
 802618e:	e027      	b.n	80261e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8026190:	687b      	ldr	r3, [r7, #4]
 8026192:	2201      	movs	r2, #1
 8026194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8026198:	687b      	ldr	r3, [r7, #4]
 802619a:	2224      	movs	r2, #36	; 0x24
 802619c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80261a0:	687b      	ldr	r3, [r7, #4]
 80261a2:	681b      	ldr	r3, [r3, #0]
 80261a4:	681b      	ldr	r3, [r3, #0]
 80261a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80261a8:	687b      	ldr	r3, [r7, #4]
 80261aa:	681b      	ldr	r3, [r3, #0]
 80261ac:	681a      	ldr	r2, [r3, #0]
 80261ae:	687b      	ldr	r3, [r7, #4]
 80261b0:	681b      	ldr	r3, [r3, #0]
 80261b2:	f022 0201 	bic.w	r2, r2, #1
 80261b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80261b8:	68fb      	ldr	r3, [r7, #12]
 80261ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80261be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80261c0:	687b      	ldr	r3, [r7, #4]
 80261c2:	2200      	movs	r2, #0
 80261c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80261c6:	687b      	ldr	r3, [r7, #4]
 80261c8:	681b      	ldr	r3, [r3, #0]
 80261ca:	68fa      	ldr	r2, [r7, #12]
 80261cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80261ce:	687b      	ldr	r3, [r7, #4]
 80261d0:	2220      	movs	r2, #32
 80261d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80261d6:	687b      	ldr	r3, [r7, #4]
 80261d8:	2200      	movs	r2, #0
 80261da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80261de:	2300      	movs	r3, #0
}
 80261e0:	4618      	mov	r0, r3
 80261e2:	3714      	adds	r7, #20
 80261e4:	46bd      	mov	sp, r7
 80261e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261ea:	4770      	bx	lr

080261ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80261ec:	b580      	push	{r7, lr}
 80261ee:	b084      	sub	sp, #16
 80261f0:	af00      	add	r7, sp, #0
 80261f2:	6078      	str	r0, [r7, #4]
 80261f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80261f6:	687b      	ldr	r3, [r7, #4]
 80261f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80261fc:	2b01      	cmp	r3, #1
 80261fe:	d101      	bne.n	8026204 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8026200:	2302      	movs	r3, #2
 8026202:	e02d      	b.n	8026260 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8026204:	687b      	ldr	r3, [r7, #4]
 8026206:	2201      	movs	r2, #1
 8026208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802620c:	687b      	ldr	r3, [r7, #4]
 802620e:	2224      	movs	r2, #36	; 0x24
 8026210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	681b      	ldr	r3, [r3, #0]
 8026218:	681b      	ldr	r3, [r3, #0]
 802621a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802621c:	687b      	ldr	r3, [r7, #4]
 802621e:	681b      	ldr	r3, [r3, #0]
 8026220:	681a      	ldr	r2, [r3, #0]
 8026222:	687b      	ldr	r3, [r7, #4]
 8026224:	681b      	ldr	r3, [r3, #0]
 8026226:	f022 0201 	bic.w	r2, r2, #1
 802622a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	681b      	ldr	r3, [r3, #0]
 8026230:	689b      	ldr	r3, [r3, #8]
 8026232:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8026236:	687b      	ldr	r3, [r7, #4]
 8026238:	681b      	ldr	r3, [r3, #0]
 802623a:	683a      	ldr	r2, [r7, #0]
 802623c:	430a      	orrs	r2, r1
 802623e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8026240:	6878      	ldr	r0, [r7, #4]
 8026242:	f000 f84f 	bl	80262e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8026246:	687b      	ldr	r3, [r7, #4]
 8026248:	681b      	ldr	r3, [r3, #0]
 802624a:	68fa      	ldr	r2, [r7, #12]
 802624c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802624e:	687b      	ldr	r3, [r7, #4]
 8026250:	2220      	movs	r2, #32
 8026252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8026256:	687b      	ldr	r3, [r7, #4]
 8026258:	2200      	movs	r2, #0
 802625a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802625e:	2300      	movs	r3, #0
}
 8026260:	4618      	mov	r0, r3
 8026262:	3710      	adds	r7, #16
 8026264:	46bd      	mov	sp, r7
 8026266:	bd80      	pop	{r7, pc}

08026268 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8026268:	b580      	push	{r7, lr}
 802626a:	b084      	sub	sp, #16
 802626c:	af00      	add	r7, sp, #0
 802626e:	6078      	str	r0, [r7, #4]
 8026270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8026272:	687b      	ldr	r3, [r7, #4]
 8026274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8026278:	2b01      	cmp	r3, #1
 802627a:	d101      	bne.n	8026280 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802627c:	2302      	movs	r3, #2
 802627e:	e02d      	b.n	80262dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8026280:	687b      	ldr	r3, [r7, #4]
 8026282:	2201      	movs	r2, #1
 8026284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8026288:	687b      	ldr	r3, [r7, #4]
 802628a:	2224      	movs	r2, #36	; 0x24
 802628c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8026290:	687b      	ldr	r3, [r7, #4]
 8026292:	681b      	ldr	r3, [r3, #0]
 8026294:	681b      	ldr	r3, [r3, #0]
 8026296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8026298:	687b      	ldr	r3, [r7, #4]
 802629a:	681b      	ldr	r3, [r3, #0]
 802629c:	681a      	ldr	r2, [r3, #0]
 802629e:	687b      	ldr	r3, [r7, #4]
 80262a0:	681b      	ldr	r3, [r3, #0]
 80262a2:	f022 0201 	bic.w	r2, r2, #1
 80262a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80262a8:	687b      	ldr	r3, [r7, #4]
 80262aa:	681b      	ldr	r3, [r3, #0]
 80262ac:	689b      	ldr	r3, [r3, #8]
 80262ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80262b2:	687b      	ldr	r3, [r7, #4]
 80262b4:	681b      	ldr	r3, [r3, #0]
 80262b6:	683a      	ldr	r2, [r7, #0]
 80262b8:	430a      	orrs	r2, r1
 80262ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80262bc:	6878      	ldr	r0, [r7, #4]
 80262be:	f000 f811 	bl	80262e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80262c2:	687b      	ldr	r3, [r7, #4]
 80262c4:	681b      	ldr	r3, [r3, #0]
 80262c6:	68fa      	ldr	r2, [r7, #12]
 80262c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80262ca:	687b      	ldr	r3, [r7, #4]
 80262cc:	2220      	movs	r2, #32
 80262ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80262d2:	687b      	ldr	r3, [r7, #4]
 80262d4:	2200      	movs	r2, #0
 80262d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80262da:	2300      	movs	r3, #0
}
 80262dc:	4618      	mov	r0, r3
 80262de:	3710      	adds	r7, #16
 80262e0:	46bd      	mov	sp, r7
 80262e2:	bd80      	pop	{r7, pc}

080262e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80262e4:	b480      	push	{r7}
 80262e6:	b085      	sub	sp, #20
 80262e8:	af00      	add	r7, sp, #0
 80262ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80262ec:	687b      	ldr	r3, [r7, #4]
 80262ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80262f0:	2b00      	cmp	r3, #0
 80262f2:	d108      	bne.n	8026306 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80262f4:	687b      	ldr	r3, [r7, #4]
 80262f6:	2201      	movs	r2, #1
 80262f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80262fc:	687b      	ldr	r3, [r7, #4]
 80262fe:	2201      	movs	r2, #1
 8026300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8026304:	e031      	b.n	802636a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8026306:	2310      	movs	r3, #16
 8026308:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802630a:	2310      	movs	r3, #16
 802630c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802630e:	687b      	ldr	r3, [r7, #4]
 8026310:	681b      	ldr	r3, [r3, #0]
 8026312:	689b      	ldr	r3, [r3, #8]
 8026314:	0e5b      	lsrs	r3, r3, #25
 8026316:	b2db      	uxtb	r3, r3
 8026318:	f003 0307 	and.w	r3, r3, #7
 802631c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802631e:	687b      	ldr	r3, [r7, #4]
 8026320:	681b      	ldr	r3, [r3, #0]
 8026322:	689b      	ldr	r3, [r3, #8]
 8026324:	0f5b      	lsrs	r3, r3, #29
 8026326:	b2db      	uxtb	r3, r3
 8026328:	f003 0307 	and.w	r3, r3, #7
 802632c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802632e:	7bbb      	ldrb	r3, [r7, #14]
 8026330:	7b3a      	ldrb	r2, [r7, #12]
 8026332:	4911      	ldr	r1, [pc, #68]	; (8026378 <UARTEx_SetNbDataToProcess+0x94>)
 8026334:	5c8a      	ldrb	r2, [r1, r2]
 8026336:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802633a:	7b3a      	ldrb	r2, [r7, #12]
 802633c:	490f      	ldr	r1, [pc, #60]	; (802637c <UARTEx_SetNbDataToProcess+0x98>)
 802633e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8026340:	fb93 f3f2 	sdiv	r3, r3, r2
 8026344:	b29a      	uxth	r2, r3
 8026346:	687b      	ldr	r3, [r7, #4]
 8026348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802634c:	7bfb      	ldrb	r3, [r7, #15]
 802634e:	7b7a      	ldrb	r2, [r7, #13]
 8026350:	4909      	ldr	r1, [pc, #36]	; (8026378 <UARTEx_SetNbDataToProcess+0x94>)
 8026352:	5c8a      	ldrb	r2, [r1, r2]
 8026354:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8026358:	7b7a      	ldrb	r2, [r7, #13]
 802635a:	4908      	ldr	r1, [pc, #32]	; (802637c <UARTEx_SetNbDataToProcess+0x98>)
 802635c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802635e:	fb93 f3f2 	sdiv	r3, r3, r2
 8026362:	b29a      	uxth	r2, r3
 8026364:	687b      	ldr	r3, [r7, #4]
 8026366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 802636a:	bf00      	nop
 802636c:	3714      	adds	r7, #20
 802636e:	46bd      	mov	sp, r7
 8026370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026374:	4770      	bx	lr
 8026376:	bf00      	nop
 8026378:	08026f60 	.word	0x08026f60
 802637c:	08026f68 	.word	0x08026f68

08026380 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8026380:	b580      	push	{r7, lr}
 8026382:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8026384:	4904      	ldr	r1, [pc, #16]	; (8026398 <MX_FATFS_Init+0x18>)
 8026386:	4805      	ldr	r0, [pc, #20]	; (802639c <MX_FATFS_Init+0x1c>)
 8026388:	f000 fd8e 	bl	8026ea8 <FATFS_LinkDriver>
 802638c:	4603      	mov	r3, r0
 802638e:	461a      	mov	r2, r3
 8026390:	4b03      	ldr	r3, [pc, #12]	; (80263a0 <MX_FATFS_Init+0x20>)
 8026392:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8026394:	bf00      	nop
 8026396:	bd80      	pop	{r7, pc}
 8026398:	200002ec 	.word	0x200002ec
 802639c:	20000010 	.word	0x20000010
 80263a0:	200002f0 	.word	0x200002f0

080263a4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80263a4:	b580      	push	{r7, lr}
 80263a6:	b082      	sub	sp, #8
 80263a8:	af00      	add	r7, sp, #0
 80263aa:	4603      	mov	r3, r0
 80263ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80263ae:	79fb      	ldrb	r3, [r7, #7]
 80263b0:	4618      	mov	r0, r3
 80263b2:	f000 f9d9 	bl	8026768 <USER_SPI_initialize>
 80263b6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80263b8:	4618      	mov	r0, r3
 80263ba:	3708      	adds	r7, #8
 80263bc:	46bd      	mov	sp, r7
 80263be:	bd80      	pop	{r7, pc}

080263c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80263c0:	b580      	push	{r7, lr}
 80263c2:	b082      	sub	sp, #8
 80263c4:	af00      	add	r7, sp, #0
 80263c6:	4603      	mov	r3, r0
 80263c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 80263ca:	79fb      	ldrb	r3, [r7, #7]
 80263cc:	4618      	mov	r0, r3
 80263ce:	f000 fab7 	bl	8026940 <USER_SPI_status>
 80263d2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80263d4:	4618      	mov	r0, r3
 80263d6:	3708      	adds	r7, #8
 80263d8:	46bd      	mov	sp, r7
 80263da:	bd80      	pop	{r7, pc}

080263dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80263dc:	b580      	push	{r7, lr}
 80263de:	b084      	sub	sp, #16
 80263e0:	af00      	add	r7, sp, #0
 80263e2:	60b9      	str	r1, [r7, #8]
 80263e4:	607a      	str	r2, [r7, #4]
 80263e6:	603b      	str	r3, [r7, #0]
 80263e8:	4603      	mov	r3, r0
 80263ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80263ec:	7bf8      	ldrb	r0, [r7, #15]
 80263ee:	683b      	ldr	r3, [r7, #0]
 80263f0:	687a      	ldr	r2, [r7, #4]
 80263f2:	68b9      	ldr	r1, [r7, #8]
 80263f4:	f000 faba 	bl	802696c <USER_SPI_read>
 80263f8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80263fa:	4618      	mov	r0, r3
 80263fc:	3710      	adds	r7, #16
 80263fe:	46bd      	mov	sp, r7
 8026400:	bd80      	pop	{r7, pc}

08026402 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8026402:	b580      	push	{r7, lr}
 8026404:	b084      	sub	sp, #16
 8026406:	af00      	add	r7, sp, #0
 8026408:	60b9      	str	r1, [r7, #8]
 802640a:	607a      	str	r2, [r7, #4]
 802640c:	603b      	str	r3, [r7, #0]
 802640e:	4603      	mov	r3, r0
 8026410:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
     return USER_SPI_write(pdrv, buff, sector, count);
 8026412:	7bf8      	ldrb	r0, [r7, #15]
 8026414:	683b      	ldr	r3, [r7, #0]
 8026416:	687a      	ldr	r2, [r7, #4]
 8026418:	68b9      	ldr	r1, [r7, #8]
 802641a:	f000 fb0d 	bl	8026a38 <USER_SPI_write>
 802641e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8026420:	4618      	mov	r0, r3
 8026422:	3710      	adds	r7, #16
 8026424:	46bd      	mov	sp, r7
 8026426:	bd80      	pop	{r7, pc}

08026428 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8026428:	b580      	push	{r7, lr}
 802642a:	b082      	sub	sp, #8
 802642c:	af00      	add	r7, sp, #0
 802642e:	4603      	mov	r3, r0
 8026430:	603a      	str	r2, [r7, #0]
 8026432:	71fb      	strb	r3, [r7, #7]
 8026434:	460b      	mov	r3, r1
 8026436:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8026438:	79b9      	ldrb	r1, [r7, #6]
 802643a:	79fb      	ldrb	r3, [r7, #7]
 802643c:	683a      	ldr	r2, [r7, #0]
 802643e:	4618      	mov	r0, r3
 8026440:	f000 fb76 	bl	8026b30 <USER_SPI_ioctl>
 8026444:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8026446:	4618      	mov	r0, r3
 8026448:	3708      	adds	r7, #8
 802644a:	46bd      	mov	sp, r7
 802644c:	bd80      	pop	{r7, pc}
	...

08026450 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8026450:	b580      	push	{r7, lr}
 8026452:	b082      	sub	sp, #8
 8026454:	af00      	add	r7, sp, #0
 8026456:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8026458:	f7fa ff78 	bl	802134c <HAL_GetTick>
 802645c:	4603      	mov	r3, r0
 802645e:	4a04      	ldr	r2, [pc, #16]	; (8026470 <SPI_Timer_On+0x20>)
 8026460:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8026462:	4a04      	ldr	r2, [pc, #16]	; (8026474 <SPI_Timer_On+0x24>)
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	6013      	str	r3, [r2, #0]
}
 8026468:	bf00      	nop
 802646a:	3708      	adds	r7, #8
 802646c:	46bd      	mov	sp, r7
 802646e:	bd80      	pop	{r7, pc}
 8026470:	20002358 	.word	0x20002358
 8026474:	2000235c 	.word	0x2000235c

08026478 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8026478:	b580      	push	{r7, lr}
 802647a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 802647c:	f7fa ff66 	bl	802134c <HAL_GetTick>
 8026480:	4602      	mov	r2, r0
 8026482:	4b06      	ldr	r3, [pc, #24]	; (802649c <SPI_Timer_Status+0x24>)
 8026484:	681b      	ldr	r3, [r3, #0]
 8026486:	1ad2      	subs	r2, r2, r3
 8026488:	4b05      	ldr	r3, [pc, #20]	; (80264a0 <SPI_Timer_Status+0x28>)
 802648a:	681b      	ldr	r3, [r3, #0]
 802648c:	429a      	cmp	r2, r3
 802648e:	bf34      	ite	cc
 8026490:	2301      	movcc	r3, #1
 8026492:	2300      	movcs	r3, #0
 8026494:	b2db      	uxtb	r3, r3
}
 8026496:	4618      	mov	r0, r3
 8026498:	bd80      	pop	{r7, pc}
 802649a:	bf00      	nop
 802649c:	20002358 	.word	0x20002358
 80264a0:	2000235c 	.word	0x2000235c

080264a4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80264a4:	b580      	push	{r7, lr}
 80264a6:	b086      	sub	sp, #24
 80264a8:	af02      	add	r7, sp, #8
 80264aa:	4603      	mov	r3, r0
 80264ac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80264ae:	f107 020f 	add.w	r2, r7, #15
 80264b2:	1df9      	adds	r1, r7, #7
 80264b4:	2332      	movs	r3, #50	; 0x32
 80264b6:	9300      	str	r3, [sp, #0]
 80264b8:	2301      	movs	r3, #1
 80264ba:	4804      	ldr	r0, [pc, #16]	; (80264cc <xchg_spi+0x28>)
 80264bc:	f7fe fb50 	bl	8024b60 <HAL_SPI_TransmitReceive>
    return rxDat;
 80264c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80264c2:	4618      	mov	r0, r3
 80264c4:	3710      	adds	r7, #16
 80264c6:	46bd      	mov	sp, r7
 80264c8:	bd80      	pop	{r7, pc}
 80264ca:	bf00      	nop
 80264cc:	200001a4 	.word	0x200001a4

080264d0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80264d0:	b590      	push	{r4, r7, lr}
 80264d2:	b085      	sub	sp, #20
 80264d4:	af00      	add	r7, sp, #0
 80264d6:	6078      	str	r0, [r7, #4]
 80264d8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80264da:	2300      	movs	r3, #0
 80264dc:	60fb      	str	r3, [r7, #12]
 80264de:	e00a      	b.n	80264f6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80264e0:	687a      	ldr	r2, [r7, #4]
 80264e2:	68fb      	ldr	r3, [r7, #12]
 80264e4:	18d4      	adds	r4, r2, r3
 80264e6:	20ff      	movs	r0, #255	; 0xff
 80264e8:	f7ff ffdc 	bl	80264a4 <xchg_spi>
 80264ec:	4603      	mov	r3, r0
 80264ee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80264f0:	68fb      	ldr	r3, [r7, #12]
 80264f2:	3301      	adds	r3, #1
 80264f4:	60fb      	str	r3, [r7, #12]
 80264f6:	68fa      	ldr	r2, [r7, #12]
 80264f8:	683b      	ldr	r3, [r7, #0]
 80264fa:	429a      	cmp	r2, r3
 80264fc:	d3f0      	bcc.n	80264e0 <rcvr_spi_multi+0x10>
	}
}
 80264fe:	bf00      	nop
 8026500:	bf00      	nop
 8026502:	3714      	adds	r7, #20
 8026504:	46bd      	mov	sp, r7
 8026506:	bd90      	pop	{r4, r7, pc}

08026508 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8026508:	b580      	push	{r7, lr}
 802650a:	b084      	sub	sp, #16
 802650c:	af00      	add	r7, sp, #0
 802650e:	6078      	str	r0, [r7, #4]
 8026510:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8026512:	2300      	movs	r3, #0
 8026514:	60fb      	str	r3, [r7, #12]
 8026516:	e009      	b.n	802652c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8026518:	687a      	ldr	r2, [r7, #4]
 802651a:	68fb      	ldr	r3, [r7, #12]
 802651c:	4413      	add	r3, r2
 802651e:	781b      	ldrb	r3, [r3, #0]
 8026520:	4618      	mov	r0, r3
 8026522:	f7ff ffbf 	bl	80264a4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8026526:	68fb      	ldr	r3, [r7, #12]
 8026528:	3301      	adds	r3, #1
 802652a:	60fb      	str	r3, [r7, #12]
 802652c:	68fa      	ldr	r2, [r7, #12]
 802652e:	683b      	ldr	r3, [r7, #0]
 8026530:	429a      	cmp	r2, r3
 8026532:	d3f1      	bcc.n	8026518 <xmit_spi_multi+0x10>
	}
}
 8026534:	bf00      	nop
 8026536:	bf00      	nop
 8026538:	3710      	adds	r7, #16
 802653a:	46bd      	mov	sp, r7
 802653c:	bd80      	pop	{r7, pc}

0802653e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 802653e:	b580      	push	{r7, lr}
 8026540:	b086      	sub	sp, #24
 8026542:	af00      	add	r7, sp, #0
 8026544:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8026546:	f7fa ff01 	bl	802134c <HAL_GetTick>
 802654a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 802654c:	687b      	ldr	r3, [r7, #4]
 802654e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8026550:	20ff      	movs	r0, #255	; 0xff
 8026552:	f7ff ffa7 	bl	80264a4 <xchg_spi>
 8026556:	4603      	mov	r3, r0
 8026558:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 802655a:	7bfb      	ldrb	r3, [r7, #15]
 802655c:	2bff      	cmp	r3, #255	; 0xff
 802655e:	d007      	beq.n	8026570 <wait_ready+0x32>
 8026560:	f7fa fef4 	bl	802134c <HAL_GetTick>
 8026564:	4602      	mov	r2, r0
 8026566:	697b      	ldr	r3, [r7, #20]
 8026568:	1ad3      	subs	r3, r2, r3
 802656a:	693a      	ldr	r2, [r7, #16]
 802656c:	429a      	cmp	r2, r3
 802656e:	d8ef      	bhi.n	8026550 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8026570:	7bfb      	ldrb	r3, [r7, #15]
 8026572:	2bff      	cmp	r3, #255	; 0xff
 8026574:	bf0c      	ite	eq
 8026576:	2301      	moveq	r3, #1
 8026578:	2300      	movne	r3, #0
 802657a:	b2db      	uxtb	r3, r3
}
 802657c:	4618      	mov	r0, r3
 802657e:	3718      	adds	r7, #24
 8026580:	46bd      	mov	sp, r7
 8026582:	bd80      	pop	{r7, pc}

08026584 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8026584:	b580      	push	{r7, lr}
 8026586:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8026588:	2201      	movs	r2, #1
 802658a:	2110      	movs	r1, #16
 802658c:	4803      	ldr	r0, [pc, #12]	; (802659c <despiselect+0x18>)
 802658e:	f7fb fdd7 	bl	8022140 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8026592:	20ff      	movs	r0, #255	; 0xff
 8026594:	f7ff ff86 	bl	80264a4 <xchg_spi>

}
 8026598:	bf00      	nop
 802659a:	bd80      	pop	{r7, pc}
 802659c:	58020000 	.word	0x58020000

080265a0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80265a0:	b580      	push	{r7, lr}
 80265a2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80265a4:	2200      	movs	r2, #0
 80265a6:	2110      	movs	r1, #16
 80265a8:	4809      	ldr	r0, [pc, #36]	; (80265d0 <spiselect+0x30>)
 80265aa:	f7fb fdc9 	bl	8022140 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80265ae:	20ff      	movs	r0, #255	; 0xff
 80265b0:	f7ff ff78 	bl	80264a4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80265b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80265b8:	f7ff ffc1 	bl	802653e <wait_ready>
 80265bc:	4603      	mov	r3, r0
 80265be:	2b00      	cmp	r3, #0
 80265c0:	d001      	beq.n	80265c6 <spiselect+0x26>
 80265c2:	2301      	movs	r3, #1
 80265c4:	e002      	b.n	80265cc <spiselect+0x2c>

	despiselect();
 80265c6:	f7ff ffdd 	bl	8026584 <despiselect>
	return 0;	/* Timeout */
 80265ca:	2300      	movs	r3, #0
}
 80265cc:	4618      	mov	r0, r3
 80265ce:	bd80      	pop	{r7, pc}
 80265d0:	58020000 	.word	0x58020000

080265d4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80265d4:	b580      	push	{r7, lr}
 80265d6:	b084      	sub	sp, #16
 80265d8:	af00      	add	r7, sp, #0
 80265da:	6078      	str	r0, [r7, #4]
 80265dc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80265de:	20c8      	movs	r0, #200	; 0xc8
 80265e0:	f7ff ff36 	bl	8026450 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80265e4:	20ff      	movs	r0, #255	; 0xff
 80265e6:	f7ff ff5d 	bl	80264a4 <xchg_spi>
 80265ea:	4603      	mov	r3, r0
 80265ec:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80265ee:	7bfb      	ldrb	r3, [r7, #15]
 80265f0:	2bff      	cmp	r3, #255	; 0xff
 80265f2:	d104      	bne.n	80265fe <rcvr_datablock+0x2a>
 80265f4:	f7ff ff40 	bl	8026478 <SPI_Timer_Status>
 80265f8:	4603      	mov	r3, r0
 80265fa:	2b00      	cmp	r3, #0
 80265fc:	d1f2      	bne.n	80265e4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80265fe:	7bfb      	ldrb	r3, [r7, #15]
 8026600:	2bfe      	cmp	r3, #254	; 0xfe
 8026602:	d001      	beq.n	8026608 <rcvr_datablock+0x34>
 8026604:	2300      	movs	r3, #0
 8026606:	e00a      	b.n	802661e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8026608:	6839      	ldr	r1, [r7, #0]
 802660a:	6878      	ldr	r0, [r7, #4]
 802660c:	f7ff ff60 	bl	80264d0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8026610:	20ff      	movs	r0, #255	; 0xff
 8026612:	f7ff ff47 	bl	80264a4 <xchg_spi>
 8026616:	20ff      	movs	r0, #255	; 0xff
 8026618:	f7ff ff44 	bl	80264a4 <xchg_spi>

	return 1;						/* Function succeeded */
 802661c:	2301      	movs	r3, #1
}
 802661e:	4618      	mov	r0, r3
 8026620:	3710      	adds	r7, #16
 8026622:	46bd      	mov	sp, r7
 8026624:	bd80      	pop	{r7, pc}

08026626 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8026626:	b580      	push	{r7, lr}
 8026628:	b084      	sub	sp, #16
 802662a:	af00      	add	r7, sp, #0
 802662c:	6078      	str	r0, [r7, #4]
 802662e:	460b      	mov	r3, r1
 8026630:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8026632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8026636:	f7ff ff82 	bl	802653e <wait_ready>
 802663a:	4603      	mov	r3, r0
 802663c:	2b00      	cmp	r3, #0
 802663e:	d101      	bne.n	8026644 <xmit_datablock+0x1e>
 8026640:	2300      	movs	r3, #0
 8026642:	e01e      	b.n	8026682 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8026644:	78fb      	ldrb	r3, [r7, #3]
 8026646:	4618      	mov	r0, r3
 8026648:	f7ff ff2c 	bl	80264a4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 802664c:	78fb      	ldrb	r3, [r7, #3]
 802664e:	2bfd      	cmp	r3, #253	; 0xfd
 8026650:	d016      	beq.n	8026680 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8026652:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026656:	6878      	ldr	r0, [r7, #4]
 8026658:	f7ff ff56 	bl	8026508 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 802665c:	20ff      	movs	r0, #255	; 0xff
 802665e:	f7ff ff21 	bl	80264a4 <xchg_spi>
 8026662:	20ff      	movs	r0, #255	; 0xff
 8026664:	f7ff ff1e 	bl	80264a4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8026668:	20ff      	movs	r0, #255	; 0xff
 802666a:	f7ff ff1b 	bl	80264a4 <xchg_spi>
 802666e:	4603      	mov	r3, r0
 8026670:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8026672:	7bfb      	ldrb	r3, [r7, #15]
 8026674:	f003 031f 	and.w	r3, r3, #31
 8026678:	2b05      	cmp	r3, #5
 802667a:	d001      	beq.n	8026680 <xmit_datablock+0x5a>
 802667c:	2300      	movs	r3, #0
 802667e:	e000      	b.n	8026682 <xmit_datablock+0x5c>
	}
	return 1;
 8026680:	2301      	movs	r3, #1
}
 8026682:	4618      	mov	r0, r3
 8026684:	3710      	adds	r7, #16
 8026686:	46bd      	mov	sp, r7
 8026688:	bd80      	pop	{r7, pc}

0802668a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 802668a:	b580      	push	{r7, lr}
 802668c:	b084      	sub	sp, #16
 802668e:	af00      	add	r7, sp, #0
 8026690:	4603      	mov	r3, r0
 8026692:	6039      	str	r1, [r7, #0]
 8026694:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8026696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802669a:	2b00      	cmp	r3, #0
 802669c:	da0e      	bge.n	80266bc <send_cmd+0x32>
		cmd &= 0x7F;
 802669e:	79fb      	ldrb	r3, [r7, #7]
 80266a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80266a4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80266a6:	2100      	movs	r1, #0
 80266a8:	2037      	movs	r0, #55	; 0x37
 80266aa:	f7ff ffee 	bl	802668a <send_cmd>
 80266ae:	4603      	mov	r3, r0
 80266b0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80266b2:	7bbb      	ldrb	r3, [r7, #14]
 80266b4:	2b01      	cmp	r3, #1
 80266b6:	d901      	bls.n	80266bc <send_cmd+0x32>
 80266b8:	7bbb      	ldrb	r3, [r7, #14]
 80266ba:	e051      	b.n	8026760 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80266bc:	79fb      	ldrb	r3, [r7, #7]
 80266be:	2b0c      	cmp	r3, #12
 80266c0:	d008      	beq.n	80266d4 <send_cmd+0x4a>
		despiselect();
 80266c2:	f7ff ff5f 	bl	8026584 <despiselect>
		if (!spiselect()) return 0xFF;
 80266c6:	f7ff ff6b 	bl	80265a0 <spiselect>
 80266ca:	4603      	mov	r3, r0
 80266cc:	2b00      	cmp	r3, #0
 80266ce:	d101      	bne.n	80266d4 <send_cmd+0x4a>
 80266d0:	23ff      	movs	r3, #255	; 0xff
 80266d2:	e045      	b.n	8026760 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80266d4:	79fb      	ldrb	r3, [r7, #7]
 80266d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80266da:	b2db      	uxtb	r3, r3
 80266dc:	4618      	mov	r0, r3
 80266de:	f7ff fee1 	bl	80264a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80266e2:	683b      	ldr	r3, [r7, #0]
 80266e4:	0e1b      	lsrs	r3, r3, #24
 80266e6:	b2db      	uxtb	r3, r3
 80266e8:	4618      	mov	r0, r3
 80266ea:	f7ff fedb 	bl	80264a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80266ee:	683b      	ldr	r3, [r7, #0]
 80266f0:	0c1b      	lsrs	r3, r3, #16
 80266f2:	b2db      	uxtb	r3, r3
 80266f4:	4618      	mov	r0, r3
 80266f6:	f7ff fed5 	bl	80264a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80266fa:	683b      	ldr	r3, [r7, #0]
 80266fc:	0a1b      	lsrs	r3, r3, #8
 80266fe:	b2db      	uxtb	r3, r3
 8026700:	4618      	mov	r0, r3
 8026702:	f7ff fecf 	bl	80264a4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8026706:	683b      	ldr	r3, [r7, #0]
 8026708:	b2db      	uxtb	r3, r3
 802670a:	4618      	mov	r0, r3
 802670c:	f7ff feca 	bl	80264a4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8026710:	2301      	movs	r3, #1
 8026712:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8026714:	79fb      	ldrb	r3, [r7, #7]
 8026716:	2b00      	cmp	r3, #0
 8026718:	d101      	bne.n	802671e <send_cmd+0x94>
 802671a:	2395      	movs	r3, #149	; 0x95
 802671c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 802671e:	79fb      	ldrb	r3, [r7, #7]
 8026720:	2b08      	cmp	r3, #8
 8026722:	d101      	bne.n	8026728 <send_cmd+0x9e>
 8026724:	2387      	movs	r3, #135	; 0x87
 8026726:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8026728:	7bfb      	ldrb	r3, [r7, #15]
 802672a:	4618      	mov	r0, r3
 802672c:	f7ff feba 	bl	80264a4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8026730:	79fb      	ldrb	r3, [r7, #7]
 8026732:	2b0c      	cmp	r3, #12
 8026734:	d102      	bne.n	802673c <send_cmd+0xb2>
 8026736:	20ff      	movs	r0, #255	; 0xff
 8026738:	f7ff feb4 	bl	80264a4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 802673c:	230a      	movs	r3, #10
 802673e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8026740:	20ff      	movs	r0, #255	; 0xff
 8026742:	f7ff feaf 	bl	80264a4 <xchg_spi>
 8026746:	4603      	mov	r3, r0
 8026748:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 802674a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802674e:	2b00      	cmp	r3, #0
 8026750:	da05      	bge.n	802675e <send_cmd+0xd4>
 8026752:	7bfb      	ldrb	r3, [r7, #15]
 8026754:	3b01      	subs	r3, #1
 8026756:	73fb      	strb	r3, [r7, #15]
 8026758:	7bfb      	ldrb	r3, [r7, #15]
 802675a:	2b00      	cmp	r3, #0
 802675c:	d1f0      	bne.n	8026740 <send_cmd+0xb6>

	return res;							/* Return received response */
 802675e:	7bbb      	ldrb	r3, [r7, #14]
}
 8026760:	4618      	mov	r0, r3
 8026762:	3710      	adds	r7, #16
 8026764:	46bd      	mov	sp, r7
 8026766:	bd80      	pop	{r7, pc}

08026768 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8026768:	b590      	push	{r4, r7, lr}
 802676a:	b085      	sub	sp, #20
 802676c:	af00      	add	r7, sp, #0
 802676e:	4603      	mov	r3, r0
 8026770:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8026772:	79fb      	ldrb	r3, [r7, #7]
 8026774:	2b00      	cmp	r3, #0
 8026776:	d001      	beq.n	802677c <USER_SPI_initialize+0x14>
 8026778:	2301      	movs	r3, #1
 802677a:	e0d6      	b.n	802692a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 802677c:	4b6d      	ldr	r3, [pc, #436]	; (8026934 <USER_SPI_initialize+0x1cc>)
 802677e:	781b      	ldrb	r3, [r3, #0]
 8026780:	b2db      	uxtb	r3, r3
 8026782:	f003 0302 	and.w	r3, r3, #2
 8026786:	2b00      	cmp	r3, #0
 8026788:	d003      	beq.n	8026792 <USER_SPI_initialize+0x2a>
 802678a:	4b6a      	ldr	r3, [pc, #424]	; (8026934 <USER_SPI_initialize+0x1cc>)
 802678c:	781b      	ldrb	r3, [r3, #0]
 802678e:	b2db      	uxtb	r3, r3
 8026790:	e0cb      	b.n	802692a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8026792:	4b69      	ldr	r3, [pc, #420]	; (8026938 <USER_SPI_initialize+0x1d0>)
 8026794:	681b      	ldr	r3, [r3, #0]
 8026796:	681b      	ldr	r3, [r3, #0]
 8026798:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 802679c:	4b66      	ldr	r3, [pc, #408]	; (8026938 <USER_SPI_initialize+0x1d0>)
 802679e:	681b      	ldr	r3, [r3, #0]
 80267a0:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80267a4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80267a6:	230a      	movs	r3, #10
 80267a8:	73fb      	strb	r3, [r7, #15]
 80267aa:	e005      	b.n	80267b8 <USER_SPI_initialize+0x50>
 80267ac:	20ff      	movs	r0, #255	; 0xff
 80267ae:	f7ff fe79 	bl	80264a4 <xchg_spi>
 80267b2:	7bfb      	ldrb	r3, [r7, #15]
 80267b4:	3b01      	subs	r3, #1
 80267b6:	73fb      	strb	r3, [r7, #15]
 80267b8:	7bfb      	ldrb	r3, [r7, #15]
 80267ba:	2b00      	cmp	r3, #0
 80267bc:	d1f6      	bne.n	80267ac <USER_SPI_initialize+0x44>

	ty = 0;
 80267be:	2300      	movs	r3, #0
 80267c0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80267c2:	2100      	movs	r1, #0
 80267c4:	2000      	movs	r0, #0
 80267c6:	f7ff ff60 	bl	802668a <send_cmd>
 80267ca:	4603      	mov	r3, r0
 80267cc:	2b01      	cmp	r3, #1
 80267ce:	f040 808b 	bne.w	80268e8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80267d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80267d6:	f7ff fe3b 	bl	8026450 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80267da:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80267de:	2008      	movs	r0, #8
 80267e0:	f7ff ff53 	bl	802668a <send_cmd>
 80267e4:	4603      	mov	r3, r0
 80267e6:	2b01      	cmp	r3, #1
 80267e8:	d151      	bne.n	802688e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80267ea:	2300      	movs	r3, #0
 80267ec:	73fb      	strb	r3, [r7, #15]
 80267ee:	e00d      	b.n	802680c <USER_SPI_initialize+0xa4>
 80267f0:	7bfc      	ldrb	r4, [r7, #15]
 80267f2:	20ff      	movs	r0, #255	; 0xff
 80267f4:	f7ff fe56 	bl	80264a4 <xchg_spi>
 80267f8:	4603      	mov	r3, r0
 80267fa:	461a      	mov	r2, r3
 80267fc:	f107 0310 	add.w	r3, r7, #16
 8026800:	4423      	add	r3, r4
 8026802:	f803 2c08 	strb.w	r2, [r3, #-8]
 8026806:	7bfb      	ldrb	r3, [r7, #15]
 8026808:	3301      	adds	r3, #1
 802680a:	73fb      	strb	r3, [r7, #15]
 802680c:	7bfb      	ldrb	r3, [r7, #15]
 802680e:	2b03      	cmp	r3, #3
 8026810:	d9ee      	bls.n	80267f0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8026812:	7abb      	ldrb	r3, [r7, #10]
 8026814:	2b01      	cmp	r3, #1
 8026816:	d167      	bne.n	80268e8 <USER_SPI_initialize+0x180>
 8026818:	7afb      	ldrb	r3, [r7, #11]
 802681a:	2baa      	cmp	r3, #170	; 0xaa
 802681c:	d164      	bne.n	80268e8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 802681e:	bf00      	nop
 8026820:	f7ff fe2a 	bl	8026478 <SPI_Timer_Status>
 8026824:	4603      	mov	r3, r0
 8026826:	2b00      	cmp	r3, #0
 8026828:	d007      	beq.n	802683a <USER_SPI_initialize+0xd2>
 802682a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802682e:	20a9      	movs	r0, #169	; 0xa9
 8026830:	f7ff ff2b 	bl	802668a <send_cmd>
 8026834:	4603      	mov	r3, r0
 8026836:	2b00      	cmp	r3, #0
 8026838:	d1f2      	bne.n	8026820 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 802683a:	f7ff fe1d 	bl	8026478 <SPI_Timer_Status>
 802683e:	4603      	mov	r3, r0
 8026840:	2b00      	cmp	r3, #0
 8026842:	d051      	beq.n	80268e8 <USER_SPI_initialize+0x180>
 8026844:	2100      	movs	r1, #0
 8026846:	203a      	movs	r0, #58	; 0x3a
 8026848:	f7ff ff1f 	bl	802668a <send_cmd>
 802684c:	4603      	mov	r3, r0
 802684e:	2b00      	cmp	r3, #0
 8026850:	d14a      	bne.n	80268e8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8026852:	2300      	movs	r3, #0
 8026854:	73fb      	strb	r3, [r7, #15]
 8026856:	e00d      	b.n	8026874 <USER_SPI_initialize+0x10c>
 8026858:	7bfc      	ldrb	r4, [r7, #15]
 802685a:	20ff      	movs	r0, #255	; 0xff
 802685c:	f7ff fe22 	bl	80264a4 <xchg_spi>
 8026860:	4603      	mov	r3, r0
 8026862:	461a      	mov	r2, r3
 8026864:	f107 0310 	add.w	r3, r7, #16
 8026868:	4423      	add	r3, r4
 802686a:	f803 2c08 	strb.w	r2, [r3, #-8]
 802686e:	7bfb      	ldrb	r3, [r7, #15]
 8026870:	3301      	adds	r3, #1
 8026872:	73fb      	strb	r3, [r7, #15]
 8026874:	7bfb      	ldrb	r3, [r7, #15]
 8026876:	2b03      	cmp	r3, #3
 8026878:	d9ee      	bls.n	8026858 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 802687a:	7a3b      	ldrb	r3, [r7, #8]
 802687c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026880:	2b00      	cmp	r3, #0
 8026882:	d001      	beq.n	8026888 <USER_SPI_initialize+0x120>
 8026884:	230c      	movs	r3, #12
 8026886:	e000      	b.n	802688a <USER_SPI_initialize+0x122>
 8026888:	2304      	movs	r3, #4
 802688a:	737b      	strb	r3, [r7, #13]
 802688c:	e02c      	b.n	80268e8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 802688e:	2100      	movs	r1, #0
 8026890:	20a9      	movs	r0, #169	; 0xa9
 8026892:	f7ff fefa 	bl	802668a <send_cmd>
 8026896:	4603      	mov	r3, r0
 8026898:	2b01      	cmp	r3, #1
 802689a:	d804      	bhi.n	80268a6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 802689c:	2302      	movs	r3, #2
 802689e:	737b      	strb	r3, [r7, #13]
 80268a0:	23a9      	movs	r3, #169	; 0xa9
 80268a2:	73bb      	strb	r3, [r7, #14]
 80268a4:	e003      	b.n	80268ae <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80268a6:	2301      	movs	r3, #1
 80268a8:	737b      	strb	r3, [r7, #13]
 80268aa:	2301      	movs	r3, #1
 80268ac:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80268ae:	bf00      	nop
 80268b0:	f7ff fde2 	bl	8026478 <SPI_Timer_Status>
 80268b4:	4603      	mov	r3, r0
 80268b6:	2b00      	cmp	r3, #0
 80268b8:	d007      	beq.n	80268ca <USER_SPI_initialize+0x162>
 80268ba:	7bbb      	ldrb	r3, [r7, #14]
 80268bc:	2100      	movs	r1, #0
 80268be:	4618      	mov	r0, r3
 80268c0:	f7ff fee3 	bl	802668a <send_cmd>
 80268c4:	4603      	mov	r3, r0
 80268c6:	2b00      	cmp	r3, #0
 80268c8:	d1f2      	bne.n	80268b0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80268ca:	f7ff fdd5 	bl	8026478 <SPI_Timer_Status>
 80268ce:	4603      	mov	r3, r0
 80268d0:	2b00      	cmp	r3, #0
 80268d2:	d007      	beq.n	80268e4 <USER_SPI_initialize+0x17c>
 80268d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80268d8:	2010      	movs	r0, #16
 80268da:	f7ff fed6 	bl	802668a <send_cmd>
 80268de:	4603      	mov	r3, r0
 80268e0:	2b00      	cmp	r3, #0
 80268e2:	d001      	beq.n	80268e8 <USER_SPI_initialize+0x180>
				ty = 0;
 80268e4:	2300      	movs	r3, #0
 80268e6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80268e8:	4a14      	ldr	r2, [pc, #80]	; (802693c <USER_SPI_initialize+0x1d4>)
 80268ea:	7b7b      	ldrb	r3, [r7, #13]
 80268ec:	7013      	strb	r3, [r2, #0]
	despiselect();
 80268ee:	f7ff fe49 	bl	8026584 <despiselect>

	if (ty) {			/* OK */
 80268f2:	7b7b      	ldrb	r3, [r7, #13]
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	d012      	beq.n	802691e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80268f8:	4b0f      	ldr	r3, [pc, #60]	; (8026938 <USER_SPI_initialize+0x1d0>)
 80268fa:	681b      	ldr	r3, [r3, #0]
 80268fc:	681b      	ldr	r3, [r3, #0]
 80268fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8026902:	4b0d      	ldr	r3, [pc, #52]	; (8026938 <USER_SPI_initialize+0x1d0>)
 8026904:	681b      	ldr	r3, [r3, #0]
 8026906:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 802690a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 802690c:	4b09      	ldr	r3, [pc, #36]	; (8026934 <USER_SPI_initialize+0x1cc>)
 802690e:	781b      	ldrb	r3, [r3, #0]
 8026910:	b2db      	uxtb	r3, r3
 8026912:	f023 0301 	bic.w	r3, r3, #1
 8026916:	b2da      	uxtb	r2, r3
 8026918:	4b06      	ldr	r3, [pc, #24]	; (8026934 <USER_SPI_initialize+0x1cc>)
 802691a:	701a      	strb	r2, [r3, #0]
 802691c:	e002      	b.n	8026924 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 802691e:	4b05      	ldr	r3, [pc, #20]	; (8026934 <USER_SPI_initialize+0x1cc>)
 8026920:	2201      	movs	r2, #1
 8026922:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8026924:	4b03      	ldr	r3, [pc, #12]	; (8026934 <USER_SPI_initialize+0x1cc>)
 8026926:	781b      	ldrb	r3, [r3, #0]
 8026928:	b2db      	uxtb	r3, r3
}
 802692a:	4618      	mov	r0, r3
 802692c:	3714      	adds	r7, #20
 802692e:	46bd      	mov	sp, r7
 8026930:	bd90      	pop	{r4, r7, pc}
 8026932:	bf00      	nop
 8026934:	20000024 	.word	0x20000024
 8026938:	200001a4 	.word	0x200001a4
 802693c:	20000104 	.word	0x20000104

08026940 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8026940:	b480      	push	{r7}
 8026942:	b083      	sub	sp, #12
 8026944:	af00      	add	r7, sp, #0
 8026946:	4603      	mov	r3, r0
 8026948:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 802694a:	79fb      	ldrb	r3, [r7, #7]
 802694c:	2b00      	cmp	r3, #0
 802694e:	d001      	beq.n	8026954 <USER_SPI_status+0x14>
 8026950:	2301      	movs	r3, #1
 8026952:	e002      	b.n	802695a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8026954:	4b04      	ldr	r3, [pc, #16]	; (8026968 <USER_SPI_status+0x28>)
 8026956:	781b      	ldrb	r3, [r3, #0]
 8026958:	b2db      	uxtb	r3, r3
}
 802695a:	4618      	mov	r0, r3
 802695c:	370c      	adds	r7, #12
 802695e:	46bd      	mov	sp, r7
 8026960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026964:	4770      	bx	lr
 8026966:	bf00      	nop
 8026968:	20000024 	.word	0x20000024

0802696c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 802696c:	b580      	push	{r7, lr}
 802696e:	b084      	sub	sp, #16
 8026970:	af00      	add	r7, sp, #0
 8026972:	60b9      	str	r1, [r7, #8]
 8026974:	607a      	str	r2, [r7, #4]
 8026976:	603b      	str	r3, [r7, #0]
 8026978:	4603      	mov	r3, r0
 802697a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 802697c:	7bfb      	ldrb	r3, [r7, #15]
 802697e:	2b00      	cmp	r3, #0
 8026980:	d102      	bne.n	8026988 <USER_SPI_read+0x1c>
 8026982:	683b      	ldr	r3, [r7, #0]
 8026984:	2b00      	cmp	r3, #0
 8026986:	d101      	bne.n	802698c <USER_SPI_read+0x20>
 8026988:	2304      	movs	r3, #4
 802698a:	e04d      	b.n	8026a28 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 802698c:	4b28      	ldr	r3, [pc, #160]	; (8026a30 <USER_SPI_read+0xc4>)
 802698e:	781b      	ldrb	r3, [r3, #0]
 8026990:	b2db      	uxtb	r3, r3
 8026992:	f003 0301 	and.w	r3, r3, #1
 8026996:	2b00      	cmp	r3, #0
 8026998:	d001      	beq.n	802699e <USER_SPI_read+0x32>
 802699a:	2303      	movs	r3, #3
 802699c:	e044      	b.n	8026a28 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 802699e:	4b25      	ldr	r3, [pc, #148]	; (8026a34 <USER_SPI_read+0xc8>)
 80269a0:	781b      	ldrb	r3, [r3, #0]
 80269a2:	f003 0308 	and.w	r3, r3, #8
 80269a6:	2b00      	cmp	r3, #0
 80269a8:	d102      	bne.n	80269b0 <USER_SPI_read+0x44>
 80269aa:	687b      	ldr	r3, [r7, #4]
 80269ac:	025b      	lsls	r3, r3, #9
 80269ae:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80269b0:	683b      	ldr	r3, [r7, #0]
 80269b2:	2b01      	cmp	r3, #1
 80269b4:	d111      	bne.n	80269da <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80269b6:	6879      	ldr	r1, [r7, #4]
 80269b8:	2011      	movs	r0, #17
 80269ba:	f7ff fe66 	bl	802668a <send_cmd>
 80269be:	4603      	mov	r3, r0
 80269c0:	2b00      	cmp	r3, #0
 80269c2:	d129      	bne.n	8026a18 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80269c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80269c8:	68b8      	ldr	r0, [r7, #8]
 80269ca:	f7ff fe03 	bl	80265d4 <rcvr_datablock>
 80269ce:	4603      	mov	r3, r0
 80269d0:	2b00      	cmp	r3, #0
 80269d2:	d021      	beq.n	8026a18 <USER_SPI_read+0xac>
			count = 0;
 80269d4:	2300      	movs	r3, #0
 80269d6:	603b      	str	r3, [r7, #0]
 80269d8:	e01e      	b.n	8026a18 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80269da:	6879      	ldr	r1, [r7, #4]
 80269dc:	2012      	movs	r0, #18
 80269de:	f7ff fe54 	bl	802668a <send_cmd>
 80269e2:	4603      	mov	r3, r0
 80269e4:	2b00      	cmp	r3, #0
 80269e6:	d117      	bne.n	8026a18 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80269e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80269ec:	68b8      	ldr	r0, [r7, #8]
 80269ee:	f7ff fdf1 	bl	80265d4 <rcvr_datablock>
 80269f2:	4603      	mov	r3, r0
 80269f4:	2b00      	cmp	r3, #0
 80269f6:	d00a      	beq.n	8026a0e <USER_SPI_read+0xa2>
				buff += 512;
 80269f8:	68bb      	ldr	r3, [r7, #8]
 80269fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80269fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8026a00:	683b      	ldr	r3, [r7, #0]
 8026a02:	3b01      	subs	r3, #1
 8026a04:	603b      	str	r3, [r7, #0]
 8026a06:	683b      	ldr	r3, [r7, #0]
 8026a08:	2b00      	cmp	r3, #0
 8026a0a:	d1ed      	bne.n	80269e8 <USER_SPI_read+0x7c>
 8026a0c:	e000      	b.n	8026a10 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8026a0e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8026a10:	2100      	movs	r1, #0
 8026a12:	200c      	movs	r0, #12
 8026a14:	f7ff fe39 	bl	802668a <send_cmd>
		}
	}
	despiselect();
 8026a18:	f7ff fdb4 	bl	8026584 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8026a1c:	683b      	ldr	r3, [r7, #0]
 8026a1e:	2b00      	cmp	r3, #0
 8026a20:	bf14      	ite	ne
 8026a22:	2301      	movne	r3, #1
 8026a24:	2300      	moveq	r3, #0
 8026a26:	b2db      	uxtb	r3, r3
}
 8026a28:	4618      	mov	r0, r3
 8026a2a:	3710      	adds	r7, #16
 8026a2c:	46bd      	mov	sp, r7
 8026a2e:	bd80      	pop	{r7, pc}
 8026a30:	20000024 	.word	0x20000024
 8026a34:	20000104 	.word	0x20000104

08026a38 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8026a38:	b580      	push	{r7, lr}
 8026a3a:	b084      	sub	sp, #16
 8026a3c:	af00      	add	r7, sp, #0
 8026a3e:	60b9      	str	r1, [r7, #8]
 8026a40:	607a      	str	r2, [r7, #4]
 8026a42:	603b      	str	r3, [r7, #0]
 8026a44:	4603      	mov	r3, r0
 8026a46:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8026a48:	7bfb      	ldrb	r3, [r7, #15]
 8026a4a:	2b00      	cmp	r3, #0
 8026a4c:	d102      	bne.n	8026a54 <USER_SPI_write+0x1c>
 8026a4e:	683b      	ldr	r3, [r7, #0]
 8026a50:	2b00      	cmp	r3, #0
 8026a52:	d101      	bne.n	8026a58 <USER_SPI_write+0x20>
 8026a54:	2304      	movs	r3, #4
 8026a56:	e063      	b.n	8026b20 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8026a58:	4b33      	ldr	r3, [pc, #204]	; (8026b28 <USER_SPI_write+0xf0>)
 8026a5a:	781b      	ldrb	r3, [r3, #0]
 8026a5c:	b2db      	uxtb	r3, r3
 8026a5e:	f003 0301 	and.w	r3, r3, #1
 8026a62:	2b00      	cmp	r3, #0
 8026a64:	d001      	beq.n	8026a6a <USER_SPI_write+0x32>
 8026a66:	2303      	movs	r3, #3
 8026a68:	e05a      	b.n	8026b20 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8026a6a:	4b2f      	ldr	r3, [pc, #188]	; (8026b28 <USER_SPI_write+0xf0>)
 8026a6c:	781b      	ldrb	r3, [r3, #0]
 8026a6e:	b2db      	uxtb	r3, r3
 8026a70:	f003 0304 	and.w	r3, r3, #4
 8026a74:	2b00      	cmp	r3, #0
 8026a76:	d001      	beq.n	8026a7c <USER_SPI_write+0x44>
 8026a78:	2302      	movs	r3, #2
 8026a7a:	e051      	b.n	8026b20 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8026a7c:	4b2b      	ldr	r3, [pc, #172]	; (8026b2c <USER_SPI_write+0xf4>)
 8026a7e:	781b      	ldrb	r3, [r3, #0]
 8026a80:	f003 0308 	and.w	r3, r3, #8
 8026a84:	2b00      	cmp	r3, #0
 8026a86:	d102      	bne.n	8026a8e <USER_SPI_write+0x56>
 8026a88:	687b      	ldr	r3, [r7, #4]
 8026a8a:	025b      	lsls	r3, r3, #9
 8026a8c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8026a8e:	683b      	ldr	r3, [r7, #0]
 8026a90:	2b01      	cmp	r3, #1
 8026a92:	d110      	bne.n	8026ab6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8026a94:	6879      	ldr	r1, [r7, #4]
 8026a96:	2018      	movs	r0, #24
 8026a98:	f7ff fdf7 	bl	802668a <send_cmd>
 8026a9c:	4603      	mov	r3, r0
 8026a9e:	2b00      	cmp	r3, #0
 8026aa0:	d136      	bne.n	8026b10 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8026aa2:	21fe      	movs	r1, #254	; 0xfe
 8026aa4:	68b8      	ldr	r0, [r7, #8]
 8026aa6:	f7ff fdbe 	bl	8026626 <xmit_datablock>
 8026aaa:	4603      	mov	r3, r0
 8026aac:	2b00      	cmp	r3, #0
 8026aae:	d02f      	beq.n	8026b10 <USER_SPI_write+0xd8>
			count = 0;
 8026ab0:	2300      	movs	r3, #0
 8026ab2:	603b      	str	r3, [r7, #0]
 8026ab4:	e02c      	b.n	8026b10 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8026ab6:	4b1d      	ldr	r3, [pc, #116]	; (8026b2c <USER_SPI_write+0xf4>)
 8026ab8:	781b      	ldrb	r3, [r3, #0]
 8026aba:	f003 0306 	and.w	r3, r3, #6
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d003      	beq.n	8026aca <USER_SPI_write+0x92>
 8026ac2:	6839      	ldr	r1, [r7, #0]
 8026ac4:	2097      	movs	r0, #151	; 0x97
 8026ac6:	f7ff fde0 	bl	802668a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8026aca:	6879      	ldr	r1, [r7, #4]
 8026acc:	2019      	movs	r0, #25
 8026ace:	f7ff fddc 	bl	802668a <send_cmd>
 8026ad2:	4603      	mov	r3, r0
 8026ad4:	2b00      	cmp	r3, #0
 8026ad6:	d11b      	bne.n	8026b10 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8026ad8:	21fc      	movs	r1, #252	; 0xfc
 8026ada:	68b8      	ldr	r0, [r7, #8]
 8026adc:	f7ff fda3 	bl	8026626 <xmit_datablock>
 8026ae0:	4603      	mov	r3, r0
 8026ae2:	2b00      	cmp	r3, #0
 8026ae4:	d00a      	beq.n	8026afc <USER_SPI_write+0xc4>
				buff += 512;
 8026ae6:	68bb      	ldr	r3, [r7, #8]
 8026ae8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8026aec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8026aee:	683b      	ldr	r3, [r7, #0]
 8026af0:	3b01      	subs	r3, #1
 8026af2:	603b      	str	r3, [r7, #0]
 8026af4:	683b      	ldr	r3, [r7, #0]
 8026af6:	2b00      	cmp	r3, #0
 8026af8:	d1ee      	bne.n	8026ad8 <USER_SPI_write+0xa0>
 8026afa:	e000      	b.n	8026afe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8026afc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8026afe:	21fd      	movs	r1, #253	; 0xfd
 8026b00:	2000      	movs	r0, #0
 8026b02:	f7ff fd90 	bl	8026626 <xmit_datablock>
 8026b06:	4603      	mov	r3, r0
 8026b08:	2b00      	cmp	r3, #0
 8026b0a:	d101      	bne.n	8026b10 <USER_SPI_write+0xd8>
 8026b0c:	2301      	movs	r3, #1
 8026b0e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8026b10:	f7ff fd38 	bl	8026584 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8026b14:	683b      	ldr	r3, [r7, #0]
 8026b16:	2b00      	cmp	r3, #0
 8026b18:	bf14      	ite	ne
 8026b1a:	2301      	movne	r3, #1
 8026b1c:	2300      	moveq	r3, #0
 8026b1e:	b2db      	uxtb	r3, r3
}
 8026b20:	4618      	mov	r0, r3
 8026b22:	3710      	adds	r7, #16
 8026b24:	46bd      	mov	sp, r7
 8026b26:	bd80      	pop	{r7, pc}
 8026b28:	20000024 	.word	0x20000024
 8026b2c:	20000104 	.word	0x20000104

08026b30 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8026b30:	b580      	push	{r7, lr}
 8026b32:	b08c      	sub	sp, #48	; 0x30
 8026b34:	af00      	add	r7, sp, #0
 8026b36:	4603      	mov	r3, r0
 8026b38:	603a      	str	r2, [r7, #0]
 8026b3a:	71fb      	strb	r3, [r7, #7]
 8026b3c:	460b      	mov	r3, r1
 8026b3e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8026b40:	79fb      	ldrb	r3, [r7, #7]
 8026b42:	2b00      	cmp	r3, #0
 8026b44:	d001      	beq.n	8026b4a <USER_SPI_ioctl+0x1a>
 8026b46:	2304      	movs	r3, #4
 8026b48:	e15a      	b.n	8026e00 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8026b4a:	4baf      	ldr	r3, [pc, #700]	; (8026e08 <USER_SPI_ioctl+0x2d8>)
 8026b4c:	781b      	ldrb	r3, [r3, #0]
 8026b4e:	b2db      	uxtb	r3, r3
 8026b50:	f003 0301 	and.w	r3, r3, #1
 8026b54:	2b00      	cmp	r3, #0
 8026b56:	d001      	beq.n	8026b5c <USER_SPI_ioctl+0x2c>
 8026b58:	2303      	movs	r3, #3
 8026b5a:	e151      	b.n	8026e00 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8026b5c:	2301      	movs	r3, #1
 8026b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8026b62:	79bb      	ldrb	r3, [r7, #6]
 8026b64:	2b04      	cmp	r3, #4
 8026b66:	f200 8136 	bhi.w	8026dd6 <USER_SPI_ioctl+0x2a6>
 8026b6a:	a201      	add	r2, pc, #4	; (adr r2, 8026b70 <USER_SPI_ioctl+0x40>)
 8026b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026b70:	08026b85 	.word	0x08026b85
 8026b74:	08026b99 	.word	0x08026b99
 8026b78:	08026dd7 	.word	0x08026dd7
 8026b7c:	08026c45 	.word	0x08026c45
 8026b80:	08026d3b 	.word	0x08026d3b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8026b84:	f7ff fd0c 	bl	80265a0 <spiselect>
 8026b88:	4603      	mov	r3, r0
 8026b8a:	2b00      	cmp	r3, #0
 8026b8c:	f000 8127 	beq.w	8026dde <USER_SPI_ioctl+0x2ae>
 8026b90:	2300      	movs	r3, #0
 8026b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8026b96:	e122      	b.n	8026dde <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8026b98:	2100      	movs	r1, #0
 8026b9a:	2009      	movs	r0, #9
 8026b9c:	f7ff fd75 	bl	802668a <send_cmd>
 8026ba0:	4603      	mov	r3, r0
 8026ba2:	2b00      	cmp	r3, #0
 8026ba4:	f040 811d 	bne.w	8026de2 <USER_SPI_ioctl+0x2b2>
 8026ba8:	f107 030c 	add.w	r3, r7, #12
 8026bac:	2110      	movs	r1, #16
 8026bae:	4618      	mov	r0, r3
 8026bb0:	f7ff fd10 	bl	80265d4 <rcvr_datablock>
 8026bb4:	4603      	mov	r3, r0
 8026bb6:	2b00      	cmp	r3, #0
 8026bb8:	f000 8113 	beq.w	8026de2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8026bbc:	7b3b      	ldrb	r3, [r7, #12]
 8026bbe:	099b      	lsrs	r3, r3, #6
 8026bc0:	b2db      	uxtb	r3, r3
 8026bc2:	2b01      	cmp	r3, #1
 8026bc4:	d111      	bne.n	8026bea <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8026bc6:	7d7b      	ldrb	r3, [r7, #21]
 8026bc8:	461a      	mov	r2, r3
 8026bca:	7d3b      	ldrb	r3, [r7, #20]
 8026bcc:	021b      	lsls	r3, r3, #8
 8026bce:	4413      	add	r3, r2
 8026bd0:	461a      	mov	r2, r3
 8026bd2:	7cfb      	ldrb	r3, [r7, #19]
 8026bd4:	041b      	lsls	r3, r3, #16
 8026bd6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8026bda:	4413      	add	r3, r2
 8026bdc:	3301      	adds	r3, #1
 8026bde:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8026be0:	69fb      	ldr	r3, [r7, #28]
 8026be2:	029a      	lsls	r2, r3, #10
 8026be4:	683b      	ldr	r3, [r7, #0]
 8026be6:	601a      	str	r2, [r3, #0]
 8026be8:	e028      	b.n	8026c3c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8026bea:	7c7b      	ldrb	r3, [r7, #17]
 8026bec:	f003 030f 	and.w	r3, r3, #15
 8026bf0:	b2da      	uxtb	r2, r3
 8026bf2:	7dbb      	ldrb	r3, [r7, #22]
 8026bf4:	09db      	lsrs	r3, r3, #7
 8026bf6:	b2db      	uxtb	r3, r3
 8026bf8:	4413      	add	r3, r2
 8026bfa:	b2da      	uxtb	r2, r3
 8026bfc:	7d7b      	ldrb	r3, [r7, #21]
 8026bfe:	005b      	lsls	r3, r3, #1
 8026c00:	b2db      	uxtb	r3, r3
 8026c02:	f003 0306 	and.w	r3, r3, #6
 8026c06:	b2db      	uxtb	r3, r3
 8026c08:	4413      	add	r3, r2
 8026c0a:	b2db      	uxtb	r3, r3
 8026c0c:	3302      	adds	r3, #2
 8026c0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8026c12:	7d3b      	ldrb	r3, [r7, #20]
 8026c14:	099b      	lsrs	r3, r3, #6
 8026c16:	b2db      	uxtb	r3, r3
 8026c18:	461a      	mov	r2, r3
 8026c1a:	7cfb      	ldrb	r3, [r7, #19]
 8026c1c:	009b      	lsls	r3, r3, #2
 8026c1e:	441a      	add	r2, r3
 8026c20:	7cbb      	ldrb	r3, [r7, #18]
 8026c22:	029b      	lsls	r3, r3, #10
 8026c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8026c28:	4413      	add	r3, r2
 8026c2a:	3301      	adds	r3, #1
 8026c2c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8026c2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8026c32:	3b09      	subs	r3, #9
 8026c34:	69fa      	ldr	r2, [r7, #28]
 8026c36:	409a      	lsls	r2, r3
 8026c38:	683b      	ldr	r3, [r7, #0]
 8026c3a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8026c3c:	2300      	movs	r3, #0
 8026c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8026c42:	e0ce      	b.n	8026de2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8026c44:	4b71      	ldr	r3, [pc, #452]	; (8026e0c <USER_SPI_ioctl+0x2dc>)
 8026c46:	781b      	ldrb	r3, [r3, #0]
 8026c48:	f003 0304 	and.w	r3, r3, #4
 8026c4c:	2b00      	cmp	r3, #0
 8026c4e:	d031      	beq.n	8026cb4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8026c50:	2100      	movs	r1, #0
 8026c52:	208d      	movs	r0, #141	; 0x8d
 8026c54:	f7ff fd19 	bl	802668a <send_cmd>
 8026c58:	4603      	mov	r3, r0
 8026c5a:	2b00      	cmp	r3, #0
 8026c5c:	f040 80c3 	bne.w	8026de6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8026c60:	20ff      	movs	r0, #255	; 0xff
 8026c62:	f7ff fc1f 	bl	80264a4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8026c66:	f107 030c 	add.w	r3, r7, #12
 8026c6a:	2110      	movs	r1, #16
 8026c6c:	4618      	mov	r0, r3
 8026c6e:	f7ff fcb1 	bl	80265d4 <rcvr_datablock>
 8026c72:	4603      	mov	r3, r0
 8026c74:	2b00      	cmp	r3, #0
 8026c76:	f000 80b6 	beq.w	8026de6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8026c7a:	2330      	movs	r3, #48	; 0x30
 8026c7c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8026c80:	e007      	b.n	8026c92 <USER_SPI_ioctl+0x162>
 8026c82:	20ff      	movs	r0, #255	; 0xff
 8026c84:	f7ff fc0e 	bl	80264a4 <xchg_spi>
 8026c88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8026c8c:	3b01      	subs	r3, #1
 8026c8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8026c92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8026c96:	2b00      	cmp	r3, #0
 8026c98:	d1f3      	bne.n	8026c82 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8026c9a:	7dbb      	ldrb	r3, [r7, #22]
 8026c9c:	091b      	lsrs	r3, r3, #4
 8026c9e:	b2db      	uxtb	r3, r3
 8026ca0:	461a      	mov	r2, r3
 8026ca2:	2310      	movs	r3, #16
 8026ca4:	fa03 f202 	lsl.w	r2, r3, r2
 8026ca8:	683b      	ldr	r3, [r7, #0]
 8026caa:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8026cac:	2300      	movs	r3, #0
 8026cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8026cb2:	e098      	b.n	8026de6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8026cb4:	2100      	movs	r1, #0
 8026cb6:	2009      	movs	r0, #9
 8026cb8:	f7ff fce7 	bl	802668a <send_cmd>
 8026cbc:	4603      	mov	r3, r0
 8026cbe:	2b00      	cmp	r3, #0
 8026cc0:	f040 8091 	bne.w	8026de6 <USER_SPI_ioctl+0x2b6>
 8026cc4:	f107 030c 	add.w	r3, r7, #12
 8026cc8:	2110      	movs	r1, #16
 8026cca:	4618      	mov	r0, r3
 8026ccc:	f7ff fc82 	bl	80265d4 <rcvr_datablock>
 8026cd0:	4603      	mov	r3, r0
 8026cd2:	2b00      	cmp	r3, #0
 8026cd4:	f000 8087 	beq.w	8026de6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8026cd8:	4b4c      	ldr	r3, [pc, #304]	; (8026e0c <USER_SPI_ioctl+0x2dc>)
 8026cda:	781b      	ldrb	r3, [r3, #0]
 8026cdc:	f003 0302 	and.w	r3, r3, #2
 8026ce0:	2b00      	cmp	r3, #0
 8026ce2:	d012      	beq.n	8026d0a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8026ce4:	7dbb      	ldrb	r3, [r7, #22]
 8026ce6:	005b      	lsls	r3, r3, #1
 8026ce8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8026cec:	7dfa      	ldrb	r2, [r7, #23]
 8026cee:	09d2      	lsrs	r2, r2, #7
 8026cf0:	b2d2      	uxtb	r2, r2
 8026cf2:	4413      	add	r3, r2
 8026cf4:	1c5a      	adds	r2, r3, #1
 8026cf6:	7e7b      	ldrb	r3, [r7, #25]
 8026cf8:	099b      	lsrs	r3, r3, #6
 8026cfa:	b2db      	uxtb	r3, r3
 8026cfc:	3b01      	subs	r3, #1
 8026cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8026d02:	461a      	mov	r2, r3
 8026d04:	683b      	ldr	r3, [r7, #0]
 8026d06:	601a      	str	r2, [r3, #0]
 8026d08:	e013      	b.n	8026d32 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8026d0a:	7dbb      	ldrb	r3, [r7, #22]
 8026d0c:	109b      	asrs	r3, r3, #2
 8026d0e:	b29b      	uxth	r3, r3
 8026d10:	f003 031f 	and.w	r3, r3, #31
 8026d14:	3301      	adds	r3, #1
 8026d16:	7dfa      	ldrb	r2, [r7, #23]
 8026d18:	00d2      	lsls	r2, r2, #3
 8026d1a:	f002 0218 	and.w	r2, r2, #24
 8026d1e:	7df9      	ldrb	r1, [r7, #23]
 8026d20:	0949      	lsrs	r1, r1, #5
 8026d22:	b2c9      	uxtb	r1, r1
 8026d24:	440a      	add	r2, r1
 8026d26:	3201      	adds	r2, #1
 8026d28:	fb02 f303 	mul.w	r3, r2, r3
 8026d2c:	461a      	mov	r2, r3
 8026d2e:	683b      	ldr	r3, [r7, #0]
 8026d30:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8026d32:	2300      	movs	r3, #0
 8026d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8026d38:	e055      	b.n	8026de6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8026d3a:	4b34      	ldr	r3, [pc, #208]	; (8026e0c <USER_SPI_ioctl+0x2dc>)
 8026d3c:	781b      	ldrb	r3, [r3, #0]
 8026d3e:	f003 0306 	and.w	r3, r3, #6
 8026d42:	2b00      	cmp	r3, #0
 8026d44:	d051      	beq.n	8026dea <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8026d46:	f107 020c 	add.w	r2, r7, #12
 8026d4a:	79fb      	ldrb	r3, [r7, #7]
 8026d4c:	210b      	movs	r1, #11
 8026d4e:	4618      	mov	r0, r3
 8026d50:	f7ff feee 	bl	8026b30 <USER_SPI_ioctl>
 8026d54:	4603      	mov	r3, r0
 8026d56:	2b00      	cmp	r3, #0
 8026d58:	d149      	bne.n	8026dee <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8026d5a:	7b3b      	ldrb	r3, [r7, #12]
 8026d5c:	099b      	lsrs	r3, r3, #6
 8026d5e:	b2db      	uxtb	r3, r3
 8026d60:	2b00      	cmp	r3, #0
 8026d62:	d104      	bne.n	8026d6e <USER_SPI_ioctl+0x23e>
 8026d64:	7dbb      	ldrb	r3, [r7, #22]
 8026d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026d6a:	2b00      	cmp	r3, #0
 8026d6c:	d041      	beq.n	8026df2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8026d6e:	683b      	ldr	r3, [r7, #0]
 8026d70:	623b      	str	r3, [r7, #32]
 8026d72:	6a3b      	ldr	r3, [r7, #32]
 8026d74:	681b      	ldr	r3, [r3, #0]
 8026d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8026d78:	6a3b      	ldr	r3, [r7, #32]
 8026d7a:	685b      	ldr	r3, [r3, #4]
 8026d7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8026d7e:	4b23      	ldr	r3, [pc, #140]	; (8026e0c <USER_SPI_ioctl+0x2dc>)
 8026d80:	781b      	ldrb	r3, [r3, #0]
 8026d82:	f003 0308 	and.w	r3, r3, #8
 8026d86:	2b00      	cmp	r3, #0
 8026d88:	d105      	bne.n	8026d96 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8026d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026d8c:	025b      	lsls	r3, r3, #9
 8026d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8026d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026d92:	025b      	lsls	r3, r3, #9
 8026d94:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8026d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8026d98:	2020      	movs	r0, #32
 8026d9a:	f7ff fc76 	bl	802668a <send_cmd>
 8026d9e:	4603      	mov	r3, r0
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	d128      	bne.n	8026df6 <USER_SPI_ioctl+0x2c6>
 8026da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026da6:	2021      	movs	r0, #33	; 0x21
 8026da8:	f7ff fc6f 	bl	802668a <send_cmd>
 8026dac:	4603      	mov	r3, r0
 8026dae:	2b00      	cmp	r3, #0
 8026db0:	d121      	bne.n	8026df6 <USER_SPI_ioctl+0x2c6>
 8026db2:	2100      	movs	r1, #0
 8026db4:	2026      	movs	r0, #38	; 0x26
 8026db6:	f7ff fc68 	bl	802668a <send_cmd>
 8026dba:	4603      	mov	r3, r0
 8026dbc:	2b00      	cmp	r3, #0
 8026dbe:	d11a      	bne.n	8026df6 <USER_SPI_ioctl+0x2c6>
 8026dc0:	f247 5030 	movw	r0, #30000	; 0x7530
 8026dc4:	f7ff fbbb 	bl	802653e <wait_ready>
 8026dc8:	4603      	mov	r3, r0
 8026dca:	2b00      	cmp	r3, #0
 8026dcc:	d013      	beq.n	8026df6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8026dce:	2300      	movs	r3, #0
 8026dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8026dd4:	e00f      	b.n	8026df6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8026dd6:	2304      	movs	r3, #4
 8026dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8026ddc:	e00c      	b.n	8026df8 <USER_SPI_ioctl+0x2c8>
		break;
 8026dde:	bf00      	nop
 8026de0:	e00a      	b.n	8026df8 <USER_SPI_ioctl+0x2c8>
		break;
 8026de2:	bf00      	nop
 8026de4:	e008      	b.n	8026df8 <USER_SPI_ioctl+0x2c8>
		break;
 8026de6:	bf00      	nop
 8026de8:	e006      	b.n	8026df8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8026dea:	bf00      	nop
 8026dec:	e004      	b.n	8026df8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8026dee:	bf00      	nop
 8026df0:	e002      	b.n	8026df8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8026df2:	bf00      	nop
 8026df4:	e000      	b.n	8026df8 <USER_SPI_ioctl+0x2c8>
		break;
 8026df6:	bf00      	nop
	}

	despiselect();
 8026df8:	f7ff fbc4 	bl	8026584 <despiselect>

	return res;
 8026dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8026e00:	4618      	mov	r0, r3
 8026e02:	3730      	adds	r7, #48	; 0x30
 8026e04:	46bd      	mov	sp, r7
 8026e06:	bd80      	pop	{r7, pc}
 8026e08:	20000024 	.word	0x20000024
 8026e0c:	20000104 	.word	0x20000104

08026e10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8026e10:	b480      	push	{r7}
 8026e12:	b087      	sub	sp, #28
 8026e14:	af00      	add	r7, sp, #0
 8026e16:	60f8      	str	r0, [r7, #12]
 8026e18:	60b9      	str	r1, [r7, #8]
 8026e1a:	4613      	mov	r3, r2
 8026e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8026e1e:	2301      	movs	r3, #1
 8026e20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8026e22:	2300      	movs	r3, #0
 8026e24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8026e26:	4b1f      	ldr	r3, [pc, #124]	; (8026ea4 <FATFS_LinkDriverEx+0x94>)
 8026e28:	7a5b      	ldrb	r3, [r3, #9]
 8026e2a:	b2db      	uxtb	r3, r3
 8026e2c:	2b00      	cmp	r3, #0
 8026e2e:	d131      	bne.n	8026e94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8026e30:	4b1c      	ldr	r3, [pc, #112]	; (8026ea4 <FATFS_LinkDriverEx+0x94>)
 8026e32:	7a5b      	ldrb	r3, [r3, #9]
 8026e34:	b2db      	uxtb	r3, r3
 8026e36:	461a      	mov	r2, r3
 8026e38:	4b1a      	ldr	r3, [pc, #104]	; (8026ea4 <FATFS_LinkDriverEx+0x94>)
 8026e3a:	2100      	movs	r1, #0
 8026e3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8026e3e:	4b19      	ldr	r3, [pc, #100]	; (8026ea4 <FATFS_LinkDriverEx+0x94>)
 8026e40:	7a5b      	ldrb	r3, [r3, #9]
 8026e42:	b2db      	uxtb	r3, r3
 8026e44:	4a17      	ldr	r2, [pc, #92]	; (8026ea4 <FATFS_LinkDriverEx+0x94>)
 8026e46:	009b      	lsls	r3, r3, #2
 8026e48:	4413      	add	r3, r2
 8026e4a:	68fa      	ldr	r2, [r7, #12]
 8026e4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8026e4e:	4b15      	ldr	r3, [pc, #84]	; (8026ea4 <FATFS_LinkDriverEx+0x94>)
 8026e50:	7a5b      	ldrb	r3, [r3, #9]
 8026e52:	b2db      	uxtb	r3, r3
 8026e54:	461a      	mov	r2, r3
 8026e56:	4b13      	ldr	r3, [pc, #76]	; (8026ea4 <FATFS_LinkDriverEx+0x94>)
 8026e58:	4413      	add	r3, r2
 8026e5a:	79fa      	ldrb	r2, [r7, #7]
 8026e5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8026e5e:	4b11      	ldr	r3, [pc, #68]	; (8026ea4 <FATFS_LinkDriverEx+0x94>)
 8026e60:	7a5b      	ldrb	r3, [r3, #9]
 8026e62:	b2db      	uxtb	r3, r3
 8026e64:	1c5a      	adds	r2, r3, #1
 8026e66:	b2d1      	uxtb	r1, r2
 8026e68:	4a0e      	ldr	r2, [pc, #56]	; (8026ea4 <FATFS_LinkDriverEx+0x94>)
 8026e6a:	7251      	strb	r1, [r2, #9]
 8026e6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8026e6e:	7dbb      	ldrb	r3, [r7, #22]
 8026e70:	3330      	adds	r3, #48	; 0x30
 8026e72:	b2da      	uxtb	r2, r3
 8026e74:	68bb      	ldr	r3, [r7, #8]
 8026e76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8026e78:	68bb      	ldr	r3, [r7, #8]
 8026e7a:	3301      	adds	r3, #1
 8026e7c:	223a      	movs	r2, #58	; 0x3a
 8026e7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8026e80:	68bb      	ldr	r3, [r7, #8]
 8026e82:	3302      	adds	r3, #2
 8026e84:	222f      	movs	r2, #47	; 0x2f
 8026e86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8026e88:	68bb      	ldr	r3, [r7, #8]
 8026e8a:	3303      	adds	r3, #3
 8026e8c:	2200      	movs	r2, #0
 8026e8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8026e90:	2300      	movs	r3, #0
 8026e92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8026e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8026e96:	4618      	mov	r0, r3
 8026e98:	371c      	adds	r7, #28
 8026e9a:	46bd      	mov	sp, r7
 8026e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ea0:	4770      	bx	lr
 8026ea2:	bf00      	nop
 8026ea4:	20000108 	.word	0x20000108

08026ea8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8026ea8:	b580      	push	{r7, lr}
 8026eaa:	b082      	sub	sp, #8
 8026eac:	af00      	add	r7, sp, #0
 8026eae:	6078      	str	r0, [r7, #4]
 8026eb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8026eb2:	2200      	movs	r2, #0
 8026eb4:	6839      	ldr	r1, [r7, #0]
 8026eb6:	6878      	ldr	r0, [r7, #4]
 8026eb8:	f7ff ffaa 	bl	8026e10 <FATFS_LinkDriverEx>
 8026ebc:	4603      	mov	r3, r0
}
 8026ebe:	4618      	mov	r0, r3
 8026ec0:	3708      	adds	r7, #8
 8026ec2:	46bd      	mov	sp, r7
 8026ec4:	bd80      	pop	{r7, pc}
	...

08026ec8 <__libc_init_array>:
 8026ec8:	b570      	push	{r4, r5, r6, lr}
 8026eca:	4d0d      	ldr	r5, [pc, #52]	; (8026f00 <__libc_init_array+0x38>)
 8026ecc:	4c0d      	ldr	r4, [pc, #52]	; (8026f04 <__libc_init_array+0x3c>)
 8026ece:	1b64      	subs	r4, r4, r5
 8026ed0:	10a4      	asrs	r4, r4, #2
 8026ed2:	2600      	movs	r6, #0
 8026ed4:	42a6      	cmp	r6, r4
 8026ed6:	d109      	bne.n	8026eec <__libc_init_array+0x24>
 8026ed8:	4d0b      	ldr	r5, [pc, #44]	; (8026f08 <__libc_init_array+0x40>)
 8026eda:	4c0c      	ldr	r4, [pc, #48]	; (8026f0c <__libc_init_array+0x44>)
 8026edc:	f000 f820 	bl	8026f20 <_init>
 8026ee0:	1b64      	subs	r4, r4, r5
 8026ee2:	10a4      	asrs	r4, r4, #2
 8026ee4:	2600      	movs	r6, #0
 8026ee6:	42a6      	cmp	r6, r4
 8026ee8:	d105      	bne.n	8026ef6 <__libc_init_array+0x2e>
 8026eea:	bd70      	pop	{r4, r5, r6, pc}
 8026eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8026ef0:	4798      	blx	r3
 8026ef2:	3601      	adds	r6, #1
 8026ef4:	e7ee      	b.n	8026ed4 <__libc_init_array+0xc>
 8026ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8026efa:	4798      	blx	r3
 8026efc:	3601      	adds	r6, #1
 8026efe:	e7f2      	b.n	8026ee6 <__libc_init_array+0x1e>
 8026f00:	08026f78 	.word	0x08026f78
 8026f04:	08026f78 	.word	0x08026f78
 8026f08:	08026f78 	.word	0x08026f78
 8026f0c:	08026f7c 	.word	0x08026f7c

08026f10 <memset>:
 8026f10:	4402      	add	r2, r0
 8026f12:	4603      	mov	r3, r0
 8026f14:	4293      	cmp	r3, r2
 8026f16:	d100      	bne.n	8026f1a <memset+0xa>
 8026f18:	4770      	bx	lr
 8026f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8026f1e:	e7f9      	b.n	8026f14 <memset+0x4>

08026f20 <_init>:
 8026f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026f22:	bf00      	nop
 8026f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026f26:	bc08      	pop	{r3}
 8026f28:	469e      	mov	lr, r3
 8026f2a:	4770      	bx	lr

08026f2c <_fini>:
 8026f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026f2e:	bf00      	nop
 8026f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026f32:	bc08      	pop	{r3}
 8026f34:	469e      	mov	lr, r3
 8026f36:	4770      	bx	lr
