
MyFirstBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a8e8  0800a8e8  0001a8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a8ec  0800a8ec  0001a8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  0800a8f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2000008c  0800a97c  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000ec  0800a9dc  000200ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004824  2000014c  0800aa3c  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004970  0800aa3c  00024970  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027c89  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004324  00000000  00000000  00047e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0004c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0004d358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003aae9  00000000  00000000  0004e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019070  00000000  00000000  00088f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00163f29  00000000  00000000  000a1f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00205eb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c0  00000000  00000000  00205f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2000014c 	.word	0x2000014c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a628 	.word	0x0800a628

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000150 	.word	0x20000150
 80002dc:	0800a628 	.word	0x0800a628

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <bootloader_sd>:
#include "bootloader_sd.h"

const char image_name[] = "firmware_v1.bin";

void bootloader_sd(unsigned timeout)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	//bl_type = NONE; // The type of the bootloader, whether loading from USB or USART, will be determined by on what port the bootloader recevies its first valid command.
	//volatile uint32_t  bl_state = 0; // Must see correct command sequence to erase and reboot (commit first word)
	uint32_t  address = 0; 	//board_info.fw_size; /* force erase before upload will work */
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
	uint32_t  first_word = 0xffffffff;
 8000684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000688:	617b      	str	r3, [r7, #20]
	// Wait for a command byte
	// led_off(LED_ACTIVITY);

	// open firmware binary from sd card.
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800068a:	2201      	movs	r2, #1
 800068c:	4942      	ldr	r1, [pc, #264]	; (8000798 <bootloader_sd+0x120>)
 800068e:	4843      	ldr	r0, [pc, #268]	; (800079c <bootloader_sd+0x124>)
 8000690:	f008 fb56 	bl	8008d40 <f_mount>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <bootloader_sd+0x128>)
 800069a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 800069c:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <bootloader_sd+0x128>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <bootloader_sd+0x34>
	{
		printf("f_mount error \r\n");
 80006a4:	483f      	ldr	r0, [pc, #252]	; (80007a4 <bootloader_sd+0x12c>)
 80006a6:	f009 f879 	bl	800979c <puts>
		return;
 80006aa:	e072      	b.n	8000792 <bootloader_sd+0x11a>
	}


	//Locate and check for loadable firmware. (iterate over images to find the latest and make checks).
	const image_hdr_t *image_hdr;
	image_hdr = image_get_header(image_name);
 80006ac:	483e      	ldr	r0, [pc, #248]	; (80007a8 <bootloader_sd+0x130>)
 80006ae:	f000 f88b 	bl	80007c8 <image_get_header>
 80006b2:	6138      	str	r0, [r7, #16]
	uint8_t err = image_validate(image_hdr);
 80006b4:	6938      	ldr	r0, [r7, #16]
 80006b6:	f000 f8b5 	bl	8000824 <image_validate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	73fb      	strb	r3, [r7, #15]
	if(err != 0)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d165      	bne.n	8000790 <bootloader_sd+0x118>
	{
		return;
	}
	printf("New valid image found in SD. Uploading firmware...\r\n");
 80006c4:	4839      	ldr	r0, [pc, #228]	; (80007ac <bootloader_sd+0x134>)
 80006c6:	f009 f869 	bl	800979c <puts>


	//Open new firmware to load.
	fres = f_open(&fil, image_name, FA_READ);
 80006ca:	2201      	movs	r2, #1
 80006cc:	4936      	ldr	r1, [pc, #216]	; (80007a8 <bootloader_sd+0x130>)
 80006ce:	4838      	ldr	r0, [pc, #224]	; (80007b0 <bootloader_sd+0x138>)
 80006d0:	f008 fb7c 	bl	8008dcc <f_open>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <bootloader_sd+0x128>)
 80006da:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <bootloader_sd+0x128>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <bootloader_sd+0x74>
	{
		printf("f_open error \r\n");
 80006e4:	4833      	ldr	r0, [pc, #204]	; (80007b4 <bootloader_sd+0x13c>)
 80006e6:	f009 f859 	bl	800979c <puts>
		return;
 80006ea:	e052      	b.n	8000792 <bootloader_sd+0x11a>
	}
	printf("Uploading image");
 80006ec:	4832      	ldr	r0, [pc, #200]	; (80007b8 <bootloader_sd+0x140>)
 80006ee:	f008 ffcf 	bl	8009690 <iprintf>
//		//if (flash_func_read_word(address) != 0xffffffff) {
//		//	goto cmd_fail;
//		//}
//	}

	address = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
	uint8_t EndOfFIle = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	73bb      	strb	r3, [r7, #14]
	while(!EndOfFIle)
 80006fa:	e033      	b.n	8000764 <bootloader_sd+0xec>
	{
		uint8_t readBytes = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	733b      	strb	r3, [r7, #12]

		// read maximum number of bytes from file.
		FRESULT rres = f_read(&fil, &flash_buffer.c[0], sizeof(flash_buffer.c)/sizeof(flash_buffer.c[0]), (UINT*)&readBytes);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000708:	492c      	ldr	r1, [pc, #176]	; (80007bc <bootloader_sd+0x144>)
 800070a:	4829      	ldr	r0, [pc, #164]	; (80007b0 <bootloader_sd+0x138>)
 800070c:	f008 fd2a 	bl	8009164 <f_read>
 8000710:	4603      	mov	r3, r0
 8000712:	737b      	strb	r3, [r7, #13]
		if(rres != FR_OK) {
 8000714:	7b7b      	ldrb	r3, [r7, #13]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <bootloader_sd+0xaa>
			printf("Read string from 'test.txt' contents:\r\n");
 800071a:	4829      	ldr	r0, [pc, #164]	; (80007c0 <bootloader_sd+0x148>)
 800071c:	f009 f83e 	bl	800979c <puts>
 8000720:	e005      	b.n	800072e <bootloader_sd+0xb6>
		} else {
			printf("f_gets error (%i)\r\n", fres);
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <bootloader_sd+0x128>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4619      	mov	r1, r3
 8000728:	4826      	ldr	r0, [pc, #152]	; (80007c4 <bootloader_sd+0x14c>)
 800072a:	f008 ffb1 	bl	8009690 <iprintf>
		{
			//goto cmd_bad;
		}

		// sanity-checks
		for(uint8_t i = 0; i < readBytes; i++)
 800072e:	2300      	movs	r3, #0
 8000730:	76fb      	strb	r3, [r7, #27]
 8000732:	e002      	b.n	800073a <bootloader_sd+0xc2>
 8000734:	7efb      	ldrb	r3, [r7, #27]
 8000736:	3301      	adds	r3, #1
 8000738:	76fb      	strb	r3, [r7, #27]
 800073a:	7b3b      	ldrb	r3, [r7, #12]
 800073c:	7efa      	ldrb	r2, [r7, #27]
 800073e:	429a      	cmp	r2, r3
 8000740:	d3f8      	bcc.n	8000734 <bootloader_sd+0xbc>
			//first_word = flash_buffer.c[0];
			// replace first word with bits we can overwrite later
			//flash_buffer.c[0] = 0xffffffff;
		}

		readBytes /= 4;
 8000742:	7b3b      	ldrb	r3, [r7, #12]
 8000744:	089b      	lsrs	r3, r3, #2
 8000746:	b2db      	uxtb	r3, r3
 8000748:	733b      	strb	r3, [r7, #12]

		for (uint8_t i = 0; i < readBytes; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	76bb      	strb	r3, [r7, #26]
 800074e:	e005      	b.n	800075c <bootloader_sd+0xe4>
			// do immediate read-back verify
			//if (flash_func_read_word(address) != flash_buffer.c[i*4]) {
			//	goto cmd_fail;
			//}

			address += 4;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	3304      	adds	r3, #4
 8000754:	61fb      	str	r3, [r7, #28]
		for (uint8_t i = 0; i < readBytes; i++)
 8000756:	7ebb      	ldrb	r3, [r7, #26]
 8000758:	3301      	adds	r3, #1
 800075a:	76bb      	strb	r3, [r7, #26]
 800075c:	7b3b      	ldrb	r3, [r7, #12]
 800075e:	7eba      	ldrb	r2, [r7, #26]
 8000760:	429a      	cmp	r2, r3
 8000762:	d3f5      	bcc.n	8000750 <bootloader_sd+0xd8>
	while(!EndOfFIle)
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0c8      	beq.n	80006fc <bootloader_sd+0x84>
			//cout_word(sum);
		}


	//Close file
	f_close(&fil);
 800076a:	4811      	ldr	r0, [pc, #68]	; (80007b0 <bootloader_sd+0x138>)
 800076c:	f008 fed7 	bl	800951e <f_close>

	//Unmount the drive
	f_mount(NULL, "", 0);
 8000770:	2200      	movs	r2, #0
 8000772:	4909      	ldr	r1, [pc, #36]	; (8000798 <bootloader_sd+0x120>)
 8000774:	2000      	movs	r0, #0
 8000776:	f008 fae3 	bl	8008d40 <f_mount>
	//	if (first_word != 0xffffffff && (bl_state & STATE_ALLOWS_REBOOT) != STATE_ALLOWS_REBOOT) {
	//		goto cmd_bad;
	//	}

	// program the deferred first word
	if (first_word != 0xffffffff) {
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000780:	d002      	beq.n	8000788 <bootloader_sd+0x110>
		//if (flash_func_read_word(0) != first_word) {
		//	goto cmd_fail;
		//}

		// revert in case the flash was bad...
		first_word = 0xffffffff;
 8000782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000786:	617b      	str	r3, [r7, #20]
	}


	// start image
	image_start(image_hdr);
 8000788:	6938      	ldr	r0, [r7, #16]
 800078a:	f000 f857 	bl	800083c <image_start>
 800078e:	e000      	b.n	8000792 <bootloader_sd+0x11a>
		return;
 8000790:	bf00      	nop
//cmd_fail:
		// send a 'command failed' response but don't kill the timeout - could be garbage
		//failure_response();
		//continue;

}
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	0800a640 	.word	0x0800a640
 800079c:	200006ac 	.word	0x200006ac
 80007a0:	200016e0 	.word	0x200016e0
 80007a4:	0800a644 	.word	0x0800a644
 80007a8:	0800a780 	.word	0x0800a780
 80007ac:	0800a654 	.word	0x0800a654
 80007b0:	200016e4 	.word	0x200016e4
 80007b4:	0800a688 	.word	0x0800a688
 80007b8:	0800a698 	.word	0x0800a698
 80007bc:	20000168 	.word	0x20000168
 80007c0:	0800a6a8 	.word	0x0800a6a8
 80007c4:	0800a6d0 	.word	0x0800a6d0

080007c8 <image_get_header>:

const image_hdr_t *image_get_header(const char *image_path)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b092      	sub	sp, #72	; 0x48
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	//open the file.

	//read image_hdr_t
	uint8_t readBytes = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t ima_hdr_buff[sizeof(image_hdr_t)];

	// read maximum number of bytes from file.
	FRESULT rres = f_read(&fil, &ima_hdr_buff, sizeof(image_hdr_t), (UINT*)&readBytes);
 80007d6:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80007da:	f107 0108 	add.w	r1, r7, #8
 80007de:	2235      	movs	r2, #53	; 0x35
 80007e0:	480e      	ldr	r0, [pc, #56]	; (800081c <image_get_header+0x54>)
 80007e2:	f008 fcbf 	bl	8009164 <f_read>
 80007e6:	4603      	mov	r3, r0
 80007e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(rres != FR_OK) {
 80007ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <image_get_header+0x32>
		printf("Error.");
 80007f4:	480a      	ldr	r0, [pc, #40]	; (8000820 <image_get_header+0x58>)
 80007f6:	f008 ff4b 	bl	8009690 <iprintf>
	}

	// check if end of file reached.
	if(sizeof(image_hdr_t) > readBytes)
 80007fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007fe:	2b34      	cmp	r3, #52	; 0x34
 8000800:	d802      	bhi.n	8000808 <image_get_header+0x40>
	{
		printf("Error.");
 8000802:	4807      	ldr	r0, [pc, #28]	; (8000820 <image_get_header+0x58>)
 8000804:	f008 ff44 	bl	8009690 <iprintf>
	}

	// cast
	const image_hdr_t *hdr = NULL;
 8000808:	2300      	movs	r3, #0
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
	hdr = (const image_hdr_t *)&ima_hdr_buff[0];
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	643b      	str	r3, [r7, #64]	; 0x40

	return hdr;
 8000812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	if (hdr && hdr->image_magic == IMAGE_MAGIC) {
	        return hdr;
	    } else {
	        return NULL;
	    }
}
 8000814:	4618      	mov	r0, r3
 8000816:	3748      	adds	r7, #72	; 0x48
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200016e4 	.word	0x200016e4
 8000820:	0800a6e4 	.word	0x0800a6e4

08000824 <image_validate>:

int image_validate(const image_hdr_t *hdr) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
//        return 0;
//    } else {
//        printf("CRC Mismatch: %lx vs %lx\n", a, b);
//        return -1;
//    }
	return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <image_start>:

void image_start(const image_hdr_t *image_hdr)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	uint32_t jumpAddr;
	ptrF Jump_To_Application;

	// check if available image in Flash.
	if(((*(uint32_t*) image_hdr->vector_addr) & 0x2FFE0000) == 0x20000000)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f8d3 3023 	ldr.w	r3, [r3, #35]	; 0x23
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <image_start+0x5c>)
 800084e:	4013      	ands	r3, r2
 8000850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000854:	d119      	bne.n	800088a <image_start+0x4e>
	{
		// loaded image info.
		printf("Image start... \r\n");
 8000856:	4811      	ldr	r0, [pc, #68]	; (800089c <image_start+0x60>)
 8000858:	f008 ffa0 	bl	800979c <puts>
		HAL_Delay(100);
 800085c:	2064      	movs	r0, #100	; 0x64
 800085e:	f000 ff17 	bl	8001690 <HAL_Delay>

		//Jump to firmware.
		jumpAddr = *(uint32_t*)(image_hdr->vector_addr + 4);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f8d3 3023 	ldr.w	r3, [r3, #35]	; 0x23
 8000868:	3304      	adds	r3, #4
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	617b      	str	r3, [r7, #20]
		Jump_To_Application = (ptrF)jumpAddr;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	613b      	str	r3, [r7, #16]

		//Initialize firmware stack pointer.
		__set_MSP(*(uint32_t*)image_hdr->vector_addr);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f8d3 3023 	ldr.w	r3, [r3, #35]	; 0x23
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f383 8808 	msr	MSP, r3
}
 8000882:	bf00      	nop
		Jump_To_Application();
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	4798      	blx	r3
		while(1)
		{

		}
	}
}
 8000888:	e003      	b.n	8000892 <image_start+0x56>
		printf("No firmware loaded \r\n");
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <image_start+0x64>)
 800088c:	f008 ff86 	bl	800979c <puts>
		while(1)
 8000890:	e7fe      	b.n	8000890 <image_start+0x54>
}
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2ffe0000 	.word	0x2ffe0000
 800089c:	0800a6ec 	.word	0x0800a6ec
 80008a0:	0800a700 	.word	0x0800a700

080008a4 <crc32>:
 */

#include <crc32.h>

uint32_t crc32(const uint8_t *src, uint32_t len, uint32_t state)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	static uint32_t crctab[256];

	/* check whether we have generated the CRC table yet */
	/* this is much smaller than a static table */
	if (crctab[1] == 0) {
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <crc32+0xa4>)
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d126      	bne.n	8000906 <crc32+0x62>
		for (unsigned i = 0; i < 256; i++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	e020      	b.n	8000900 <crc32+0x5c>
		{
			uint32_t c = i;
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	61bb      	str	r3, [r7, #24]

			for (unsigned j = 0; j < 8; j++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	e010      	b.n	80008ea <crc32+0x46>
			{
				if (c & 1)
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d005      	beq.n	80008de <crc32+0x3a>
				{
					c = 0xedb88320U ^ (c >> 1);
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	085a      	lsrs	r2, r3, #1
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <crc32+0xa8>)
 80008d8:	4053      	eors	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	e002      	b.n	80008e4 <crc32+0x40>
				}
				else
				{
					c = c >> 1;
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
			for (unsigned j = 0; j < 8; j++)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	3301      	adds	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	2b07      	cmp	r3, #7
 80008ee:	d9eb      	bls.n	80008c8 <crc32+0x24>
				}
			}

			crctab[i] = c;
 80008f0:	4915      	ldr	r1, [pc, #84]	; (8000948 <crc32+0xa4>)
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (unsigned i = 0; i < 256; i++)
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3301      	adds	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	2bff      	cmp	r3, #255	; 0xff
 8000904:	d9db      	bls.n	80008be <crc32+0x1a>
		}
	}

	for (unsigned i = 0; i < len; i++) {
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	e011      	b.n	8000930 <crc32+0x8c>
		state = crctab[(state ^ src[i]) & 0xff] ^ (state >> 8);
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4053      	eors	r3, r2
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <crc32+0xa4>)
 800091e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	4053      	eors	r3, r2
 8000928:	607b      	str	r3, [r7, #4]
	for (unsigned i = 0; i < len; i++) {
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	3301      	adds	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	429a      	cmp	r2, r3
 8000936:	d3e9      	bcc.n	800090c <crc32+0x68>
	}

	return state;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000268 	.word	0x20000268
 800094c:	edb88320 	.word	0xedb88320

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f000 fe09 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f859 	bl	8000a10 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800095e:	f000 f8c3 	bl	8000ae8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f9d7 	bl	8000d14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000966:	f000 f92d 	bl	8000bc4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800096a:	f005 fe9f 	bl	80066ac <MX_FATFS_Init>
  MX_USART3_UART_Init();
 800096e:	f000 f97d 	bl	8000c6c <MX_USART3_UART_Init>
  MX_ETH_Init();
 8000972:	f000 f8d5 	bl	8000b20 <MX_ETH_Init>
  MX_USB_OTG_FS_USB_Init();
 8000976:	f000 f9c5 	bl	8000d04 <MX_USB_OTG_FS_USB_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      //Blink the LED every second
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	4820      	ldr	r0, [pc, #128]	; (8000a00 <main+0xb0>)
 800097e:	f001 fd8e 	bl	800249e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000986:	f000 fe83 	bl	8001690 <HAL_Delay>

	  bootloader_sd(1000);
 800098a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800098e:	f7ff fe73 	bl	8000678 <bootloader_sd>

	  // Go to image.
	  // Check flash image.
	  image_hdr_t *image_hdr = (image_hdr_t *) &(__app_start__);
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <main+0xb4>)
 8000994:	617b      	str	r3, [r7, #20]
	  uint32_t crc = image_hdr->crc;
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	613b      	str	r3, [r7, #16]


	  // compute CRC of the programmed area
	  uint32_t sum = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]

	  //pass all the flash memory addresses. //Start address is 0x08020000 (for this controller)
	  // TODO: Pass the starting flash address as parameter.
	  uint32_t flash_prog_start_add = 0x08020000 | 0x200; 		//512 is image_hdr memory space.
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <main+0xb8>)
 80009a2:	60fb      	str	r3, [r7, #12]

	  for (uint32_t p = 0; p < image_hdr->data_size; p += 4) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	e018      	b.n	80009dc <main+0x8c>
	  uint32_t bytes;

		  uint32_t address = flash_prog_start_add + p;
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	4413      	add	r3, r2
 80009b0:	60bb      	str	r3, [r7, #8]
		  if(address & 3)
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f003 0303 	and.w	r3, r3, #3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <main+0x70>
		  {
			  return 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	e01a      	b.n	80009f6 <main+0xa6>
		  //		} else {
		  //			bytes = flash_func_read_word(p);
		  //		}

		  //get data from flash
		  bytes = *(uint32_t *) address;
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	607b      	str	r3, [r7, #4]

		  sum = crc32((uint8_t *)&bytes, sizeof(bytes), sum);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	69fa      	ldr	r2, [r7, #28]
 80009ca:	2104      	movs	r1, #4
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff69 	bl	80008a4 <crc32>
 80009d2:	4603      	mov	r3, r0
 80009d4:	61fb      	str	r3, [r7, #28]
	  for (uint32_t p = 0; p < image_hdr->data_size; p += 4) {
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	3304      	adds	r3, #4
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d3e1      	bcc.n	80009aa <main+0x5a>
	  }

	  if(crc != sum)
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d0c5      	beq.n	800097a <main+0x2a>
	  {
	    printf("Error. Flash memory data corruption");
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <main+0xbc>)
 80009f0:	f008 fe4e 	bl	8009690 <iprintf>
  {
 80009f4:	e7c1      	b.n	800097a <main+0x2a>

	  // Entry image.

  }
  /* USER CODE END 3 */
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	58020400 	.word	0x58020400
 8000a04:	08020000 	.word	0x08020000
 8000a08:	08020200 	.word	0x08020200
 8000a0c:	0800a718 	.word	0x0800a718

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	; 0x70
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	224c      	movs	r2, #76	; 0x4c
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f008 fe2e 	bl	8009680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2220      	movs	r2, #32
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f008 fe28 	bl	8009680 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a30:	2002      	movs	r0, #2
 8000a32:	f001 fd4f 	bl	80024d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3e:	4a28      	ldr	r2, [pc, #160]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a58:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a6c:	bf00      	nop
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a7a:	d1f8      	bne.n	8000a6e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a7c:	2322      	movs	r3, #34	; 0x22
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a84:	2340      	movs	r3, #64	; 0x40
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fd57 	bl	8002548 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa0:	f000 fa00 	bl	8000ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	233f      	movs	r3, #63	; 0x3f
 8000aa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 f94d 	bl	8002d68 <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ad4:	f000 f9e6 	bl	8000ea4 <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3770      	adds	r7, #112	; 0x70
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	58000400 	.word	0x58000400
 8000ae4:	58024800 	.word	0x58024800

08000ae8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0b0      	sub	sp, #192	; 0xc0
 8000aec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	22bc      	movs	r2, #188	; 0xbc
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f008 fdc3 	bl	8009680 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000afa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000afe:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fcba 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8000b12:	f000 f9c7 	bl	8000ea4 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	37c0      	adds	r7, #192	; 0xc0
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <MX_ETH_Init+0x94>)
 8000b28:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	3301      	adds	r3, #1
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	3302      	adds	r3, #2
 8000b42:	22e1      	movs	r2, #225	; 0xe1
 8000b44:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	3303      	adds	r3, #3
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	3305      	adds	r3, #5
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b6c:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <MX_ETH_Init+0x98>)
 8000b6e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_ETH_Init+0x9c>)
 8000b74:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b78:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b7c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_ETH_Init+0x90>)
 8000b80:	f000 feae 	bl	80018e0 <HAL_ETH_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000b8a:	f000 f98b 	bl	8000ea4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b8e:	2234      	movs	r2, #52	; 0x34
 8000b90:	2100      	movs	r1, #0
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MX_ETH_Init+0xa0>)
 8000b94:	f008 fd74 	bl	8009680 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_ETH_Init+0xa0>)
 8000b9a:	2221      	movs	r2, #33	; 0x21
 8000b9c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_ETH_Init+0xa0>)
 8000ba0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ba4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_ETH_Init+0xa0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000282c 	.word	0x2000282c
 8000bb4:	40028000 	.word	0x40028000
 8000bb8:	200000ec 	.word	0x200000ec
 8000bbc:	2000008c 	.word	0x2000008c
 8000bc0:	200028b4 	.word	0x200028b4

08000bc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <MX_SPI1_Init+0xa4>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000bce:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x107;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c08:	f240 1207 	movw	r2, #263	; 0x107
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_SPI1_Init+0xa0>)
 8000c52:	f003 ff77 	bl	8004b44 <HAL_SPI_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_SPI1_Init+0x9c>
  {
    Error_Handler();
 8000c5c:	f000 f922 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200027a4 	.word	0x200027a4
 8000c68:	40013000 	.word	0x40013000

08000c6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c72:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <MX_USART3_UART_Init+0x94>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb4:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cb6:	f004 fcd8 	bl	800566a <HAL_UART_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f000 f8f0 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cc8:	f005 fc26 	bl	8006518 <HAL_UARTEx_SetTxFifoThreshold>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd2:	f000 f8e7 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cda:	f005 fc5b 	bl	8006594 <HAL_UARTEx_SetRxFifoThreshold>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce4:	f000 f8de 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cea:	f005 fbdc 	bl	80064a6 <HAL_UARTEx_DisableFifoMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf4:	f000 f8d6 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20002714 	.word	0x20002714
 8000d00:	40004800 	.word	0x40004800

08000d04 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b58      	ldr	r3, [pc, #352]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a56      	ldr	r2, [pc, #344]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b54      	ldr	r3, [pc, #336]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d48:	4b50      	ldr	r3, [pc, #320]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a4f      	ldr	r2, [pc, #316]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b4c      	ldr	r3, [pc, #304]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a47      	ldr	r2, [pc, #284]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a40      	ldr	r2, [pc, #256]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	4a38      	ldr	r2, [pc, #224]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db2:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc0:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_GPIO_Init+0x178>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000de4:	482a      	ldr	r0, [pc, #168]	; (8000e90 <MX_GPIO_Init+0x17c>)
 8000de6:	f001 fb41 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	4829      	ldr	r0, [pc, #164]	; (8000e94 <MX_GPIO_Init+0x180>)
 8000df0:	f001 fb3c 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <MX_GPIO_Init+0x184>)
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4824      	ldr	r0, [pc, #144]	; (8000e9c <MX_GPIO_Init+0x188>)
 8000e0a:	f001 f97f 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e0e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	481a      	ldr	r0, [pc, #104]	; (8000e90 <MX_GPIO_Init+0x17c>)
 8000e28:	f001 f970 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e2c:	2340      	movs	r3, #64	; 0x40
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	4814      	ldr	r0, [pc, #80]	; (8000e94 <MX_GPIO_Init+0x180>)
 8000e44:	f001 f962 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <MX_GPIO_Init+0x180>)
 8000e5c:	f001 f956 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e60:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e72:	230a      	movs	r3, #10
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <MX_GPIO_Init+0x18c>)
 8000e7e:	f001 f945 	bl	800210c <HAL_GPIO_Init>

}
 8000e82:	bf00      	nop
 8000e84:	3730      	adds	r7, #48	; 0x30
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	58020400 	.word	0x58020400
 8000e94:	58021800 	.word	0x58021800
 8000e98:	11110000 	.word	0x11110000
 8000e9c:	58020800 	.word	0x58020800
 8000ea0:	58020000 	.word	0x58020000

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_MspInit+0x30>)
 8000eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ebc:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x30>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x30>)
 8000ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	58024400 	.word	0x58024400

08000ee4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a59      	ldr	r2, [pc, #356]	; (8001068 <HAL_ETH_MspInit+0x184>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	f040 80ab 	bne.w	800105e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f08:	4b58      	ldr	r3, [pc, #352]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0e:	4a57      	ldr	r2, [pc, #348]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f18:	4b54      	ldr	r3, [pc, #336]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f22:	623b      	str	r3, [r7, #32]
 8000f24:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f26:	4b51      	ldr	r3, [pc, #324]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f36:	4b4d      	ldr	r3, [pc, #308]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f4a:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f54:	4b45      	ldr	r3, [pc, #276]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a40      	ldr	r2, [pc, #256]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a39      	ldr	r2, [pc, #228]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b33      	ldr	r3, [pc, #204]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a31      	ldr	r2, [pc, #196]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_ETH_MspInit+0x188>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fda:	2332      	movs	r3, #50	; 0x32
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fea:	230b      	movs	r3, #11
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481e      	ldr	r0, [pc, #120]	; (8001070 <HAL_ETH_MspInit+0x18c>)
 8000ff6:	f001 f889 	bl	800210c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 8000ffa:	2386      	movs	r3, #134	; 0x86
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100a:	230b      	movs	r3, #11
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4817      	ldr	r0, [pc, #92]	; (8001074 <HAL_ETH_MspInit+0x190>)
 8001016:	f001 f879 	bl	800210c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800101a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102c:	230b      	movs	r3, #11
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <HAL_ETH_MspInit+0x194>)
 8001038:	f001 f868 	bl	800210c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800103c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104e:	230b      	movs	r3, #11
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <HAL_ETH_MspInit+0x198>)
 800105a:	f001 f857 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3738      	adds	r7, #56	; 0x38
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40028000 	.word	0x40028000
 800106c:	58024400 	.word	0x58024400
 8001070:	58020800 	.word	0x58020800
 8001074:	58020000 	.word	0x58020000
 8001078:	58020400 	.word	0x58020400
 800107c:	58021800 	.word	0x58021800

08001080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0ba      	sub	sp, #232	; 0xe8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	22bc      	movs	r2, #188	; 0xbc
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f008 faed 	bl	8009680 <memset>
  if(hspi->Instance==SPI1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a37      	ldr	r2, [pc, #220]	; (8001188 <HAL_SPI_MspInit+0x108>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d166      	bne.n	800117e <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80010b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ba:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 f9dd 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80010cc:	f7ff feea 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d0:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_SPI_MspInit+0x10c>)
 80010d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010d6:	4a2d      	ldr	r2, [pc, #180]	; (800118c <HAL_SPI_MspInit+0x10c>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_SPI_MspInit+0x10c>)
 80010e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_SPI_MspInit+0x10c>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	4a25      	ldr	r2, [pc, #148]	; (800118c <HAL_SPI_MspInit+0x10c>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_SPI_MspInit+0x10c>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_SPI_MspInit+0x10c>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_SPI_MspInit+0x10c>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_SPI_MspInit+0x10c>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_CS_Pin|SD_SCK_Pin|SD_MISO_Pin;
 800112a:	2370      	movs	r3, #112	; 0x70
 800112c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001142:	2305      	movs	r3, #5
 8001144:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800114c:	4619      	mov	r1, r3
 800114e:	4810      	ldr	r0, [pc, #64]	; (8001190 <HAL_SPI_MspInit+0x110>)
 8001150:	f000 ffdc 	bl	800210c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MOSI_Pin;
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116c:	2305      	movs	r3, #5
 800116e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001176:	4619      	mov	r1, r3
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <HAL_SPI_MspInit+0x114>)
 800117a:	f000 ffc7 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	37e8      	adds	r7, #232	; 0xe8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40013000 	.word	0x40013000
 800118c:	58024400 	.word	0x58024400
 8001190:	58020000 	.word	0x58020000
 8001194:	58020c00 	.word	0x58020c00

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0b8      	sub	sp, #224	; 0xe0
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	22bc      	movs	r2, #188	; 0xbc
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f008 fa61 	bl	8009680 <memset>
  if(huart->Instance==USART3)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_UART_MspInit+0xc0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d142      	bne.n	800124e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 f952 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011e2:	f7ff fe5f 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_UART_MspInit+0xc4>)
 80011e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_UART_MspInit+0xc4>)
 80011ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_UART_MspInit+0xc4>)
 80011f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_UART_MspInit+0xc4>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_UART_MspInit+0xc4>)
 800120c:	f043 0308 	orr.w	r3, r3, #8
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_UART_MspInit+0xc4>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001222:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800123c:	2307      	movs	r3, #7
 800123e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001242:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_UART_MspInit+0xc8>)
 800124a:	f000 ff5f 	bl	800210c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	37e0      	adds	r7, #224	; 0xe0
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40004800 	.word	0x40004800
 800125c:	58024400 	.word	0x58024400
 8001260:	58020c00 	.word	0x58020c00

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b0:	f000 f9ce 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e00a      	b.n	80012e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ca:	f3af 8000 	nop.w
 80012ce:	4601      	mov	r1, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	60ba      	str	r2, [r7, #8]
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf0      	blt.n	80012ca <_read+0x12>
	}

return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e009      	b.n	8001318 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	60ba      	str	r2, [r7, #8]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf1      	blt.n	8001304 <_write+0x12>
	}
	return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_close>:

int _close(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
	return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	605a      	str	r2, [r3, #4]
	return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_isatty>:

int _isatty(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
	return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f008 f932 	bl	800962c <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20020000 	.word	0x20020000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	20000668 	.word	0x20000668
 80013fc:	20004970 	.word	0x20004970

08001400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <SystemInit+0xec>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a38      	ldr	r2, [pc, #224]	; (80014ec <SystemInit+0xec>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <SystemInit+0xf0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	2b06      	cmp	r3, #6
 800141e:	d807      	bhi.n	8001430 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <SystemInit+0xf0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 030f 	bic.w	r3, r3, #15
 8001428:	4a31      	ldr	r2, [pc, #196]	; (80014f0 <SystemInit+0xf0>)
 800142a:	f043 0307 	orr.w	r3, r3, #7
 800142e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001430:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <SystemInit+0xf4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2f      	ldr	r2, [pc, #188]	; (80014f4 <SystemInit+0xf4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <SystemInit+0xf4>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <SystemInit+0xf4>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	492b      	ldr	r1, [pc, #172]	; (80014f4 <SystemInit+0xf4>)
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <SystemInit+0xf8>)
 800144a:	4013      	ands	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <SystemInit+0xf0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <SystemInit+0xf0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 030f 	bic.w	r3, r3, #15
 8001462:	4a23      	ldr	r2, [pc, #140]	; (80014f0 <SystemInit+0xf0>)
 8001464:	f043 0307 	orr.w	r3, r3, #7
 8001468:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <SystemInit+0xf4>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <SystemInit+0xf4>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <SystemInit+0xf4>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <SystemInit+0xf4>)
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <SystemInit+0xfc>)
 8001480:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <SystemInit+0xf4>)
 8001484:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <SystemInit+0x100>)
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <SystemInit+0xf4>)
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <SystemInit+0x104>)
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <SystemInit+0xf4>)
 8001490:	2200      	movs	r2, #0
 8001492:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <SystemInit+0xf4>)
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <SystemInit+0x104>)
 8001498:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <SystemInit+0xf4>)
 800149c:	2200      	movs	r2, #0
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <SystemInit+0xf4>)
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <SystemInit+0x104>)
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <SystemInit+0xf4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <SystemInit+0xf4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <SystemInit+0xf4>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <SystemInit+0xf4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <SystemInit+0x108>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <SystemInit+0x10c>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014ca:	d202      	bcs.n	80014d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <SystemInit+0x110>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <SystemInit+0x114>)
 80014d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014d8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SystemInit+0xec>)
 80014dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	52002000 	.word	0x52002000
 80014f4:	58024400 	.word	0x58024400
 80014f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80014fc:	02020200 	.word	0x02020200
 8001500:	01ff0000 	.word	0x01ff0000
 8001504:	01010280 	.word	0x01010280
 8001508:	5c001000 	.word	0x5c001000
 800150c:	ffff0000 	.word	0xffff0000
 8001510:	51008108 	.word	0x51008108
 8001514:	52004000 	.word	0x52004000

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001550 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800151c:	f7ff ff70 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	; (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001546:	f008 f877 	bl	8009638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff fa01 	bl	8000950 <main>
  bx  lr
 800154e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800155c:	0800a8f0 	.word	0x0800a8f0
  ldr r2, =_sbss
 8001560:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001564:	20004970 	.word	0x20004970

08001568 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC3_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001572:	2003      	movs	r0, #3
 8001574:	f000 f982 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001578:	f001 fdac 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 800157c:	4602      	mov	r2, r0
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_Init+0x68>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	4913      	ldr	r1, [pc, #76]	; (80015d8 <HAL_Init+0x6c>)
 800158a:	5ccb      	ldrb	r3, [r1, r3]
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_Init+0x68>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_Init+0x6c>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_Init+0x70>)
 80015ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <HAL_Init+0x74>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f814 	bl	80015e4 <HAL_InitTick>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e002      	b.n	80015cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015c6:	f7ff fc73 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	58024400 	.word	0x58024400
 80015d8:	0800a790 	.word	0x0800a790
 80015dc:	20000004 	.word	0x20000004
 80015e0:	20000000 	.word	0x20000000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_InitTick+0x60>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e021      	b.n	800163c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_InitTick+0x64>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_InitTick+0x60>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f959 	bl	80018c6 <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800162c:	f000 f931 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_InitTick+0x68>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000000c 	.word	0x2000000c
 8001648:	20000000 	.word	0x20000000
 800164c:	20000008 	.word	0x20000008

08001650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000000c 	.word	0x2000000c
 8001674:	200028e8 	.word	0x200028e8

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200028e8 	.word	0x200028e8

08001690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff ffee 	bl	8001678 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a8:	d005      	beq.n	80016b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_Delay+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b6:	bf00      	nop
 80016b8:	f7ff ffde 	bl	8001678 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d8f7      	bhi.n	80016b8 <HAL_Delay+0x28>
  {
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000000c 	.word	0x2000000c

080016d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetREVID+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0c1b      	lsrs	r3, r3, #16
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	5c001000 	.word	0x5c001000

080016f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001700:	4904      	ldr	r1, [pc, #16]	; (8001714 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	58000400 	.word	0x58000400

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	4313      	orrs	r3, r2
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00
 800175c:	05fa0000 	.word	0x05fa0000

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff47 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff5e 	bl	8001760 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffb2 	bl	8001838 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0c6      	b.n	8001a80 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff faf2 	bl	8000ee4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2223      	movs	r2, #35	; 0x23
 8001904:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b60      	ldr	r3, [pc, #384]	; (8001a88 <HAL_ETH_Init+0x1a8>)
 8001908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800190c:	4a5e      	ldr	r2, [pc, #376]	; (8001a88 <HAL_ETH_Init+0x1a8>)
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <HAL_ETH_Init+0x1a8>)
 8001918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7a1b      	ldrb	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d103      	bne.n	8001934 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fedf 	bl	80016f0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001932:	e003      	b.n	800193c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001934:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001938:	f7ff feda 	bl	80016f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001952:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001954:	f7ff fe90 	bl	8001678 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800195a:	e00f      	b.n	800197c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800195c:	f7ff fe8c 	bl	8001678 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800196a:	d907      	bls.n	800197c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2204      	movs	r2, #4
 8001970:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	22e0      	movs	r2, #224	; 0xe0
 8001976:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e081      	b.n	8001a80 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1e6      	bne.n	800195c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fac0 	bl	8001f14 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001994:	f001 fd18 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8001998:	4603      	mov	r3, r0
 800199a:	4a3c      	ldr	r2, [pc, #240]	; (8001a8c <HAL_ETH_Init+0x1ac>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	0c9a      	lsrs	r2, r3, #18
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3a01      	subs	r2, #1
 80019a8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fa13 	bl	8001dd8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019c8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019cc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	22e0      	movs	r2, #224	; 0xe0
 80019e4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e04a      	b.n	8001a80 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80019f2:	4413      	add	r3, r2
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_ETH_Init+0x1b0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6952      	ldr	r2, [r2, #20]
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	6809      	ldr	r1, [r1, #0]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a0a:	440b      	add	r3, r1
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fad8 	bl	8001fc4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fb1c 	bl	8002052 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	3305      	adds	r3, #5
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	021a      	lsls	r2, r3, #8
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	3303      	adds	r3, #3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	061a      	lsls	r2, r3, #24
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	3302      	adds	r3, #2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	3301      	adds	r3, #1
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001a66:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001a68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2210      	movs	r2, #16
 8001a76:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	431bde83 	.word	0x431bde83
 8001a90:	ffff8001 	.word	0xffff8001

08001a94 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001aa6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001aae:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	7b1b      	ldrb	r3, [r3, #12]
 8001ab4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001ab6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	7b5b      	ldrb	r3, [r3, #13]
 8001abc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001abe:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	7b9b      	ldrb	r3, [r3, #14]
 8001ac4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ac6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	7bdb      	ldrb	r3, [r3, #15]
 8001acc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ace:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	7c12      	ldrb	r2, [r2, #16]
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d102      	bne.n	8001ade <ETH_SetMACConfig+0x4a>
 8001ad8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001adc:	e000      	b.n	8001ae0 <ETH_SetMACConfig+0x4c>
 8001ade:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ae0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	7c52      	ldrb	r2, [r2, #17]
 8001ae6:	2a00      	cmp	r2, #0
 8001ae8:	d102      	bne.n	8001af0 <ETH_SetMACConfig+0x5c>
 8001aea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aee:	e000      	b.n	8001af2 <ETH_SetMACConfig+0x5e>
 8001af0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001af2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7c9b      	ldrb	r3, [r3, #18]
 8001af8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001afa:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001b00:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001b06:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	7f1b      	ldrb	r3, [r3, #28]
 8001b0c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001b0e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	7f5b      	ldrb	r3, [r3, #29]
 8001b14:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001b16:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	7f92      	ldrb	r2, [r2, #30]
 8001b1c:	2a00      	cmp	r2, #0
 8001b1e:	d102      	bne.n	8001b26 <ETH_SetMACConfig+0x92>
 8001b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b24:	e000      	b.n	8001b28 <ETH_SetMACConfig+0x94>
 8001b26:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001b28:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	7fdb      	ldrb	r3, [r3, #31]
 8001b2e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b30:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	d102      	bne.n	8001b42 <ETH_SetMACConfig+0xae>
 8001b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b40:	e000      	b.n	8001b44 <ETH_SetMACConfig+0xb0>
 8001b42:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b44:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b4a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b52:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001b54:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <ETH_SetMACConfig+0x22c>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b7e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b80:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b88:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b8a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b92:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b94:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	d102      	bne.n	8001ba6 <ETH_SetMACConfig+0x112>
 8001ba0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ba4:	e000      	b.n	8001ba8 <ETH_SetMACConfig+0x114>
 8001ba6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001ba8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <ETH_SetMACConfig+0x230>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bcc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <ETH_SetMACConfig+0x234>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	430b      	orrs	r3, r1
 8001be8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bf0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bf6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001bfe:	2a00      	cmp	r2, #0
 8001c00:	d101      	bne.n	8001c06 <ETH_SetMACConfig+0x172>
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	e000      	b.n	8001c08 <ETH_SetMACConfig+0x174>
 8001c06:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c08:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c1a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001c30:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c38:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	f023 0103 	bic.w	r1, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c5e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d101      	bne.n	8001c82 <ETH_SetMACConfig+0x1ee>
 8001c7e:	2240      	movs	r2, #64	; 0x40
 8001c80:	e000      	b.n	8001c84 <ETH_SetMACConfig+0x1f0>
 8001c82:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c84:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c8c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c8e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c96:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001ca4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	00048083 	.word	0x00048083
 8001cc4:	c0f88000 	.word	0xc0f88000
 8001cc8:	fffffef0 	.word	0xfffffef0

08001ccc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <ETH_SetDMAConfig+0xf8>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	6809      	ldr	r1, [r1, #0]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001cf2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cfe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7b1b      	ldrb	r3, [r3, #12]
 8001d04:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d12:	4413      	add	r3, r2
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <ETH_SetDMAConfig+0xfc>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6811      	ldr	r1, [r2, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d26:	440b      	add	r3, r1
 8001d28:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	7b5b      	ldrb	r3, [r3, #13]
 8001d2e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <ETH_SetDMAConfig+0x100>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6811      	ldr	r1, [r2, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001d52:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	7d1b      	ldrb	r3, [r3, #20]
 8001d5c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d5e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	7f5b      	ldrb	r3, [r3, #29]
 8001d64:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d72:	4413      	add	r3, r2
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <ETH_SetDMAConfig+0x104>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6811      	ldr	r1, [r2, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d86:	440b      	add	r3, r1
 8001d88:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	7f1b      	ldrb	r3, [r3, #28]
 8001d8e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001da0:	4413      	add	r3, r2
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <ETH_SetDMAConfig+0x108>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6811      	ldr	r1, [r2, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	f241 1308 	movw	r3, #4360	; 0x1108
 8001db4:	440b      	add	r3, r1
 8001db6:	601a      	str	r2, [r3, #0]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	ffff87fd 	.word	0xffff87fd
 8001dc8:	ffff2ffe 	.word	0xffff2ffe
 8001dcc:	fffec000 	.word	0xfffec000
 8001dd0:	ffc0efef 	.word	0xffc0efef
 8001dd4:	7fc0ffff 	.word	0x7fc0ffff

08001dd8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0a4      	sub	sp, #144	; 0x90
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001de6:	2300      	movs	r3, #0
 8001de8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001e30:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e52:	2300      	movs	r3, #0
 8001e54:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e70:	2320      	movs	r3, #32
 8001e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e82:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e8c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e94:	2302      	movs	r3, #2
 8001e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fde6 	bl	8001a94 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ee2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ee6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001eec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ef0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001ef8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fee1 	bl	8001ccc <ETH_SetDMAConfig>
}
 8001f0a:	bf00      	nop
 8001f0c:	3790      	adds	r7, #144	; 0x90
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f2e:	f001 fa4b 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8001f32:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d908      	bls.n	8001f4e <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d804      	bhi.n	8001f4e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e027      	b.n	8001f9e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d908      	bls.n	8001f68 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d204      	bcs.n	8001f68 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e01a      	b.n	8001f9e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d303      	bcc.n	8001f78 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d911      	bls.n	8001f9c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d908      	bls.n	8001f92 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d804      	bhi.n	8001f92 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e005      	b.n	8001f9e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e000      	b.n	8001f9e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001f9c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	01312cff 	.word	0x01312cff
 8001fb4:	02160ebf 	.word	0x02160ebf
 8001fb8:	03938700 	.word	0x03938700
 8001fbc:	05f5e0ff 	.word	0x05f5e0ff
 8001fc0:	08f0d17f 	.word	0x08f0d17f

08001fc4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e01d      	b.n	800200e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68d9      	ldr	r1, [r3, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	3206      	adds	r2, #6
 8002004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3301      	adds	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d9de      	bls.n	8001fd2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f241 132c 	movw	r3, #4396	; 0x112c
 8002022:	4413      	add	r3, r2
 8002024:	2203      	movs	r2, #3
 8002026:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68d9      	ldr	r1, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	f241 1314 	movw	r3, #4372	; 0x1114
 8002034:	4413      	add	r3, r2
 8002036:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002044:	601a      	str	r2, [r3, #0]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e024      	b.n	80020aa <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6919      	ldr	r1, [r3, #16]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2200      	movs	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3310      	adds	r3, #16
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3301      	adds	r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d9d7      	bls.n	8002060 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	f241 1330 	movw	r3, #4400	; 0x1130
 80020d6:	4413      	add	r3, r2
 80020d8:	2203      	movs	r2, #3
 80020da:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6919      	ldr	r1, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80020e8:	4413      	add	r3, r2
 80020ea:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f241 1328 	movw	r3, #4392	; 0x1128
 80020fc:	4413      	add	r3, r2
 80020fe:	6019      	str	r1, [r3, #0]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800211a:	4b89      	ldr	r3, [pc, #548]	; (8002340 <HAL_GPIO_Init+0x234>)
 800211c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800211e:	e194      	b.n	800244a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8186 	beq.w	8002444 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d00b      	beq.n	8002158 <HAL_GPIO_Init+0x4c>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d007      	beq.n	8002158 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214c:	2b11      	cmp	r3, #17
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b12      	cmp	r3, #18
 8002156:	d130      	bne.n	80021ba <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800218e:	2201      	movs	r2, #1
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	f003 0201 	and.w	r2, r3, #1
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2203      	movs	r2, #3
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0xee>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d123      	bne.n	8002242 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	69b9      	ldr	r1, [r7, #24]
 800223e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0203 	and.w	r2, r3, #3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80e0 	beq.w	8002444 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <HAL_GPIO_Init+0x238>)
 8002286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800228a:	4a2e      	ldr	r2, [pc, #184]	; (8002344 <HAL_GPIO_Init+0x238>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_GPIO_Init+0x238>)
 8002296:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a2:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_GPIO_Init+0x23c>)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_GPIO_Init+0x240>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d052      	beq.n	8002374 <HAL_GPIO_Init+0x268>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_GPIO_Init+0x244>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d031      	beq.n	800233a <HAL_GPIO_Init+0x22e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <HAL_GPIO_Init+0x248>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02b      	beq.n	8002336 <HAL_GPIO_Init+0x22a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_GPIO_Init+0x24c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x226>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_GPIO_Init+0x250>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x222>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_GPIO_Init+0x254>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x21e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <HAL_GPIO_Init+0x258>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x21a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_GPIO_Init+0x25c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x216>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_GPIO_Init+0x260>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x212>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_GPIO_Init+0x264>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x20e>
 8002316:	2309      	movs	r3, #9
 8002318:	e02d      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800231a:	230a      	movs	r3, #10
 800231c:	e02b      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800231e:	2308      	movs	r3, #8
 8002320:	e029      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002322:	2307      	movs	r3, #7
 8002324:	e027      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002326:	2306      	movs	r3, #6
 8002328:	e025      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800232a:	2305      	movs	r3, #5
 800232c:	e023      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800232e:	2304      	movs	r3, #4
 8002330:	e021      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002332:	2303      	movs	r3, #3
 8002334:	e01f      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002336:	2302      	movs	r3, #2
 8002338:	e01d      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800233a:	2301      	movs	r3, #1
 800233c:	e01b      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800233e:	bf00      	nop
 8002340:	58000080 	.word	0x58000080
 8002344:	58024400 	.word	0x58024400
 8002348:	58000400 	.word	0x58000400
 800234c:	58020000 	.word	0x58020000
 8002350:	58020400 	.word	0x58020400
 8002354:	58020800 	.word	0x58020800
 8002358:	58020c00 	.word	0x58020c00
 800235c:	58021000 	.word	0x58021000
 8002360:	58021400 	.word	0x58021400
 8002364:	58021800 	.word	0x58021800
 8002368:	58021c00 	.word	0x58021c00
 800236c:	58022000 	.word	0x58022000
 8002370:	58022400 	.word	0x58022400
 8002374:	2300      	movs	r3, #0
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	f002 0203 	and.w	r2, r2, #3
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	4093      	lsls	r3, r2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002386:	4938      	ldr	r1, [pc, #224]	; (8002468 <HAL_GPIO_Init+0x35c>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800240e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800243c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	3301      	adds	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	f47f ae63 	bne.w	8002120 <HAL_GPIO_Init+0x14>
  }
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	3724      	adds	r7, #36	; 0x24
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	58000400 	.word	0x58000400

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002488:	e003      	b.n	8002492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	041a      	lsls	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b0:	887a      	ldrh	r2, [r7, #2]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	041a      	lsls	r2, r3, #16
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	887b      	ldrh	r3, [r7, #2]
 80024be:	400b      	ands	r3, r1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	619a      	str	r2, [r3, #24]
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d00a      	beq.n	80024fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e01f      	b.n	800253a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e01d      	b.n	800253a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	490f      	ldr	r1, [pc, #60]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4313      	orrs	r3, r2
 800250c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800250e:	f7ff f8b3 	bl	8001678 <HAL_GetTick>
 8002512:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002514:	e009      	b.n	800252a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002516:	f7ff f8af 	bl	8001678 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002524:	d901      	bls.n	800252a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_PWREx_ConfigSupply+0x70>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002536:	d1ee      	bne.n	8002516 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	58024800 	.word	0x58024800

08002548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	; 0x30
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e3ff      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8087 	beq.w	8002676 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	4b99      	ldr	r3, [pc, #612]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002572:	4b97      	ldr	r3, [pc, #604]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	2b10      	cmp	r3, #16
 800257c:	d007      	beq.n	800258e <HAL_RCC_OscConfig+0x46>
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	2b18      	cmp	r3, #24
 8002582:	d110      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d10b      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258e:	4b90      	ldr	r3, [pc, #576]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d06c      	beq.n	8002674 <HAL_RCC_OscConfig+0x12c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d168      	bne.n	8002674 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e3d9      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x76>
 80025b0:	4b87      	ldr	r3, [pc, #540]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a86      	ldr	r2, [pc, #536]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e02e      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x98>
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a81      	ldr	r2, [pc, #516]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b7f      	ldr	r3, [pc, #508]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7e      	ldr	r2, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e01d      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0xbc>
 80025ea:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a78      	ldr	r2, [pc, #480]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 8002604:	4b72      	ldr	r3, [pc, #456]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a71      	ldr	r2, [pc, #452]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff f828 	bl	8001678 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7ff f824 	bl	8001678 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e38d      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800263e:	4b64      	ldr	r3, [pc, #400]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0xe4>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff f814 	bl	8001678 <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002654:	f7ff f810 	bl	8001678 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e379      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002666:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x10c>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80ae 	beq.w	80027e0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002684:	4b52      	ldr	r3, [pc, #328]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800268c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268e:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_RCC_OscConfig+0x162>
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	2b18      	cmp	r3, #24
 800269e:	d13a      	bne.n	8002716 <HAL_RCC_OscConfig+0x1ce>
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d135      	bne.n	8002716 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026aa:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x17a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e34b      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	f7ff f809 	bl	80016d8 <HAL_GetREVID>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d817      	bhi.n	8002700 <HAL_RCC_OscConfig+0x1b8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b40      	cmp	r3, #64	; 0x40
 80026d6:	d108      	bne.n	80026ea <HAL_RCC_OscConfig+0x1a2>
 80026d8:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026e0:	4a3b      	ldr	r2, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80026e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e8:	e07a      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	031b      	lsls	r3, r3, #12
 80026f8:	4935      	ldr	r1, [pc, #212]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fe:	e06f      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	4930      	ldr	r1, [pc, #192]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002714:	e064      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d045      	beq.n	80027aa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0219 	bic.w	r2, r3, #25
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4929      	ldr	r1, [pc, #164]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe ffa2 	bl	8001678 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe ff9e 	bl	8001678 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e307      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	f7fe ffbf 	bl	80016d8 <HAL_GetREVID>
 800275a:	4603      	mov	r3, r0
 800275c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002760:	4293      	cmp	r3, r2
 8002762:	d817      	bhi.n	8002794 <HAL_RCC_OscConfig+0x24c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d108      	bne.n	800277e <HAL_RCC_OscConfig+0x236>
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002774:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277a:	6053      	str	r3, [r2, #4]
 800277c:	e030      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	031b      	lsls	r3, r3, #12
 800278c:	4910      	ldr	r1, [pc, #64]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
 8002792:	e025      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	490b      	ldr	r1, [pc, #44]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
 80027a8:	e01a      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <HAL_RCC_OscConfig+0x288>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe ff5f 	bl	8001678 <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027be:	f7fe ff5b 	bl	8001678 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d903      	bls.n	80027d4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e2c4      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
 80027d0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027d4:	4ba4      	ldr	r3, [pc, #656]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ee      	bne.n	80027be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a9 	beq.w	8002940 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ee:	4b9e      	ldr	r3, [pc, #632]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027f8:	4b9b      	ldr	r3, [pc, #620]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d007      	beq.n	8002814 <HAL_RCC_OscConfig+0x2cc>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b18      	cmp	r3, #24
 8002808:	d13a      	bne.n	8002880 <HAL_RCC_OscConfig+0x338>
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d135      	bne.n	8002880 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002814:	4b94      	ldr	r3, [pc, #592]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x2e4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d001      	beq.n	800282c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e296      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800282c:	f7fe ff54 	bl	80016d8 <HAL_GetREVID>
 8002830:	4603      	mov	r3, r0
 8002832:	f241 0203 	movw	r2, #4099	; 0x1003
 8002836:	4293      	cmp	r3, r2
 8002838:	d817      	bhi.n	800286a <HAL_RCC_OscConfig+0x322>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	2b20      	cmp	r3, #32
 8002840:	d108      	bne.n	8002854 <HAL_RCC_OscConfig+0x30c>
 8002842:	4b89      	ldr	r3, [pc, #548]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800284a:	4a87      	ldr	r2, [pc, #540]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 800284c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002850:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002852:	e075      	b.n	8002940 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002854:	4b84      	ldr	r3, [pc, #528]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	069b      	lsls	r3, r3, #26
 8002862:	4981      	ldr	r1, [pc, #516]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002868:	e06a      	b.n	8002940 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	061b      	lsls	r3, r3, #24
 8002878:	497b      	ldr	r1, [pc, #492]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 800287a:	4313      	orrs	r3, r2
 800287c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800287e:	e05f      	b.n	8002940 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d042      	beq.n	800290e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002888:	4b77      	ldr	r3, [pc, #476]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a76      	ldr	r2, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 800288e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fef0 	bl	8001678 <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800289c:	f7fe feec 	bl	8001678 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e255      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ae:	4b6e      	ldr	r3, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ba:	f7fe ff0d 	bl	80016d8 <HAL_GetREVID>
 80028be:	4603      	mov	r3, r0
 80028c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d817      	bhi.n	80028f8 <HAL_RCC_OscConfig+0x3b0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d108      	bne.n	80028e2 <HAL_RCC_OscConfig+0x39a>
 80028d0:	4b65      	ldr	r3, [pc, #404]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028d8:	4a63      	ldr	r2, [pc, #396]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80028da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028de:	6053      	str	r3, [r2, #4]
 80028e0:	e02e      	b.n	8002940 <HAL_RCC_OscConfig+0x3f8>
 80028e2:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	069b      	lsls	r3, r3, #26
 80028f0:	495d      	ldr	r1, [pc, #372]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
 80028f6:	e023      	b.n	8002940 <HAL_RCC_OscConfig+0x3f8>
 80028f8:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	4958      	ldr	r1, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002908:	4313      	orrs	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
 800290c:	e018      	b.n	8002940 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800290e:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a55      	ldr	r2, [pc, #340]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fead 	bl	8001678 <HAL_GetTick>
 800291e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002922:	f7fe fea9 	bl	8001678 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e212      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002934:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d036      	beq.n	80029ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d019      	beq.n	8002988 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002954:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002958:	4a43      	ldr	r2, [pc, #268]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7fe fe8a 	bl	8001678 <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002968:	f7fe fe86 	bl	8001678 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1ef      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800297a:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x420>
 8002986:	e018      	b.n	80029ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 800298a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298c:	4a36      	ldr	r2, [pc, #216]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe fe70 	bl	8001678 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299c:	f7fe fe6c 	bl	8001678 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e1d5      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d036      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d019      	beq.n	8002a02 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029ce:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80029d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029da:	f7fe fe4d 	bl	8001678 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029e2:	f7fe fe49 	bl	8001678 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e1b2      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x49a>
 8002a00:	e018      	b.n	8002a34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fe33 	bl	8001678 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a16:	f7fe fe2f 	bl	8001678 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e198      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_RCC_OscConfig+0x520>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8085 	beq.w	8002b4c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_RCC_OscConfig+0x524>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <HAL_RCC_OscConfig+0x524>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fe13 	bl	8001678 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a54:	e00c      	b.n	8002a70 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a56:	f7fe fe0f 	bl	8001678 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	; 0x64
 8002a62:	d905      	bls.n	8002a70 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e178      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a70:	4b96      	ldr	r3, [pc, #600]	; (8002ccc <HAL_RCC_OscConfig+0x784>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ec      	beq.n	8002a56 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x54a>
 8002a84:	4b92      	ldr	r3, [pc, #584]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a91      	ldr	r2, [pc, #580]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	e02d      	b.n	8002aee <HAL_RCC_OscConfig+0x5a6>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x56c>
 8002a9a:	4b8d      	ldr	r3, [pc, #564]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	4a8c      	ldr	r2, [pc, #560]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa6:	4b8a      	ldr	r3, [pc, #552]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a89      	ldr	r2, [pc, #548]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab2:	e01c      	b.n	8002aee <HAL_RCC_OscConfig+0x5a6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x58e>
 8002abc:	4b84      	ldr	r3, [pc, #528]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a83      	ldr	r2, [pc, #524]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac8:	4b81      	ldr	r3, [pc, #516]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a80      	ldr	r2, [pc, #512]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	e00b      	b.n	8002aee <HAL_RCC_OscConfig+0x5a6>
 8002ad6:	4b7e      	ldr	r3, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a7d      	ldr	r2, [pc, #500]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae2:	4b7b      	ldr	r3, [pc, #492]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a7a      	ldr	r2, [pc, #488]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d015      	beq.n	8002b22 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7fe fdbf 	bl	8001678 <HAL_GetTick>
 8002afa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fdbb 	bl	8001678 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e122      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b14:	4b6e      	ldr	r3, [pc, #440]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ee      	beq.n	8002afe <HAL_RCC_OscConfig+0x5b6>
 8002b20:	e014      	b.n	8002b4c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7fe fda9 	bl	8001678 <HAL_GetTick>
 8002b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe fda5 	bl	8001678 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e10c      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b40:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ee      	bne.n	8002b2a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8101 	beq.w	8002d58 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b56:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b5e:	2b18      	cmp	r3, #24
 8002b60:	f000 80bc 	beq.w	8002cdc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	f040 8095 	bne.w	8002c98 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b58      	ldr	r3, [pc, #352]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a57      	ldr	r2, [pc, #348]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fd7d 	bl	8001678 <HAL_GetTick>
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe fd79 	bl	8001678 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0e2      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b94:	4b4e      	ldr	r3, [pc, #312]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba4:	4b4b      	ldr	r3, [pc, #300]	; (8002cd4 <HAL_RCC_OscConfig+0x78c>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	4946      	ldr	r1, [pc, #280]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	628b      	str	r3, [r1, #40]	; 0x28
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	3b01      	subs	r3, #1
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bea:	4939      	ldr	r1, [pc, #228]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002bf0:	4b37      	ldr	r3, [pc, #220]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	4a36      	ldr	r2, [pc, #216]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bfc:	4b34      	ldr	r3, [pc, #208]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCC_OscConfig+0x790>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c08:	00d2      	lsls	r2, r2, #3
 8002c0a:	4931      	ldr	r1, [pc, #196]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f023 020c 	bic.w	r2, r3, #12
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	492c      	ldr	r1, [pc, #176]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c22:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f023 0202 	bic.w	r2, r3, #2
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	4928      	ldr	r1, [pc, #160]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	4a25      	ldr	r2, [pc, #148]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c40:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe fd02 	bl	8001678 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe fcfe 	bl	8001678 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e067      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x730>
 8002c96:	e05f      	b.n	8002d58 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fce8 	bl	8001678 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fce4 	bl	8001678 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e04d      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <HAL_RCC_OscConfig+0x788>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x764>
 8002cca:	e045      	b.n	8002d58 <HAL_RCC_OscConfig+0x810>
 8002ccc:	58024800 	.word	0x58024800
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	fffffc0c 	.word	0xfffffc0c
 8002cd8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cdc:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCC_OscConfig+0x81c>)
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCC_OscConfig+0x81c>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d031      	beq.n	8002d54 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f003 0203 	and.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d12a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d122      	bne.n	8002d54 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d11a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	0a5b      	lsrs	r3, r3, #9
 8002d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d111      	bne.n	8002d54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	0c1b      	lsrs	r3, r3, #16
 8002d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d108      	bne.n	8002d54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	0e1b      	lsrs	r3, r3, #24
 8002d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3730      	adds	r7, #48	; 0x30
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	58024400 	.word	0x58024400

08002d68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e19c      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b8a      	ldr	r3, [pc, #552]	; (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d910      	bls.n	8002dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b87      	ldr	r3, [pc, #540]	; (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 020f 	bic.w	r2, r3, #15
 8002d92:	4985      	ldr	r1, [pc, #532]	; (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b83      	ldr	r3, [pc, #524]	; (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e184      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d010      	beq.n	8002dda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d908      	bls.n	8002dda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dc8:	4b78      	ldr	r3, [pc, #480]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	4975      	ldr	r1, [pc, #468]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d010      	beq.n	8002e08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d908      	bls.n	8002e08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	496a      	ldr	r1, [pc, #424]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d010      	beq.n	8002e36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	4b64      	ldr	r3, [pc, #400]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d908      	bls.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e24:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	495e      	ldr	r1, [pc, #376]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d908      	bls.n	8002e64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e52:	4b56      	ldr	r3, [pc, #344]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4953      	ldr	r1, [pc, #332]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d908      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e80:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f023 020f 	bic.w	r2, r3, #15
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4947      	ldr	r1, [pc, #284]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d055      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e9e:	4b43      	ldr	r3, [pc, #268]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	4940      	ldr	r1, [pc, #256]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d121      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0f6      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed0:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d115      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0ea      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ee8:	4b30      	ldr	r3, [pc, #192]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0de      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0d6      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f023 0207 	bic.w	r2, r3, #7
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4925      	ldr	r1, [pc, #148]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fbad 	bl	8001678 <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f22:	f7fe fba9 	bl	8001678 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0be      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d1eb      	bne.n	8002f22 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d010      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d208      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f023 020f 	bic.w	r2, r3, #15
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	490e      	ldr	r1, [pc, #56]	; (8002fac <HAL_RCC_ClockConfig+0x244>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d214      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	4906      	ldr	r1, [pc, #24]	; (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <HAL_RCC_ClockConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e086      	b.n	80030b6 <HAL_RCC_ClockConfig+0x34e>
 8002fa8:	52002000 	.word	0x52002000
 8002fac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d208      	bcs.n	8002fde <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fcc:	4b3c      	ldr	r3, [pc, #240]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	4939      	ldr	r1, [pc, #228]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d208      	bcs.n	800300c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	492e      	ldr	r1, [pc, #184]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003008:	4313      	orrs	r3, r2
 800300a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003024:	429a      	cmp	r2, r3
 8003026:	d208      	bcs.n	800303a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4922      	ldr	r1, [pc, #136]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003036:	4313      	orrs	r3, r2
 8003038:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003052:	429a      	cmp	r2, r3
 8003054:	d208      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4917      	ldr	r1, [pc, #92]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003064:	4313      	orrs	r3, r2
 8003066:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003068:	f000 f834 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	4912      	ldr	r1, [pc, #72]	; (80030c4 <HAL_RCC_ClockConfig+0x35c>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_RCC_ClockConfig+0x358>)
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <HAL_RCC_ClockConfig+0x35c>)
 8003090:	5cd3      	ldrb	r3, [r2, r3]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
 800309c:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x360>)
 800309e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030a0:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x364>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x368>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fa9a 	bl	80015e4 <HAL_InitTick>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	58024400 	.word	0x58024400
 80030c4:	0800a790 	.word	0x0800a790
 80030c8:	20000004 	.word	0x20000004
 80030cc:	20000000 	.word	0x20000000
 80030d0:	20000008 	.word	0x20000008

080030d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030da:	4bb3      	ldr	r3, [pc, #716]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e2:	2b18      	cmp	r3, #24
 80030e4:	f200 8155 	bhi.w	8003392 <HAL_RCC_GetSysClockFreq+0x2be>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003155 	.word	0x08003155
 80030f4:	08003393 	.word	0x08003393
 80030f8:	08003393 	.word	0x08003393
 80030fc:	08003393 	.word	0x08003393
 8003100:	08003393 	.word	0x08003393
 8003104:	08003393 	.word	0x08003393
 8003108:	08003393 	.word	0x08003393
 800310c:	08003393 	.word	0x08003393
 8003110:	0800317b 	.word	0x0800317b
 8003114:	08003393 	.word	0x08003393
 8003118:	08003393 	.word	0x08003393
 800311c:	08003393 	.word	0x08003393
 8003120:	08003393 	.word	0x08003393
 8003124:	08003393 	.word	0x08003393
 8003128:	08003393 	.word	0x08003393
 800312c:	08003393 	.word	0x08003393
 8003130:	08003181 	.word	0x08003181
 8003134:	08003393 	.word	0x08003393
 8003138:	08003393 	.word	0x08003393
 800313c:	08003393 	.word	0x08003393
 8003140:	08003393 	.word	0x08003393
 8003144:	08003393 	.word	0x08003393
 8003148:	08003393 	.word	0x08003393
 800314c:	08003393 	.word	0x08003393
 8003150:	08003187 	.word	0x08003187
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003154:	4b94      	ldr	r3, [pc, #592]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003160:	4b91      	ldr	r3, [pc, #580]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	4a90      	ldr	r2, [pc, #576]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
 8003170:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003172:	e111      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003174:	4b8d      	ldr	r3, [pc, #564]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003176:	61bb      	str	r3, [r7, #24]
    break;
 8003178:	e10e      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800317a:	4b8d      	ldr	r3, [pc, #564]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800317c:	61bb      	str	r3, [r7, #24]
    break;
 800317e:	e10b      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003180:	4b8c      	ldr	r3, [pc, #560]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003182:	61bb      	str	r3, [r7, #24]
    break;
 8003184:	e108      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003186:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003190:	4b85      	ldr	r3, [pc, #532]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800319a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800319c:	4b82      	ldr	r3, [pc, #520]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031a6:	4b80      	ldr	r3, [pc, #512]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	08db      	lsrs	r3, r3, #3
 80031ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80e1 	beq.w	800338c <HAL_RCC_GetSysClockFreq+0x2b8>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	f000 8083 	beq.w	80032d8 <HAL_RCC_GetSysClockFreq+0x204>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	f200 80a1 	bhi.w	800331c <HAL_RCC_GetSysClockFreq+0x248>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x114>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d056      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031e6:	e099      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031e8:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d02d      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031f4:	4b6c      	ldr	r3, [pc, #432]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	4a6b      	ldr	r2, [pc, #428]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321e:	4b62      	ldr	r3, [pc, #392]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003232:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800323a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800324e:	e087      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800325e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003262:	4b51      	ldr	r3, [pc, #324]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003272:	ed97 6a02 	vldr	s12, [r7, #8]
 8003276:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800327a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800328a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003292:	e065      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a6:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032d6:	e043      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ea:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800330a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800331a:	e021      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003326:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800332a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003342:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800335e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	0a5b      	lsrs	r3, r3, #9
 8003366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800336a:	3301      	adds	r3, #1
 800336c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003378:	edd7 6a07 	vldr	s13, [r7, #28]
 800337c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003384:	ee17 3a90 	vmov	r3, s15
 8003388:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800338a:	e005      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
    break;
 8003390:	e002      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003394:	61bb      	str	r3, [r7, #24]
    break;
 8003396:	bf00      	nop
  }

  return sysclockfreq;
 8003398:	69bb      	ldr	r3, [r7, #24]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	58024400 	.word	0x58024400
 80033ac:	03d09000 	.word	0x03d09000
 80033b0:	003d0900 	.word	0x003d0900
 80033b4:	017d7840 	.word	0x017d7840
 80033b8:	46000000 	.word	0x46000000
 80033bc:	4c742400 	.word	0x4c742400
 80033c0:	4a742400 	.word	0x4a742400
 80033c4:	4bbebc20 	.word	0x4bbebc20

080033c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033ce:	f7ff fe81 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_RCC_GetHCLKFreq+0x50>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	490f      	ldr	r1, [pc, #60]	; (800341c <HAL_RCC_GetHCLKFreq+0x54>)
 80033e0:	5ccb      	ldrb	r3, [r1, r3]
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	4a09      	ldr	r2, [pc, #36]	; (800341c <HAL_RCC_GetHCLKFreq+0x54>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <HAL_RCC_GetHCLKFreq+0x58>)
 8003404:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <HAL_RCC_GetHCLKFreq+0x58>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	58024400 	.word	0x58024400
 800341c:	0800a790 	.word	0x0800a790
 8003420:	20000004 	.word	0x20000004
 8003424:	20000000 	.word	0x20000000

08003428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800342c:	f7ff ffcc 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4904      	ldr	r1, [pc, #16]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	58024400 	.word	0x58024400
 8003450:	0800a790 	.word	0x0800a790

08003454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003458:	f7ff ffb6 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4904      	ldr	r1, [pc, #16]	; (800347c <HAL_RCC_GetPCLK2Freq+0x28>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	58024400 	.word	0x58024400
 800347c:	0800a790 	.word	0x0800a790

08003480 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800348c:	2300      	movs	r3, #0
 800348e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d03f      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a4:	d02a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034aa:	d824      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b0:	d018      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b6:	d81e      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c0:	d007      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034c2:	e018      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c4:	4bab      	ldr	r3, [pc, #684]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	4aaa      	ldr	r2, [pc, #680]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034d0:	e015      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f9cf 	bl	800487c <RCCEx_PLL2_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034e2:	e00c      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3324      	adds	r3, #36	; 0x24
 80034e8:	2102      	movs	r1, #2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 fa78 	bl	80049e0 <RCCEx_PLL3_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034f4:	e003      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]
      break;
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003504:	4b9b      	ldr	r3, [pc, #620]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003510:	4998      	ldr	r1, [pc, #608]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	650b      	str	r3, [r1, #80]	; 0x50
 8003516:	e001      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d03d      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	2b04      	cmp	r3, #4
 800352e:	d826      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800354d 	.word	0x0800354d
 800353c:	0800355b 	.word	0x0800355b
 8003540:	0800356d 	.word	0x0800356d
 8003544:	08003585 	.word	0x08003585
 8003548:	08003585 	.word	0x08003585
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354c:	4b89      	ldr	r3, [pc, #548]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4a88      	ldr	r2, [pc, #544]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003558:	e015      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f001 f98b 	bl	800487c <RCCEx_PLL2_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800356a:	e00c      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3324      	adds	r3, #36	; 0x24
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fa34 	bl	80049e0 <RCCEx_PLL3_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800357c:	e003      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
      break;
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d109      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800358c:	4b79      	ldr	r3, [pc, #484]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	f023 0207 	bic.w	r2, r3, #7
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	4976      	ldr	r1, [pc, #472]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	650b      	str	r3, [r1, #80]	; 0x50
 800359e:	e001      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
 80035a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d042      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b8:	d02b      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80035ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035be:	d825      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035c0:	2bc0      	cmp	r3, #192	; 0xc0
 80035c2:	d028      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035c4:	2bc0      	cmp	r3, #192	; 0xc0
 80035c6:	d821      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d016      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d81d      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d007      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80035d8:	e018      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035da:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	4a65      	ldr	r2, [pc, #404]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035e6:	e017      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 f944 	bl	800487c <RCCEx_PLL2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035f8:	e00e      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3324      	adds	r3, #36	; 0x24
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f001 f9ed 	bl	80049e0 <RCCEx_PLL3_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800360a:	e005      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	75fb      	strb	r3, [r7, #23]
      break;
 8003610:	e002      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800361e:	4b55      	ldr	r3, [pc, #340]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	4952      	ldr	r1, [pc, #328]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800362c:	4313      	orrs	r3, r2
 800362e:	650b      	str	r3, [r1, #80]	; 0x50
 8003630:	e001      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363e:	2b00      	cmp	r3, #0
 8003640:	d049      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003648:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800364c:	d030      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800364e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003652:	d82a      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003654:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003658:	d02c      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800365a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800365e:	d824      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003664:	d018      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366a:	d81e      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003674:	d007      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003676:	e018      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003678:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	4a3d      	ldr	r2, [pc, #244]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800367e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003684:	e017      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f001 f8f5 	bl	800487c <RCCEx_PLL2_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003696:	e00e      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3324      	adds	r3, #36	; 0x24
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 f99e 	bl	80049e0 <RCCEx_PLL3_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036a8:	e005      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036b0:	bf00      	nop
 80036b2:	e000      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036bc:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036ca:	492a      	ldr	r1, [pc, #168]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	658b      	str	r3, [r1, #88]	; 0x58
 80036d0:	e001      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d04c      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ec:	d030      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80036ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f2:	d82a      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036f8:	d02c      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80036fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036fe:	d824      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003704:	d018      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800370a:	d81e      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003714:	d007      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003716:	e018      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003718:	4b16      	ldr	r3, [pc, #88]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	4a15      	ldr	r2, [pc, #84]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003722:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003724:	e017      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3304      	adds	r3, #4
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f8a5 	bl	800487c <RCCEx_PLL2_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003736:	e00e      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3324      	adds	r3, #36	; 0x24
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f001 f94e 	bl	80049e0 <RCCEx_PLL3_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003748:	e005      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003750:	bf00      	nop
 8003752:	e000      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10d      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800376a:	4902      	ldr	r1, [pc, #8]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	658b      	str	r3, [r1, #88]	; 0x58
 8003770:	e004      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003772:	bf00      	nop
 8003774:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d032      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d01c      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d817      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d00c      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d813      	bhi.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d10f      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4baf      	ldr	r3, [pc, #700]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4aae      	ldr	r2, [pc, #696]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037b0:	e00e      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2102      	movs	r1, #2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 f85f 	bl	800487c <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	75fb      	strb	r3, [r7, #23]
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80037ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037d6:	4ba3      	ldr	r3, [pc, #652]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	49a0      	ldr	r1, [pc, #640]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037e8:	e001      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d047      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003802:	d030      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003808:	d82a      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800380a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800380e:	d02c      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003810:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003814:	d824      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381a:	d018      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800381c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003820:	d81e      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	d007      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800382c:	e018      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382e:	4b8d      	ldr	r3, [pc, #564]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	4a8c      	ldr	r2, [pc, #560]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003838:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800383a:	e017      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f001 f81a 	bl	800487c <RCCEx_PLL2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800384c:	e00e      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3324      	adds	r3, #36	; 0x24
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f001 f8c3 	bl	80049e0 <RCCEx_PLL3_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800385e:	e005      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	75fb      	strb	r3, [r7, #23]
      break;
 8003864:	e002      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800386a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003872:	4b7c      	ldr	r3, [pc, #496]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003876:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	4979      	ldr	r1, [pc, #484]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003880:	4313      	orrs	r3, r2
 8003882:	650b      	str	r3, [r1, #80]	; 0x50
 8003884:	e001      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d049      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389e:	d02e      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80038a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a4:	d828      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038aa:	d02a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80038ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038b0:	d822      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b6:	d026      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038bc:	d81c      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c2:	d010      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80038c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c8:	d816      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01d      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d2:	d111      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	2101      	movs	r1, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 ffce 	bl	800487c <RCCEx_PLL2_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038e4:	e012      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3324      	adds	r3, #36	; 0x24
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 f877 	bl	80049e0 <RCCEx_PLL3_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038f6:	e009      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	75fb      	strb	r3, [r7, #23]
      break;
 80038fc:	e006      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038fe:	bf00      	nop
 8003900:	e004      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800390a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003912:	4b54      	ldr	r3, [pc, #336]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391e:	4951      	ldr	r1, [pc, #324]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	650b      	str	r3, [r1, #80]	; 0x50
 8003924:	e001      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d04b      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800393c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003940:	d02e      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003946:	d828      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d02a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d822      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003954:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003958:	d026      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800395a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800395e:	d81c      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003964:	d010      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396a:	d816      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01d      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003974:	d111      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	2101      	movs	r1, #1
 800397c:	4618      	mov	r0, r3
 800397e:	f000 ff7d 	bl	800487c <RCCEx_PLL2_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003986:	e012      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3324      	adds	r3, #36	; 0x24
 800398c:	2101      	movs	r1, #1
 800398e:	4618      	mov	r0, r3
 8003990:	f001 f826 	bl	80049e0 <RCCEx_PLL3_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003998:	e009      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
      break;
 800399e:	e006      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039a0:	bf00      	nop
 80039a2:	e004      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039a4:	bf00      	nop
 80039a6:	e002      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c2:	4928      	ldr	r1, [pc, #160]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	658b      	str	r3, [r1, #88]	; 0x58
 80039c8:	e001      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d02f      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e2:	d00e      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80039e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e8:	d814      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d015      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f2:	d10f      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a00:	e00c      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 ff37 	bl	800487c <RCCEx_PLL2_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a12:	e003      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	75fb      	strb	r3, [r7, #23]
      break;
 8003a18:	e000      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	490d      	ldr	r1, [pc, #52]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	650b      	str	r3, [r1, #80]	; 0x50
 8003a34:	e001      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d033      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d81c      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a8f 	.word	0x08003a8f
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a77 	.word	0x08003a77
 8003a60:	08003a8f 	.word	0x08003a8f
 8003a64:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a68:	4bb8      	ldr	r3, [pc, #736]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4ab7      	ldr	r2, [pc, #732]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a74:	e00c      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fefd 	bl	800487c <RCCEx_PLL2_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8c:	e000      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a96:	4bad      	ldr	r3, [pc, #692]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	49aa      	ldr	r1, [pc, #680]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003aa8:	e001      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8086 	beq.w	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003abc:	4ba4      	ldr	r3, [pc, #656]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4aa3      	ldr	r2, [pc, #652]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac8:	f7fd fdd6 	bl	8001678 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ace:	e009      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7fd fdd2 	bl	8001678 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d902      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ae2:	e005      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae4:	4b9a      	ldr	r3, [pc, #616]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ef      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d166      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003af6:	4b95      	ldr	r3, [pc, #596]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b00:	4053      	eors	r3, r2
 8003b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d013      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b0a:	4b90      	ldr	r3, [pc, #576]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b14:	4b8d      	ldr	r3, [pc, #564]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a8c      	ldr	r2, [pc, #560]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b20:	4b8a      	ldr	r3, [pc, #552]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	4a89      	ldr	r2, [pc, #548]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b2c:	4a87      	ldr	r2, [pc, #540]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3c:	d115      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fd fd9b 	bl	8001678 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b44:	e00b      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fd fd97 	bl	8001678 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d902      	bls.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	75fb      	strb	r3, [r7, #23]
            break;
 8003b5c:	e005      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b5e:	4b7b      	ldr	r3, [pc, #492]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0ed      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d126      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7e:	d10d      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b80:	4b72      	ldr	r3, [pc, #456]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b8e:	0919      	lsrs	r1, r3, #4
 8003b90:	4b70      	ldr	r3, [pc, #448]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003b92:	400b      	ands	r3, r1
 8003b94:	496d      	ldr	r1, [pc, #436]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	610b      	str	r3, [r1, #16]
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b9c:	4b6b      	ldr	r3, [pc, #428]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	4a6a      	ldr	r2, [pc, #424]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ba2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ba6:	6113      	str	r3, [r2, #16]
 8003ba8:	4b68      	ldr	r3, [pc, #416]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb6:	4965      	ldr	r1, [pc, #404]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	670b      	str	r3, [r1, #112]	; 0x70
 8003bbc:	e004      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	75bb      	strb	r3, [r7, #22]
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d07e      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd8:	2b28      	cmp	r3, #40	; 0x28
 8003bda:	d867      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003cb3 	.word	0x08003cb3
 8003be8:	08003cad 	.word	0x08003cad
 8003bec:	08003cad 	.word	0x08003cad
 8003bf0:	08003cad 	.word	0x08003cad
 8003bf4:	08003cad 	.word	0x08003cad
 8003bf8:	08003cad 	.word	0x08003cad
 8003bfc:	08003cad 	.word	0x08003cad
 8003c00:	08003cad 	.word	0x08003cad
 8003c04:	08003c89 	.word	0x08003c89
 8003c08:	08003cad 	.word	0x08003cad
 8003c0c:	08003cad 	.word	0x08003cad
 8003c10:	08003cad 	.word	0x08003cad
 8003c14:	08003cad 	.word	0x08003cad
 8003c18:	08003cad 	.word	0x08003cad
 8003c1c:	08003cad 	.word	0x08003cad
 8003c20:	08003cad 	.word	0x08003cad
 8003c24:	08003c9b 	.word	0x08003c9b
 8003c28:	08003cad 	.word	0x08003cad
 8003c2c:	08003cad 	.word	0x08003cad
 8003c30:	08003cad 	.word	0x08003cad
 8003c34:	08003cad 	.word	0x08003cad
 8003c38:	08003cad 	.word	0x08003cad
 8003c3c:	08003cad 	.word	0x08003cad
 8003c40:	08003cad 	.word	0x08003cad
 8003c44:	08003cb3 	.word	0x08003cb3
 8003c48:	08003cad 	.word	0x08003cad
 8003c4c:	08003cad 	.word	0x08003cad
 8003c50:	08003cad 	.word	0x08003cad
 8003c54:	08003cad 	.word	0x08003cad
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003cad 	.word	0x08003cad
 8003c64:	08003cb3 	.word	0x08003cb3
 8003c68:	08003cad 	.word	0x08003cad
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003cad 	.word	0x08003cad
 8003c74:	08003cad 	.word	0x08003cad
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cb3 	.word	0x08003cb3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fdf4 	bl	800487c <RCCEx_PLL2_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c98:	e00c      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3324      	adds	r3, #36	; 0x24
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fe9d 	bl	80049e0 <RCCEx_PLL3_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003caa:	e003      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb0:	e000      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc6:	4921      	ldr	r1, [pc, #132]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	654b      	str	r3, [r1, #84]	; 0x54
 8003ccc:	e001      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d03e      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	2b05      	cmp	r3, #5
 8003ce4:	d820      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d2f 	.word	0x08003d2f
 8003cf0:	08003d05 	.word	0x08003d05
 8003cf4:	08003d17 	.word	0x08003d17
 8003cf8:	08003d2f 	.word	0x08003d2f
 8003cfc:	08003d2f 	.word	0x08003d2f
 8003d00:	08003d2f 	.word	0x08003d2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fdb6 	bl	800487c <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d14:	e00c      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3324      	adds	r3, #36	; 0x24
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fe5f 	bl	80049e0 <RCCEx_PLL3_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2c:	e000      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d110      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d42:	4902      	ldr	r1, [pc, #8]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	654b      	str	r3, [r1, #84]	; 0x54
 8003d48:	e008      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003d4a:	bf00      	nop
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	58024800 	.word	0x58024800
 8003d54:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d039      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d820      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003dbb 	.word	0x08003dbb
 8003d7c:	08003d91 	.word	0x08003d91
 8003d80:	08003da3 	.word	0x08003da3
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003dbb 	.word	0x08003dbb
 8003d8c:	08003dbb 	.word	0x08003dbb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fd70 	bl	800487c <RCCEx_PLL2_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003da0:	e00c      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3324      	adds	r3, #36	; 0x24
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fe19 	bl	80049e0 <RCCEx_PLL3_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003db2:	e003      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
      break;
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dc2:	4bb7      	ldr	r3, [pc, #732]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	f023 0207 	bic.w	r2, r3, #7
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd0:	49b3      	ldr	r1, [pc, #716]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	658b      	str	r3, [r1, #88]	; 0x58
 8003dd6:	e001      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d04b      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003df2:	d02e      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003df8:	d828      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d02a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e04:	d822      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e0a:	d026      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e10:	d81c      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e16:	d010      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e1c:	d816      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01d      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e26:	d111      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fd24 	bl	800487c <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e38:	e012      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3324      	adds	r3, #36	; 0x24
 8003e3e:	2102      	movs	r1, #2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fdcd 	bl	80049e0 <RCCEx_PLL3_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e4a:	e009      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	e006      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e52:	bf00      	nop
 8003e54:	e004      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e56:	bf00      	nop
 8003e58:	e002      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e66:	4b8e      	ldr	r3, [pc, #568]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e74:	498a      	ldr	r1, [pc, #552]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	654b      	str	r3, [r1, #84]	; 0x54
 8003e7a:	e001      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d04b      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e96:	d02e      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003e98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e9c:	d828      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	d02a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea8:	d822      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eae:	d026      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003eb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eb4:	d81c      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eba:	d010      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec0:	d816      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01d      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d111      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fcd2 	bl	800487c <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003edc:	e012      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3324      	adds	r3, #36	; 0x24
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fd7b 	bl	80049e0 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003eee:	e009      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef4:	e006      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e004      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003efa:	bf00      	nop
 8003efc:	e002      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f0a:	4b65      	ldr	r3, [pc, #404]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f18:	4961      	ldr	r1, [pc, #388]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f1e:	e001      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d04b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f3a:	d02e      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003f3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f40:	d828      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f46:	d02a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4c:	d822      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f52:	d026      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f58:	d81c      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f5e:	d010      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f64:	d816      	bhi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01d      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f6e:	d111      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fc80 	bl	800487c <RCCEx_PLL2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f80:	e012      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3324      	adds	r3, #36	; 0x24
 8003f86:	2102      	movs	r1, #2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fd29 	bl	80049e0 <RCCEx_PLL3_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f92:	e009      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
      break;
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e004      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fae:	4b3c      	ldr	r3, [pc, #240]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fbc:	4938      	ldr	r1, [pc, #224]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	658b      	str	r3, [r1, #88]	; 0x58
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fde:	d10a      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3324      	adds	r3, #36	; 0x24
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fcfa 	bl	80049e0 <RCCEx_PLL3_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ff6:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004004:	4926      	ldr	r1, [pc, #152]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004006:	4313      	orrs	r3, r2
 8004008:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004020:	d10a      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3324      	adds	r3, #36	; 0x24
 8004026:	2102      	movs	r1, #2
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fcd9 	bl	80049e0 <RCCEx_PLL3_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004038:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004046:	4916      	ldr	r1, [pc, #88]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004048:	4313      	orrs	r3, r2
 800404a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d036      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800405e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004062:	d01f      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004068:	d817      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800406e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004072:	d009      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004074:	e011      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fbfd 	bl	800487c <RCCEx_PLL2_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004086:	e00e      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3324      	adds	r3, #36	; 0x24
 800408c:	2102      	movs	r1, #2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fca6 	bl	80049e0 <RCCEx_PLL3_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004098:	e005      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
      break;
 800409e:	e002      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80040a0:	58024400 	.word	0x58024400
      break;
 80040a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040ac:	4b93      	ldr	r3, [pc, #588]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040ba:	4990      	ldr	r1, [pc, #576]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	658b      	str	r3, [r1, #88]	; 0x58
 80040c0:	e001      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d033      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040dc:	d01c      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80040de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040e2:	d816      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80040e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e8:	d003      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80040ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ee:	d007      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80040f0:	e00f      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f2:	4b82      	ldr	r3, [pc, #520]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	4a81      	ldr	r2, [pc, #516]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80040fe:	e00c      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3324      	adds	r3, #36	; 0x24
 8004104:	2101      	movs	r1, #1
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fc6a 	bl	80049e0 <RCCEx_PLL3_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
      break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004120:	4b76      	ldr	r3, [pc, #472]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412e:	4973      	ldr	r1, [pc, #460]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	654b      	str	r3, [r1, #84]	; 0x54
 8004134:	e001      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d029      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800414e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004152:	d007      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004154:	e00f      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004156:	4b69      	ldr	r3, [pc, #420]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	4a68      	ldr	r2, [pc, #416]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004162:	e00b      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fb86 	bl	800487c <RCCEx_PLL2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004174:	e002      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	75fb      	strb	r3, [r7, #23]
      break;
 800417a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004182:	4b5e      	ldr	r3, [pc, #376]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	495b      	ldr	r1, [pc, #364]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004194:	e001      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
 8004198:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3324      	adds	r3, #36	; 0x24
 80041aa:	2102      	movs	r1, #2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fc17 	bl	80049e0 <RCCEx_PLL3_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d030      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d0:	d017      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80041d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d6:	d811      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041dc:	d013      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80041de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e2:	d80b      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80041e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ec:	d106      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ee:	4b43      	ldr	r3, [pc, #268]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	4a42      	ldr	r2, [pc, #264]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80041fa:	e007      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004200:	e004      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800420a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004212:	4b3a      	ldr	r3, [pc, #232]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800421e:	4937      	ldr	r1, [pc, #220]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	654b      	str	r3, [r1, #84]	; 0x54
 8004224:	e001      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004236:	4b31      	ldr	r3, [pc, #196]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	492e      	ldr	r1, [pc, #184]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004244:	4313      	orrs	r3, r2
 8004246:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004254:	4b29      	ldr	r3, [pc, #164]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004262:	4926      	ldr	r1, [pc, #152]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004274:	4b21      	ldr	r3, [pc, #132]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004278:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004280:	491e      	ldr	r1, [pc, #120]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004292:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	4a19      	ldr	r2, [pc, #100]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800429c:	6113      	str	r3, [r2, #16]
 800429e:	4b17      	ldr	r3, [pc, #92]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042a8:	4914      	ldr	r1, [pc, #80]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	da08      	bge.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	490e      	ldr	r1, [pc, #56]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	4906      	ldr	r1, [pc, #24]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80042e8:	7dbb      	ldrb	r3, [r7, #22]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	58024400 	.word	0x58024400

08004300 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004304:	f7ff f860 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4904      	ldr	r1, [pc, #16]	; (8004328 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	58024400 	.word	0x58024400
 8004328:	0800a790 	.word	0x0800a790

0800432c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800432c:	b480      	push	{r7}
 800432e:	b089      	sub	sp, #36	; 0x24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004334:	4ba1      	ldr	r3, [pc, #644]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800433e:	4b9f      	ldr	r3, [pc, #636]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	0b1b      	lsrs	r3, r3, #12
 8004344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004348:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800434a:	4b9c      	ldr	r3, [pc, #624]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004356:	4b99      	ldr	r3, [pc, #612]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	08db      	lsrs	r3, r3, #3
 800435c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8111 	beq.w	800459c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b02      	cmp	r3, #2
 800437e:	f000 8083 	beq.w	8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b02      	cmp	r3, #2
 8004386:	f200 80a1 	bhi.w	80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d056      	beq.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004396:	e099      	b.n	80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004398:	4b88      	ldr	r3, [pc, #544]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02d      	beq.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043a4:	4b85      	ldr	r3, [pc, #532]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	08db      	lsrs	r3, r3, #3
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	4a84      	ldr	r2, [pc, #528]	; (80045c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
 80043b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b7b      	ldr	r3, [pc, #492]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043fe:	e087      	b.n	8004510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800440e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004422:	ed97 6a03 	vldr	s12, [r7, #12]
 8004426:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800442a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004442:	e065      	b.n	8004510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004456:	4b59      	ldr	r3, [pc, #356]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004466:	ed97 6a03 	vldr	s12, [r7, #12]
 800446a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800446e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004486:	e043      	b.n	8004510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004492:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800449a:	4b48      	ldr	r3, [pc, #288]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044ca:	e021      	b.n	8004510 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044de:	4b37      	ldr	r3, [pc, #220]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80044f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800450e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004510:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	0a5b      	lsrs	r3, r3, #9
 8004516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800452a:	edd7 6a07 	vldr	s13, [r7, #28]
 800452e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004536:	ee17 2a90 	vmov	r2, s15
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800453e:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004554:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004558:	edd7 6a07 	vldr	s13, [r7, #28]
 800455c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004564:	ee17 2a90 	vmov	r2, s15
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800456c:	4b13      	ldr	r3, [pc, #76]	; (80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	0e1b      	lsrs	r3, r3, #24
 8004572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004586:	edd7 6a07 	vldr	s13, [r7, #28]
 800458a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004592:	ee17 2a90 	vmov	r2, s15
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800459a:	e008      	b.n	80045ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
}
 80045ae:	bf00      	nop
 80045b0:	3724      	adds	r7, #36	; 0x24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	58024400 	.word	0x58024400
 80045c0:	03d09000 	.word	0x03d09000
 80045c4:	46000000 	.word	0x46000000
 80045c8:	4c742400 	.word	0x4c742400
 80045cc:	4a742400 	.word	0x4a742400
 80045d0:	4bbebc20 	.word	0x4bbebc20

080045d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045dc:	4ba1      	ldr	r3, [pc, #644]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80045e6:	4b9f      	ldr	r3, [pc, #636]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	0d1b      	lsrs	r3, r3, #20
 80045ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045f2:	4b9c      	ldr	r3, [pc, #624]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80045fe:	4b99      	ldr	r3, [pc, #612]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	08db      	lsrs	r3, r3, #3
 8004604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8111 	beq.w	8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b02      	cmp	r3, #2
 8004626:	f000 8083 	beq.w	8004730 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b02      	cmp	r3, #2
 800462e:	f200 80a1 	bhi.w	8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d056      	beq.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800463e:	e099      	b.n	8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004640:	4b88      	ldr	r3, [pc, #544]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02d      	beq.n	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800464c:	4b85      	ldr	r3, [pc, #532]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	08db      	lsrs	r3, r3, #3
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	4a84      	ldr	r2, [pc, #528]	; (8004868 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b7b      	ldr	r3, [pc, #492]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a03 	vldr	s12, [r7, #12]
 800468a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046a6:	e087      	b.n	80047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004870 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ba:	4b6a      	ldr	r3, [pc, #424]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ea:	e065      	b.n	80047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fe:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004712:	eddf 5a56 	vldr	s11, [pc, #344]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800472e:	e043      	b.n	80047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800473e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004742:	4b48      	ldr	r3, [pc, #288]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004752:	ed97 6a03 	vldr	s12, [r7, #12]
 8004756:	eddf 5a45 	vldr	s11, [pc, #276]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800475a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004772:	e021      	b.n	80047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004874 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004786:	4b37      	ldr	r3, [pc, #220]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004796:	ed97 6a03 	vldr	s12, [r7, #12]
 800479a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800486c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800479e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80047b8:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	0a5b      	lsrs	r3, r3, #9
 80047be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047de:	ee17 2a90 	vmov	r2, s15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80047e6:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	0c1b      	lsrs	r3, r3, #16
 80047ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f0:	ee07 3a90 	vmov	s15, r3
 80047f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004800:	edd7 6a07 	vldr	s13, [r7, #28]
 8004804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480c:	ee17 2a90 	vmov	r2, s15
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004814:	4b13      	ldr	r3, [pc, #76]	; (8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	0e1b      	lsrs	r3, r3, #24
 800481a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800482a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800482e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483a:	ee17 2a90 	vmov	r2, s15
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004842:	e008      	b.n	8004856 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
}
 8004856:	bf00      	nop
 8004858:	3724      	adds	r7, #36	; 0x24
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	58024400 	.word	0x58024400
 8004868:	03d09000 	.word	0x03d09000
 800486c:	46000000 	.word	0x46000000
 8004870:	4c742400 	.word	0x4c742400
 8004874:	4a742400 	.word	0x4a742400
 8004878:	4bbebc20 	.word	0x4bbebc20

0800487c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800488a:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d101      	bne.n	800489a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e099      	b.n	80049ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800489a:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a4e      	ldr	r2, [pc, #312]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80048a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a6:	f7fc fee7 	bl	8001678 <HAL_GetTick>
 80048aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048ae:	f7fc fee3 	bl	8001678 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e086      	b.n	80049ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048c0:	4b45      	ldr	r3, [pc, #276]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048cc:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	031b      	lsls	r3, r3, #12
 80048da:	493f      	ldr	r1, [pc, #252]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	628b      	str	r3, [r1, #40]	; 0x28
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	025b      	lsls	r3, r3, #9
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	3b01      	subs	r3, #1
 800490a:	061b      	lsls	r3, r3, #24
 800490c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004910:	4931      	ldr	r1, [pc, #196]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004912:	4313      	orrs	r3, r2
 8004914:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004916:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	492d      	ldr	r1, [pc, #180]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	f023 0220 	bic.w	r2, r3, #32
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	4928      	ldr	r1, [pc, #160]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800493a:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004940:	f023 0310 	bic.w	r3, r3, #16
 8004944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <RCCEx_PLL2_Config+0x160>)
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	69d2      	ldr	r2, [r2, #28]
 8004952:	00d2      	lsls	r2, r2, #3
 8004954:	4920      	ldr	r1, [pc, #128]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004960:	f043 0310 	orr.w	r3, r3, #16
 8004964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004978:	e00f      	b.n	800499a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4a14      	ldr	r2, [pc, #80]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800498a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800498c:	e005      	b.n	800499a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 8004994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004998:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800499a:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a0e      	ldr	r2, [pc, #56]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80049a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a6:	f7fc fe67 	bl	8001678 <HAL_GetTick>
 80049aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049ac:	e008      	b.n	80049c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049ae:	f7fc fe63 	bl	8001678 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e006      	b.n	80049ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <RCCEx_PLL2_Config+0x15c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	58024400 	.word	0x58024400
 80049dc:	ffff0007 	.word	0xffff0007

080049e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049ee:	4b53      	ldr	r3, [pc, #332]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d101      	bne.n	80049fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e099      	b.n	8004b32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049fe:	4b4f      	ldr	r3, [pc, #316]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a4e      	ldr	r2, [pc, #312]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0a:	f7fc fe35 	bl	8001678 <HAL_GetTick>
 8004a0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a12:	f7fc fe31 	bl	8001678 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e086      	b.n	8004b32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a24:	4b45      	ldr	r3, [pc, #276]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a30:	4b42      	ldr	r3, [pc, #264]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	051b      	lsls	r3, r3, #20
 8004a3e:	493f      	ldr	r1, [pc, #252]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	628b      	str	r3, [r1, #40]	; 0x28
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	025b      	lsls	r3, r3, #9
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	041b      	lsls	r3, r3, #16
 8004a62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a74:	4931      	ldr	r1, [pc, #196]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a7a:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	492d      	ldr	r1, [pc, #180]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	4928      	ldr	r1, [pc, #160]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a9e:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004aaa:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <RCCEx_PLL3_Config+0x160>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	69d2      	ldr	r2, [r2, #28]
 8004ab6:	00d2      	lsls	r2, r2, #3
 8004ab8:	4920      	ldr	r1, [pc, #128]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004abe:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ad6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ada:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004adc:	e00f      	b.n	8004afe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d106      	bne.n	8004af2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ae4:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004af0:	e005      	b.n	8004afe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004afc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a0e      	ldr	r2, [pc, #56]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0a:	f7fc fdb5 	bl	8001678 <HAL_GetTick>
 8004b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b10:	e008      	b.n	8004b24 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b12:	f7fc fdb1 	bl	8001678 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e006      	b.n	8004b32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <RCCEx_PLL3_Config+0x15c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	58024400 	.word	0x58024400
 8004b40:	ffff0007 	.word	0xffff0007

08004b44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e190      	b.n	8004e78 <HAL_SPI_Init+0x334>
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a83      	ldr	r2, [pc, #524]	; (8004d68 <HAL_SPI_Init+0x224>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00f      	beq.n	8004b80 <HAL_SPI_Init+0x3c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a81      	ldr	r2, [pc, #516]	; (8004d6c <HAL_SPI_Init+0x228>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00a      	beq.n	8004b80 <HAL_SPI_Init+0x3c>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a80      	ldr	r2, [pc, #512]	; (8004d70 <HAL_SPI_Init+0x22c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d005      	beq.n	8004b80 <HAL_SPI_Init+0x3c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b0f      	cmp	r3, #15
 8004b7a:	d901      	bls.n	8004b80 <HAL_SPI_Init+0x3c>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e17b      	b.n	8004e78 <HAL_SPI_Init+0x334>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fd57 	bl	8005634 <SPI_GetPacketSize>
 8004b86:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a76      	ldr	r2, [pc, #472]	; (8004d68 <HAL_SPI_Init+0x224>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00c      	beq.n	8004bac <HAL_SPI_Init+0x68>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a75      	ldr	r2, [pc, #468]	; (8004d6c <HAL_SPI_Init+0x228>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <HAL_SPI_Init+0x68>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a73      	ldr	r2, [pc, #460]	; (8004d70 <HAL_SPI_Init+0x22c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d002      	beq.n	8004bac <HAL_SPI_Init+0x68>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d811      	bhi.n	8004bd0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004bb0:	4a6d      	ldr	r2, [pc, #436]	; (8004d68 <HAL_SPI_Init+0x224>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <HAL_SPI_Init+0x86>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6c      	ldr	r2, [pc, #432]	; (8004d6c <HAL_SPI_Init+0x228>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <HAL_SPI_Init+0x86>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a6a      	ldr	r2, [pc, #424]	; (8004d70 <HAL_SPI_Init+0x22c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d104      	bne.n	8004bd4 <HAL_SPI_Init+0x90>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d901      	bls.n	8004bd4 <HAL_SPI_Init+0x90>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e151      	b.n	8004e78 <HAL_SPI_Init+0x334>
  }

#if (USE_SPI_CRC != 0UL)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bdc:	d129      	bne.n	8004c32 <HAL_SPI_Init+0xee>
  {
    /* Verify that the SPI instance supports CRC Length higher than 16bits */
    if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a61      	ldr	r2, [pc, #388]	; (8004d68 <HAL_SPI_Init+0x224>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d010      	beq.n	8004c0a <HAL_SPI_Init+0xc6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a5f      	ldr	r2, [pc, #380]	; (8004d6c <HAL_SPI_Init+0x228>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00b      	beq.n	8004c0a <HAL_SPI_Init+0xc6>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a5e      	ldr	r2, [pc, #376]	; (8004d70 <HAL_SPI_Init+0x22c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d006      	beq.n	8004c0a <HAL_SPI_Init+0xc6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8004c04:	d901      	bls.n	8004c0a <HAL_SPI_Init+0xc6>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e136      	b.n	8004e78 <HAL_SPI_Init+0x334>
    }

    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_SPI_Init+0xd8>
    {
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e002      	b.n	8004c22 <HAL_SPI_Init+0xde>
    }
    else
    {
      crc_length = hspi->Init.CRCLength;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	60fb      	str	r3, [r7, #12]
    }

    /* Verify that the CRC Length is higher than DataSize */
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	0c1b      	lsrs	r3, r3, #16
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d905      	bls.n	8004c3a <HAL_SPI_Init+0xf6>
    {
      return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e122      	b.n	8004e78 <HAL_SPI_Init+0x334>
    }
  }
  else
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	60fb      	str	r3, [r7, #12]
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_SPI_Init+0x110>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fa16 	bl	8001080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c74:	d119      	bne.n	8004caa <HAL_SPI_Init+0x166>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7e:	d103      	bne.n	8004c88 <HAL_SPI_Init+0x144>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_SPI_Init+0x156>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10c      	bne.n	8004caa <HAL_SPI_Init+0x166>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c98:	d107      	bne.n	8004caa <HAL_SPI_Init+0x166>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbc:	ea42 0103 	orr.w	r1, r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0a:	ea42 0103 	orr.w	r1, r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	60da      	str	r2, [r3, #12]
                                   hspi->Init.Direction    | hspi->Init.MasterSSIdleness | hspi->Init.IOSwap));

#if (USE_SPI_CRC != 0UL)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d22:	d16b      	bne.n	8004dfc <HAL_SPI_Init+0x2b8>
  {
    /* Initialize TXCRC Pattern Initial Value */
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d108      	bne.n	8004d3e <HAL_SPI_Init+0x1fa>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e007      	b.n	8004d4e <HAL_SPI_Init+0x20a>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d4c:	601a      	str	r2, [r3, #0]
    }

    /* Initialize RXCRC Pattern Initial Value */
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d10e      	bne.n	8004d74 <HAL_SPI_Init+0x230>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e00d      	b.n	8004d84 <HAL_SPI_Init+0x240>
 8004d68:	40013000 	.word	0x40013000
 8004d6c:	40003800 	.word	0x40003800
 8004d70:	40003c00 	.word	0x40003c00
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d82:	601a      	str	r2, [r3, #0]
    }

    /* Enable 33/17 bits CRC computation */
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a3d      	ldr	r2, [pc, #244]	; (8004e80 <HAL_SPI_Init+0x33c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00d      	beq.n	8004daa <HAL_SPI_Init+0x266>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a3c      	ldr	r2, [pc, #240]	; (8004e84 <HAL_SPI_Init+0x340>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d008      	beq.n	8004daa <HAL_SPI_Init+0x266>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a3a      	ldr	r2, [pc, #232]	; (8004e88 <HAL_SPI_Init+0x344>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d003      	beq.n	8004daa <HAL_SPI_Init+0x266>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8004da8:	d012      	beq.n	8004dd0 <HAL_SPI_Init+0x28c>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
    if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 8004dae:	4a34      	ldr	r2, [pc, #208]	; (8004e80 <HAL_SPI_Init+0x33c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <HAL_SPI_Init+0x284>
        ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance))  && (crc_length == SPI_CRC_LENGTH_32BIT)))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a32      	ldr	r2, [pc, #200]	; (8004e84 <HAL_SPI_Init+0x340>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_SPI_Init+0x284>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a31      	ldr	r2, [pc, #196]	; (8004e88 <HAL_SPI_Init+0x344>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d10c      	bne.n	8004de2 <HAL_SPI_Init+0x29e>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f5b3 1ff8 	cmp.w	r3, #2031616	; 0x1f0000
 8004dce:	d108      	bne.n	8004de2 <HAL_SPI_Init+0x29e>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e007      	b.n	8004df2 <HAL_SPI_Init+0x2ae>
    }
    else
    {
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df0:	601a      	str	r2, [r3, #0]
    }

    /* Write CRC polynomial in SPI Register */
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d117      	bne.n	8004e34 <HAL_SPI_Init+0x2f0>
  {
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <HAL_SPI_Init+0x2dc>
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e1e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e32:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_SPI_Init+0x322>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40013000 	.word	0x40013000
 8004e84:	40003800 	.word	0x40003800
 8004e88:	40003c00 	.word	0x40003c00

08004e8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08e      	sub	sp, #56	; 0x38
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3320      	adds	r3, #32
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3330      	adds	r3, #48	; 0x30
 8004eae:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x32>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e2ce      	b.n	800545c <HAL_SPI_TransmitReceive+0x5d0>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ec6:	f7fc fbd7 	bl	8001678 <HAL_GetTick>
 8004eca:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004ecc:	887b      	ldrh	r3, [r7, #2]
 8004ece:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8004ed0:	887b      	ldrh	r3, [r7, #2]
 8004ed2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004eda:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ee2:	7efb      	ldrb	r3, [r7, #27]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d014      	beq.n	8004f12 <HAL_SPI_TransmitReceive+0x86>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eee:	d106      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x72>
 8004ef8:	7efb      	ldrb	r3, [r7, #27]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d009      	beq.n	8004f12 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
 8004f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f10:	e2a4      	b.n	800545c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_SPI_TransmitReceive+0x98>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_SPI_TransmitReceive+0x98>
 8004f1e:	887b      	ldrh	r3, [r7, #2]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f36:	e291      	b.n	800545c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d003      	beq.n	8004f4c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2205      	movs	r2, #5
 8004f48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	887a      	ldrh	r2, [r7, #2]
 8004f5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	887a      	ldrh	r2, [r7, #2]
 8004f66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	887a      	ldrh	r2, [r7, #2]
 8004f74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	4b9f      	ldr	r3, [pc, #636]	; (8005210 <HAL_SPI_TransmitReceive+0x384>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	8879      	ldrh	r1, [r7, #2]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb8:	d107      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b0f      	cmp	r3, #15
 8004fd0:	d970      	bls.n	80050b4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004fd2:	e068      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d11a      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x18c>
 8004fe2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d017      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff8:	1d1a      	adds	r2, r3, #4
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005016:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	f248 0308 	movw	r3, #32776	; 0x8008
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01a      	beq.n	800505e <HAL_SPI_TransmitReceive+0x1d2>
 8005028:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d017      	beq.n	800505e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005036:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005038:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800505c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800505e:	f7fc fb0b 	bl	8001678 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800506a:	429a      	cmp	r2, r3
 800506c:	d803      	bhi.n	8005076 <HAL_SPI_TransmitReceive+0x1ea>
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005074:	d102      	bne.n	800507c <HAL_SPI_TransmitReceive+0x1f0>
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d114      	bne.n	80050a6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f9f1 	bl	8005464 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005090:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e1da      	b.n	800545c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80050a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d193      	bne.n	8004fd4 <HAL_SPI_TransmitReceive+0x148>
 80050ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d190      	bne.n	8004fd4 <HAL_SPI_TransmitReceive+0x148>
 80050b2:	e1ac      	b.n	800540e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b07      	cmp	r3, #7
 80050ba:	f240 81a0 	bls.w	80053fe <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80050be:	e0a9      	b.n	8005214 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d139      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x2b6>
 80050ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d036      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80050d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d91c      	bls.n	8005114 <HAL_SPI_TransmitReceive+0x288>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d018      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b02      	subs	r3, #2
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005110:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005112:	e016      	b.n	8005142 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005118:	881a      	ldrh	r2, [r3, #0]
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005122:	1c9a      	adds	r2, r3, #2
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005140:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d03a      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x33a>
 8005150:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d037      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d018      	beq.n	8005196 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800516c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800516e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005174:	1d1a      	adds	r2, r3, #4
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b02      	subs	r3, #2
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005192:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005194:	e017      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519a:	6a3a      	ldr	r2, [r7, #32]
 800519c:	8812      	ldrh	r2, [r2, #0]
 800519e:	b292      	uxth	r2, r2
 80051a0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a6:	1c9a      	adds	r2, r3, #2
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80051c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c6:	f7fc fa57 	bl	8001678 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d803      	bhi.n	80051de <HAL_SPI_TransmitReceive+0x352>
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051dc:	d102      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x358>
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d117      	bne.n	8005214 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f93d 	bl	8005464 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e126      	b.n	800545c <HAL_SPI_TransmitReceive+0x5d0>
 800520e:	bf00      	nop
 8005210:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005214:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005216:	2b00      	cmp	r3, #0
 8005218:	f47f af52 	bne.w	80050c0 <HAL_SPI_TransmitReceive+0x234>
 800521c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	f47f af4e 	bne.w	80050c0 <HAL_SPI_TransmitReceive+0x234>
 8005224:	e0f3      	b.n	800540e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d15a      	bne.n	80052ea <HAL_SPI_TransmitReceive+0x45e>
 8005234:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005236:	2b00      	cmp	r3, #0
 8005238:	d057      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800523a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800523c:	2b03      	cmp	r3, #3
 800523e:	d91c      	bls.n	800527a <HAL_SPI_TransmitReceive+0x3ee>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d918      	bls.n	800527a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005258:	1d1a      	adds	r2, r3, #4
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b04      	subs	r3, #4
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005276:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005278:	e037      	b.n	80052ea <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800527a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800527c:	2b01      	cmp	r3, #1
 800527e:	d91b      	bls.n	80052b8 <HAL_SPI_TransmitReceive+0x42c>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d017      	beq.n	80052b8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b02      	subs	r3, #2
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80052b6:	e018      	b.n	80052ea <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3320      	adds	r3, #32
 80052c2:	7812      	ldrb	r2, [r2, #0]
 80052c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d05e      	beq.n	80053b6 <HAL_SPI_TransmitReceive+0x52a>
 80052f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d05b      	beq.n	80053b6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d018      	beq.n	800533e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005314:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005316:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b04      	subs	r3, #4
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800533a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800533c:	e03b      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534c:	d918      	bls.n	8005380 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005352:	6a3a      	ldr	r2, [r7, #32]
 8005354:	8812      	ldrh	r2, [r2, #0]
 8005356:	b292      	uxth	r2, r2
 8005358:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b02      	subs	r3, #2
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800537c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800537e:	e01a      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538c:	7812      	ldrb	r2, [r2, #0]
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80053b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b6:	f7fc f95f 	bl	8001678 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d803      	bhi.n	80053ce <HAL_SPI_TransmitReceive+0x542>
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053cc:	d102      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x548>
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d114      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f845 	bl	8005464 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e02e      	b.n	800545c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80053fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005400:	2b00      	cmp	r3, #0
 8005402:	f47f af10 	bne.w	8005226 <HAL_SPI_TransmitReceive+0x39a>
 8005406:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	f47f af0c 	bne.w	8005226 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	2200      	movs	r2, #0
 8005416:	2108      	movs	r1, #8
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f8dd 	bl	80055d8 <SPI_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d007      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f815 	bl	8005464 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e001      	b.n	800545c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8005458:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800545c:	4618      	mov	r0, r3
 800545e:	3730      	adds	r7, #48	; 0x30
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0210 	orr.w	r2, r2, #16
 8005492:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0201 	bic.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6919      	ldr	r1, [r3, #16]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b49      	ldr	r3, [pc, #292]	; (80055d4 <SPI_CloseTransfer+0x170>)
 80054b0:	400b      	ands	r3, r1
 80054b2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80054c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d014      	beq.n	80054fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00f      	beq.n	80054fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0220 	orr.w	r2, r2, #32
 80054f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b03      	cmp	r3, #3
 8005504:	d02e      	beq.n	8005564 <SPI_CloseTransfer+0x100>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00f      	beq.n	8005530 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005516:	f043 0204 	orr.w	r2, r3, #4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699a      	ldr	r2, [r3, #24]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800552e:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005538:	d114      	bne.n	8005564 <SPI_CloseTransfer+0x100>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00f      	beq.n	8005564 <SPI_CloseTransfer+0x100>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554a:	f043 0202 	orr.w	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005562:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00f      	beq.n	800558e <SPI_CloseTransfer+0x12a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005574:	f043 0201 	orr.w	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699a      	ldr	r2, [r3, #24]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00f      	beq.n	80055b8 <SPI_CloseTransfer+0x154>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559e:	f043 0208 	orr.w	r2, r3, #8
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	fffffc90 	.word	0xfffffc90

080055d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80055e8:	e010      	b.n	800560c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ea:	f7fc f845 	bl	8001678 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d803      	bhi.n	8005602 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005600:	d102      	bne.n	8005608 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e00f      	b.n	800562c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	429a      	cmp	r2, r3
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	429a      	cmp	r2, r3
 8005628:	d0df      	beq.n	80055ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3307      	adds	r3, #7
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	fb02 f303 	mul.w	r3, r2, r3
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e042      	b.n	8005702 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fd82 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2224      	movs	r2, #36	; 0x24
 8005698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f82d 	bl	800570c <UART_SetConfig>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e022      	b.n	8005702 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fd81 	bl	80061cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fe08 	bl	8006310 <UART_CheckIdleState>
 8005700:	4603      	mov	r3, r0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800570c:	b5b0      	push	{r4, r5, r7, lr}
 800570e:	b08e      	sub	sp, #56	; 0x38
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	4313      	orrs	r3, r2
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4bbf      	ldr	r3, [pc, #764]	; (8005a38 <UART_SetConfig+0x32c>)
 800573a:	4013      	ands	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005742:	430b      	orrs	r3, r1
 8005744:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4ab5      	ldr	r2, [pc, #724]	; (8005a3c <UART_SetConfig+0x330>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005772:	4313      	orrs	r3, r2
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	4bb0      	ldr	r3, [pc, #704]	; (8005a40 <UART_SetConfig+0x334>)
 800577e:	4013      	ands	r3, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005786:	430b      	orrs	r3, r1
 8005788:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	f023 010f 	bic.w	r1, r3, #15
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4aa7      	ldr	r2, [pc, #668]	; (8005a44 <UART_SetConfig+0x338>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d176      	bne.n	8005898 <UART_SetConfig+0x18c>
 80057aa:	4ba7      	ldr	r3, [pc, #668]	; (8005a48 <UART_SetConfig+0x33c>)
 80057ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b2:	2b28      	cmp	r3, #40	; 0x28
 80057b4:	d86c      	bhi.n	8005890 <UART_SetConfig+0x184>
 80057b6:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <UART_SetConfig+0xb0>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	08005861 	.word	0x08005861
 80057c0:	08005891 	.word	0x08005891
 80057c4:	08005891 	.word	0x08005891
 80057c8:	08005891 	.word	0x08005891
 80057cc:	08005891 	.word	0x08005891
 80057d0:	08005891 	.word	0x08005891
 80057d4:	08005891 	.word	0x08005891
 80057d8:	08005891 	.word	0x08005891
 80057dc:	08005869 	.word	0x08005869
 80057e0:	08005891 	.word	0x08005891
 80057e4:	08005891 	.word	0x08005891
 80057e8:	08005891 	.word	0x08005891
 80057ec:	08005891 	.word	0x08005891
 80057f0:	08005891 	.word	0x08005891
 80057f4:	08005891 	.word	0x08005891
 80057f8:	08005891 	.word	0x08005891
 80057fc:	08005871 	.word	0x08005871
 8005800:	08005891 	.word	0x08005891
 8005804:	08005891 	.word	0x08005891
 8005808:	08005891 	.word	0x08005891
 800580c:	08005891 	.word	0x08005891
 8005810:	08005891 	.word	0x08005891
 8005814:	08005891 	.word	0x08005891
 8005818:	08005891 	.word	0x08005891
 800581c:	08005879 	.word	0x08005879
 8005820:	08005891 	.word	0x08005891
 8005824:	08005891 	.word	0x08005891
 8005828:	08005891 	.word	0x08005891
 800582c:	08005891 	.word	0x08005891
 8005830:	08005891 	.word	0x08005891
 8005834:	08005891 	.word	0x08005891
 8005838:	08005891 	.word	0x08005891
 800583c:	08005881 	.word	0x08005881
 8005840:	08005891 	.word	0x08005891
 8005844:	08005891 	.word	0x08005891
 8005848:	08005891 	.word	0x08005891
 800584c:	08005891 	.word	0x08005891
 8005850:	08005891 	.word	0x08005891
 8005854:	08005891 	.word	0x08005891
 8005858:	08005891 	.word	0x08005891
 800585c:	08005889 	.word	0x08005889
 8005860:	2301      	movs	r3, #1
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e222      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e21e      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005876:	e21a      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587e:	e216      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005880:	2320      	movs	r3, #32
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005886:	e212      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588e:	e20e      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005896:	e20a      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a6b      	ldr	r2, [pc, #428]	; (8005a4c <UART_SetConfig+0x340>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d130      	bne.n	8005904 <UART_SetConfig+0x1f8>
 80058a2:	4b69      	ldr	r3, [pc, #420]	; (8005a48 <UART_SetConfig+0x33c>)
 80058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	d826      	bhi.n	80058fc <UART_SetConfig+0x1f0>
 80058ae:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x1a8>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080058cd 	.word	0x080058cd
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	080058dd 	.word	0x080058dd
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	2300      	movs	r3, #0
 80058ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d2:	e1ec      	b.n	8005cae <UART_SetConfig+0x5a2>
 80058d4:	2304      	movs	r3, #4
 80058d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058da:	e1e8      	b.n	8005cae <UART_SetConfig+0x5a2>
 80058dc:	2308      	movs	r3, #8
 80058de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e2:	e1e4      	b.n	8005cae <UART_SetConfig+0x5a2>
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ea:	e1e0      	b.n	8005cae <UART_SetConfig+0x5a2>
 80058ec:	2320      	movs	r3, #32
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e1dc      	b.n	8005cae <UART_SetConfig+0x5a2>
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e1d8      	b.n	8005cae <UART_SetConfig+0x5a2>
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005902:	e1d4      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a51      	ldr	r2, [pc, #324]	; (8005a50 <UART_SetConfig+0x344>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d130      	bne.n	8005970 <UART_SetConfig+0x264>
 800590e:	4b4e      	ldr	r3, [pc, #312]	; (8005a48 <UART_SetConfig+0x33c>)
 8005910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b05      	cmp	r3, #5
 8005918:	d826      	bhi.n	8005968 <UART_SetConfig+0x25c>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <UART_SetConfig+0x214>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005939 	.word	0x08005939
 8005924:	08005941 	.word	0x08005941
 8005928:	08005949 	.word	0x08005949
 800592c:	08005951 	.word	0x08005951
 8005930:	08005959 	.word	0x08005959
 8005934:	08005961 	.word	0x08005961
 8005938:	2300      	movs	r3, #0
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593e:	e1b6      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005940:	2304      	movs	r3, #4
 8005942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005946:	e1b2      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005948:	2308      	movs	r3, #8
 800594a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594e:	e1ae      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005950:	2310      	movs	r3, #16
 8005952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005956:	e1aa      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005958:	2320      	movs	r3, #32
 800595a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595e:	e1a6      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005960:	2340      	movs	r3, #64	; 0x40
 8005962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005966:	e1a2      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596e:	e19e      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a37      	ldr	r2, [pc, #220]	; (8005a54 <UART_SetConfig+0x348>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d130      	bne.n	80059dc <UART_SetConfig+0x2d0>
 800597a:	4b33      	ldr	r3, [pc, #204]	; (8005a48 <UART_SetConfig+0x33c>)
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	2b05      	cmp	r3, #5
 8005984:	d826      	bhi.n	80059d4 <UART_SetConfig+0x2c8>
 8005986:	a201      	add	r2, pc, #4	; (adr r2, 800598c <UART_SetConfig+0x280>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059a5 	.word	0x080059a5
 8005990:	080059ad 	.word	0x080059ad
 8005994:	080059b5 	.word	0x080059b5
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059cd 	.word	0x080059cd
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059aa:	e180      	b.n	8005cae <UART_SetConfig+0x5a2>
 80059ac:	2304      	movs	r3, #4
 80059ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b2:	e17c      	b.n	8005cae <UART_SetConfig+0x5a2>
 80059b4:	2308      	movs	r3, #8
 80059b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ba:	e178      	b.n	8005cae <UART_SetConfig+0x5a2>
 80059bc:	2310      	movs	r3, #16
 80059be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059c2:	e174      	b.n	8005cae <UART_SetConfig+0x5a2>
 80059c4:	2320      	movs	r3, #32
 80059c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ca:	e170      	b.n	8005cae <UART_SetConfig+0x5a2>
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d2:	e16c      	b.n	8005cae <UART_SetConfig+0x5a2>
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059da:	e168      	b.n	8005cae <UART_SetConfig+0x5a2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <UART_SetConfig+0x34c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d142      	bne.n	8005a6c <UART_SetConfig+0x360>
 80059e6:	4b18      	ldr	r3, [pc, #96]	; (8005a48 <UART_SetConfig+0x33c>)
 80059e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d838      	bhi.n	8005a64 <UART_SetConfig+0x358>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <UART_SetConfig+0x2ec>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a11 	.word	0x08005a11
 80059fc:	08005a19 	.word	0x08005a19
 8005a00:	08005a21 	.word	0x08005a21
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a5d 	.word	0x08005a5d
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a16:	e14a      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1e:	e146      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a26:	e142      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2e:	e13e      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005a30:	2320      	movs	r3, #32
 8005a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a36:	e13a      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005a38:	cfff69f3 	.word	0xcfff69f3
 8005a3c:	58000c00 	.word	0x58000c00
 8005a40:	11fff4ff 	.word	0x11fff4ff
 8005a44:	40011000 	.word	0x40011000
 8005a48:	58024400 	.word	0x58024400
 8005a4c:	40004400 	.word	0x40004400
 8005a50:	40004800 	.word	0x40004800
 8005a54:	40004c00 	.word	0x40004c00
 8005a58:	40005000 	.word	0x40005000
 8005a5c:	2340      	movs	r3, #64	; 0x40
 8005a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a62:	e124      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6a:	e120      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4acc      	ldr	r2, [pc, #816]	; (8005da4 <UART_SetConfig+0x698>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d176      	bne.n	8005b64 <UART_SetConfig+0x458>
 8005a76:	4bcc      	ldr	r3, [pc, #816]	; (8005da8 <UART_SetConfig+0x69c>)
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a7e:	2b28      	cmp	r3, #40	; 0x28
 8005a80:	d86c      	bhi.n	8005b5c <UART_SetConfig+0x450>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <UART_SetConfig+0x37c>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005b2d 	.word	0x08005b2d
 8005a8c:	08005b5d 	.word	0x08005b5d
 8005a90:	08005b5d 	.word	0x08005b5d
 8005a94:	08005b5d 	.word	0x08005b5d
 8005a98:	08005b5d 	.word	0x08005b5d
 8005a9c:	08005b5d 	.word	0x08005b5d
 8005aa0:	08005b5d 	.word	0x08005b5d
 8005aa4:	08005b5d 	.word	0x08005b5d
 8005aa8:	08005b35 	.word	0x08005b35
 8005aac:	08005b5d 	.word	0x08005b5d
 8005ab0:	08005b5d 	.word	0x08005b5d
 8005ab4:	08005b5d 	.word	0x08005b5d
 8005ab8:	08005b5d 	.word	0x08005b5d
 8005abc:	08005b5d 	.word	0x08005b5d
 8005ac0:	08005b5d 	.word	0x08005b5d
 8005ac4:	08005b5d 	.word	0x08005b5d
 8005ac8:	08005b3d 	.word	0x08005b3d
 8005acc:	08005b5d 	.word	0x08005b5d
 8005ad0:	08005b5d 	.word	0x08005b5d
 8005ad4:	08005b5d 	.word	0x08005b5d
 8005ad8:	08005b5d 	.word	0x08005b5d
 8005adc:	08005b5d 	.word	0x08005b5d
 8005ae0:	08005b5d 	.word	0x08005b5d
 8005ae4:	08005b5d 	.word	0x08005b5d
 8005ae8:	08005b45 	.word	0x08005b45
 8005aec:	08005b5d 	.word	0x08005b5d
 8005af0:	08005b5d 	.word	0x08005b5d
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005b5d 	.word	0x08005b5d
 8005afc:	08005b5d 	.word	0x08005b5d
 8005b00:	08005b5d 	.word	0x08005b5d
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b4d 	.word	0x08005b4d
 8005b0c:	08005b5d 	.word	0x08005b5d
 8005b10:	08005b5d 	.word	0x08005b5d
 8005b14:	08005b5d 	.word	0x08005b5d
 8005b18:	08005b5d 	.word	0x08005b5d
 8005b1c:	08005b5d 	.word	0x08005b5d
 8005b20:	08005b5d 	.word	0x08005b5d
 8005b24:	08005b5d 	.word	0x08005b5d
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b32:	e0bc      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005b34:	2304      	movs	r3, #4
 8005b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3a:	e0b8      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b42:	e0b4      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005b44:	2310      	movs	r3, #16
 8005b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4a:	e0b0      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e0ac      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005b54:	2340      	movs	r3, #64	; 0x40
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e0a8      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b62:	e0a4      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a90      	ldr	r2, [pc, #576]	; (8005dac <UART_SetConfig+0x6a0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d130      	bne.n	8005bd0 <UART_SetConfig+0x4c4>
 8005b6e:	4b8e      	ldr	r3, [pc, #568]	; (8005da8 <UART_SetConfig+0x69c>)
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d826      	bhi.n	8005bc8 <UART_SetConfig+0x4bc>
 8005b7a:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <UART_SetConfig+0x474>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005b99 	.word	0x08005b99
 8005b84:	08005ba1 	.word	0x08005ba1
 8005b88:	08005ba9 	.word	0x08005ba9
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9e:	e086      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e082      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e07e      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e07a      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e076      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005bc0:	2340      	movs	r3, #64	; 0x40
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e072      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e06e      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a76      	ldr	r2, [pc, #472]	; (8005db0 <UART_SetConfig+0x6a4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d130      	bne.n	8005c3c <UART_SetConfig+0x530>
 8005bda:	4b73      	ldr	r3, [pc, #460]	; (8005da8 <UART_SetConfig+0x69c>)
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b05      	cmp	r3, #5
 8005be4:	d826      	bhi.n	8005c34 <UART_SetConfig+0x528>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <UART_SetConfig+0x4e0>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c05 	.word	0x08005c05
 8005bf0:	08005c0d 	.word	0x08005c0d
 8005bf4:	08005c15 	.word	0x08005c15
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	2300      	movs	r3, #0
 8005c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0a:	e050      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c12:	e04c      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c14:	2308      	movs	r3, #8
 8005c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1a:	e048      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c22:	e044      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c24:	2320      	movs	r3, #32
 8005c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2a:	e040      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c2c:	2340      	movs	r3, #64	; 0x40
 8005c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c32:	e03c      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3a:	e038      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a5c      	ldr	r2, [pc, #368]	; (8005db4 <UART_SetConfig+0x6a8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d130      	bne.n	8005ca8 <UART_SetConfig+0x59c>
 8005c46:	4b58      	ldr	r3, [pc, #352]	; (8005da8 <UART_SetConfig+0x69c>)
 8005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d826      	bhi.n	8005ca0 <UART_SetConfig+0x594>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <UART_SetConfig+0x54c>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c71 	.word	0x08005c71
 8005c5c:	08005c79 	.word	0x08005c79
 8005c60:	08005c81 	.word	0x08005c81
 8005c64:	08005c89 	.word	0x08005c89
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005c99 	.word	0x08005c99
 8005c70:	2302      	movs	r3, #2
 8005c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c76:	e01a      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c7e:	e016      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c80:	2308      	movs	r3, #8
 8005c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c86:	e012      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c8e:	e00e      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c90:	2320      	movs	r3, #32
 8005c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c96:	e00a      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005c98:	2340      	movs	r3, #64	; 0x40
 8005c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9e:	e006      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca6:	e002      	b.n	8005cae <UART_SetConfig+0x5a2>
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a40      	ldr	r2, [pc, #256]	; (8005db4 <UART_SetConfig+0x6a8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	f040 80ef 	bne.w	8005e98 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	dc46      	bgt.n	8005d50 <UART_SetConfig+0x644>
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	f2c0 8081 	blt.w	8005dca <UART_SetConfig+0x6be>
 8005cc8:	3b02      	subs	r3, #2
 8005cca:	2b1e      	cmp	r3, #30
 8005ccc:	d87d      	bhi.n	8005dca <UART_SetConfig+0x6be>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <UART_SetConfig+0x5c8>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005d57 	.word	0x08005d57
 8005cd8:	08005dcb 	.word	0x08005dcb
 8005cdc:	08005d5f 	.word	0x08005d5f
 8005ce0:	08005dcb 	.word	0x08005dcb
 8005ce4:	08005dcb 	.word	0x08005dcb
 8005ce8:	08005dcb 	.word	0x08005dcb
 8005cec:	08005d6f 	.word	0x08005d6f
 8005cf0:	08005dcb 	.word	0x08005dcb
 8005cf4:	08005dcb 	.word	0x08005dcb
 8005cf8:	08005dcb 	.word	0x08005dcb
 8005cfc:	08005dcb 	.word	0x08005dcb
 8005d00:	08005dcb 	.word	0x08005dcb
 8005d04:	08005dcb 	.word	0x08005dcb
 8005d08:	08005dcb 	.word	0x08005dcb
 8005d0c:	08005d7f 	.word	0x08005d7f
 8005d10:	08005dcb 	.word	0x08005dcb
 8005d14:	08005dcb 	.word	0x08005dcb
 8005d18:	08005dcb 	.word	0x08005dcb
 8005d1c:	08005dcb 	.word	0x08005dcb
 8005d20:	08005dcb 	.word	0x08005dcb
 8005d24:	08005dcb 	.word	0x08005dcb
 8005d28:	08005dcb 	.word	0x08005dcb
 8005d2c:	08005dcb 	.word	0x08005dcb
 8005d30:	08005dcb 	.word	0x08005dcb
 8005d34:	08005dcb 	.word	0x08005dcb
 8005d38:	08005dcb 	.word	0x08005dcb
 8005d3c:	08005dcb 	.word	0x08005dcb
 8005d40:	08005dcb 	.word	0x08005dcb
 8005d44:	08005dcb 	.word	0x08005dcb
 8005d48:	08005dcb 	.word	0x08005dcb
 8005d4c:	08005dbd 	.word	0x08005dbd
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d036      	beq.n	8005dc2 <UART_SetConfig+0x6b6>
 8005d54:	e039      	b.n	8005dca <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005d56:	f7fe fad3 	bl	8004300 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d5c:	e03b      	b.n	8005dd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d5e:	f107 0314 	add.w	r3, r7, #20
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe fae2 	bl	800432c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d6c:	e033      	b.n	8005dd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d6e:	f107 0308 	add.w	r3, r7, #8
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe fc2e 	bl	80045d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d7c:	e02b      	b.n	8005dd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <UART_SetConfig+0x69c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <UART_SetConfig+0x69c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	08db      	lsrs	r3, r3, #3
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <UART_SetConfig+0x6ac>)
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d9c:	e01b      	b.n	8005dd6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <UART_SetConfig+0x6ac>)
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005da2:	e018      	b.n	8005dd6 <UART_SetConfig+0x6ca>
 8005da4:	40011400 	.word	0x40011400
 8005da8:	58024400 	.word	0x58024400
 8005dac:	40007800 	.word	0x40007800
 8005db0:	40007c00 	.word	0x40007c00
 8005db4:	58000c00 	.word	0x58000c00
 8005db8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005dbc:	4bc4      	ldr	r3, [pc, #784]	; (80060d0 <UART_SetConfig+0x9c4>)
 8005dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dc0:	e009      	b.n	8005dd6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dc8:	e005      	b.n	8005dd6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 81da 	beq.w	8006192 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	4abc      	ldr	r2, [pc, #752]	; (80060d4 <UART_SetConfig+0x9c8>)
 8005de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005de8:	461a      	mov	r2, r3
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005df0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	4413      	add	r3, r2
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d305      	bcc.n	8005e0e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e08:	6a3a      	ldr	r2, [r7, #32]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d903      	bls.n	8005e16 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005e14:	e1bd      	b.n	8006192 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f04f 0100 	mov.w	r1, #0
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	4aac      	ldr	r2, [pc, #688]	; (80060d4 <UART_SetConfig+0x9c8>)
 8005e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	f7fa faa7 	bl	8000380 <__aeabi_uldivmod>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	020b      	lsls	r3, r1, #8
 8005e44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e48:	0202      	lsls	r2, r0, #8
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	6849      	ldr	r1, [r1, #4]
 8005e4e:	0849      	lsrs	r1, r1, #1
 8005e50:	4608      	mov	r0, r1
 8005e52:	f04f 0100 	mov.w	r1, #0
 8005e56:	1814      	adds	r4, r2, r0
 8005e58:	eb43 0501 	adc.w	r5, r3, r1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	461a      	mov	r2, r3
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	4620      	mov	r0, r4
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f7fa fa89 	bl	8000380 <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4613      	mov	r3, r2
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7c:	d308      	bcc.n	8005e90 <UART_SetConfig+0x784>
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e84:	d204      	bcs.n	8005e90 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	e180      	b.n	8006192 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005e96:	e17c      	b.n	8006192 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea0:	f040 80bf 	bne.w	8006022 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	dc49      	bgt.n	8005f40 <UART_SetConfig+0x834>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	db7c      	blt.n	8005faa <UART_SetConfig+0x89e>
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d87a      	bhi.n	8005faa <UART_SetConfig+0x89e>
 8005eb4:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <UART_SetConfig+0x7b0>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005f47 	.word	0x08005f47
 8005ec0:	08005f4f 	.word	0x08005f4f
 8005ec4:	08005fab 	.word	0x08005fab
 8005ec8:	08005fab 	.word	0x08005fab
 8005ecc:	08005f57 	.word	0x08005f57
 8005ed0:	08005fab 	.word	0x08005fab
 8005ed4:	08005fab 	.word	0x08005fab
 8005ed8:	08005fab 	.word	0x08005fab
 8005edc:	08005f67 	.word	0x08005f67
 8005ee0:	08005fab 	.word	0x08005fab
 8005ee4:	08005fab 	.word	0x08005fab
 8005ee8:	08005fab 	.word	0x08005fab
 8005eec:	08005fab 	.word	0x08005fab
 8005ef0:	08005fab 	.word	0x08005fab
 8005ef4:	08005fab 	.word	0x08005fab
 8005ef8:	08005fab 	.word	0x08005fab
 8005efc:	08005f77 	.word	0x08005f77
 8005f00:	08005fab 	.word	0x08005fab
 8005f04:	08005fab 	.word	0x08005fab
 8005f08:	08005fab 	.word	0x08005fab
 8005f0c:	08005fab 	.word	0x08005fab
 8005f10:	08005fab 	.word	0x08005fab
 8005f14:	08005fab 	.word	0x08005fab
 8005f18:	08005fab 	.word	0x08005fab
 8005f1c:	08005fab 	.word	0x08005fab
 8005f20:	08005fab 	.word	0x08005fab
 8005f24:	08005fab 	.word	0x08005fab
 8005f28:	08005fab 	.word	0x08005fab
 8005f2c:	08005fab 	.word	0x08005fab
 8005f30:	08005fab 	.word	0x08005fab
 8005f34:	08005fab 	.word	0x08005fab
 8005f38:	08005fab 	.word	0x08005fab
 8005f3c:	08005f9d 	.word	0x08005f9d
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	d02e      	beq.n	8005fa2 <UART_SetConfig+0x896>
 8005f44:	e031      	b.n	8005faa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f46:	f7fd fa6f 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8005f4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f4c:	e033      	b.n	8005fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f4e:	f7fd fa81 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 8005f52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f54:	e02f      	b.n	8005fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f56:	f107 0314 	add.w	r3, r7, #20
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe f9e6 	bl	800432c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f64:	e027      	b.n	8005fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f66:	f107 0308 	add.w	r3, r7, #8
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fb32 	bl	80045d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f74:	e01f      	b.n	8005fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f76:	4b58      	ldr	r3, [pc, #352]	; (80060d8 <UART_SetConfig+0x9cc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f82:	4b55      	ldr	r3, [pc, #340]	; (80060d8 <UART_SetConfig+0x9cc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	08db      	lsrs	r3, r3, #3
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	4a53      	ldr	r2, [pc, #332]	; (80060dc <UART_SetConfig+0x9d0>)
 8005f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f94:	e00f      	b.n	8005fb6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005f96:	4b51      	ldr	r3, [pc, #324]	; (80060dc <UART_SetConfig+0x9d0>)
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f9a:	e00c      	b.n	8005fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f9c:	4b4c      	ldr	r3, [pc, #304]	; (80060d0 <UART_SetConfig+0x9c4>)
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa0:	e009      	b.n	8005fb6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa8:	e005      	b.n	8005fb6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80ea 	beq.w	8006192 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	4a44      	ldr	r2, [pc, #272]	; (80060d4 <UART_SetConfig+0x9c8>)
 8005fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fd0:	005a      	lsls	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	441a      	add	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	2b0f      	cmp	r3, #15
 8005fea:	d916      	bls.n	800601a <UART_SetConfig+0x90e>
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff2:	d212      	bcs.n	800601a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f023 030f 	bic.w	r3, r3, #15
 8005ffc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	085b      	lsrs	r3, r3, #1
 8006002:	b29b      	uxth	r3, r3
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	b29a      	uxth	r2, r3
 800600a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800600c:	4313      	orrs	r3, r2
 800600e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006016:	60da      	str	r2, [r3, #12]
 8006018:	e0bb      	b.n	8006192 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006020:	e0b7      	b.n	8006192 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006026:	2b20      	cmp	r3, #32
 8006028:	dc4a      	bgt.n	80060c0 <UART_SetConfig+0x9b4>
 800602a:	2b00      	cmp	r3, #0
 800602c:	f2c0 8086 	blt.w	800613c <UART_SetConfig+0xa30>
 8006030:	2b20      	cmp	r3, #32
 8006032:	f200 8083 	bhi.w	800613c <UART_SetConfig+0xa30>
 8006036:	a201      	add	r2, pc, #4	; (adr r2, 800603c <UART_SetConfig+0x930>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	080060c7 	.word	0x080060c7
 8006040:	080060e1 	.word	0x080060e1
 8006044:	0800613d 	.word	0x0800613d
 8006048:	0800613d 	.word	0x0800613d
 800604c:	080060e9 	.word	0x080060e9
 8006050:	0800613d 	.word	0x0800613d
 8006054:	0800613d 	.word	0x0800613d
 8006058:	0800613d 	.word	0x0800613d
 800605c:	080060f9 	.word	0x080060f9
 8006060:	0800613d 	.word	0x0800613d
 8006064:	0800613d 	.word	0x0800613d
 8006068:	0800613d 	.word	0x0800613d
 800606c:	0800613d 	.word	0x0800613d
 8006070:	0800613d 	.word	0x0800613d
 8006074:	0800613d 	.word	0x0800613d
 8006078:	0800613d 	.word	0x0800613d
 800607c:	08006109 	.word	0x08006109
 8006080:	0800613d 	.word	0x0800613d
 8006084:	0800613d 	.word	0x0800613d
 8006088:	0800613d 	.word	0x0800613d
 800608c:	0800613d 	.word	0x0800613d
 8006090:	0800613d 	.word	0x0800613d
 8006094:	0800613d 	.word	0x0800613d
 8006098:	0800613d 	.word	0x0800613d
 800609c:	0800613d 	.word	0x0800613d
 80060a0:	0800613d 	.word	0x0800613d
 80060a4:	0800613d 	.word	0x0800613d
 80060a8:	0800613d 	.word	0x0800613d
 80060ac:	0800613d 	.word	0x0800613d
 80060b0:	0800613d 	.word	0x0800613d
 80060b4:	0800613d 	.word	0x0800613d
 80060b8:	0800613d 	.word	0x0800613d
 80060bc:	0800612f 	.word	0x0800612f
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d037      	beq.n	8006134 <UART_SetConfig+0xa28>
 80060c4:	e03a      	b.n	800613c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fd f9af 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 80060ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80060cc:	e03c      	b.n	8006148 <UART_SetConfig+0xa3c>
 80060ce:	bf00      	nop
 80060d0:	003d0900 	.word	0x003d0900
 80060d4:	0800a7a0 	.word	0x0800a7a0
 80060d8:	58024400 	.word	0x58024400
 80060dc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e0:	f7fd f9b8 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 80060e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80060e6:	e02f      	b.n	8006148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060e8:	f107 0314 	add.w	r3, r7, #20
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fe f91d 	bl	800432c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060f6:	e027      	b.n	8006148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe fa69 	bl	80045d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006106:	e01f      	b.n	8006148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006108:	4b2c      	ldr	r3, [pc, #176]	; (80061bc <UART_SetConfig+0xab0>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b00      	cmp	r3, #0
 8006112:	d009      	beq.n	8006128 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006114:	4b29      	ldr	r3, [pc, #164]	; (80061bc <UART_SetConfig+0xab0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	08db      	lsrs	r3, r3, #3
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	4a28      	ldr	r2, [pc, #160]	; (80061c0 <UART_SetConfig+0xab4>)
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006126:	e00f      	b.n	8006148 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006128:	4b25      	ldr	r3, [pc, #148]	; (80061c0 <UART_SetConfig+0xab4>)
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800612c:	e00c      	b.n	8006148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800612e:	4b25      	ldr	r3, [pc, #148]	; (80061c4 <UART_SetConfig+0xab8>)
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006132:	e009      	b.n	8006148 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800613a:	e005      	b.n	8006148 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006146:	bf00      	nop
    }

    if (pclk != 0U)
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d021      	beq.n	8006192 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <UART_SetConfig+0xabc>)
 8006154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006158:	461a      	mov	r2, r3
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	085b      	lsrs	r3, r3, #1
 8006166:	441a      	add	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006170:	b29b      	uxth	r3, r3
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	2b0f      	cmp	r3, #15
 8006178:	d908      	bls.n	800618c <UART_SetConfig+0xa80>
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006180:	d204      	bcs.n	800618c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	e002      	b.n	8006192 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80061ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3738      	adds	r7, #56	; 0x38
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bdb0      	pop	{r4, r5, r7, pc}
 80061ba:	bf00      	nop
 80061bc:	58024400 	.word	0x58024400
 80061c0:	03d09000 	.word	0x03d09000
 80061c4:	003d0900 	.word	0x003d0900
 80061c8:	0800a7a0 	.word	0x0800a7a0

080061cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	f003 0308 	and.w	r3, r3, #8
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01a      	beq.n	80062e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ca:	d10a      	bne.n	80062e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
  }
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af02      	add	r7, sp, #8
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006320:	f7fb f9aa 	bl	8001678 <HAL_GetTick>
 8006324:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b08      	cmp	r3, #8
 8006332:	d10e      	bne.n	8006352 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f82f 	bl	80063a6 <UART_WaitOnFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e025      	b.n	800639e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b04      	cmp	r3, #4
 800635e:	d10e      	bne.n	800637e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f819 	bl	80063a6 <UART_WaitOnFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e00f      	b.n	800639e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	4613      	mov	r3, r2
 80063b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b6:	e062      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063be:	d05e      	beq.n	800647e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c0:	f7fb f95a 	bl	8001678 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d302      	bcc.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d11d      	bne.n	8006412 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0201 	bic.w	r2, r2, #1
 80063f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e045      	b.n	800649e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d02e      	beq.n	800647e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800642a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642e:	d126      	bne.n	800647e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006438:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006448:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e00f      	b.n	800649e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4013      	ands	r3, r2
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	429a      	cmp	r2, r3
 800648c:	bf0c      	ite	eq
 800648e:	2301      	moveq	r3, #1
 8006490:	2300      	movne	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	429a      	cmp	r2, r3
 800649a:	d08d      	beq.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_UARTEx_DisableFifoMode+0x16>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e027      	b.n	800650c <HAL_UARTEx_DisableFifoMode+0x66>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2224      	movs	r2, #36	; 0x24
 80064c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800652c:	2302      	movs	r3, #2
 800652e:	e02d      	b.n	800658c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2224      	movs	r2, #36	; 0x24
 800653c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0201 	bic.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f84f 	bl	8006610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e02d      	b.n	8006608 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2224      	movs	r2, #36	; 0x24
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f811 	bl	8006610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800661c:	2b00      	cmp	r3, #0
 800661e:	d108      	bne.n	8006632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006630:	e031      	b.n	8006696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006632:	2310      	movs	r3, #16
 8006634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006636:	2310      	movs	r3, #16
 8006638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	0e5b      	lsrs	r3, r3, #25
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	0f5b      	lsrs	r3, r3, #29
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	7b3a      	ldrb	r2, [r7, #12]
 800665e:	4911      	ldr	r1, [pc, #68]	; (80066a4 <UARTEx_SetNbDataToProcess+0x94>)
 8006660:	5c8a      	ldrb	r2, [r1, r2]
 8006662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006666:	7b3a      	ldrb	r2, [r7, #12]
 8006668:	490f      	ldr	r1, [pc, #60]	; (80066a8 <UARTEx_SetNbDataToProcess+0x98>)
 800666a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800666c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006670:	b29a      	uxth	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	7b7a      	ldrb	r2, [r7, #13]
 800667c:	4909      	ldr	r1, [pc, #36]	; (80066a4 <UARTEx_SetNbDataToProcess+0x94>)
 800667e:	5c8a      	ldrb	r2, [r1, r2]
 8006680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006684:	7b7a      	ldrb	r2, [r7, #13]
 8006686:	4908      	ldr	r1, [pc, #32]	; (80066a8 <UARTEx_SetNbDataToProcess+0x98>)
 8006688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800668a:	fb93 f3f2 	sdiv	r3, r3, r2
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	0800a7b8 	.word	0x0800a7b8
 80066a8:	0800a7c0 	.word	0x0800a7c0

080066ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80066b0:	4904      	ldr	r1, [pc, #16]	; (80066c4 <MX_FATFS_Init+0x18>)
 80066b2:	4805      	ldr	r0, [pc, #20]	; (80066c8 <MX_FATFS_Init+0x1c>)
 80066b4:	f002 ffaa 	bl	800960c <FATFS_LinkDriver>
 80066b8:	4603      	mov	r3, r0
 80066ba:	461a      	mov	r2, r3
 80066bc:	4b03      	ldr	r3, [pc, #12]	; (80066cc <MX_FATFS_Init+0x20>)
 80066be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80066c0:	bf00      	nop
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200028ec 	.word	0x200028ec
 80066c8:	20000010 	.word	0x20000010
 80066cc:	200028f0 	.word	0x200028f0

080066d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80066d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 f9d9 	bl	8006aa4 <USER_SPI_initialize>
 80066f2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fab7 	bl	8006c7c <USER_SPI_status>
 800670e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	4603      	mov	r3, r0
 8006726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006728:	7bf8      	ldrb	r0, [r7, #15]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	f000 faba 	bl	8006ca8 <USER_SPI_read>
 8006734:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
 800674a:	4603      	mov	r3, r0
 800674c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
     return USER_SPI_write(pdrv, buff, sector, count);
 800674e:	7bf8      	ldrb	r0, [r7, #15]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	f000 fb0d 	bl	8006d74 <USER_SPI_write>
 800675a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	603a      	str	r2, [r7, #0]
 800676e:	71fb      	strb	r3, [r7, #7]
 8006770:	460b      	mov	r3, r1
 8006772:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8006774:	79b9      	ldrb	r1, [r7, #6]
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fb76 	bl	8006e6c <USER_SPI_ioctl>
 8006780:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
	...

0800678c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006794:	f7fa ff70 	bl	8001678 <HAL_GetTick>
 8006798:	4603      	mov	r3, r0
 800679a:	4a04      	ldr	r2, [pc, #16]	; (80067ac <SPI_Timer_On+0x20>)
 800679c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800679e:	4a04      	ldr	r2, [pc, #16]	; (80067b0 <SPI_Timer_On+0x24>)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6013      	str	r3, [r2, #0]
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20004958 	.word	0x20004958
 80067b0:	2000495c 	.word	0x2000495c

080067b4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80067b8:	f7fa ff5e 	bl	8001678 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <SPI_Timer_Status+0x24>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <SPI_Timer_Status+0x28>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	bf34      	ite	cc
 80067cc:	2301      	movcc	r3, #1
 80067ce:	2300      	movcs	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20004958 	.word	0x20004958
 80067dc:	2000495c 	.word	0x2000495c

080067e0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	4603      	mov	r3, r0
 80067e8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80067ea:	f107 020f 	add.w	r2, r7, #15
 80067ee:	1df9      	adds	r1, r7, #7
 80067f0:	2332      	movs	r3, #50	; 0x32
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	2301      	movs	r3, #1
 80067f6:	4804      	ldr	r0, [pc, #16]	; (8006808 <xchg_spi+0x28>)
 80067f8:	f7fe fb48 	bl	8004e8c <HAL_SPI_TransmitReceive>
    return rxDat;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	200027a4 	.word	0x200027a4

0800680c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e00a      	b.n	8006832 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	18d4      	adds	r4, r2, r3
 8006822:	20ff      	movs	r0, #255	; 0xff
 8006824:	f7ff ffdc 	bl	80067e0 <xchg_spi>
 8006828:	4603      	mov	r3, r0
 800682a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d3f0      	bcc.n	800681c <rcvr_spi_multi+0x10>
	}
}
 800683a:	bf00      	nop
 800683c:	bf00      	nop
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	bd90      	pop	{r4, r7, pc}

08006844 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e009      	b.n	8006868 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff ffbf 	bl	80067e0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d3f1      	bcc.n	8006854 <xmit_spi_multi+0x10>
	}
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006882:	f7fa fef9 	bl	8001678 <HAL_GetTick>
 8006886:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800688c:	20ff      	movs	r0, #255	; 0xff
 800688e:	f7ff ffa7 	bl	80067e0 <xchg_spi>
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2bff      	cmp	r3, #255	; 0xff
 800689a:	d007      	beq.n	80068ac <wait_ready+0x32>
 800689c:	f7fa feec 	bl	8001678 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d8ef      	bhi.n	800688c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	2bff      	cmp	r3, #255	; 0xff
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80068c4:	2201      	movs	r2, #1
 80068c6:	2110      	movs	r1, #16
 80068c8:	4803      	ldr	r0, [pc, #12]	; (80068d8 <despiselect+0x18>)
 80068ca:	f7fb fdcf 	bl	800246c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80068ce:	20ff      	movs	r0, #255	; 0xff
 80068d0:	f7ff ff86 	bl	80067e0 <xchg_spi>

}
 80068d4:	bf00      	nop
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	58020000 	.word	0x58020000

080068dc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80068e0:	2200      	movs	r2, #0
 80068e2:	2110      	movs	r1, #16
 80068e4:	4809      	ldr	r0, [pc, #36]	; (800690c <spiselect+0x30>)
 80068e6:	f7fb fdc1 	bl	800246c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80068ea:	20ff      	movs	r0, #255	; 0xff
 80068ec:	f7ff ff78 	bl	80067e0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80068f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068f4:	f7ff ffc1 	bl	800687a <wait_ready>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <spiselect+0x26>
 80068fe:	2301      	movs	r3, #1
 8006900:	e002      	b.n	8006908 <spiselect+0x2c>

	despiselect();
 8006902:	f7ff ffdd 	bl	80068c0 <despiselect>
	return 0;	/* Timeout */
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	bd80      	pop	{r7, pc}
 800690c:	58020000 	.word	0x58020000

08006910 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800691a:	20c8      	movs	r0, #200	; 0xc8
 800691c:	f7ff ff36 	bl	800678c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006920:	20ff      	movs	r0, #255	; 0xff
 8006922:	f7ff ff5d 	bl	80067e0 <xchg_spi>
 8006926:	4603      	mov	r3, r0
 8006928:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	2bff      	cmp	r3, #255	; 0xff
 800692e:	d104      	bne.n	800693a <rcvr_datablock+0x2a>
 8006930:	f7ff ff40 	bl	80067b4 <SPI_Timer_Status>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f2      	bne.n	8006920 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2bfe      	cmp	r3, #254	; 0xfe
 800693e:	d001      	beq.n	8006944 <rcvr_datablock+0x34>
 8006940:	2300      	movs	r3, #0
 8006942:	e00a      	b.n	800695a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff ff60 	bl	800680c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800694c:	20ff      	movs	r0, #255	; 0xff
 800694e:	f7ff ff47 	bl	80067e0 <xchg_spi>
 8006952:	20ff      	movs	r0, #255	; 0xff
 8006954:	f7ff ff44 	bl	80067e0 <xchg_spi>

	return 1;						/* Function succeeded */
 8006958:	2301      	movs	r3, #1
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	460b      	mov	r3, r1
 800696c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800696e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006972:	f7ff ff82 	bl	800687a <wait_ready>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <xmit_datablock+0x1e>
 800697c:	2300      	movs	r3, #0
 800697e:	e01e      	b.n	80069be <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff ff2c 	bl	80067e0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	2bfd      	cmp	r3, #253	; 0xfd
 800698c:	d016      	beq.n	80069bc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800698e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff ff56 	bl	8006844 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006998:	20ff      	movs	r0, #255	; 0xff
 800699a:	f7ff ff21 	bl	80067e0 <xchg_spi>
 800699e:	20ff      	movs	r0, #255	; 0xff
 80069a0:	f7ff ff1e 	bl	80067e0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80069a4:	20ff      	movs	r0, #255	; 0xff
 80069a6:	f7ff ff1b 	bl	80067e0 <xchg_spi>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	f003 031f 	and.w	r3, r3, #31
 80069b4:	2b05      	cmp	r3, #5
 80069b6:	d001      	beq.n	80069bc <xmit_datablock+0x5a>
 80069b8:	2300      	movs	r3, #0
 80069ba:	e000      	b.n	80069be <xmit_datablock+0x5c>
	}
	return 1;
 80069bc:	2301      	movs	r3, #1
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	4603      	mov	r3, r0
 80069ce:	6039      	str	r1, [r7, #0]
 80069d0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80069d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da0e      	bge.n	80069f8 <send_cmd+0x32>
		cmd &= 0x7F;
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80069e2:	2100      	movs	r1, #0
 80069e4:	2037      	movs	r0, #55	; 0x37
 80069e6:	f7ff ffee 	bl	80069c6 <send_cmd>
 80069ea:	4603      	mov	r3, r0
 80069ec:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d901      	bls.n	80069f8 <send_cmd+0x32>
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	e051      	b.n	8006a9c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80069f8:	79fb      	ldrb	r3, [r7, #7]
 80069fa:	2b0c      	cmp	r3, #12
 80069fc:	d008      	beq.n	8006a10 <send_cmd+0x4a>
		despiselect();
 80069fe:	f7ff ff5f 	bl	80068c0 <despiselect>
		if (!spiselect()) return 0xFF;
 8006a02:	f7ff ff6b 	bl	80068dc <spiselect>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <send_cmd+0x4a>
 8006a0c:	23ff      	movs	r3, #255	; 0xff
 8006a0e:	e045      	b.n	8006a9c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff fee1 	bl	80067e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	0e1b      	lsrs	r3, r3, #24
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff fedb 	bl	80067e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff fed5 	bl	80067e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff fecf 	bl	80067e0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff feca 	bl	80067e0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <send_cmd+0x94>
 8006a56:	2395      	movs	r3, #149	; 0x95
 8006a58:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d101      	bne.n	8006a64 <send_cmd+0x9e>
 8006a60:	2387      	movs	r3, #135	; 0x87
 8006a62:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff feba 	bl	80067e0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	2b0c      	cmp	r3, #12
 8006a70:	d102      	bne.n	8006a78 <send_cmd+0xb2>
 8006a72:	20ff      	movs	r0, #255	; 0xff
 8006a74:	f7ff feb4 	bl	80067e0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006a78:	230a      	movs	r3, #10
 8006a7a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006a7c:	20ff      	movs	r0, #255	; 0xff
 8006a7e:	f7ff feaf 	bl	80067e0 <xchg_spi>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006a86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da05      	bge.n	8006a9a <send_cmd+0xd4>
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <send_cmd+0xb6>

	return res;							/* Return received response */
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006aa4:	b590      	push	{r4, r7, lr}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <USER_SPI_initialize+0x14>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0d6      	b.n	8006c66 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006ab8:	4b6d      	ldr	r3, [pc, #436]	; (8006c70 <USER_SPI_initialize+0x1cc>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <USER_SPI_initialize+0x2a>
 8006ac6:	4b6a      	ldr	r3, [pc, #424]	; (8006c70 <USER_SPI_initialize+0x1cc>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	e0cb      	b.n	8006c66 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006ace:	4b69      	ldr	r3, [pc, #420]	; (8006c74 <USER_SPI_initialize+0x1d0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006ad8:	4b66      	ldr	r3, [pc, #408]	; (8006c74 <USER_SPI_initialize+0x1d0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8006ae0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006ae2:	230a      	movs	r3, #10
 8006ae4:	73fb      	strb	r3, [r7, #15]
 8006ae6:	e005      	b.n	8006af4 <USER_SPI_initialize+0x50>
 8006ae8:	20ff      	movs	r0, #255	; 0xff
 8006aea:	f7ff fe79 	bl	80067e0 <xchg_spi>
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	73fb      	strb	r3, [r7, #15]
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f6      	bne.n	8006ae8 <USER_SPI_initialize+0x44>

	ty = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006afe:	2100      	movs	r1, #0
 8006b00:	2000      	movs	r0, #0
 8006b02:	f7ff ff60 	bl	80069c6 <send_cmd>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 808b 	bne.w	8006c24 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b12:	f7ff fe3b 	bl	800678c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006b16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b1a:	2008      	movs	r0, #8
 8006b1c:	f7ff ff53 	bl	80069c6 <send_cmd>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d151      	bne.n	8006bca <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]
 8006b2a:	e00d      	b.n	8006b48 <USER_SPI_initialize+0xa4>
 8006b2c:	7bfc      	ldrb	r4, [r7, #15]
 8006b2e:	20ff      	movs	r0, #255	; 0xff
 8006b30:	f7ff fe56 	bl	80067e0 <xchg_spi>
 8006b34:	4603      	mov	r3, r0
 8006b36:	461a      	mov	r2, r3
 8006b38:	f107 0310 	add.w	r3, r7, #16
 8006b3c:	4423      	add	r3, r4
 8006b3e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	3301      	adds	r3, #1
 8006b46:	73fb      	strb	r3, [r7, #15]
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d9ee      	bls.n	8006b2c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006b4e:	7abb      	ldrb	r3, [r7, #10]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d167      	bne.n	8006c24 <USER_SPI_initialize+0x180>
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	2baa      	cmp	r3, #170	; 0xaa
 8006b58:	d164      	bne.n	8006c24 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006b5a:	bf00      	nop
 8006b5c:	f7ff fe2a 	bl	80067b4 <SPI_Timer_Status>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <USER_SPI_initialize+0xd2>
 8006b66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006b6a:	20a9      	movs	r0, #169	; 0xa9
 8006b6c:	f7ff ff2b 	bl	80069c6 <send_cmd>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1f2      	bne.n	8006b5c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006b76:	f7ff fe1d 	bl	80067b4 <SPI_Timer_Status>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d051      	beq.n	8006c24 <USER_SPI_initialize+0x180>
 8006b80:	2100      	movs	r1, #0
 8006b82:	203a      	movs	r0, #58	; 0x3a
 8006b84:	f7ff ff1f 	bl	80069c6 <send_cmd>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d14a      	bne.n	8006c24 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
 8006b92:	e00d      	b.n	8006bb0 <USER_SPI_initialize+0x10c>
 8006b94:	7bfc      	ldrb	r4, [r7, #15]
 8006b96:	20ff      	movs	r0, #255	; 0xff
 8006b98:	f7ff fe22 	bl	80067e0 <xchg_spi>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	4423      	add	r3, r4
 8006ba6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	3301      	adds	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d9ee      	bls.n	8006b94 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006bb6:	7a3b      	ldrb	r3, [r7, #8]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <USER_SPI_initialize+0x120>
 8006bc0:	230c      	movs	r3, #12
 8006bc2:	e000      	b.n	8006bc6 <USER_SPI_initialize+0x122>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	737b      	strb	r3, [r7, #13]
 8006bc8:	e02c      	b.n	8006c24 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006bca:	2100      	movs	r1, #0
 8006bcc:	20a9      	movs	r0, #169	; 0xa9
 8006bce:	f7ff fefa 	bl	80069c6 <send_cmd>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d804      	bhi.n	8006be2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006bd8:	2302      	movs	r3, #2
 8006bda:	737b      	strb	r3, [r7, #13]
 8006bdc:	23a9      	movs	r3, #169	; 0xa9
 8006bde:	73bb      	strb	r3, [r7, #14]
 8006be0:	e003      	b.n	8006bea <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006be2:	2301      	movs	r3, #1
 8006be4:	737b      	strb	r3, [r7, #13]
 8006be6:	2301      	movs	r3, #1
 8006be8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006bea:	bf00      	nop
 8006bec:	f7ff fde2 	bl	80067b4 <SPI_Timer_Status>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <USER_SPI_initialize+0x162>
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fee3 	bl	80069c6 <send_cmd>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f2      	bne.n	8006bec <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006c06:	f7ff fdd5 	bl	80067b4 <SPI_Timer_Status>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <USER_SPI_initialize+0x17c>
 8006c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c14:	2010      	movs	r0, #16
 8006c16:	f7ff fed6 	bl	80069c6 <send_cmd>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <USER_SPI_initialize+0x180>
				ty = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006c24:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <USER_SPI_initialize+0x1d4>)
 8006c26:	7b7b      	ldrb	r3, [r7, #13]
 8006c28:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006c2a:	f7ff fe49 	bl	80068c0 <despiselect>

	if (ty) {			/* OK */
 8006c2e:	7b7b      	ldrb	r3, [r7, #13]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d012      	beq.n	8006c5a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006c34:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <USER_SPI_initialize+0x1d0>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <USER_SPI_initialize+0x1d0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006c46:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006c48:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <USER_SPI_initialize+0x1cc>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <USER_SPI_initialize+0x1cc>)
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	e002      	b.n	8006c60 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006c5a:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <USER_SPI_initialize+0x1cc>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006c60:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <USER_SPI_initialize+0x1cc>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b2db      	uxtb	r3, r3
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd90      	pop	{r4, r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000024 	.word	0x20000024
 8006c74:	200027a4 	.word	0x200027a4
 8006c78:	2000066c 	.word	0x2000066c

08006c7c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <USER_SPI_status+0x14>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e002      	b.n	8006c96 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006c90:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <USER_SPI_status+0x28>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b2db      	uxtb	r3, r3
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20000024 	.word	0x20000024

08006ca8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <USER_SPI_read+0x1c>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <USER_SPI_read+0x20>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	e04d      	b.n	8006d64 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006cc8:	4b28      	ldr	r3, [pc, #160]	; (8006d6c <USER_SPI_read+0xc4>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <USER_SPI_read+0x32>
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e044      	b.n	8006d64 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006cda:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <USER_SPI_read+0xc8>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <USER_SPI_read+0x44>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	025b      	lsls	r3, r3, #9
 8006cea:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d111      	bne.n	8006d16 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	2011      	movs	r0, #17
 8006cf6:	f7ff fe66 	bl	80069c6 <send_cmd>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d129      	bne.n	8006d54 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d04:	68b8      	ldr	r0, [r7, #8]
 8006d06:	f7ff fe03 	bl	8006910 <rcvr_datablock>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d021      	beq.n	8006d54 <USER_SPI_read+0xac>
			count = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	e01e      	b.n	8006d54 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	2012      	movs	r0, #18
 8006d1a:	f7ff fe54 	bl	80069c6 <send_cmd>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d117      	bne.n	8006d54 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d28:	68b8      	ldr	r0, [r7, #8]
 8006d2a:	f7ff fdf1 	bl	8006910 <rcvr_datablock>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <USER_SPI_read+0xa2>
				buff += 512;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006d3a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1ed      	bne.n	8006d24 <USER_SPI_read+0x7c>
 8006d48:	e000      	b.n	8006d4c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006d4a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	200c      	movs	r0, #12
 8006d50:	f7ff fe39 	bl	80069c6 <send_cmd>
		}
	}
	despiselect();
 8006d54:	f7ff fdb4 	bl	80068c0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bf14      	ite	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	2300      	moveq	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20000024 	.word	0x20000024
 8006d70:	2000066c 	.word	0x2000066c

08006d74 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <USER_SPI_write+0x1c>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <USER_SPI_write+0x20>
 8006d90:	2304      	movs	r3, #4
 8006d92:	e063      	b.n	8006e5c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006d94:	4b33      	ldr	r3, [pc, #204]	; (8006e64 <USER_SPI_write+0xf0>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <USER_SPI_write+0x32>
 8006da2:	2303      	movs	r3, #3
 8006da4:	e05a      	b.n	8006e5c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006da6:	4b2f      	ldr	r3, [pc, #188]	; (8006e64 <USER_SPI_write+0xf0>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <USER_SPI_write+0x44>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e051      	b.n	8006e5c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006db8:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <USER_SPI_write+0xf4>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <USER_SPI_write+0x56>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	025b      	lsls	r3, r3, #9
 8006dc8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d110      	bne.n	8006df2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	2018      	movs	r0, #24
 8006dd4:	f7ff fdf7 	bl	80069c6 <send_cmd>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d136      	bne.n	8006e4c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006dde:	21fe      	movs	r1, #254	; 0xfe
 8006de0:	68b8      	ldr	r0, [r7, #8]
 8006de2:	f7ff fdbe 	bl	8006962 <xmit_datablock>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02f      	beq.n	8006e4c <USER_SPI_write+0xd8>
			count = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	e02c      	b.n	8006e4c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006df2:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <USER_SPI_write+0xf4>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	f003 0306 	and.w	r3, r3, #6
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <USER_SPI_write+0x92>
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	2097      	movs	r0, #151	; 0x97
 8006e02:	f7ff fde0 	bl	80069c6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	2019      	movs	r0, #25
 8006e0a:	f7ff fddc 	bl	80069c6 <send_cmd>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d11b      	bne.n	8006e4c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006e14:	21fc      	movs	r1, #252	; 0xfc
 8006e16:	68b8      	ldr	r0, [r7, #8]
 8006e18:	f7ff fda3 	bl	8006962 <xmit_datablock>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <USER_SPI_write+0xc4>
				buff += 512;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006e28:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	603b      	str	r3, [r7, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1ee      	bne.n	8006e14 <USER_SPI_write+0xa0>
 8006e36:	e000      	b.n	8006e3a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006e38:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006e3a:	21fd      	movs	r1, #253	; 0xfd
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	f7ff fd90 	bl	8006962 <xmit_datablock>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <USER_SPI_write+0xd8>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006e4c:	f7ff fd38 	bl	80068c0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bf14      	ite	ne
 8006e56:	2301      	movne	r3, #1
 8006e58:	2300      	moveq	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000024 	.word	0x20000024
 8006e68:	2000066c 	.word	0x2000066c

08006e6c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08c      	sub	sp, #48	; 0x30
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	603a      	str	r2, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <USER_SPI_ioctl+0x1a>
 8006e82:	2304      	movs	r3, #4
 8006e84:	e15a      	b.n	800713c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006e86:	4baf      	ldr	r3, [pc, #700]	; (8007144 <USER_SPI_ioctl+0x2d8>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <USER_SPI_ioctl+0x2c>
 8006e94:	2303      	movs	r3, #3
 8006e96:	e151      	b.n	800713c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006e9e:	79bb      	ldrb	r3, [r7, #6]
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	f200 8136 	bhi.w	8007112 <USER_SPI_ioctl+0x2a6>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USER_SPI_ioctl+0x40>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ec1 	.word	0x08006ec1
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08007113 	.word	0x08007113
 8006eb8:	08006f81 	.word	0x08006f81
 8006ebc:	08007077 	.word	0x08007077
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006ec0:	f7ff fd0c 	bl	80068dc <spiselect>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8127 	beq.w	800711a <USER_SPI_ioctl+0x2ae>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006ed2:	e122      	b.n	800711a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	2009      	movs	r0, #9
 8006ed8:	f7ff fd75 	bl	80069c6 <send_cmd>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f040 811d 	bne.w	800711e <USER_SPI_ioctl+0x2b2>
 8006ee4:	f107 030c 	add.w	r3, r7, #12
 8006ee8:	2110      	movs	r1, #16
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fd10 	bl	8006910 <rcvr_datablock>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 8113 	beq.w	800711e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006ef8:	7b3b      	ldrb	r3, [r7, #12]
 8006efa:	099b      	lsrs	r3, r3, #6
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d111      	bne.n	8006f26 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006f02:	7d7b      	ldrb	r3, [r7, #21]
 8006f04:	461a      	mov	r2, r3
 8006f06:	7d3b      	ldrb	r3, [r7, #20]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	4413      	add	r3, r2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	7cfb      	ldrb	r3, [r7, #19]
 8006f10:	041b      	lsls	r3, r3, #16
 8006f12:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006f16:	4413      	add	r3, r2
 8006f18:	3301      	adds	r3, #1
 8006f1a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	029a      	lsls	r2, r3, #10
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e028      	b.n	8006f78 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006f26:	7c7b      	ldrb	r3, [r7, #17]
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	7dbb      	ldrb	r3, [r7, #22]
 8006f30:	09db      	lsrs	r3, r3, #7
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	4413      	add	r3, r2
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	7d7b      	ldrb	r3, [r7, #21]
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0306 	and.w	r3, r3, #6
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4413      	add	r3, r2
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	3302      	adds	r3, #2
 8006f4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006f4e:	7d3b      	ldrb	r3, [r7, #20]
 8006f50:	099b      	lsrs	r3, r3, #6
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	7cfb      	ldrb	r3, [r7, #19]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	441a      	add	r2, r3
 8006f5c:	7cbb      	ldrb	r3, [r7, #18]
 8006f5e:	029b      	lsls	r3, r3, #10
 8006f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f64:	4413      	add	r3, r2
 8006f66:	3301      	adds	r3, #1
 8006f68:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006f6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006f6e:	3b09      	subs	r3, #9
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	409a      	lsls	r2, r3
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006f7e:	e0ce      	b.n	800711e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006f80:	4b71      	ldr	r3, [pc, #452]	; (8007148 <USER_SPI_ioctl+0x2dc>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d031      	beq.n	8006ff0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	208d      	movs	r0, #141	; 0x8d
 8006f90:	f7ff fd19 	bl	80069c6 <send_cmd>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f040 80c3 	bne.w	8007122 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006f9c:	20ff      	movs	r0, #255	; 0xff
 8006f9e:	f7ff fc1f 	bl	80067e0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006fa2:	f107 030c 	add.w	r3, r7, #12
 8006fa6:	2110      	movs	r1, #16
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fcb1 	bl	8006910 <rcvr_datablock>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 80b6 	beq.w	8007122 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006fb6:	2330      	movs	r3, #48	; 0x30
 8006fb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006fbc:	e007      	b.n	8006fce <USER_SPI_ioctl+0x162>
 8006fbe:	20ff      	movs	r0, #255	; 0xff
 8006fc0:	f7ff fc0e 	bl	80067e0 <xchg_spi>
 8006fc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006fce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f3      	bne.n	8006fbe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006fd6:	7dbb      	ldrb	r3, [r7, #22]
 8006fd8:	091b      	lsrs	r3, r3, #4
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	2310      	movs	r3, #16
 8006fe0:	fa03 f202 	lsl.w	r2, r3, r2
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006fee:	e098      	b.n	8007122 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	2009      	movs	r0, #9
 8006ff4:	f7ff fce7 	bl	80069c6 <send_cmd>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 8091 	bne.w	8007122 <USER_SPI_ioctl+0x2b6>
 8007000:	f107 030c 	add.w	r3, r7, #12
 8007004:	2110      	movs	r1, #16
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff fc82 	bl	8006910 <rcvr_datablock>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 8087 	beq.w	8007122 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007014:	4b4c      	ldr	r3, [pc, #304]	; (8007148 <USER_SPI_ioctl+0x2dc>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d012      	beq.n	8007046 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007020:	7dbb      	ldrb	r3, [r7, #22]
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007028:	7dfa      	ldrb	r2, [r7, #23]
 800702a:	09d2      	lsrs	r2, r2, #7
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	4413      	add	r3, r2
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	7e7b      	ldrb	r3, [r7, #25]
 8007034:	099b      	lsrs	r3, r3, #6
 8007036:	b2db      	uxtb	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	461a      	mov	r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e013      	b.n	800706e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007046:	7dbb      	ldrb	r3, [r7, #22]
 8007048:	109b      	asrs	r3, r3, #2
 800704a:	b29b      	uxth	r3, r3
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	3301      	adds	r3, #1
 8007052:	7dfa      	ldrb	r2, [r7, #23]
 8007054:	00d2      	lsls	r2, r2, #3
 8007056:	f002 0218 	and.w	r2, r2, #24
 800705a:	7df9      	ldrb	r1, [r7, #23]
 800705c:	0949      	lsrs	r1, r1, #5
 800705e:	b2c9      	uxtb	r1, r1
 8007060:	440a      	add	r2, r1
 8007062:	3201      	adds	r2, #1
 8007064:	fb02 f303 	mul.w	r3, r2, r3
 8007068:	461a      	mov	r2, r3
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007074:	e055      	b.n	8007122 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007076:	4b34      	ldr	r3, [pc, #208]	; (8007148 <USER_SPI_ioctl+0x2dc>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f003 0306 	and.w	r3, r3, #6
 800707e:	2b00      	cmp	r3, #0
 8007080:	d051      	beq.n	8007126 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007082:	f107 020c 	add.w	r2, r7, #12
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	210b      	movs	r1, #11
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff feee 	bl	8006e6c <USER_SPI_ioctl>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d149      	bne.n	800712a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007096:	7b3b      	ldrb	r3, [r7, #12]
 8007098:	099b      	lsrs	r3, r3, #6
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <USER_SPI_ioctl+0x23e>
 80070a0:	7dbb      	ldrb	r3, [r7, #22]
 80070a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d041      	beq.n	800712e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	623b      	str	r3, [r7, #32]
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80070ba:	4b23      	ldr	r3, [pc, #140]	; (8007148 <USER_SPI_ioctl+0x2dc>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d105      	bne.n	80070d2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	025b      	lsls	r3, r3, #9
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	025b      	lsls	r3, r3, #9
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80070d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070d4:	2020      	movs	r0, #32
 80070d6:	f7ff fc76 	bl	80069c6 <send_cmd>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d128      	bne.n	8007132 <USER_SPI_ioctl+0x2c6>
 80070e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070e2:	2021      	movs	r0, #33	; 0x21
 80070e4:	f7ff fc6f 	bl	80069c6 <send_cmd>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d121      	bne.n	8007132 <USER_SPI_ioctl+0x2c6>
 80070ee:	2100      	movs	r1, #0
 80070f0:	2026      	movs	r0, #38	; 0x26
 80070f2:	f7ff fc68 	bl	80069c6 <send_cmd>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d11a      	bne.n	8007132 <USER_SPI_ioctl+0x2c6>
 80070fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8007100:	f7ff fbbb 	bl	800687a <wait_ready>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d013      	beq.n	8007132 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800710a:	2300      	movs	r3, #0
 800710c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007110:	e00f      	b.n	8007132 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007112:	2304      	movs	r3, #4
 8007114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007118:	e00c      	b.n	8007134 <USER_SPI_ioctl+0x2c8>
		break;
 800711a:	bf00      	nop
 800711c:	e00a      	b.n	8007134 <USER_SPI_ioctl+0x2c8>
		break;
 800711e:	bf00      	nop
 8007120:	e008      	b.n	8007134 <USER_SPI_ioctl+0x2c8>
		break;
 8007122:	bf00      	nop
 8007124:	e006      	b.n	8007134 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007126:	bf00      	nop
 8007128:	e004      	b.n	8007134 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800712a:	bf00      	nop
 800712c:	e002      	b.n	8007134 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <USER_SPI_ioctl+0x2c8>
		break;
 8007132:	bf00      	nop
	}

	despiselect();
 8007134:	f7ff fbc4 	bl	80068c0 <despiselect>

	return res;
 8007138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800713c:	4618      	mov	r0, r3
 800713e:	3730      	adds	r7, #48	; 0x30
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000024 	.word	0x20000024
 8007148:	2000066c 	.word	0x2000066c

0800714c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	4a08      	ldr	r2, [pc, #32]	; (800717c <disk_status+0x30>)
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	79fa      	ldrb	r2, [r7, #7]
 8007164:	4905      	ldr	r1, [pc, #20]	; (800717c <disk_status+0x30>)
 8007166:	440a      	add	r2, r1
 8007168:	7a12      	ldrb	r2, [r2, #8]
 800716a:	4610      	mov	r0, r2
 800716c:	4798      	blx	r3
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000698 	.word	0x20000698

08007180 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	4a0d      	ldr	r2, [pc, #52]	; (80071c8 <disk_initialize+0x48>)
 8007192:	5cd3      	ldrb	r3, [r2, r3]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d111      	bne.n	80071bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	4a0b      	ldr	r2, [pc, #44]	; (80071c8 <disk_initialize+0x48>)
 800719c:	2101      	movs	r1, #1
 800719e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	4a09      	ldr	r2, [pc, #36]	; (80071c8 <disk_initialize+0x48>)
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	79fa      	ldrb	r2, [r7, #7]
 80071ae:	4906      	ldr	r1, [pc, #24]	; (80071c8 <disk_initialize+0x48>)
 80071b0:	440a      	add	r2, r1
 80071b2:	7a12      	ldrb	r2, [r2, #8]
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000698 	.word	0x20000698

080071cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	4a0a      	ldr	r2, [pc, #40]	; (8007208 <disk_read+0x3c>)
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	689c      	ldr	r4, [r3, #8]
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	4a07      	ldr	r2, [pc, #28]	; (8007208 <disk_read+0x3c>)
 80071ec:	4413      	add	r3, r2
 80071ee:	7a18      	ldrb	r0, [r3, #8]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	47a0      	blx	r4
 80071f8:	4603      	mov	r3, r0
 80071fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	bd90      	pop	{r4, r7, pc}
 8007206:	bf00      	nop
 8007208:	20000698 	.word	0x20000698

0800720c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800720c:	b590      	push	{r4, r7, lr}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	607a      	str	r2, [r7, #4]
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	4a0a      	ldr	r2, [pc, #40]	; (8007248 <disk_write+0x3c>)
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	68dc      	ldr	r4, [r3, #12]
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	4a07      	ldr	r2, [pc, #28]	; (8007248 <disk_write+0x3c>)
 800722c:	4413      	add	r3, r2
 800722e:	7a18      	ldrb	r0, [r3, #8]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	47a0      	blx	r4
 8007238:	4603      	mov	r3, r0
 800723a:	75fb      	strb	r3, [r7, #23]
  return res;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
}
 800723e:	4618      	mov	r0, r3
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	bd90      	pop	{r4, r7, pc}
 8007246:	bf00      	nop
 8007248:	20000698 	.word	0x20000698

0800724c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	603a      	str	r2, [r7, #0]
 8007256:	71fb      	strb	r3, [r7, #7]
 8007258:	460b      	mov	r3, r1
 800725a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	4a09      	ldr	r2, [pc, #36]	; (8007284 <disk_ioctl+0x38>)
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	79fa      	ldrb	r2, [r7, #7]
 800726a:	4906      	ldr	r1, [pc, #24]	; (8007284 <disk_ioctl+0x38>)
 800726c:	440a      	add	r2, r1
 800726e:	7a10      	ldrb	r0, [r2, #8]
 8007270:	79b9      	ldrb	r1, [r7, #6]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	4798      	blx	r3
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
  return res;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000698 	.word	0x20000698

08007288 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3301      	adds	r3, #1
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007298:	89fb      	ldrh	r3, [r7, #14]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	b21a      	sxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	b21b      	sxth	r3, r3
 80072a4:	4313      	orrs	r3, r2
 80072a6:	b21b      	sxth	r3, r3
 80072a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80072aa:	89fb      	ldrh	r3, [r7, #14]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3303      	adds	r3, #3
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	3202      	adds	r2, #2
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	3201      	adds	r2, #1
 80072de:	7812      	ldrb	r2, [r2, #0]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	7812      	ldrb	r2, [r2, #0]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
	return rv;
 80072f0:	68fb      	ldr	r3, [r7, #12]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	887a      	ldrh	r2, [r7, #2]
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	887b      	ldrh	r3, [r7, #2]
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	887a      	ldrh	r2, [r7, #2]
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	0a1b      	lsrs	r3, r3, #8
 800734e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	0a1b      	lsrs	r3, r3, #8
 8007372:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	701a      	strb	r2, [r3, #0]
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	1c53      	adds	r3, r2, #1
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	1c59      	adds	r1, r3, #1
 80073b0:	6179      	str	r1, [r7, #20]
 80073b2:	7812      	ldrb	r2, [r2, #0]
 80073b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f1      	bne.n	80073a6 <mem_cpy+0x1a>
	}
}
 80073c2:	bf00      	nop
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80073ce:	b480      	push	{r7}
 80073d0:	b087      	sub	sp, #28
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	617a      	str	r2, [r7, #20]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	607b      	str	r3, [r7, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f3      	bne.n	80073de <mem_set+0x10>
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007404:	b480      	push	{r7}
 8007406:	b089      	sub	sp, #36	; 0x24
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	61fb      	str	r3, [r7, #28]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	61fa      	str	r2, [r7, #28]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	4619      	mov	r1, r3
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	61ba      	str	r2, [r7, #24]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	1acb      	subs	r3, r1, r3
 8007430:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3b01      	subs	r3, #1
 8007436:	607b      	str	r3, [r7, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <mem_cmp+0x40>
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0eb      	beq.n	800741c <mem_cmp+0x18>

	return r;
 8007444:	697b      	ldr	r3, [r7, #20]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3724      	adds	r7, #36	; 0x24
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800745c:	e002      	b.n	8007464 <chk_chr+0x12>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3301      	adds	r3, #1
 8007462:	607b      	str	r3, [r7, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <chk_chr+0x26>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	4293      	cmp	r3, r2
 8007476:	d1f2      	bne.n	800745e <chk_chr+0xc>
	return *str;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	781b      	ldrb	r3, [r3, #0]
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007492:	2300      	movs	r3, #0
 8007494:	60bb      	str	r3, [r7, #8]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	e029      	b.n	80074f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800749c:	4a27      	ldr	r2, [pc, #156]	; (800753c <chk_lock+0xb4>)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	4413      	add	r3, r2
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01d      	beq.n	80074e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074aa:	4a24      	ldr	r2, [pc, #144]	; (800753c <chk_lock+0xb4>)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	4413      	add	r3, r2
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d116      	bne.n	80074ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80074bc:	4a1f      	ldr	r2, [pc, #124]	; (800753c <chk_lock+0xb4>)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	4413      	add	r3, r2
 80074c4:	3304      	adds	r3, #4
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d10c      	bne.n	80074ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074d0:	4a1a      	ldr	r2, [pc, #104]	; (800753c <chk_lock+0xb4>)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	4413      	add	r3, r2
 80074d8:	3308      	adds	r3, #8
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d102      	bne.n	80074ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80074e4:	e007      	b.n	80074f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80074e6:	2301      	movs	r3, #1
 80074e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d9d2      	bls.n	800749c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d109      	bne.n	8007510 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <chk_lock+0x80>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d101      	bne.n	800750c <chk_lock+0x84>
 8007508:	2300      	movs	r3, #0
 800750a:	e010      	b.n	800752e <chk_lock+0xa6>
 800750c:	2312      	movs	r3, #18
 800750e:	e00e      	b.n	800752e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d108      	bne.n	8007528 <chk_lock+0xa0>
 8007516:	4a09      	ldr	r2, [pc, #36]	; (800753c <chk_lock+0xb4>)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	4413      	add	r3, r2
 800751e:	330c      	adds	r3, #12
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007526:	d101      	bne.n	800752c <chk_lock+0xa4>
 8007528:	2310      	movs	r3, #16
 800752a:	e000      	b.n	800752e <chk_lock+0xa6>
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20000678 	.word	0x20000678

08007540 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007546:	2300      	movs	r3, #0
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	e002      	b.n	8007552 <enq_lock+0x12>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3301      	adds	r3, #1
 8007550:	607b      	str	r3, [r7, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d806      	bhi.n	8007566 <enq_lock+0x26>
 8007558:	4a09      	ldr	r2, [pc, #36]	; (8007580 <enq_lock+0x40>)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	4413      	add	r3, r2
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1f2      	bne.n	800754c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b02      	cmp	r3, #2
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	20000678 	.word	0x20000678

08007584 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e01f      	b.n	80075d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007594:	4a41      	ldr	r2, [pc, #260]	; (800769c <inc_lock+0x118>)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	4413      	add	r3, r2
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d113      	bne.n	80075ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80075a6:	4a3d      	ldr	r2, [pc, #244]	; (800769c <inc_lock+0x118>)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	4413      	add	r3, r2
 80075ae:	3304      	adds	r3, #4
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d109      	bne.n	80075ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80075ba:	4a38      	ldr	r2, [pc, #224]	; (800769c <inc_lock+0x118>)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	4413      	add	r3, r2
 80075c2:	3308      	adds	r3, #8
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d006      	beq.n	80075dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d9dc      	bls.n	8007594 <inc_lock+0x10>
 80075da:	e000      	b.n	80075de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80075dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d132      	bne.n	800764a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	e002      	b.n	80075f0 <inc_lock+0x6c>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d806      	bhi.n	8007604 <inc_lock+0x80>
 80075f6:	4a29      	ldr	r2, [pc, #164]	; (800769c <inc_lock+0x118>)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	4413      	add	r3, r2
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f2      	bne.n	80075ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b02      	cmp	r3, #2
 8007608:	d101      	bne.n	800760e <inc_lock+0x8a>
 800760a:	2300      	movs	r3, #0
 800760c:	e040      	b.n	8007690 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4922      	ldr	r1, [pc, #136]	; (800769c <inc_lock+0x118>)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	440b      	add	r3, r1
 800761a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	491e      	ldr	r1, [pc, #120]	; (800769c <inc_lock+0x118>)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	440b      	add	r3, r1
 8007628:	3304      	adds	r3, #4
 800762a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695a      	ldr	r2, [r3, #20]
 8007630:	491a      	ldr	r1, [pc, #104]	; (800769c <inc_lock+0x118>)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	440b      	add	r3, r1
 8007638:	3308      	adds	r3, #8
 800763a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800763c:	4a17      	ldr	r2, [pc, #92]	; (800769c <inc_lock+0x118>)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	4413      	add	r3, r2
 8007644:	330c      	adds	r3, #12
 8007646:	2200      	movs	r2, #0
 8007648:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <inc_lock+0xe0>
 8007650:	4a12      	ldr	r2, [pc, #72]	; (800769c <inc_lock+0x118>)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	4413      	add	r3, r2
 8007658:	330c      	adds	r3, #12
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <inc_lock+0xe0>
 8007660:	2300      	movs	r3, #0
 8007662:	e015      	b.n	8007690 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d108      	bne.n	800767c <inc_lock+0xf8>
 800766a:	4a0c      	ldr	r2, [pc, #48]	; (800769c <inc_lock+0x118>)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	011b      	lsls	r3, r3, #4
 8007670:	4413      	add	r3, r2
 8007672:	330c      	adds	r3, #12
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	e001      	b.n	8007680 <inc_lock+0xfc>
 800767c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007680:	4906      	ldr	r1, [pc, #24]	; (800769c <inc_lock+0x118>)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	440b      	add	r3, r1
 8007688:	330c      	adds	r3, #12
 800768a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	20000678 	.word	0x20000678

080076a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	607b      	str	r3, [r7, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d825      	bhi.n	8007700 <dec_lock+0x60>
		n = Files[i].ctr;
 80076b4:	4a17      	ldr	r2, [pc, #92]	; (8007714 <dec_lock+0x74>)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	4413      	add	r3, r2
 80076bc:	330c      	adds	r3, #12
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076c2:	89fb      	ldrh	r3, [r7, #14]
 80076c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c8:	d101      	bne.n	80076ce <dec_lock+0x2e>
 80076ca:	2300      	movs	r3, #0
 80076cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80076ce:	89fb      	ldrh	r3, [r7, #14]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <dec_lock+0x3a>
 80076d4:	89fb      	ldrh	r3, [r7, #14]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80076da:	4a0e      	ldr	r2, [pc, #56]	; (8007714 <dec_lock+0x74>)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	4413      	add	r3, r2
 80076e2:	330c      	adds	r3, #12
 80076e4:	89fa      	ldrh	r2, [r7, #14]
 80076e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076e8:	89fb      	ldrh	r3, [r7, #14]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d105      	bne.n	80076fa <dec_lock+0x5a>
 80076ee:	4a09      	ldr	r2, [pc, #36]	; (8007714 <dec_lock+0x74>)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	4413      	add	r3, r2
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	737b      	strb	r3, [r7, #13]
 80076fe:	e001      	b.n	8007704 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007700:	2302      	movs	r3, #2
 8007702:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007704:	7b7b      	ldrb	r3, [r7, #13]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000678 	.word	0x20000678

08007718 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e010      	b.n	8007748 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007726:	4a0d      	ldr	r2, [pc, #52]	; (800775c <clear_lock+0x44>)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	4413      	add	r3, r2
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	429a      	cmp	r2, r3
 8007734:	d105      	bne.n	8007742 <clear_lock+0x2a>
 8007736:	4a09      	ldr	r2, [pc, #36]	; (800775c <clear_lock+0x44>)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	4413      	add	r3, r2
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d9eb      	bls.n	8007726 <clear_lock+0xe>
	}
}
 800774e:	bf00      	nop
 8007750:	bf00      	nop
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	20000678 	.word	0x20000678

08007760 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	78db      	ldrb	r3, [r3, #3]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d034      	beq.n	80077de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	7858      	ldrb	r0, [r3, #1]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007784:	2301      	movs	r3, #1
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	f7ff fd40 	bl	800720c <disk_write>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007792:	2301      	movs	r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
 8007796:	e022      	b.n	80077de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	1ad2      	subs	r2, r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d217      	bcs.n	80077de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	789b      	ldrb	r3, [r3, #2]
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	e010      	b.n	80077d8 <sync_window+0x78>
					wsect += fs->fsize;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4413      	add	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	7858      	ldrb	r0, [r3, #1]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077ca:	2301      	movs	r3, #1
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	f7ff fd1d 	bl	800720c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d8eb      	bhi.n	80077b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80077de:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d01b      	beq.n	8007838 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ffad 	bl	8007760 <sync_window>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d113      	bne.n	8007838 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	7858      	ldrb	r0, [r3, #1]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800781a:	2301      	movs	r3, #1
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	f7ff fcd5 	bl	80071cc <disk_read>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800782c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800782e:	2301      	movs	r3, #1
 8007830:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ff87 	bl	8007760 <sync_window>
 8007852:	4603      	mov	r3, r0
 8007854:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d159      	bne.n	8007910 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d149      	bne.n	80078f8 <sync_fs+0xb4>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d145      	bne.n	80078f8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	899b      	ldrh	r3, [r3, #12]
 8007876:	461a      	mov	r2, r3
 8007878:	2100      	movs	r1, #0
 800787a:	f7ff fda8 	bl	80073ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3334      	adds	r3, #52	; 0x34
 8007882:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007886:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fd37 	bl	80072fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3334      	adds	r3, #52	; 0x34
 8007894:	4921      	ldr	r1, [pc, #132]	; (800791c <sync_fs+0xd8>)
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fd4c 	bl	8007334 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3334      	adds	r3, #52	; 0x34
 80078a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80078a4:	491e      	ldr	r1, [pc, #120]	; (8007920 <sync_fs+0xdc>)
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fd44 	bl	8007334 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3334      	adds	r3, #52	; 0x34
 80078b0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7ff fd3a 	bl	8007334 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3334      	adds	r3, #52	; 0x34
 80078c4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f7ff fd30 	bl	8007334 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7858      	ldrb	r0, [r3, #1]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ec:	2301      	movs	r3, #1
 80078ee:	f7ff fc8d 	bl	800720c <disk_write>
			fs->fsi_flag = 0;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	2200      	movs	r2, #0
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff fca3 	bl	800724c <disk_ioctl>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <sync_fs+0xcc>
 800790c:	2301      	movs	r3, #1
 800790e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	41615252 	.word	0x41615252
 8007920:	61417272 	.word	0x61417272

08007924 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	3b02      	subs	r3, #2
 8007932:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	3b02      	subs	r3, #2
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d301      	bcc.n	8007944 <clust2sect+0x20>
 8007940:	2300      	movs	r3, #0
 8007942:	e008      	b.n	8007956 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	895b      	ldrh	r3, [r3, #10]
 8007948:	461a      	mov	r2, r3
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	fb03 f202 	mul.w	r2, r3, r2
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	4413      	add	r3, r2
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d904      	bls.n	8007982 <get_fat+0x20>
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d302      	bcc.n	8007988 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007982:	2301      	movs	r3, #1
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e0bb      	b.n	8007b00 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800798c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b03      	cmp	r3, #3
 8007994:	f000 8083 	beq.w	8007a9e <get_fat+0x13c>
 8007998:	2b03      	cmp	r3, #3
 800799a:	f300 80a7 	bgt.w	8007aec <get_fat+0x18a>
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d002      	beq.n	80079a8 <get_fat+0x46>
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d056      	beq.n	8007a54 <get_fat+0xf2>
 80079a6:	e0a1      	b.n	8007aec <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	085b      	lsrs	r3, r3, #1
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	899b      	ldrh	r3, [r3, #12]
 80079be:	4619      	mov	r1, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80079c6:	4413      	add	r3, r2
 80079c8:	4619      	mov	r1, r3
 80079ca:	6938      	ldr	r0, [r7, #16]
 80079cc:	f7ff ff0c 	bl	80077e8 <move_window>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f040 808d 	bne.w	8007af2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	60fa      	str	r2, [r7, #12]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	8992      	ldrh	r2, [r2, #12]
 80079e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80079e6:	fb02 f201 	mul.w	r2, r2, r1
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	4413      	add	r3, r2
 80079f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	899b      	ldrh	r3, [r3, #12]
 80079fe:	4619      	mov	r1, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a06:	4413      	add	r3, r2
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	f7ff feec 	bl	80077e8 <move_window>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d16f      	bne.n	8007af6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	899b      	ldrh	r3, [r3, #12]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a22:	fb02 f201 	mul.w	r2, r2, r1
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	461a      	mov	r2, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <get_fat+0xe8>
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	091b      	lsrs	r3, r3, #4
 8007a48:	e002      	b.n	8007a50 <get_fat+0xee>
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a50:	617b      	str	r3, [r7, #20]
			break;
 8007a52:	e055      	b.n	8007b00 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	899b      	ldrh	r3, [r3, #12]
 8007a5c:	085b      	lsrs	r3, r3, #1
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4619      	mov	r1, r3
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a68:	4413      	add	r3, r2
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6938      	ldr	r0, [r7, #16]
 8007a6e:	f7ff febb 	bl	80077e8 <move_window>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d140      	bne.n	8007afa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	8992      	ldrh	r2, [r2, #12]
 8007a86:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a8a:	fb02 f200 	mul.w	r2, r2, r0
 8007a8e:	1a9b      	subs	r3, r3, r2
 8007a90:	440b      	add	r3, r1
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fbf8 	bl	8007288 <ld_word>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	617b      	str	r3, [r7, #20]
			break;
 8007a9c:	e030      	b.n	8007b00 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	899b      	ldrh	r3, [r3, #12]
 8007aa6:	089b      	lsrs	r3, r3, #2
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4619      	mov	r1, r3
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ab2:	4413      	add	r3, r2
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6938      	ldr	r0, [r7, #16]
 8007ab8:	f7ff fe96 	bl	80077e8 <move_window>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d11d      	bne.n	8007afe <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	8992      	ldrh	r2, [r2, #12]
 8007ad0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ad4:	fb02 f200 	mul.w	r2, r2, r0
 8007ad8:	1a9b      	subs	r3, r3, r2
 8007ada:	440b      	add	r3, r1
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff fbeb 	bl	80072b8 <ld_dword>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ae8:	617b      	str	r3, [r7, #20]
			break;
 8007aea:	e009      	b.n	8007b00 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007aec:	2301      	movs	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e006      	b.n	8007b00 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007af2:	bf00      	nop
 8007af4:	e004      	b.n	8007b00 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007af6:	bf00      	nop
 8007af8:	e002      	b.n	8007b00 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007afe:	bf00      	nop
		}
	}

	return val;
 8007b00:	697b      	ldr	r3, [r7, #20]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007b0a:	b590      	push	{r4, r7, lr}
 8007b0c:	b089      	sub	sp, #36	; 0x24
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007b16:	2302      	movs	r3, #2
 8007b18:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	f240 8102 	bls.w	8007d26 <put_fat+0x21c>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	f080 80fc 	bcs.w	8007d26 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	f000 80b6 	beq.w	8007ca4 <put_fat+0x19a>
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	f300 80fd 	bgt.w	8007d38 <put_fat+0x22e>
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d003      	beq.n	8007b4a <put_fat+0x40>
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	f000 8083 	beq.w	8007c4e <put_fat+0x144>
 8007b48:	e0f6      	b.n	8007d38 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	085b      	lsrs	r3, r3, #1
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	4413      	add	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	899b      	ldrh	r3, [r3, #12]
 8007b60:	4619      	mov	r1, r3
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b68:	4413      	add	r3, r2
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f7ff fe3b 	bl	80077e8 <move_window>
 8007b72:	4603      	mov	r3, r0
 8007b74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b76:	7ffb      	ldrb	r3, [r7, #31]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f040 80d6 	bne.w	8007d2a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	61ba      	str	r2, [r7, #24]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	8992      	ldrh	r2, [r2, #12]
 8007b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b92:	fb02 f200 	mul.w	r2, r2, r0
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	440b      	add	r3, r1
 8007b9a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00d      	beq.n	8007bc2 <put_fat+0xb8>
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	b25b      	sxtb	r3, r3
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	b25a      	sxtb	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	b25b      	sxtb	r3, r3
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	b25b      	sxtb	r3, r3
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	e001      	b.n	8007bc6 <put_fat+0xbc>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	899b      	ldrh	r3, [r3, #12]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007be0:	4413      	add	r3, r2
 8007be2:	4619      	mov	r1, r3
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff fdff 	bl	80077e8 <move_window>
 8007bea:	4603      	mov	r3, r0
 8007bec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bee:	7ffb      	ldrb	r3, [r7, #31]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f040 809c 	bne.w	8007d2e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	899b      	ldrh	r3, [r3, #12]
 8007c00:	461a      	mov	r2, r3
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c08:	fb02 f200 	mul.w	r2, r2, r0
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	440b      	add	r3, r1
 8007c10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <put_fat+0x11a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	091b      	lsrs	r3, r3, #4
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	e00e      	b.n	8007c42 <put_fat+0x138>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	b25b      	sxtb	r3, r3
 8007c2a:	f023 030f 	bic.w	r3, r3, #15
 8007c2e:	b25a      	sxtb	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	0a1b      	lsrs	r3, r3, #8
 8007c34:	b25b      	sxtb	r3, r3
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	b25b      	sxtb	r3, r3
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	b25b      	sxtb	r3, r3
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	70da      	strb	r2, [r3, #3]
			break;
 8007c4c:	e074      	b.n	8007d38 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	899b      	ldrh	r3, [r3, #12]
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c62:	4413      	add	r3, r2
 8007c64:	4619      	mov	r1, r3
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fdbe 	bl	80077e8 <move_window>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c70:	7ffb      	ldrb	r3, [r7, #31]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d15d      	bne.n	8007d32 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	8992      	ldrh	r2, [r2, #12]
 8007c84:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c88:	fb02 f200 	mul.w	r2, r2, r0
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	440b      	add	r3, r1
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	b292      	uxth	r2, r2
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fb31 	bl	80072fe <st_word>
			fs->wflag = 1;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	70da      	strb	r2, [r3, #3]
			break;
 8007ca2:	e049      	b.n	8007d38 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	899b      	ldrh	r3, [r3, #12]
 8007cac:	089b      	lsrs	r3, r3, #2
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cb8:	4413      	add	r3, r2
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff fd93 	bl	80077e8 <move_window>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cc6:	7ffb      	ldrb	r3, [r7, #31]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d134      	bne.n	8007d36 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	8992      	ldrh	r2, [r2, #12]
 8007ce0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ce4:	fb02 f200 	mul.w	r2, r2, r0
 8007ce8:	1a9b      	subs	r3, r3, r2
 8007cea:	440b      	add	r3, r1
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fae3 	bl	80072b8 <ld_dword>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007cf8:	4323      	orrs	r3, r4
 8007cfa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	8992      	ldrh	r2, [r2, #12]
 8007d0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d0e:	fb02 f200 	mul.w	r2, r2, r0
 8007d12:	1a9b      	subs	r3, r3, r2
 8007d14:	440b      	add	r3, r1
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff fb0b 	bl	8007334 <st_dword>
			fs->wflag = 1;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	70da      	strb	r2, [r3, #3]
			break;
 8007d24:	e008      	b.n	8007d38 <put_fat+0x22e>
		}
	}
 8007d26:	bf00      	nop
 8007d28:	e006      	b.n	8007d38 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d2a:	bf00      	nop
 8007d2c:	e004      	b.n	8007d38 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d2e:	bf00      	nop
 8007d30:	e002      	b.n	8007d38 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d32:	bf00      	nop
 8007d34:	e000      	b.n	8007d38 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007d36:	bf00      	nop
	return res;
 8007d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3724      	adds	r7, #36	; 0x24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd90      	pop	{r4, r7, pc}

08007d42 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b088      	sub	sp, #32
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d904      	bls.n	8007d68 <remove_chain+0x26>
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d301      	bcc.n	8007d6c <remove_chain+0x2a>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e04b      	b.n	8007e04 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00c      	beq.n	8007d8c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	69b8      	ldr	r0, [r7, #24]
 8007d7a:	f7ff fec6 	bl	8007b0a <put_fat>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007d82:	7ffb      	ldrb	r3, [r7, #31]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <remove_chain+0x4a>
 8007d88:	7ffb      	ldrb	r3, [r7, #31]
 8007d8a:	e03b      	b.n	8007e04 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff fde7 	bl	8007962 <get_fat>
 8007d94:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d031      	beq.n	8007e00 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <remove_chain+0x64>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e02e      	b.n	8007e04 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dac:	d101      	bne.n	8007db2 <remove_chain+0x70>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e028      	b.n	8007e04 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007db2:	2200      	movs	r2, #0
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	69b8      	ldr	r0, [r7, #24]
 8007db8:	f7ff fea7 	bl	8007b0a <put_fat>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007dc0:	7ffb      	ldrb	r3, [r7, #31]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <remove_chain+0x88>
 8007dc6:	7ffb      	ldrb	r3, [r7, #31]
 8007dc8:	e01c      	b.n	8007e04 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	3b02      	subs	r3, #2
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d20b      	bcs.n	8007df0 <remove_chain+0xae>
			fs->free_clst++;
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	791b      	ldrb	r3, [r3, #4]
 8007de6:	f043 0301 	orr.w	r3, r3, #1
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d3c6      	bcc.n	8007d8c <remove_chain+0x4a>
 8007dfe:	e000      	b.n	8007e02 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007e00:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10d      	bne.n	8007e3e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d004      	beq.n	8007e38 <create_chain+0x2c>
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d31b      	bcc.n	8007e70 <create_chain+0x64>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	61bb      	str	r3, [r7, #24]
 8007e3c:	e018      	b.n	8007e70 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff fd8e 	bl	8007962 <get_fat>
 8007e46:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d801      	bhi.n	8007e52 <create_chain+0x46>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e070      	b.n	8007f34 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e58:	d101      	bne.n	8007e5e <create_chain+0x52>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	e06a      	b.n	8007f34 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d201      	bcs.n	8007e6c <create_chain+0x60>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	e063      	b.n	8007f34 <create_chain+0x128>
		scl = clst;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	3301      	adds	r3, #1
 8007e78:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d307      	bcc.n	8007e94 <create_chain+0x88>
				ncl = 2;
 8007e84:	2302      	movs	r3, #2
 8007e86:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007e88:	69fa      	ldr	r2, [r7, #28]
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d901      	bls.n	8007e94 <create_chain+0x88>
 8007e90:	2300      	movs	r3, #0
 8007e92:	e04f      	b.n	8007f34 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007e94:	69f9      	ldr	r1, [r7, #28]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fd63 	bl	8007962 <get_fat>
 8007e9c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00e      	beq.n	8007ec2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d003      	beq.n	8007eb2 <create_chain+0xa6>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eb0:	d101      	bne.n	8007eb6 <create_chain+0xaa>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	e03e      	b.n	8007f34 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d1da      	bne.n	8007e74 <create_chain+0x68>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e038      	b.n	8007f34 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007ec2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ec8:	69f9      	ldr	r1, [r7, #28]
 8007eca:	6938      	ldr	r0, [r7, #16]
 8007ecc:	f7ff fe1d 	bl	8007b0a <put_fat>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <create_chain+0xe2>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d006      	beq.n	8007eee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007ee0:	69fa      	ldr	r2, [r7, #28]
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6938      	ldr	r0, [r7, #16]
 8007ee6:	f7ff fe10 	bl	8007b0a <put_fat>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d116      	bne.n	8007f22 <create_chain+0x116>
		fs->last_clst = ncl;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	3b02      	subs	r3, #2
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d804      	bhi.n	8007f12 <create_chain+0x106>
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	1e5a      	subs	r2, r3, #1
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	791b      	ldrb	r3, [r3, #4]
 8007f16:	f043 0301 	orr.w	r3, r3, #1
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	711a      	strb	r2, [r3, #4]
 8007f20:	e007      	b.n	8007f32 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d102      	bne.n	8007f2e <create_chain+0x122>
 8007f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f2c:	e000      	b.n	8007f30 <create_chain+0x124>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007f32:	69fb      	ldr	r3, [r7, #28]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3720      	adds	r7, #32
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	3304      	adds	r3, #4
 8007f52:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	899b      	ldrh	r3, [r3, #12]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	8952      	ldrh	r2, [r2, #10]
 8007f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f68:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1d1a      	adds	r2, r3, #4
 8007f6e:	613a      	str	r2, [r7, #16]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <clmt_clust+0x42>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e010      	b.n	8007fa0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d307      	bcc.n	8007f96 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	3304      	adds	r3, #4
 8007f92:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f94:	e7e9      	b.n	8007f6a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007f96:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	4413      	add	r3, r2
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fc2:	d204      	bcs.n	8007fce <dir_sdi+0x22>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e071      	b.n	80080b6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <dir_sdi+0x46>
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d902      	bls.n	8007ff2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10c      	bne.n	8008012 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	095b      	lsrs	r3, r3, #5
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	8912      	ldrh	r2, [r2, #8]
 8008000:	4293      	cmp	r3, r2
 8008002:	d301      	bcc.n	8008008 <dir_sdi+0x5c>
 8008004:	2302      	movs	r3, #2
 8008006:	e056      	b.n	80080b6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	61da      	str	r2, [r3, #28]
 8008010:	e02d      	b.n	800806e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	895b      	ldrh	r3, [r3, #10]
 8008016:	461a      	mov	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	899b      	ldrh	r3, [r3, #12]
 800801c:	fb03 f302 	mul.w	r3, r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008022:	e019      	b.n	8008058 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6979      	ldr	r1, [r7, #20]
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff fc9a 	bl	8007962 <get_fat>
 800802e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008036:	d101      	bne.n	800803c <dir_sdi+0x90>
 8008038:	2301      	movs	r3, #1
 800803a:	e03c      	b.n	80080b6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d904      	bls.n	800804c <dir_sdi+0xa0>
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	429a      	cmp	r2, r3
 800804a:	d301      	bcc.n	8008050 <dir_sdi+0xa4>
 800804c:	2302      	movs	r3, #2
 800804e:	e032      	b.n	80080b6 <dir_sdi+0x10a>
			ofs -= csz;
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	429a      	cmp	r2, r3
 800805e:	d2e1      	bcs.n	8008024 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008060:	6979      	ldr	r1, [r7, #20]
 8008062:	6938      	ldr	r0, [r7, #16]
 8008064:	f7ff fc5e 	bl	8007924 <clust2sect>
 8008068:	4602      	mov	r2, r0
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <dir_sdi+0xd4>
 800807c:	2302      	movs	r3, #2
 800807e:	e01a      	b.n	80080b6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	69da      	ldr	r2, [r3, #28]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	899b      	ldrh	r3, [r3, #12]
 8008088:	4619      	mov	r1, r3
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008090:	441a      	add	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	899b      	ldrh	r3, [r3, #12]
 80080a0:	461a      	mov	r2, r3
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80080a8:	fb02 f200 	mul.w	r2, r2, r0
 80080ac:	1a9b      	subs	r3, r3, r2
 80080ae:	18ca      	adds	r2, r1, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	3320      	adds	r3, #32
 80080d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <dir_next+0x28>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080e4:	d301      	bcc.n	80080ea <dir_next+0x2c>
 80080e6:	2304      	movs	r3, #4
 80080e8:	e0bb      	b.n	8008262 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	899b      	ldrh	r3, [r3, #12]
 80080ee:	461a      	mov	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80080f6:	fb02 f201 	mul.w	r2, r2, r1
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f040 809d 	bne.w	800823c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10b      	bne.n	800812c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	8912      	ldrh	r2, [r2, #8]
 800811c:	4293      	cmp	r3, r2
 800811e:	f0c0 808d 	bcc.w	800823c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	61da      	str	r2, [r3, #28]
 8008128:	2304      	movs	r3, #4
 800812a:	e09a      	b.n	8008262 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	899b      	ldrh	r3, [r3, #12]
 8008130:	461a      	mov	r2, r3
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	fbb3 f3f2 	udiv	r3, r3, r2
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	8952      	ldrh	r2, [r2, #10]
 800813c:	3a01      	subs	r2, #1
 800813e:	4013      	ands	r3, r2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d17b      	bne.n	800823c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	4619      	mov	r1, r3
 800814c:	4610      	mov	r0, r2
 800814e:	f7ff fc08 	bl	8007962 <get_fat>
 8008152:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d801      	bhi.n	800815e <dir_next+0xa0>
 800815a:	2302      	movs	r3, #2
 800815c:	e081      	b.n	8008262 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008164:	d101      	bne.n	800816a <dir_next+0xac>
 8008166:	2301      	movs	r3, #1
 8008168:	e07b      	b.n	8008262 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	429a      	cmp	r2, r3
 8008172:	d359      	bcc.n	8008228 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	61da      	str	r2, [r3, #28]
 8008180:	2304      	movs	r3, #4
 8008182:	e06e      	b.n	8008262 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	4619      	mov	r1, r3
 800818c:	4610      	mov	r0, r2
 800818e:	f7ff fe3d 	bl	8007e0c <create_chain>
 8008192:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <dir_next+0xe0>
 800819a:	2307      	movs	r3, #7
 800819c:	e061      	b.n	8008262 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <dir_next+0xea>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e05c      	b.n	8008262 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ae:	d101      	bne.n	80081b4 <dir_next+0xf6>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e056      	b.n	8008262 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f7ff fad3 	bl	8007760 <sync_window>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <dir_next+0x106>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e04e      	b.n	8008262 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	899b      	ldrh	r3, [r3, #12]
 80081ce:	461a      	mov	r2, r3
 80081d0:	2100      	movs	r1, #0
 80081d2:	f7ff f8fc 	bl	80073ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081d6:	2300      	movs	r3, #0
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff fba1 	bl	8007924 <clust2sect>
 80081e2:	4602      	mov	r2, r0
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	631a      	str	r2, [r3, #48]	; 0x30
 80081e8:	e012      	b.n	8008210 <dir_next+0x152>
						fs->wflag = 1;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff fab5 	bl	8007760 <sync_window>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <dir_next+0x142>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e030      	b.n	8008262 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3301      	adds	r3, #1
 8008204:	613b      	str	r3, [r7, #16]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	631a      	str	r2, [r3, #48]	; 0x30
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	895b      	ldrh	r3, [r3, #10]
 8008214:	461a      	mov	r2, r3
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	4293      	cmp	r3, r2
 800821a:	d3e6      	bcc.n	80081ea <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	1ad2      	subs	r2, r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800822e:	6979      	ldr	r1, [r7, #20]
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fb77 	bl	8007924 <clust2sect>
 8008236:	4602      	mov	r2, r0
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	899b      	ldrh	r3, [r3, #12]
 800824c:	461a      	mov	r2, r3
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	fbb3 f0f2 	udiv	r0, r3, r2
 8008254:	fb02 f200 	mul.w	r2, r2, r0
 8008258:	1a9b      	subs	r3, r3, r2
 800825a:	18ca      	adds	r2, r1, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff fe95 	bl	8007fac <dir_sdi>
 8008282:	4603      	mov	r3, r0
 8008284:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d12b      	bne.n	80082e4 <dir_alloc+0x7a>
		n = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	4619      	mov	r1, r3
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7ff faa6 	bl	80077e8 <move_window>
 800829c:	4603      	mov	r3, r0
 800829e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d11d      	bne.n	80082e2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2be5      	cmp	r3, #229	; 0xe5
 80082ae:	d004      	beq.n	80082ba <dir_alloc+0x50>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d107      	bne.n	80082ca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	3301      	adds	r3, #1
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d102      	bne.n	80082ce <dir_alloc+0x64>
 80082c8:	e00c      	b.n	80082e4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80082ce:	2101      	movs	r1, #1
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff fef4 	bl	80080be <dir_next>
 80082d6:	4603      	mov	r3, r0
 80082d8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0d7      	beq.n	8008290 <dir_alloc+0x26>
 80082e0:	e000      	b.n	80082e4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80082e2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d101      	bne.n	80082ee <dir_alloc+0x84>
 80082ea:	2307      	movs	r3, #7
 80082ec:	75fb      	strb	r3, [r7, #23]
	return res;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	331a      	adds	r3, #26
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe ffbe 	bl	8007288 <ld_word>
 800830c:	4603      	mov	r3, r0
 800830e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	2b03      	cmp	r3, #3
 8008316:	d109      	bne.n	800832c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	3314      	adds	r3, #20
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe ffb3 	bl	8007288 <ld_word>
 8008322:	4603      	mov	r3, r0
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800832c:	68fb      	ldr	r3, [r7, #12]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	331a      	adds	r3, #26
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	b292      	uxth	r2, r2
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe ffd6 	bl	80072fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2b03      	cmp	r3, #3
 8008358:	d109      	bne.n	800836e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f103 0214 	add.w	r2, r3, #20
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	0c1b      	lsrs	r3, r3, #16
 8008364:	b29b      	uxth	r3, r3
 8008366:	4619      	mov	r1, r3
 8008368:	4610      	mov	r0, r2
 800836a:	f7fe ffc8 	bl	80072fe <st_word>
	}
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008384:	2100      	movs	r1, #0
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff fe10 	bl	8007fac <dir_sdi>
 800838c:	4603      	mov	r3, r0
 800838e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <dir_find+0x24>
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	e03e      	b.n	8008418 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	4619      	mov	r1, r3
 80083a0:	6938      	ldr	r0, [r7, #16]
 80083a2:	f7ff fa21 	bl	80077e8 <move_window>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d12f      	bne.n	8008410 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <dir_find+0x4e>
 80083be:	2304      	movs	r3, #4
 80083c0:	75fb      	strb	r3, [r7, #23]
 80083c2:	e028      	b.n	8008416 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	330b      	adds	r3, #11
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	330b      	adds	r3, #11
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <dir_find+0x86>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a18      	ldr	r0, [r3, #32]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3324      	adds	r3, #36	; 0x24
 80083ee:	220b      	movs	r2, #11
 80083f0:	4619      	mov	r1, r3
 80083f2:	f7ff f807 	bl	8007404 <mem_cmp>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80083fc:	2100      	movs	r1, #0
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff fe5d 	bl	80080be <dir_next>
 8008404:	4603      	mov	r3, r0
 8008406:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008408:	7dfb      	ldrb	r3, [r7, #23]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0c5      	beq.n	800839a <dir_find+0x24>
 800840e:	e002      	b.n	8008416 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008410:	bf00      	nop
 8008412:	e000      	b.n	8008416 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008414:	bf00      	nop

	return res;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800842e:	2101      	movs	r1, #1
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff ff1a 	bl	800826a <dir_alloc>
 8008436:	4603      	mov	r3, r0
 8008438:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d11c      	bne.n	800847a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	4619      	mov	r1, r3
 8008446:	68b8      	ldr	r0, [r7, #8]
 8008448:	f7ff f9ce 	bl	80077e8 <move_window>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d111      	bne.n	800847a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	2220      	movs	r2, #32
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe ffb5 	bl	80073ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a18      	ldr	r0, [r3, #32]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3324      	adds	r3, #36	; 0x24
 800846c:	220b      	movs	r2, #11
 800846e:	4619      	mov	r1, r3
 8008470:	f7fe ff8c 	bl	800738c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2201      	movs	r2, #1
 8008478:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3324      	adds	r3, #36	; 0x24
 8008498:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800849a:	220b      	movs	r2, #11
 800849c:	2120      	movs	r1, #32
 800849e:	68b8      	ldr	r0, [r7, #8]
 80084a0:	f7fe ff95 	bl	80073ce <mem_set>
	si = i = 0; ni = 8;
 80084a4:	2300      	movs	r3, #0
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	61fb      	str	r3, [r7, #28]
 80084ac:	2308      	movs	r3, #8
 80084ae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	61fa      	str	r2, [r7, #28]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	4413      	add	r3, r2
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80084be:	7efb      	ldrb	r3, [r7, #27]
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d94e      	bls.n	8008562 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80084c4:	7efb      	ldrb	r3, [r7, #27]
 80084c6:	2b2f      	cmp	r3, #47	; 0x2f
 80084c8:	d006      	beq.n	80084d8 <create_name+0x54>
 80084ca:	7efb      	ldrb	r3, [r7, #27]
 80084cc:	2b5c      	cmp	r3, #92	; 0x5c
 80084ce:	d110      	bne.n	80084f2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80084d0:	e002      	b.n	80084d8 <create_name+0x54>
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	3301      	adds	r3, #1
 80084d6:	61fb      	str	r3, [r7, #28]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	2b2f      	cmp	r3, #47	; 0x2f
 80084e2:	d0f6      	beq.n	80084d2 <create_name+0x4e>
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	4413      	add	r3, r2
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b5c      	cmp	r3, #92	; 0x5c
 80084ee:	d0f0      	beq.n	80084d2 <create_name+0x4e>
			break;
 80084f0:	e038      	b.n	8008564 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80084f2:	7efb      	ldrb	r3, [r7, #27]
 80084f4:	2b2e      	cmp	r3, #46	; 0x2e
 80084f6:	d003      	beq.n	8008500 <create_name+0x7c>
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d30c      	bcc.n	800851a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2b0b      	cmp	r3, #11
 8008504:	d002      	beq.n	800850c <create_name+0x88>
 8008506:	7efb      	ldrb	r3, [r7, #27]
 8008508:	2b2e      	cmp	r3, #46	; 0x2e
 800850a:	d001      	beq.n	8008510 <create_name+0x8c>
 800850c:	2306      	movs	r3, #6
 800850e:	e044      	b.n	800859a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008510:	2308      	movs	r3, #8
 8008512:	613b      	str	r3, [r7, #16]
 8008514:	230b      	movs	r3, #11
 8008516:	617b      	str	r3, [r7, #20]
			continue;
 8008518:	e022      	b.n	8008560 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800851a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800851e:	2b00      	cmp	r3, #0
 8008520:	da04      	bge.n	800852c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008522:	7efb      	ldrb	r3, [r7, #27]
 8008524:	3b80      	subs	r3, #128	; 0x80
 8008526:	4a1f      	ldr	r2, [pc, #124]	; (80085a4 <create_name+0x120>)
 8008528:	5cd3      	ldrb	r3, [r2, r3]
 800852a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800852c:	7efb      	ldrb	r3, [r7, #27]
 800852e:	4619      	mov	r1, r3
 8008530:	481d      	ldr	r0, [pc, #116]	; (80085a8 <create_name+0x124>)
 8008532:	f7fe ff8e 	bl	8007452 <chk_chr>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <create_name+0xbc>
 800853c:	2306      	movs	r3, #6
 800853e:	e02c      	b.n	800859a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008540:	7efb      	ldrb	r3, [r7, #27]
 8008542:	2b60      	cmp	r3, #96	; 0x60
 8008544:	d905      	bls.n	8008552 <create_name+0xce>
 8008546:	7efb      	ldrb	r3, [r7, #27]
 8008548:	2b7a      	cmp	r3, #122	; 0x7a
 800854a:	d802      	bhi.n	8008552 <create_name+0xce>
 800854c:	7efb      	ldrb	r3, [r7, #27]
 800854e:	3b20      	subs	r3, #32
 8008550:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	613a      	str	r2, [r7, #16]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	4413      	add	r3, r2
 800855c:	7efa      	ldrb	r2, [r7, #27]
 800855e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008560:	e7a6      	b.n	80084b0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008562:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	441a      	add	r2, r3
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <create_name+0xf4>
 8008574:	2306      	movs	r3, #6
 8008576:	e010      	b.n	800859a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2be5      	cmp	r3, #229	; 0xe5
 800857e:	d102      	bne.n	8008586 <create_name+0x102>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2205      	movs	r2, #5
 8008584:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008586:	7efb      	ldrb	r3, [r7, #27]
 8008588:	2b20      	cmp	r3, #32
 800858a:	d801      	bhi.n	8008590 <create_name+0x10c>
 800858c:	2204      	movs	r2, #4
 800858e:	e000      	b.n	8008592 <create_name+0x10e>
 8008590:	2200      	movs	r2, #0
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	330b      	adds	r3, #11
 8008596:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008598:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800859a:	4618      	mov	r0, r3
 800859c:	3720      	adds	r7, #32
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	0800a7c8 	.word	0x0800a7c8
 80085a8:	0800a73c 	.word	0x0800a73c

080085ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80085c0:	e002      	b.n	80085c8 <follow_path+0x1c>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b2f      	cmp	r3, #47	; 0x2f
 80085ce:	d0f8      	beq.n	80085c2 <follow_path+0x16>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b5c      	cmp	r3, #92	; 0x5c
 80085d6:	d0f4      	beq.n	80085c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2200      	movs	r2, #0
 80085dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b1f      	cmp	r3, #31
 80085e4:	d80a      	bhi.n	80085fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2280      	movs	r2, #128	; 0x80
 80085ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80085ee:	2100      	movs	r1, #0
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7ff fcdb 	bl	8007fac <dir_sdi>
 80085f6:	4603      	mov	r3, r0
 80085f8:	75fb      	strb	r3, [r7, #23]
 80085fa:	e048      	b.n	800868e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80085fc:	463b      	mov	r3, r7
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff ff3f 	bl	8008484 <create_name>
 8008606:	4603      	mov	r3, r0
 8008608:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800860a:	7dfb      	ldrb	r3, [r7, #23]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d139      	bne.n	8008684 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff feb0 	bl	8008376 <dir_find>
 8008616:	4603      	mov	r3, r0
 8008618:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008620:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00a      	beq.n	800863e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008628:	7dfb      	ldrb	r3, [r7, #23]
 800862a:	2b04      	cmp	r3, #4
 800862c:	d12c      	bne.n	8008688 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800862e:	7afb      	ldrb	r3, [r7, #11]
 8008630:	f003 0304 	and.w	r3, r3, #4
 8008634:	2b00      	cmp	r3, #0
 8008636:	d127      	bne.n	8008688 <follow_path+0xdc>
 8008638:	2305      	movs	r3, #5
 800863a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800863c:	e024      	b.n	8008688 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d121      	bne.n	800868c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	799b      	ldrb	r3, [r3, #6]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008654:	2305      	movs	r3, #5
 8008656:	75fb      	strb	r3, [r7, #23]
 8008658:	e019      	b.n	800868e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	8992      	ldrh	r2, [r2, #12]
 8008668:	fbb3 f0f2 	udiv	r0, r3, r2
 800866c:	fb02 f200 	mul.w	r2, r2, r0
 8008670:	1a9b      	subs	r3, r3, r2
 8008672:	440b      	add	r3, r1
 8008674:	4619      	mov	r1, r3
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff fe3e 	bl	80082f8 <ld_clust>
 800867c:	4602      	mov	r2, r0
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008682:	e7bb      	b.n	80085fc <follow_path+0x50>
			if (res != FR_OK) break;
 8008684:	bf00      	nop
 8008686:	e002      	b.n	800868e <follow_path+0xe2>
				break;
 8008688:	bf00      	nop
 800868a:	e000      	b.n	800868e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800868c:	bf00      	nop
			}
		}
	}

	return res;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80086a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086a4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d031      	beq.n	8008712 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e002      	b.n	80086bc <get_ldnumber+0x24>
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	3301      	adds	r3, #1
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d903      	bls.n	80086cc <get_ldnumber+0x34>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b3a      	cmp	r3, #58	; 0x3a
 80086ca:	d1f4      	bne.n	80086b6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b3a      	cmp	r3, #58	; 0x3a
 80086d2:	d11c      	bne.n	800870e <get_ldnumber+0x76>
			tp = *path;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	60fa      	str	r2, [r7, #12]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	3b30      	subs	r3, #48	; 0x30
 80086e4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b09      	cmp	r3, #9
 80086ea:	d80e      	bhi.n	800870a <get_ldnumber+0x72>
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d10a      	bne.n	800870a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d107      	bne.n	800870a <get_ldnumber+0x72>
					vol = (int)i;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	3301      	adds	r3, #1
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	e002      	b.n	8008714 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800870e:	2300      	movs	r3, #0
 8008710:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008712:	693b      	ldr	r3, [r7, #16]
}
 8008714:	4618      	mov	r0, r3
 8008716:	371c      	adds	r7, #28
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	70da      	strb	r2, [r3, #3]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008736:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff f854 	bl	80077e8 <move_window>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <check_fs+0x2a>
 8008746:	2304      	movs	r3, #4
 8008748:	e038      	b.n	80087bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	3334      	adds	r3, #52	; 0x34
 800874e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe fd98 	bl	8007288 <ld_word>
 8008758:	4603      	mov	r3, r0
 800875a:	461a      	mov	r2, r3
 800875c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008760:	429a      	cmp	r2, r3
 8008762:	d001      	beq.n	8008768 <check_fs+0x48>
 8008764:	2303      	movs	r3, #3
 8008766:	e029      	b.n	80087bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800876e:	2be9      	cmp	r3, #233	; 0xe9
 8008770:	d009      	beq.n	8008786 <check_fs+0x66>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008778:	2beb      	cmp	r3, #235	; 0xeb
 800877a:	d11e      	bne.n	80087ba <check_fs+0x9a>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008782:	2b90      	cmp	r3, #144	; 0x90
 8008784:	d119      	bne.n	80087ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3334      	adds	r3, #52	; 0x34
 800878a:	3336      	adds	r3, #54	; 0x36
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe fd93 	bl	80072b8 <ld_dword>
 8008792:	4603      	mov	r3, r0
 8008794:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008798:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <check_fs+0xa4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d101      	bne.n	80087a2 <check_fs+0x82>
 800879e:	2300      	movs	r3, #0
 80087a0:	e00c      	b.n	80087bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3334      	adds	r3, #52	; 0x34
 80087a6:	3352      	adds	r3, #82	; 0x52
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fd85 	bl	80072b8 <ld_dword>
 80087ae:	4603      	mov	r3, r0
 80087b0:	4a05      	ldr	r2, [pc, #20]	; (80087c8 <check_fs+0xa8>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d101      	bne.n	80087ba <check_fs+0x9a>
 80087b6:	2300      	movs	r3, #0
 80087b8:	e000      	b.n	80087bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80087ba:	2302      	movs	r3, #2
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	00544146 	.word	0x00544146
 80087c8:	33544146 	.word	0x33544146

080087cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b096      	sub	sp, #88	; 0x58
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f7ff ff59 	bl	8008698 <get_ldnumber>
 80087e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80087e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	da01      	bge.n	80087f2 <find_volume+0x26>
 80087ee:	230b      	movs	r3, #11
 80087f0:	e265      	b.n	8008cbe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80087f2:	4ab0      	ldr	r2, [pc, #704]	; (8008ab4 <find_volume+0x2e8>)
 80087f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <find_volume+0x3a>
 8008802:	230c      	movs	r3, #12
 8008804:	e25b      	b.n	8008cbe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800880a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	f023 0301 	bic.w	r3, r3, #1
 8008812:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01a      	beq.n	8008852 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe fc93 	bl	800714c <disk_status>
 8008826:	4603      	mov	r3, r0
 8008828:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800882c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10c      	bne.n	8008852 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008838:	79fb      	ldrb	r3, [r7, #7]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d007      	beq.n	800884e <find_volume+0x82>
 800883e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800884a:	230a      	movs	r3, #10
 800884c:	e237      	b.n	8008cbe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800884e:	2300      	movs	r3, #0
 8008850:	e235      	b.n	8008cbe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008854:	2200      	movs	r2, #0
 8008856:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	b2da      	uxtb	r2, r3
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe fc8b 	bl	8007180 <disk_initialize>
 800886a:	4603      	mov	r3, r0
 800886c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008870:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800887c:	2303      	movs	r3, #3
 800887e:	e21e      	b.n	8008cbe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d007      	beq.n	8008896 <find_volume+0xca>
 8008886:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008892:	230a      	movs	r3, #10
 8008894:	e213      	b.n	8008cbe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	7858      	ldrb	r0, [r3, #1]
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	330c      	adds	r3, #12
 800889e:	461a      	mov	r2, r3
 80088a0:	2102      	movs	r1, #2
 80088a2:	f7fe fcd3 	bl	800724c <disk_ioctl>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <find_volume+0xe4>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e206      	b.n	8008cbe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	899b      	ldrh	r3, [r3, #12]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b8:	d80d      	bhi.n	80088d6 <find_volume+0x10a>
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	899b      	ldrh	r3, [r3, #12]
 80088be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088c2:	d308      	bcc.n	80088d6 <find_volume+0x10a>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	899b      	ldrh	r3, [r3, #12]
 80088c8:	461a      	mov	r2, r3
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	899b      	ldrh	r3, [r3, #12]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	4013      	ands	r3, r2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <find_volume+0x10e>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e1f1      	b.n	8008cbe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80088de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088e2:	f7ff ff1d 	bl	8008720 <check_fs>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80088ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d14b      	bne.n	800898c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80088f4:	2300      	movs	r3, #0
 80088f6:	643b      	str	r3, [r7, #64]	; 0x40
 80088f8:	e01f      	b.n	800893a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008908:	4413      	add	r3, r2
 800890a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	3304      	adds	r3, #4
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d006      	beq.n	8008924 <find_volume+0x158>
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	3308      	adds	r3, #8
 800891a:	4618      	mov	r0, r3
 800891c:	f7fe fccc 	bl	80072b8 <ld_dword>
 8008920:	4602      	mov	r2, r0
 8008922:	e000      	b.n	8008926 <find_volume+0x15a>
 8008924:	2200      	movs	r2, #0
 8008926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800892e:	440b      	add	r3, r1
 8008930:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008936:	3301      	adds	r3, #1
 8008938:	643b      	str	r3, [r7, #64]	; 0x40
 800893a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800893c:	2b03      	cmp	r3, #3
 800893e:	d9dc      	bls.n	80088fa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008940:	2300      	movs	r3, #0
 8008942:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <find_volume+0x184>
 800894a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800894c:	3b01      	subs	r3, #1
 800894e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008958:	4413      	add	r3, r2
 800895a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800895e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008962:	2b00      	cmp	r3, #0
 8008964:	d005      	beq.n	8008972 <find_volume+0x1a6>
 8008966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800896a:	f7ff fed9 	bl	8008720 <check_fs>
 800896e:	4603      	mov	r3, r0
 8008970:	e000      	b.n	8008974 <find_volume+0x1a8>
 8008972:	2303      	movs	r3, #3
 8008974:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800897c:	2b01      	cmp	r3, #1
 800897e:	d905      	bls.n	800898c <find_volume+0x1c0>
 8008980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008982:	3301      	adds	r3, #1
 8008984:	643b      	str	r3, [r7, #64]	; 0x40
 8008986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008988:	2b03      	cmp	r3, #3
 800898a:	d9e1      	bls.n	8008950 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800898c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008990:	2b04      	cmp	r3, #4
 8008992:	d101      	bne.n	8008998 <find_volume+0x1cc>
 8008994:	2301      	movs	r3, #1
 8008996:	e192      	b.n	8008cbe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800899c:	2b01      	cmp	r3, #1
 800899e:	d901      	bls.n	80089a4 <find_volume+0x1d8>
 80089a0:	230d      	movs	r3, #13
 80089a2:	e18c      	b.n	8008cbe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	3334      	adds	r3, #52	; 0x34
 80089a8:	330b      	adds	r3, #11
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fc6c 	bl	8007288 <ld_word>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	899b      	ldrh	r3, [r3, #12]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d001      	beq.n	80089c0 <find_volume+0x1f4>
 80089bc:	230d      	movs	r3, #13
 80089be:	e17e      	b.n	8008cbe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	3334      	adds	r3, #52	; 0x34
 80089c4:	3316      	adds	r3, #22
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe fc5e 	bl	8007288 <ld_word>
 80089cc:	4603      	mov	r3, r0
 80089ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80089d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d106      	bne.n	80089e4 <find_volume+0x218>
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	3334      	adds	r3, #52	; 0x34
 80089da:	3324      	adds	r3, #36	; 0x24
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe fc6b 	bl	80072b8 <ld_dword>
 80089e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80089e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089e8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80089f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	789b      	ldrb	r3, [r3, #2]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d005      	beq.n	8008a08 <find_volume+0x23c>
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	789b      	ldrb	r3, [r3, #2]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d001      	beq.n	8008a08 <find_volume+0x23c>
 8008a04:	230d      	movs	r3, #13
 8008a06:	e15a      	b.n	8008cbe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	789b      	ldrb	r3, [r3, #2]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
 8008a14:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	895b      	ldrh	r3, [r3, #10]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d008      	beq.n	8008a3c <find_volume+0x270>
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	895b      	ldrh	r3, [r3, #10]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	895b      	ldrh	r3, [r3, #10]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	4013      	ands	r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <find_volume+0x274>
 8008a3c:	230d      	movs	r3, #13
 8008a3e:	e13e      	b.n	8008cbe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	3334      	adds	r3, #52	; 0x34
 8008a44:	3311      	adds	r3, #17
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fc1e 	bl	8007288 <ld_word>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a56:	891b      	ldrh	r3, [r3, #8]
 8008a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a5a:	8992      	ldrh	r2, [r2, #12]
 8008a5c:	0952      	lsrs	r2, r2, #5
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a64:	fb02 f201 	mul.w	r2, r2, r1
 8008a68:	1a9b      	subs	r3, r3, r2
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <find_volume+0x2a8>
 8008a70:	230d      	movs	r3, #13
 8008a72:	e124      	b.n	8008cbe <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	3334      	adds	r3, #52	; 0x34
 8008a78:	3313      	adds	r3, #19
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe fc04 	bl	8007288 <ld_word>
 8008a80:	4603      	mov	r3, r0
 8008a82:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <find_volume+0x2cc>
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	3334      	adds	r3, #52	; 0x34
 8008a8e:	3320      	adds	r3, #32
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe fc11 	bl	80072b8 <ld_dword>
 8008a96:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	3334      	adds	r3, #52	; 0x34
 8008a9c:	330e      	adds	r3, #14
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fbf2 	bl	8007288 <ld_word>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008aa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d104      	bne.n	8008ab8 <find_volume+0x2ec>
 8008aae:	230d      	movs	r3, #13
 8008ab0:	e105      	b.n	8008cbe <find_volume+0x4f2>
 8008ab2:	bf00      	nop
 8008ab4:	20000670 	.word	0x20000670

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008ab8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008abc:	4413      	add	r3, r2
 8008abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ac0:	8911      	ldrh	r1, [r2, #8]
 8008ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ac4:	8992      	ldrh	r2, [r2, #12]
 8008ac6:	0952      	lsrs	r2, r2, #5
 8008ac8:	b292      	uxth	r2, r2
 8008aca:	fbb1 f2f2 	udiv	r2, r1, r2
 8008ace:	b292      	uxth	r2, r2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d201      	bcs.n	8008ae0 <find_volume+0x314>
 8008adc:	230d      	movs	r3, #13
 8008ade:	e0ee      	b.n	8008cbe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ae8:	8952      	ldrh	r2, [r2, #10]
 8008aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <find_volume+0x32e>
 8008af6:	230d      	movs	r3, #13
 8008af8:	e0e1      	b.n	8008cbe <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008afa:	2303      	movs	r3, #3
 8008afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d802      	bhi.n	8008b10 <find_volume+0x344>
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d802      	bhi.n	8008b20 <find_volume+0x354>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	1c9a      	adds	r2, r3, #2
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b2c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008b2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b32:	441a      	add	r2, r3
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008b38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	441a      	add	r2, r3
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008b42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d11e      	bne.n	8008b88 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	3334      	adds	r3, #52	; 0x34
 8008b4e:	332a      	adds	r3, #42	; 0x2a
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fb99 	bl	8007288 <ld_word>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <find_volume+0x394>
 8008b5c:	230d      	movs	r3, #13
 8008b5e:	e0ae      	b.n	8008cbe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	891b      	ldrh	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <find_volume+0x3a0>
 8008b68:	230d      	movs	r3, #13
 8008b6a:	e0a8      	b.n	8008cbe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	3334      	adds	r3, #52	; 0x34
 8008b70:	332c      	adds	r3, #44	; 0x2c
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fba0 	bl	80072b8 <ld_dword>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	647b      	str	r3, [r7, #68]	; 0x44
 8008b86:	e01f      	b.n	8008bc8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	891b      	ldrh	r3, [r3, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <find_volume+0x3c8>
 8008b90:	230d      	movs	r3, #13
 8008b92:	e094      	b.n	8008cbe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b9a:	441a      	add	r2, r3
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ba0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d103      	bne.n	8008bb0 <find_volume+0x3e4>
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	e00a      	b.n	8008bc6 <find_volume+0x3fa>
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	699a      	ldr	r2, [r3, #24]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	4413      	add	r3, r2
 8008bba:	085a      	lsrs	r2, r3, #1
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008bc6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	69da      	ldr	r2, [r3, #28]
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	899b      	ldrh	r3, [r3, #12]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bda:	8989      	ldrh	r1, [r1, #12]
 8008bdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d201      	bcs.n	8008be8 <find_volume+0x41c>
 8008be4:	230d      	movs	r3, #13
 8008be6:	e06a      	b.n	8008cbe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bee:	615a      	str	r2, [r3, #20]
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	695a      	ldr	r2, [r3, #20]
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfa:	2280      	movs	r2, #128	; 0x80
 8008bfc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008bfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d149      	bne.n	8008c9a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	3334      	adds	r3, #52	; 0x34
 8008c0a:	3330      	adds	r3, #48	; 0x30
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fe fb3b 	bl	8007288 <ld_word>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d140      	bne.n	8008c9a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c20:	f7fe fde2 	bl	80077e8 <move_window>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d137      	bne.n	8008c9a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	3334      	adds	r3, #52	; 0x34
 8008c34:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe fb25 	bl	8007288 <ld_word>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	461a      	mov	r2, r3
 8008c42:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d127      	bne.n	8008c9a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	3334      	adds	r3, #52	; 0x34
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fb32 	bl	80072b8 <ld_dword>
 8008c54:	4603      	mov	r3, r0
 8008c56:	4a1c      	ldr	r2, [pc, #112]	; (8008cc8 <find_volume+0x4fc>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d11e      	bne.n	8008c9a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	3334      	adds	r3, #52	; 0x34
 8008c60:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe fb27 	bl	80072b8 <ld_dword>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4a17      	ldr	r2, [pc, #92]	; (8008ccc <find_volume+0x500>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d113      	bne.n	8008c9a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	3334      	adds	r3, #52	; 0x34
 8008c76:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fb1c 	bl	80072b8 <ld_dword>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c84:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	3334      	adds	r3, #52	; 0x34
 8008c8a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe fb12 	bl	80072b8 <ld_dword>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c98:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008ca0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ca2:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <find_volume+0x504>)
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <find_volume+0x504>)
 8008cac:	801a      	strh	r2, [r3, #0]
 8008cae:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <find_volume+0x504>)
 8008cb0:	881a      	ldrh	r2, [r3, #0]
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008cb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cb8:	f7fe fd2e 	bl	8007718 <clear_lock>
#endif
	return FR_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3758      	adds	r7, #88	; 0x58
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	41615252 	.word	0x41615252
 8008ccc:	61417272 	.word	0x61417272
 8008cd0:	20000674 	.word	0x20000674

08008cd4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008cde:	2309      	movs	r3, #9
 8008ce0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01c      	beq.n	8008d22 <validate+0x4e>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d018      	beq.n	8008d22 <validate+0x4e>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d013      	beq.n	8008d22 <validate+0x4e>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	889a      	ldrh	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	88db      	ldrh	r3, [r3, #6]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d10c      	bne.n	8008d22 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe fa1c 	bl	800714c <disk_status>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <validate+0x4e>
			res = FR_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <validate+0x5a>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	e000      	b.n	8008d30 <validate+0x5c>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	6013      	str	r3, [r2, #0]
	return res;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008d52:	f107 0310 	add.w	r3, r7, #16
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff fc9e 	bl	8008698 <get_ldnumber>
 8008d5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da01      	bge.n	8008d68 <f_mount+0x28>
 8008d64:	230b      	movs	r3, #11
 8008d66:	e02b      	b.n	8008dc0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008d68:	4a17      	ldr	r2, [pc, #92]	; (8008dc8 <f_mount+0x88>)
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008d78:	69b8      	ldr	r0, [r7, #24]
 8008d7a:	f7fe fccd 	bl	8007718 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2200      	movs	r2, #0
 8008d82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	490d      	ldr	r1, [pc, #52]	; (8008dc8 <f_mount+0x88>)
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <f_mount+0x66>
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d001      	beq.n	8008daa <f_mount+0x6a>
 8008da6:	2300      	movs	r3, #0
 8008da8:	e00a      	b.n	8008dc0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008daa:	f107 010c 	add.w	r1, r7, #12
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	2200      	movs	r2, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff fd09 	bl	80087cc <find_volume>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3720      	adds	r7, #32
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20000670 	.word	0x20000670

08008dcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b098      	sub	sp, #96	; 0x60
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <f_open+0x18>
 8008de0:	2309      	movs	r3, #9
 8008de2:	e1bb      	b.n	800915c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008dec:	79fa      	ldrb	r2, [r7, #7]
 8008dee:	f107 0110 	add.w	r1, r7, #16
 8008df2:	f107 0308 	add.w	r3, r7, #8
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fce8 	bl	80087cc <find_volume>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008e02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f040 819f 	bne.w	800914a <f_open+0x37e>
		dj.obj.fs = fs;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	f107 0314 	add.w	r3, r7, #20
 8008e16:	4611      	mov	r1, r2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff fbc7 	bl	80085ac <follow_path>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008e24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d11a      	bne.n	8008e62 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008e2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e30:	b25b      	sxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	da03      	bge.n	8008e3e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008e36:	2306      	movs	r3, #6
 8008e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e3c:	e011      	b.n	8008e62 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	bf14      	ite	ne
 8008e48:	2301      	movne	r3, #1
 8008e4a:	2300      	moveq	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f107 0314 	add.w	r3, r7, #20
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fb16 	bl	8007488 <chk_lock>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	f003 031c 	and.w	r3, r3, #28
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d07f      	beq.n	8008f6c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d017      	beq.n	8008ea4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008e74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d10e      	bne.n	8008e9a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008e7c:	f7fe fb60 	bl	8007540 <enq_lock>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d006      	beq.n	8008e94 <f_open+0xc8>
 8008e86:	f107 0314 	add.w	r3, r7, #20
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff fac8 	bl	8008420 <dir_register>
 8008e90:	4603      	mov	r3, r0
 8008e92:	e000      	b.n	8008e96 <f_open+0xca>
 8008e94:	2312      	movs	r3, #18
 8008e96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	f043 0308 	orr.w	r3, r3, #8
 8008ea0:	71fb      	strb	r3, [r7, #7]
 8008ea2:	e010      	b.n	8008ec6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008ea4:	7ebb      	ldrb	r3, [r7, #26]
 8008ea6:	f003 0311 	and.w	r3, r3, #17
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <f_open+0xea>
					res = FR_DENIED;
 8008eae:	2307      	movs	r3, #7
 8008eb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008eb4:	e007      	b.n	8008ec6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <f_open+0xfa>
 8008ec0:	2308      	movs	r3, #8
 8008ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d168      	bne.n	8008fa0 <f_open+0x1d4>
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	f003 0308 	and.w	r3, r3, #8
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d063      	beq.n	8008fa0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008ed8:	f7fd fbfa 	bl	80066d0 <get_fattime>
 8008edc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee0:	330e      	adds	r3, #14
 8008ee2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe fa25 	bl	8007334 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eec:	3316      	adds	r3, #22
 8008eee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fe fa1f 	bl	8007334 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef8:	330b      	adds	r3, #11
 8008efa:	2220      	movs	r2, #32
 8008efc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f02:	4611      	mov	r1, r2
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7ff f9f7 	bl	80082f8 <ld_clust>
 8008f0a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f10:	2200      	movs	r2, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7ff fa0f 	bl	8008336 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1a:	331c      	adds	r3, #28
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fa08 	bl	8007334 <st_dword>
					fs->wflag = 1;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	2201      	movs	r2, #1
 8008f28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d037      	beq.n	8008fa0 <f_open+0x1d4>
						dw = fs->winsect;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f34:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008f36:	f107 0314 	add.w	r3, r7, #20
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe feff 	bl	8007d42 <remove_chain>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008f4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d126      	bne.n	8008fa0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe fc46 	bl	80077e8 <move_window>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f66:	3a01      	subs	r2, #1
 8008f68:	611a      	str	r2, [r3, #16]
 8008f6a:	e019      	b.n	8008fa0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d115      	bne.n	8008fa0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008f74:	7ebb      	ldrb	r3, [r7, #26]
 8008f76:	f003 0310 	and.w	r3, r3, #16
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008f7e:	2304      	movs	r3, #4
 8008f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f84:	e00c      	b.n	8008fa0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d007      	beq.n	8008fa0 <f_open+0x1d4>
 8008f90:	7ebb      	ldrb	r3, [r7, #26]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <f_open+0x1d4>
						res = FR_DENIED;
 8008f9a:	2307      	movs	r3, #7
 8008f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d128      	bne.n	8008ffa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008fa8:	79fb      	ldrb	r3, [r7, #7]
 8008faa:	f003 0308 	and.w	r3, r3, #8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	f023 0301 	bic.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bf14      	ite	ne
 8008fd2:	2301      	movne	r3, #1
 8008fd4:	2300      	moveq	r3, #0
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	f107 0314 	add.w	r3, r7, #20
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe facf 	bl	8007584 <inc_lock>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d102      	bne.n	8008ffa <f_open+0x22e>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f040 80a3 	bne.w	800914a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009008:	4611      	mov	r1, r2
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff f974 	bl	80082f8 <ld_clust>
 8009010:	4602      	mov	r2, r0
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009018:	331c      	adds	r3, #28
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe f94c 	bl	80072b8 <ld_dword>
 8009020:	4602      	mov	r2, r0
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	88da      	ldrh	r2, [r3, #6]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	79fa      	ldrb	r2, [r7, #7]
 800903e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3330      	adds	r3, #48	; 0x30
 8009056:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800905a:	2100      	movs	r1, #0
 800905c:	4618      	mov	r0, r3
 800905e:	f7fe f9b6 	bl	80073ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d06e      	beq.n	800914a <f_open+0x37e>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d06a      	beq.n	800914a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	68da      	ldr	r2, [r3, #12]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	895b      	ldrh	r3, [r3, #10]
 8009080:	461a      	mov	r2, r3
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	899b      	ldrh	r3, [r3, #12]
 8009086:	fb03 f302 	mul.w	r3, r3, r2
 800908a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	657b      	str	r3, [r7, #84]	; 0x54
 8009098:	e016      	b.n	80090c8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fc5f 	bl	8007962 <get_fat>
 80090a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80090a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d802      	bhi.n	80090b2 <f_open+0x2e6>
 80090ac:	2302      	movs	r3, #2
 80090ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80090b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b8:	d102      	bne.n	80090c0 <f_open+0x2f4>
 80090ba:	2301      	movs	r3, #1
 80090bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80090c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	657b      	str	r3, [r7, #84]	; 0x54
 80090c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <f_open+0x30c>
 80090d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d8e0      	bhi.n	800909a <f_open+0x2ce>
				}
				fp->clust = clst;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80090de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d131      	bne.n	800914a <f_open+0x37e>
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	899b      	ldrh	r3, [r3, #12]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80090f2:	fb02 f201 	mul.w	r2, r2, r1
 80090f6:	1a9b      	subs	r3, r3, r2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d026      	beq.n	800914a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fc0f 	bl	8007924 <clust2sect>
 8009106:	6478      	str	r0, [r7, #68]	; 0x44
 8009108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910a:	2b00      	cmp	r3, #0
 800910c:	d103      	bne.n	8009116 <f_open+0x34a>
						res = FR_INT_ERR;
 800910e:	2302      	movs	r3, #2
 8009110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009114:	e019      	b.n	800914a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	899b      	ldrh	r3, [r3, #12]
 800911a:	461a      	mov	r2, r3
 800911c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800911e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009124:	441a      	add	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	7858      	ldrb	r0, [r3, #1]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6a1a      	ldr	r2, [r3, #32]
 8009138:	2301      	movs	r3, #1
 800913a:	f7fe f847 	bl	80071cc <disk_read>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <f_open+0x37e>
 8009144:	2301      	movs	r3, #1
 8009146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800914a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <f_open+0x38c>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800915c:	4618      	mov	r0, r3
 800915e:	3760      	adds	r7, #96	; 0x60
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08e      	sub	sp, #56	; 0x38
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f107 0214 	add.w	r2, r7, #20
 8009182:	4611      	mov	r1, r2
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff fda5 	bl	8008cd4 <validate>
 800918a:	4603      	mov	r3, r0
 800918c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009194:	2b00      	cmp	r3, #0
 8009196:	d107      	bne.n	80091a8 <f_read+0x44>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	7d5b      	ldrb	r3, [r3, #21]
 800919c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <f_read+0x4a>
 80091a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091ac:	e135      	b.n	800941a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	7d1b      	ldrb	r3, [r3, #20]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <f_read+0x5a>
 80091ba:	2307      	movs	r3, #7
 80091bc:	e12d      	b.n	800941a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	68da      	ldr	r2, [r3, #12]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	f240 811e 	bls.w	8009410 <f_read+0x2ac>
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80091d8:	e11a      	b.n	8009410 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	8992      	ldrh	r2, [r2, #12]
 80091e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80091e6:	fb02 f201 	mul.w	r2, r2, r1
 80091ea:	1a9b      	subs	r3, r3, r2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f040 80d5 	bne.w	800939c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	8992      	ldrh	r2, [r2, #12]
 80091fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	8952      	ldrh	r2, [r2, #10]
 8009202:	3a01      	subs	r2, #1
 8009204:	4013      	ands	r3, r2
 8009206:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d12f      	bne.n	800926e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d103      	bne.n	800921e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	633b      	str	r3, [r7, #48]	; 0x30
 800921c:	e013      	b.n	8009246 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d007      	beq.n	8009236 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	4619      	mov	r1, r3
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f7fe fe85 	bl	8007f3c <clmt_clust>
 8009232:	6338      	str	r0, [r7, #48]	; 0x30
 8009234:	e007      	b.n	8009246 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	4619      	mov	r1, r3
 800923e:	4610      	mov	r0, r2
 8009240:	f7fe fb8f 	bl	8007962 <get_fat>
 8009244:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	2b01      	cmp	r3, #1
 800924a:	d804      	bhi.n	8009256 <f_read+0xf2>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2202      	movs	r2, #2
 8009250:	755a      	strb	r2, [r3, #21]
 8009252:	2302      	movs	r3, #2
 8009254:	e0e1      	b.n	800941a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800925c:	d104      	bne.n	8009268 <f_read+0x104>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	755a      	strb	r2, [r3, #21]
 8009264:	2301      	movs	r3, #1
 8009266:	e0d8      	b.n	800941a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7fe fb54 	bl	8007924 <clust2sect>
 800927c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d104      	bne.n	800928e <f_read+0x12a>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2202      	movs	r2, #2
 8009288:	755a      	strb	r2, [r3, #21]
 800928a:	2302      	movs	r3, #2
 800928c:	e0c5      	b.n	800941a <f_read+0x2b6>
			sect += csect;
 800928e:	69ba      	ldr	r2, [r7, #24]
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	4413      	add	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	899b      	ldrh	r3, [r3, #12]
 800929a:	461a      	mov	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	fbb3 f3f2 	udiv	r3, r3, r2
 80092a2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80092a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d041      	beq.n	800932e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	4413      	add	r3, r2
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	8952      	ldrh	r2, [r2, #10]
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d905      	bls.n	80092c4 <f_read+0x160>
					cc = fs->csize - csect;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	895b      	ldrh	r3, [r3, #10]
 80092bc:	461a      	mov	r2, r3
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	7858      	ldrb	r0, [r3, #1]
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092ce:	f7fd ff7d 	bl	80071cc <disk_read>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d004      	beq.n	80092e2 <f_read+0x17e>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2201      	movs	r2, #1
 80092dc:	755a      	strb	r2, [r3, #21]
 80092de:	2301      	movs	r3, #1
 80092e0:	e09b      	b.n	800941a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	7d1b      	ldrb	r3, [r3, #20]
 80092e6:	b25b      	sxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da18      	bge.n	800931e <f_read+0x1ba>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6a1a      	ldr	r2, [r3, #32]
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d911      	bls.n	800931e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a1a      	ldr	r2, [r3, #32]
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	8992      	ldrh	r2, [r2, #12]
 8009306:	fb02 f303 	mul.w	r3, r2, r3
 800930a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930c:	18d0      	adds	r0, r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	899b      	ldrh	r3, [r3, #12]
 8009318:	461a      	mov	r2, r3
 800931a:	f7fe f837 	bl	800738c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	899b      	ldrh	r3, [r3, #12]
 8009322:	461a      	mov	r2, r3
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	fb02 f303 	mul.w	r3, r2, r3
 800932a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800932c:	e05c      	b.n	80093e8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	429a      	cmp	r2, r3
 8009336:	d02e      	beq.n	8009396 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	7d1b      	ldrb	r3, [r3, #20]
 800933c:	b25b      	sxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	da18      	bge.n	8009374 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	7858      	ldrb	r0, [r3, #1]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	2301      	movs	r3, #1
 8009352:	f7fd ff5b 	bl	800720c <disk_write>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d004      	beq.n	8009366 <f_read+0x202>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2201      	movs	r2, #1
 8009360:	755a      	strb	r2, [r3, #21]
 8009362:	2301      	movs	r3, #1
 8009364:	e059      	b.n	800941a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	7d1b      	ldrb	r3, [r3, #20]
 800936a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800936e:	b2da      	uxtb	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	7858      	ldrb	r0, [r3, #1]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800937e:	2301      	movs	r3, #1
 8009380:	69ba      	ldr	r2, [r7, #24]
 8009382:	f7fd ff23 	bl	80071cc <disk_read>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <f_read+0x232>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	755a      	strb	r2, [r3, #21]
 8009392:	2301      	movs	r3, #1
 8009394:	e041      	b.n	800941a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	69ba      	ldr	r2, [r7, #24]
 800939a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	899b      	ldrh	r3, [r3, #12]
 80093a0:	4618      	mov	r0, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	8992      	ldrh	r2, [r2, #12]
 80093aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80093ae:	fb02 f201 	mul.w	r2, r2, r1
 80093b2:	1a9b      	subs	r3, r3, r2
 80093b4:	1ac3      	subs	r3, r0, r3
 80093b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80093b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d901      	bls.n	80093c4 <f_read+0x260>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	8992      	ldrh	r2, [r2, #12]
 80093d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80093d6:	fb02 f200 	mul.w	r2, r2, r0
 80093da:	1a9b      	subs	r3, r3, r2
 80093dc:	440b      	add	r3, r1
 80093de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093e0:	4619      	mov	r1, r3
 80093e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093e4:	f7fd ffd2 	bl	800738c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80093e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	4413      	add	r3, r2
 80093ee:	627b      	str	r3, [r7, #36]	; 0x24
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	699a      	ldr	r2, [r3, #24]
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	441a      	add	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	619a      	str	r2, [r3, #24]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009402:	441a      	add	r2, r3
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	f47f aee1 	bne.w	80091da <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3738      	adds	r7, #56	; 0x38
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f107 0208 	add.w	r2, r7, #8
 8009430:	4611      	mov	r1, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff fc4e 	bl	8008cd4 <validate>
 8009438:	4603      	mov	r3, r0
 800943a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d168      	bne.n	8009514 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7d1b      	ldrb	r3, [r3, #20]
 8009446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944a:	2b00      	cmp	r3, #0
 800944c:	d062      	beq.n	8009514 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	7d1b      	ldrb	r3, [r3, #20]
 8009452:	b25b      	sxtb	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	da15      	bge.n	8009484 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	7858      	ldrb	r0, [r3, #1]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a1a      	ldr	r2, [r3, #32]
 8009466:	2301      	movs	r3, #1
 8009468:	f7fd fed0 	bl	800720c <disk_write>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <f_sync+0x54>
 8009472:	2301      	movs	r3, #1
 8009474:	e04f      	b.n	8009516 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	7d1b      	ldrb	r3, [r3, #20]
 800947a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947e:	b2da      	uxtb	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009484:	f7fd f924 	bl	80066d0 <get_fattime>
 8009488:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	4619      	mov	r1, r3
 8009492:	4610      	mov	r0, r2
 8009494:	f7fe f9a8 	bl	80077e8 <move_window>
 8009498:	4603      	mov	r3, r0
 800949a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d138      	bne.n	8009514 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	330b      	adds	r3, #11
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	330b      	adds	r3, #11
 80094b2:	f042 0220 	orr.w	r2, r2, #32
 80094b6:	b2d2      	uxtb	r2, r2
 80094b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6818      	ldr	r0, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	461a      	mov	r2, r3
 80094c4:	68f9      	ldr	r1, [r7, #12]
 80094c6:	f7fe ff36 	bl	8008336 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f103 021c 	add.w	r2, r3, #28
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f7fd ff2c 	bl	8007334 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3316      	adds	r3, #22
 80094e0:	6939      	ldr	r1, [r7, #16]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fd ff26 	bl	8007334 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3312      	adds	r3, #18
 80094ec:	2100      	movs	r1, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fd ff05 	bl	80072fe <st_word>
					fs->wflag = 1;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2201      	movs	r2, #1
 80094f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fe f9a1 	bl	8007844 <sync_fs>
 8009502:	4603      	mov	r3, r0
 8009504:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	7d1b      	ldrb	r3, [r3, #20]
 800950a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800950e:	b2da      	uxtb	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009514:	7dfb      	ldrb	r3, [r7, #23]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7ff ff7b 	bl	8009422 <f_sync>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d118      	bne.n	8009568 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f107 0208 	add.w	r2, r7, #8
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff fbc8 	bl	8008cd4 <validate>
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10c      	bne.n	8009568 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe f8a4 	bl	80076a0 <dec_lock>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d102      	bne.n	8009568 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009582:	2301      	movs	r3, #1
 8009584:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800958a:	4b1f      	ldr	r3, [pc, #124]	; (8009608 <FATFS_LinkDriverEx+0x94>)
 800958c:	7a5b      	ldrb	r3, [r3, #9]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d131      	bne.n	80095f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009594:	4b1c      	ldr	r3, [pc, #112]	; (8009608 <FATFS_LinkDriverEx+0x94>)
 8009596:	7a5b      	ldrb	r3, [r3, #9]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	4b1a      	ldr	r3, [pc, #104]	; (8009608 <FATFS_LinkDriverEx+0x94>)
 800959e:	2100      	movs	r1, #0
 80095a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80095a2:	4b19      	ldr	r3, [pc, #100]	; (8009608 <FATFS_LinkDriverEx+0x94>)
 80095a4:	7a5b      	ldrb	r3, [r3, #9]
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	4a17      	ldr	r2, [pc, #92]	; (8009608 <FATFS_LinkDriverEx+0x94>)
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80095b2:	4b15      	ldr	r3, [pc, #84]	; (8009608 <FATFS_LinkDriverEx+0x94>)
 80095b4:	7a5b      	ldrb	r3, [r3, #9]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	461a      	mov	r2, r3
 80095ba:	4b13      	ldr	r3, [pc, #76]	; (8009608 <FATFS_LinkDriverEx+0x94>)
 80095bc:	4413      	add	r3, r2
 80095be:	79fa      	ldrb	r2, [r7, #7]
 80095c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80095c2:	4b11      	ldr	r3, [pc, #68]	; (8009608 <FATFS_LinkDriverEx+0x94>)
 80095c4:	7a5b      	ldrb	r3, [r3, #9]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	b2d1      	uxtb	r1, r2
 80095cc:	4a0e      	ldr	r2, [pc, #56]	; (8009608 <FATFS_LinkDriverEx+0x94>)
 80095ce:	7251      	strb	r1, [r2, #9]
 80095d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80095d2:	7dbb      	ldrb	r3, [r7, #22]
 80095d4:	3330      	adds	r3, #48	; 0x30
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	3301      	adds	r3, #1
 80095e0:	223a      	movs	r2, #58	; 0x3a
 80095e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	3302      	adds	r3, #2
 80095e8:	222f      	movs	r2, #47	; 0x2f
 80095ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	3303      	adds	r3, #3
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	20000698 	.word	0x20000698

0800960c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009616:	2200      	movs	r2, #0
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff ffaa 	bl	8009574 <FATFS_LinkDriverEx>
 8009620:	4603      	mov	r3, r0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <__errno>:
 800962c:	4b01      	ldr	r3, [pc, #4]	; (8009634 <__errno+0x8>)
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	20000028 	.word	0x20000028

08009638 <__libc_init_array>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	4d0d      	ldr	r5, [pc, #52]	; (8009670 <__libc_init_array+0x38>)
 800963c:	4c0d      	ldr	r4, [pc, #52]	; (8009674 <__libc_init_array+0x3c>)
 800963e:	1b64      	subs	r4, r4, r5
 8009640:	10a4      	asrs	r4, r4, #2
 8009642:	2600      	movs	r6, #0
 8009644:	42a6      	cmp	r6, r4
 8009646:	d109      	bne.n	800965c <__libc_init_array+0x24>
 8009648:	4d0b      	ldr	r5, [pc, #44]	; (8009678 <__libc_init_array+0x40>)
 800964a:	4c0c      	ldr	r4, [pc, #48]	; (800967c <__libc_init_array+0x44>)
 800964c:	f000 ffec 	bl	800a628 <_init>
 8009650:	1b64      	subs	r4, r4, r5
 8009652:	10a4      	asrs	r4, r4, #2
 8009654:	2600      	movs	r6, #0
 8009656:	42a6      	cmp	r6, r4
 8009658:	d105      	bne.n	8009666 <__libc_init_array+0x2e>
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009660:	4798      	blx	r3
 8009662:	3601      	adds	r6, #1
 8009664:	e7ee      	b.n	8009644 <__libc_init_array+0xc>
 8009666:	f855 3b04 	ldr.w	r3, [r5], #4
 800966a:	4798      	blx	r3
 800966c:	3601      	adds	r6, #1
 800966e:	e7f2      	b.n	8009656 <__libc_init_array+0x1e>
 8009670:	0800a8e8 	.word	0x0800a8e8
 8009674:	0800a8e8 	.word	0x0800a8e8
 8009678:	0800a8e8 	.word	0x0800a8e8
 800967c:	0800a8ec 	.word	0x0800a8ec

08009680 <memset>:
 8009680:	4402      	add	r2, r0
 8009682:	4603      	mov	r3, r0
 8009684:	4293      	cmp	r3, r2
 8009686:	d100      	bne.n	800968a <memset+0xa>
 8009688:	4770      	bx	lr
 800968a:	f803 1b01 	strb.w	r1, [r3], #1
 800968e:	e7f9      	b.n	8009684 <memset+0x4>

08009690 <iprintf>:
 8009690:	b40f      	push	{r0, r1, r2, r3}
 8009692:	4b0a      	ldr	r3, [pc, #40]	; (80096bc <iprintf+0x2c>)
 8009694:	b513      	push	{r0, r1, r4, lr}
 8009696:	681c      	ldr	r4, [r3, #0]
 8009698:	b124      	cbz	r4, 80096a4 <iprintf+0x14>
 800969a:	69a3      	ldr	r3, [r4, #24]
 800969c:	b913      	cbnz	r3, 80096a4 <iprintf+0x14>
 800969e:	4620      	mov	r0, r4
 80096a0:	f000 fa5e 	bl	8009b60 <__sinit>
 80096a4:	ab05      	add	r3, sp, #20
 80096a6:	9a04      	ldr	r2, [sp, #16]
 80096a8:	68a1      	ldr	r1, [r4, #8]
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fc2f 	bl	8009f10 <_vfiprintf_r>
 80096b2:	b002      	add	sp, #8
 80096b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b8:	b004      	add	sp, #16
 80096ba:	4770      	bx	lr
 80096bc:	20000028 	.word	0x20000028

080096c0 <_puts_r>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	460e      	mov	r6, r1
 80096c4:	4605      	mov	r5, r0
 80096c6:	b118      	cbz	r0, 80096d0 <_puts_r+0x10>
 80096c8:	6983      	ldr	r3, [r0, #24]
 80096ca:	b90b      	cbnz	r3, 80096d0 <_puts_r+0x10>
 80096cc:	f000 fa48 	bl	8009b60 <__sinit>
 80096d0:	69ab      	ldr	r3, [r5, #24]
 80096d2:	68ac      	ldr	r4, [r5, #8]
 80096d4:	b913      	cbnz	r3, 80096dc <_puts_r+0x1c>
 80096d6:	4628      	mov	r0, r5
 80096d8:	f000 fa42 	bl	8009b60 <__sinit>
 80096dc:	4b2c      	ldr	r3, [pc, #176]	; (8009790 <_puts_r+0xd0>)
 80096de:	429c      	cmp	r4, r3
 80096e0:	d120      	bne.n	8009724 <_puts_r+0x64>
 80096e2:	686c      	ldr	r4, [r5, #4]
 80096e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e6:	07db      	lsls	r3, r3, #31
 80096e8:	d405      	bmi.n	80096f6 <_puts_r+0x36>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	0598      	lsls	r0, r3, #22
 80096ee:	d402      	bmi.n	80096f6 <_puts_r+0x36>
 80096f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f2:	f000 fad3 	bl	8009c9c <__retarget_lock_acquire_recursive>
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	0719      	lsls	r1, r3, #28
 80096fa:	d51d      	bpl.n	8009738 <_puts_r+0x78>
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	b1db      	cbz	r3, 8009738 <_puts_r+0x78>
 8009700:	3e01      	subs	r6, #1
 8009702:	68a3      	ldr	r3, [r4, #8]
 8009704:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009708:	3b01      	subs	r3, #1
 800970a:	60a3      	str	r3, [r4, #8]
 800970c:	bb39      	cbnz	r1, 800975e <_puts_r+0x9e>
 800970e:	2b00      	cmp	r3, #0
 8009710:	da38      	bge.n	8009784 <_puts_r+0xc4>
 8009712:	4622      	mov	r2, r4
 8009714:	210a      	movs	r1, #10
 8009716:	4628      	mov	r0, r5
 8009718:	f000 f848 	bl	80097ac <__swbuf_r>
 800971c:	3001      	adds	r0, #1
 800971e:	d011      	beq.n	8009744 <_puts_r+0x84>
 8009720:	250a      	movs	r5, #10
 8009722:	e011      	b.n	8009748 <_puts_r+0x88>
 8009724:	4b1b      	ldr	r3, [pc, #108]	; (8009794 <_puts_r+0xd4>)
 8009726:	429c      	cmp	r4, r3
 8009728:	d101      	bne.n	800972e <_puts_r+0x6e>
 800972a:	68ac      	ldr	r4, [r5, #8]
 800972c:	e7da      	b.n	80096e4 <_puts_r+0x24>
 800972e:	4b1a      	ldr	r3, [pc, #104]	; (8009798 <_puts_r+0xd8>)
 8009730:	429c      	cmp	r4, r3
 8009732:	bf08      	it	eq
 8009734:	68ec      	ldreq	r4, [r5, #12]
 8009736:	e7d5      	b.n	80096e4 <_puts_r+0x24>
 8009738:	4621      	mov	r1, r4
 800973a:	4628      	mov	r0, r5
 800973c:	f000 f888 	bl	8009850 <__swsetup_r>
 8009740:	2800      	cmp	r0, #0
 8009742:	d0dd      	beq.n	8009700 <_puts_r+0x40>
 8009744:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800974a:	07da      	lsls	r2, r3, #31
 800974c:	d405      	bmi.n	800975a <_puts_r+0x9a>
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	059b      	lsls	r3, r3, #22
 8009752:	d402      	bmi.n	800975a <_puts_r+0x9a>
 8009754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009756:	f000 faa2 	bl	8009c9e <__retarget_lock_release_recursive>
 800975a:	4628      	mov	r0, r5
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	2b00      	cmp	r3, #0
 8009760:	da04      	bge.n	800976c <_puts_r+0xac>
 8009762:	69a2      	ldr	r2, [r4, #24]
 8009764:	429a      	cmp	r2, r3
 8009766:	dc06      	bgt.n	8009776 <_puts_r+0xb6>
 8009768:	290a      	cmp	r1, #10
 800976a:	d004      	beq.n	8009776 <_puts_r+0xb6>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	7019      	strb	r1, [r3, #0]
 8009774:	e7c5      	b.n	8009702 <_puts_r+0x42>
 8009776:	4622      	mov	r2, r4
 8009778:	4628      	mov	r0, r5
 800977a:	f000 f817 	bl	80097ac <__swbuf_r>
 800977e:	3001      	adds	r0, #1
 8009780:	d1bf      	bne.n	8009702 <_puts_r+0x42>
 8009782:	e7df      	b.n	8009744 <_puts_r+0x84>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	250a      	movs	r5, #10
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	6022      	str	r2, [r4, #0]
 800978c:	701d      	strb	r5, [r3, #0]
 800978e:	e7db      	b.n	8009748 <_puts_r+0x88>
 8009790:	0800a86c 	.word	0x0800a86c
 8009794:	0800a88c 	.word	0x0800a88c
 8009798:	0800a84c 	.word	0x0800a84c

0800979c <puts>:
 800979c:	4b02      	ldr	r3, [pc, #8]	; (80097a8 <puts+0xc>)
 800979e:	4601      	mov	r1, r0
 80097a0:	6818      	ldr	r0, [r3, #0]
 80097a2:	f7ff bf8d 	b.w	80096c0 <_puts_r>
 80097a6:	bf00      	nop
 80097a8:	20000028 	.word	0x20000028

080097ac <__swbuf_r>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	460e      	mov	r6, r1
 80097b0:	4614      	mov	r4, r2
 80097b2:	4605      	mov	r5, r0
 80097b4:	b118      	cbz	r0, 80097be <__swbuf_r+0x12>
 80097b6:	6983      	ldr	r3, [r0, #24]
 80097b8:	b90b      	cbnz	r3, 80097be <__swbuf_r+0x12>
 80097ba:	f000 f9d1 	bl	8009b60 <__sinit>
 80097be:	4b21      	ldr	r3, [pc, #132]	; (8009844 <__swbuf_r+0x98>)
 80097c0:	429c      	cmp	r4, r3
 80097c2:	d12b      	bne.n	800981c <__swbuf_r+0x70>
 80097c4:	686c      	ldr	r4, [r5, #4]
 80097c6:	69a3      	ldr	r3, [r4, #24]
 80097c8:	60a3      	str	r3, [r4, #8]
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	071a      	lsls	r2, r3, #28
 80097ce:	d52f      	bpl.n	8009830 <__swbuf_r+0x84>
 80097d0:	6923      	ldr	r3, [r4, #16]
 80097d2:	b36b      	cbz	r3, 8009830 <__swbuf_r+0x84>
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	6820      	ldr	r0, [r4, #0]
 80097d8:	1ac0      	subs	r0, r0, r3
 80097da:	6963      	ldr	r3, [r4, #20]
 80097dc:	b2f6      	uxtb	r6, r6
 80097de:	4283      	cmp	r3, r0
 80097e0:	4637      	mov	r7, r6
 80097e2:	dc04      	bgt.n	80097ee <__swbuf_r+0x42>
 80097e4:	4621      	mov	r1, r4
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 f926 	bl	8009a38 <_fflush_r>
 80097ec:	bb30      	cbnz	r0, 800983c <__swbuf_r+0x90>
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	60a3      	str	r3, [r4, #8]
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	1c5a      	adds	r2, r3, #1
 80097f8:	6022      	str	r2, [r4, #0]
 80097fa:	701e      	strb	r6, [r3, #0]
 80097fc:	6963      	ldr	r3, [r4, #20]
 80097fe:	3001      	adds	r0, #1
 8009800:	4283      	cmp	r3, r0
 8009802:	d004      	beq.n	800980e <__swbuf_r+0x62>
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	07db      	lsls	r3, r3, #31
 8009808:	d506      	bpl.n	8009818 <__swbuf_r+0x6c>
 800980a:	2e0a      	cmp	r6, #10
 800980c:	d104      	bne.n	8009818 <__swbuf_r+0x6c>
 800980e:	4621      	mov	r1, r4
 8009810:	4628      	mov	r0, r5
 8009812:	f000 f911 	bl	8009a38 <_fflush_r>
 8009816:	b988      	cbnz	r0, 800983c <__swbuf_r+0x90>
 8009818:	4638      	mov	r0, r7
 800981a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800981c:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <__swbuf_r+0x9c>)
 800981e:	429c      	cmp	r4, r3
 8009820:	d101      	bne.n	8009826 <__swbuf_r+0x7a>
 8009822:	68ac      	ldr	r4, [r5, #8]
 8009824:	e7cf      	b.n	80097c6 <__swbuf_r+0x1a>
 8009826:	4b09      	ldr	r3, [pc, #36]	; (800984c <__swbuf_r+0xa0>)
 8009828:	429c      	cmp	r4, r3
 800982a:	bf08      	it	eq
 800982c:	68ec      	ldreq	r4, [r5, #12]
 800982e:	e7ca      	b.n	80097c6 <__swbuf_r+0x1a>
 8009830:	4621      	mov	r1, r4
 8009832:	4628      	mov	r0, r5
 8009834:	f000 f80c 	bl	8009850 <__swsetup_r>
 8009838:	2800      	cmp	r0, #0
 800983a:	d0cb      	beq.n	80097d4 <__swbuf_r+0x28>
 800983c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009840:	e7ea      	b.n	8009818 <__swbuf_r+0x6c>
 8009842:	bf00      	nop
 8009844:	0800a86c 	.word	0x0800a86c
 8009848:	0800a88c 	.word	0x0800a88c
 800984c:	0800a84c 	.word	0x0800a84c

08009850 <__swsetup_r>:
 8009850:	4b32      	ldr	r3, [pc, #200]	; (800991c <__swsetup_r+0xcc>)
 8009852:	b570      	push	{r4, r5, r6, lr}
 8009854:	681d      	ldr	r5, [r3, #0]
 8009856:	4606      	mov	r6, r0
 8009858:	460c      	mov	r4, r1
 800985a:	b125      	cbz	r5, 8009866 <__swsetup_r+0x16>
 800985c:	69ab      	ldr	r3, [r5, #24]
 800985e:	b913      	cbnz	r3, 8009866 <__swsetup_r+0x16>
 8009860:	4628      	mov	r0, r5
 8009862:	f000 f97d 	bl	8009b60 <__sinit>
 8009866:	4b2e      	ldr	r3, [pc, #184]	; (8009920 <__swsetup_r+0xd0>)
 8009868:	429c      	cmp	r4, r3
 800986a:	d10f      	bne.n	800988c <__swsetup_r+0x3c>
 800986c:	686c      	ldr	r4, [r5, #4]
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009874:	0719      	lsls	r1, r3, #28
 8009876:	d42c      	bmi.n	80098d2 <__swsetup_r+0x82>
 8009878:	06dd      	lsls	r5, r3, #27
 800987a:	d411      	bmi.n	80098a0 <__swsetup_r+0x50>
 800987c:	2309      	movs	r3, #9
 800987e:	6033      	str	r3, [r6, #0]
 8009880:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800988a:	e03e      	b.n	800990a <__swsetup_r+0xba>
 800988c:	4b25      	ldr	r3, [pc, #148]	; (8009924 <__swsetup_r+0xd4>)
 800988e:	429c      	cmp	r4, r3
 8009890:	d101      	bne.n	8009896 <__swsetup_r+0x46>
 8009892:	68ac      	ldr	r4, [r5, #8]
 8009894:	e7eb      	b.n	800986e <__swsetup_r+0x1e>
 8009896:	4b24      	ldr	r3, [pc, #144]	; (8009928 <__swsetup_r+0xd8>)
 8009898:	429c      	cmp	r4, r3
 800989a:	bf08      	it	eq
 800989c:	68ec      	ldreq	r4, [r5, #12]
 800989e:	e7e6      	b.n	800986e <__swsetup_r+0x1e>
 80098a0:	0758      	lsls	r0, r3, #29
 80098a2:	d512      	bpl.n	80098ca <__swsetup_r+0x7a>
 80098a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098a6:	b141      	cbz	r1, 80098ba <__swsetup_r+0x6a>
 80098a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098ac:	4299      	cmp	r1, r3
 80098ae:	d002      	beq.n	80098b6 <__swsetup_r+0x66>
 80098b0:	4630      	mov	r0, r6
 80098b2:	f000 fa59 	bl	8009d68 <_free_r>
 80098b6:	2300      	movs	r3, #0
 80098b8:	6363      	str	r3, [r4, #52]	; 0x34
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098c0:	81a3      	strh	r3, [r4, #12]
 80098c2:	2300      	movs	r3, #0
 80098c4:	6063      	str	r3, [r4, #4]
 80098c6:	6923      	ldr	r3, [r4, #16]
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	f043 0308 	orr.w	r3, r3, #8
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	6923      	ldr	r3, [r4, #16]
 80098d4:	b94b      	cbnz	r3, 80098ea <__swsetup_r+0x9a>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098e0:	d003      	beq.n	80098ea <__swsetup_r+0x9a>
 80098e2:	4621      	mov	r1, r4
 80098e4:	4630      	mov	r0, r6
 80098e6:	f000 f9ff 	bl	8009ce8 <__smakebuf_r>
 80098ea:	89a0      	ldrh	r0, [r4, #12]
 80098ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098f0:	f010 0301 	ands.w	r3, r0, #1
 80098f4:	d00a      	beq.n	800990c <__swsetup_r+0xbc>
 80098f6:	2300      	movs	r3, #0
 80098f8:	60a3      	str	r3, [r4, #8]
 80098fa:	6963      	ldr	r3, [r4, #20]
 80098fc:	425b      	negs	r3, r3
 80098fe:	61a3      	str	r3, [r4, #24]
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	b943      	cbnz	r3, 8009916 <__swsetup_r+0xc6>
 8009904:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009908:	d1ba      	bne.n	8009880 <__swsetup_r+0x30>
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	0781      	lsls	r1, r0, #30
 800990e:	bf58      	it	pl
 8009910:	6963      	ldrpl	r3, [r4, #20]
 8009912:	60a3      	str	r3, [r4, #8]
 8009914:	e7f4      	b.n	8009900 <__swsetup_r+0xb0>
 8009916:	2000      	movs	r0, #0
 8009918:	e7f7      	b.n	800990a <__swsetup_r+0xba>
 800991a:	bf00      	nop
 800991c:	20000028 	.word	0x20000028
 8009920:	0800a86c 	.word	0x0800a86c
 8009924:	0800a88c 	.word	0x0800a88c
 8009928:	0800a84c 	.word	0x0800a84c

0800992c <__sflush_r>:
 800992c:	898a      	ldrh	r2, [r1, #12]
 800992e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009932:	4605      	mov	r5, r0
 8009934:	0710      	lsls	r0, r2, #28
 8009936:	460c      	mov	r4, r1
 8009938:	d458      	bmi.n	80099ec <__sflush_r+0xc0>
 800993a:	684b      	ldr	r3, [r1, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	dc05      	bgt.n	800994c <__sflush_r+0x20>
 8009940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009942:	2b00      	cmp	r3, #0
 8009944:	dc02      	bgt.n	800994c <__sflush_r+0x20>
 8009946:	2000      	movs	r0, #0
 8009948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800994c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800994e:	2e00      	cmp	r6, #0
 8009950:	d0f9      	beq.n	8009946 <__sflush_r+0x1a>
 8009952:	2300      	movs	r3, #0
 8009954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009958:	682f      	ldr	r7, [r5, #0]
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	d032      	beq.n	80099c4 <__sflush_r+0x98>
 800995e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	075a      	lsls	r2, r3, #29
 8009964:	d505      	bpl.n	8009972 <__sflush_r+0x46>
 8009966:	6863      	ldr	r3, [r4, #4]
 8009968:	1ac0      	subs	r0, r0, r3
 800996a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800996c:	b10b      	cbz	r3, 8009972 <__sflush_r+0x46>
 800996e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009970:	1ac0      	subs	r0, r0, r3
 8009972:	2300      	movs	r3, #0
 8009974:	4602      	mov	r2, r0
 8009976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009978:	6a21      	ldr	r1, [r4, #32]
 800997a:	4628      	mov	r0, r5
 800997c:	47b0      	blx	r6
 800997e:	1c43      	adds	r3, r0, #1
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	d106      	bne.n	8009992 <__sflush_r+0x66>
 8009984:	6829      	ldr	r1, [r5, #0]
 8009986:	291d      	cmp	r1, #29
 8009988:	d82c      	bhi.n	80099e4 <__sflush_r+0xb8>
 800998a:	4a2a      	ldr	r2, [pc, #168]	; (8009a34 <__sflush_r+0x108>)
 800998c:	40ca      	lsrs	r2, r1
 800998e:	07d6      	lsls	r6, r2, #31
 8009990:	d528      	bpl.n	80099e4 <__sflush_r+0xb8>
 8009992:	2200      	movs	r2, #0
 8009994:	6062      	str	r2, [r4, #4]
 8009996:	04d9      	lsls	r1, r3, #19
 8009998:	6922      	ldr	r2, [r4, #16]
 800999a:	6022      	str	r2, [r4, #0]
 800999c:	d504      	bpl.n	80099a8 <__sflush_r+0x7c>
 800999e:	1c42      	adds	r2, r0, #1
 80099a0:	d101      	bne.n	80099a6 <__sflush_r+0x7a>
 80099a2:	682b      	ldr	r3, [r5, #0]
 80099a4:	b903      	cbnz	r3, 80099a8 <__sflush_r+0x7c>
 80099a6:	6560      	str	r0, [r4, #84]	; 0x54
 80099a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099aa:	602f      	str	r7, [r5, #0]
 80099ac:	2900      	cmp	r1, #0
 80099ae:	d0ca      	beq.n	8009946 <__sflush_r+0x1a>
 80099b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099b4:	4299      	cmp	r1, r3
 80099b6:	d002      	beq.n	80099be <__sflush_r+0x92>
 80099b8:	4628      	mov	r0, r5
 80099ba:	f000 f9d5 	bl	8009d68 <_free_r>
 80099be:	2000      	movs	r0, #0
 80099c0:	6360      	str	r0, [r4, #52]	; 0x34
 80099c2:	e7c1      	b.n	8009948 <__sflush_r+0x1c>
 80099c4:	6a21      	ldr	r1, [r4, #32]
 80099c6:	2301      	movs	r3, #1
 80099c8:	4628      	mov	r0, r5
 80099ca:	47b0      	blx	r6
 80099cc:	1c41      	adds	r1, r0, #1
 80099ce:	d1c7      	bne.n	8009960 <__sflush_r+0x34>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0c4      	beq.n	8009960 <__sflush_r+0x34>
 80099d6:	2b1d      	cmp	r3, #29
 80099d8:	d001      	beq.n	80099de <__sflush_r+0xb2>
 80099da:	2b16      	cmp	r3, #22
 80099dc:	d101      	bne.n	80099e2 <__sflush_r+0xb6>
 80099de:	602f      	str	r7, [r5, #0]
 80099e0:	e7b1      	b.n	8009946 <__sflush_r+0x1a>
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e8:	81a3      	strh	r3, [r4, #12]
 80099ea:	e7ad      	b.n	8009948 <__sflush_r+0x1c>
 80099ec:	690f      	ldr	r7, [r1, #16]
 80099ee:	2f00      	cmp	r7, #0
 80099f0:	d0a9      	beq.n	8009946 <__sflush_r+0x1a>
 80099f2:	0793      	lsls	r3, r2, #30
 80099f4:	680e      	ldr	r6, [r1, #0]
 80099f6:	bf08      	it	eq
 80099f8:	694b      	ldreq	r3, [r1, #20]
 80099fa:	600f      	str	r7, [r1, #0]
 80099fc:	bf18      	it	ne
 80099fe:	2300      	movne	r3, #0
 8009a00:	eba6 0807 	sub.w	r8, r6, r7
 8009a04:	608b      	str	r3, [r1, #8]
 8009a06:	f1b8 0f00 	cmp.w	r8, #0
 8009a0a:	dd9c      	ble.n	8009946 <__sflush_r+0x1a>
 8009a0c:	6a21      	ldr	r1, [r4, #32]
 8009a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a10:	4643      	mov	r3, r8
 8009a12:	463a      	mov	r2, r7
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b0      	blx	r6
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	dc06      	bgt.n	8009a2a <__sflush_r+0xfe>
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a28:	e78e      	b.n	8009948 <__sflush_r+0x1c>
 8009a2a:	4407      	add	r7, r0
 8009a2c:	eba8 0800 	sub.w	r8, r8, r0
 8009a30:	e7e9      	b.n	8009a06 <__sflush_r+0xda>
 8009a32:	bf00      	nop
 8009a34:	20400001 	.word	0x20400001

08009a38 <_fflush_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	690b      	ldr	r3, [r1, #16]
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	460c      	mov	r4, r1
 8009a40:	b913      	cbnz	r3, 8009a48 <_fflush_r+0x10>
 8009a42:	2500      	movs	r5, #0
 8009a44:	4628      	mov	r0, r5
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	b118      	cbz	r0, 8009a52 <_fflush_r+0x1a>
 8009a4a:	6983      	ldr	r3, [r0, #24]
 8009a4c:	b90b      	cbnz	r3, 8009a52 <_fflush_r+0x1a>
 8009a4e:	f000 f887 	bl	8009b60 <__sinit>
 8009a52:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <_fflush_r+0x6c>)
 8009a54:	429c      	cmp	r4, r3
 8009a56:	d11b      	bne.n	8009a90 <_fflush_r+0x58>
 8009a58:	686c      	ldr	r4, [r5, #4]
 8009a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0ef      	beq.n	8009a42 <_fflush_r+0xa>
 8009a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a64:	07d0      	lsls	r0, r2, #31
 8009a66:	d404      	bmi.n	8009a72 <_fflush_r+0x3a>
 8009a68:	0599      	lsls	r1, r3, #22
 8009a6a:	d402      	bmi.n	8009a72 <_fflush_r+0x3a>
 8009a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a6e:	f000 f915 	bl	8009c9c <__retarget_lock_acquire_recursive>
 8009a72:	4628      	mov	r0, r5
 8009a74:	4621      	mov	r1, r4
 8009a76:	f7ff ff59 	bl	800992c <__sflush_r>
 8009a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a7c:	07da      	lsls	r2, r3, #31
 8009a7e:	4605      	mov	r5, r0
 8009a80:	d4e0      	bmi.n	8009a44 <_fflush_r+0xc>
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	059b      	lsls	r3, r3, #22
 8009a86:	d4dd      	bmi.n	8009a44 <_fflush_r+0xc>
 8009a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a8a:	f000 f908 	bl	8009c9e <__retarget_lock_release_recursive>
 8009a8e:	e7d9      	b.n	8009a44 <_fflush_r+0xc>
 8009a90:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <_fflush_r+0x70>)
 8009a92:	429c      	cmp	r4, r3
 8009a94:	d101      	bne.n	8009a9a <_fflush_r+0x62>
 8009a96:	68ac      	ldr	r4, [r5, #8]
 8009a98:	e7df      	b.n	8009a5a <_fflush_r+0x22>
 8009a9a:	4b04      	ldr	r3, [pc, #16]	; (8009aac <_fflush_r+0x74>)
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	bf08      	it	eq
 8009aa0:	68ec      	ldreq	r4, [r5, #12]
 8009aa2:	e7da      	b.n	8009a5a <_fflush_r+0x22>
 8009aa4:	0800a86c 	.word	0x0800a86c
 8009aa8:	0800a88c 	.word	0x0800a88c
 8009aac:	0800a84c 	.word	0x0800a84c

08009ab0 <std>:
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	b510      	push	{r4, lr}
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8009aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009abe:	6083      	str	r3, [r0, #8]
 8009ac0:	8181      	strh	r1, [r0, #12]
 8009ac2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ac4:	81c2      	strh	r2, [r0, #14]
 8009ac6:	6183      	str	r3, [r0, #24]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	2208      	movs	r2, #8
 8009acc:	305c      	adds	r0, #92	; 0x5c
 8009ace:	f7ff fdd7 	bl	8009680 <memset>
 8009ad2:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <std+0x38>)
 8009ad4:	6263      	str	r3, [r4, #36]	; 0x24
 8009ad6:	4b05      	ldr	r3, [pc, #20]	; (8009aec <std+0x3c>)
 8009ad8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ada:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <std+0x40>)
 8009adc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ade:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <std+0x44>)
 8009ae0:	6224      	str	r4, [r4, #32]
 8009ae2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ae4:	bd10      	pop	{r4, pc}
 8009ae6:	bf00      	nop
 8009ae8:	0800a4b9 	.word	0x0800a4b9
 8009aec:	0800a4db 	.word	0x0800a4db
 8009af0:	0800a513 	.word	0x0800a513
 8009af4:	0800a537 	.word	0x0800a537

08009af8 <_cleanup_r>:
 8009af8:	4901      	ldr	r1, [pc, #4]	; (8009b00 <_cleanup_r+0x8>)
 8009afa:	f000 b8af 	b.w	8009c5c <_fwalk_reent>
 8009afe:	bf00      	nop
 8009b00:	08009a39 	.word	0x08009a39

08009b04 <__sfmoreglue>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	1e4a      	subs	r2, r1, #1
 8009b08:	2568      	movs	r5, #104	; 0x68
 8009b0a:	4355      	muls	r5, r2
 8009b0c:	460e      	mov	r6, r1
 8009b0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b12:	f000 f979 	bl	8009e08 <_malloc_r>
 8009b16:	4604      	mov	r4, r0
 8009b18:	b140      	cbz	r0, 8009b2c <__sfmoreglue+0x28>
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	e9c0 1600 	strd	r1, r6, [r0]
 8009b20:	300c      	adds	r0, #12
 8009b22:	60a0      	str	r0, [r4, #8]
 8009b24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b28:	f7ff fdaa 	bl	8009680 <memset>
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}

08009b30 <__sfp_lock_acquire>:
 8009b30:	4801      	ldr	r0, [pc, #4]	; (8009b38 <__sfp_lock_acquire+0x8>)
 8009b32:	f000 b8b3 	b.w	8009c9c <__retarget_lock_acquire_recursive>
 8009b36:	bf00      	nop
 8009b38:	20004968 	.word	0x20004968

08009b3c <__sfp_lock_release>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	; (8009b44 <__sfp_lock_release+0x8>)
 8009b3e:	f000 b8ae 	b.w	8009c9e <__retarget_lock_release_recursive>
 8009b42:	bf00      	nop
 8009b44:	20004968 	.word	0x20004968

08009b48 <__sinit_lock_acquire>:
 8009b48:	4801      	ldr	r0, [pc, #4]	; (8009b50 <__sinit_lock_acquire+0x8>)
 8009b4a:	f000 b8a7 	b.w	8009c9c <__retarget_lock_acquire_recursive>
 8009b4e:	bf00      	nop
 8009b50:	20004963 	.word	0x20004963

08009b54 <__sinit_lock_release>:
 8009b54:	4801      	ldr	r0, [pc, #4]	; (8009b5c <__sinit_lock_release+0x8>)
 8009b56:	f000 b8a2 	b.w	8009c9e <__retarget_lock_release_recursive>
 8009b5a:	bf00      	nop
 8009b5c:	20004963 	.word	0x20004963

08009b60 <__sinit>:
 8009b60:	b510      	push	{r4, lr}
 8009b62:	4604      	mov	r4, r0
 8009b64:	f7ff fff0 	bl	8009b48 <__sinit_lock_acquire>
 8009b68:	69a3      	ldr	r3, [r4, #24]
 8009b6a:	b11b      	cbz	r3, 8009b74 <__sinit+0x14>
 8009b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b70:	f7ff bff0 	b.w	8009b54 <__sinit_lock_release>
 8009b74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b78:	6523      	str	r3, [r4, #80]	; 0x50
 8009b7a:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <__sinit+0x68>)
 8009b7c:	4a13      	ldr	r2, [pc, #76]	; (8009bcc <__sinit+0x6c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	bf04      	itt	eq
 8009b86:	2301      	moveq	r3, #1
 8009b88:	61a3      	streq	r3, [r4, #24]
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f820 	bl	8009bd0 <__sfp>
 8009b90:	6060      	str	r0, [r4, #4]
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 f81c 	bl	8009bd0 <__sfp>
 8009b98:	60a0      	str	r0, [r4, #8]
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f000 f818 	bl	8009bd0 <__sfp>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	60e0      	str	r0, [r4, #12]
 8009ba4:	2104      	movs	r1, #4
 8009ba6:	6860      	ldr	r0, [r4, #4]
 8009ba8:	f7ff ff82 	bl	8009ab0 <std>
 8009bac:	68a0      	ldr	r0, [r4, #8]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	2109      	movs	r1, #9
 8009bb2:	f7ff ff7d 	bl	8009ab0 <std>
 8009bb6:	68e0      	ldr	r0, [r4, #12]
 8009bb8:	2202      	movs	r2, #2
 8009bba:	2112      	movs	r1, #18
 8009bbc:	f7ff ff78 	bl	8009ab0 <std>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	61a3      	str	r3, [r4, #24]
 8009bc4:	e7d2      	b.n	8009b6c <__sinit+0xc>
 8009bc6:	bf00      	nop
 8009bc8:	0800a848 	.word	0x0800a848
 8009bcc:	08009af9 	.word	0x08009af9

08009bd0 <__sfp>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	4607      	mov	r7, r0
 8009bd4:	f7ff ffac 	bl	8009b30 <__sfp_lock_acquire>
 8009bd8:	4b1e      	ldr	r3, [pc, #120]	; (8009c54 <__sfp+0x84>)
 8009bda:	681e      	ldr	r6, [r3, #0]
 8009bdc:	69b3      	ldr	r3, [r6, #24]
 8009bde:	b913      	cbnz	r3, 8009be6 <__sfp+0x16>
 8009be0:	4630      	mov	r0, r6
 8009be2:	f7ff ffbd 	bl	8009b60 <__sinit>
 8009be6:	3648      	adds	r6, #72	; 0x48
 8009be8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	d503      	bpl.n	8009bf8 <__sfp+0x28>
 8009bf0:	6833      	ldr	r3, [r6, #0]
 8009bf2:	b30b      	cbz	r3, 8009c38 <__sfp+0x68>
 8009bf4:	6836      	ldr	r6, [r6, #0]
 8009bf6:	e7f7      	b.n	8009be8 <__sfp+0x18>
 8009bf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bfc:	b9d5      	cbnz	r5, 8009c34 <__sfp+0x64>
 8009bfe:	4b16      	ldr	r3, [pc, #88]	; (8009c58 <__sfp+0x88>)
 8009c00:	60e3      	str	r3, [r4, #12]
 8009c02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c06:	6665      	str	r5, [r4, #100]	; 0x64
 8009c08:	f000 f847 	bl	8009c9a <__retarget_lock_init_recursive>
 8009c0c:	f7ff ff96 	bl	8009b3c <__sfp_lock_release>
 8009c10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c18:	6025      	str	r5, [r4, #0]
 8009c1a:	61a5      	str	r5, [r4, #24]
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c24:	f7ff fd2c 	bl	8009680 <memset>
 8009c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c30:	4620      	mov	r0, r4
 8009c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c34:	3468      	adds	r4, #104	; 0x68
 8009c36:	e7d9      	b.n	8009bec <__sfp+0x1c>
 8009c38:	2104      	movs	r1, #4
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	f7ff ff62 	bl	8009b04 <__sfmoreglue>
 8009c40:	4604      	mov	r4, r0
 8009c42:	6030      	str	r0, [r6, #0]
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d1d5      	bne.n	8009bf4 <__sfp+0x24>
 8009c48:	f7ff ff78 	bl	8009b3c <__sfp_lock_release>
 8009c4c:	230c      	movs	r3, #12
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	e7ee      	b.n	8009c30 <__sfp+0x60>
 8009c52:	bf00      	nop
 8009c54:	0800a848 	.word	0x0800a848
 8009c58:	ffff0001 	.word	0xffff0001

08009c5c <_fwalk_reent>:
 8009c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c60:	4606      	mov	r6, r0
 8009c62:	4688      	mov	r8, r1
 8009c64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c68:	2700      	movs	r7, #0
 8009c6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c6e:	f1b9 0901 	subs.w	r9, r9, #1
 8009c72:	d505      	bpl.n	8009c80 <_fwalk_reent+0x24>
 8009c74:	6824      	ldr	r4, [r4, #0]
 8009c76:	2c00      	cmp	r4, #0
 8009c78:	d1f7      	bne.n	8009c6a <_fwalk_reent+0xe>
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c80:	89ab      	ldrh	r3, [r5, #12]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d907      	bls.n	8009c96 <_fwalk_reent+0x3a>
 8009c86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	d003      	beq.n	8009c96 <_fwalk_reent+0x3a>
 8009c8e:	4629      	mov	r1, r5
 8009c90:	4630      	mov	r0, r6
 8009c92:	47c0      	blx	r8
 8009c94:	4307      	orrs	r7, r0
 8009c96:	3568      	adds	r5, #104	; 0x68
 8009c98:	e7e9      	b.n	8009c6e <_fwalk_reent+0x12>

08009c9a <__retarget_lock_init_recursive>:
 8009c9a:	4770      	bx	lr

08009c9c <__retarget_lock_acquire_recursive>:
 8009c9c:	4770      	bx	lr

08009c9e <__retarget_lock_release_recursive>:
 8009c9e:	4770      	bx	lr

08009ca0 <__swhatbuf_r>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	460e      	mov	r6, r1
 8009ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca8:	2900      	cmp	r1, #0
 8009caa:	b096      	sub	sp, #88	; 0x58
 8009cac:	4614      	mov	r4, r2
 8009cae:	461d      	mov	r5, r3
 8009cb0:	da07      	bge.n	8009cc2 <__swhatbuf_r+0x22>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	602b      	str	r3, [r5, #0]
 8009cb6:	89b3      	ldrh	r3, [r6, #12]
 8009cb8:	061a      	lsls	r2, r3, #24
 8009cba:	d410      	bmi.n	8009cde <__swhatbuf_r+0x3e>
 8009cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cc0:	e00e      	b.n	8009ce0 <__swhatbuf_r+0x40>
 8009cc2:	466a      	mov	r2, sp
 8009cc4:	f000 fc5e 	bl	800a584 <_fstat_r>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	dbf2      	blt.n	8009cb2 <__swhatbuf_r+0x12>
 8009ccc:	9a01      	ldr	r2, [sp, #4]
 8009cce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cd6:	425a      	negs	r2, r3
 8009cd8:	415a      	adcs	r2, r3
 8009cda:	602a      	str	r2, [r5, #0]
 8009cdc:	e7ee      	b.n	8009cbc <__swhatbuf_r+0x1c>
 8009cde:	2340      	movs	r3, #64	; 0x40
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	b016      	add	sp, #88	; 0x58
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}

08009ce8 <__smakebuf_r>:
 8009ce8:	898b      	ldrh	r3, [r1, #12]
 8009cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cec:	079d      	lsls	r5, r3, #30
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	d507      	bpl.n	8009d04 <__smakebuf_r+0x1c>
 8009cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	6123      	str	r3, [r4, #16]
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	6163      	str	r3, [r4, #20]
 8009d00:	b002      	add	sp, #8
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	ab01      	add	r3, sp, #4
 8009d06:	466a      	mov	r2, sp
 8009d08:	f7ff ffca 	bl	8009ca0 <__swhatbuf_r>
 8009d0c:	9900      	ldr	r1, [sp, #0]
 8009d0e:	4605      	mov	r5, r0
 8009d10:	4630      	mov	r0, r6
 8009d12:	f000 f879 	bl	8009e08 <_malloc_r>
 8009d16:	b948      	cbnz	r0, 8009d2c <__smakebuf_r+0x44>
 8009d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d1c:	059a      	lsls	r2, r3, #22
 8009d1e:	d4ef      	bmi.n	8009d00 <__smakebuf_r+0x18>
 8009d20:	f023 0303 	bic.w	r3, r3, #3
 8009d24:	f043 0302 	orr.w	r3, r3, #2
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	e7e3      	b.n	8009cf4 <__smakebuf_r+0xc>
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <__smakebuf_r+0x7c>)
 8009d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	6020      	str	r0, [r4, #0]
 8009d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	9b00      	ldr	r3, [sp, #0]
 8009d3c:	6163      	str	r3, [r4, #20]
 8009d3e:	9b01      	ldr	r3, [sp, #4]
 8009d40:	6120      	str	r0, [r4, #16]
 8009d42:	b15b      	cbz	r3, 8009d5c <__smakebuf_r+0x74>
 8009d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f000 fc2d 	bl	800a5a8 <_isatty_r>
 8009d4e:	b128      	cbz	r0, 8009d5c <__smakebuf_r+0x74>
 8009d50:	89a3      	ldrh	r3, [r4, #12]
 8009d52:	f023 0303 	bic.w	r3, r3, #3
 8009d56:	f043 0301 	orr.w	r3, r3, #1
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	89a0      	ldrh	r0, [r4, #12]
 8009d5e:	4305      	orrs	r5, r0
 8009d60:	81a5      	strh	r5, [r4, #12]
 8009d62:	e7cd      	b.n	8009d00 <__smakebuf_r+0x18>
 8009d64:	08009af9 	.word	0x08009af9

08009d68 <_free_r>:
 8009d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d6a:	2900      	cmp	r1, #0
 8009d6c:	d048      	beq.n	8009e00 <_free_r+0x98>
 8009d6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d72:	9001      	str	r0, [sp, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f1a1 0404 	sub.w	r4, r1, #4
 8009d7a:	bfb8      	it	lt
 8009d7c:	18e4      	addlt	r4, r4, r3
 8009d7e:	f000 fc35 	bl	800a5ec <__malloc_lock>
 8009d82:	4a20      	ldr	r2, [pc, #128]	; (8009e04 <_free_r+0x9c>)
 8009d84:	9801      	ldr	r0, [sp, #4]
 8009d86:	6813      	ldr	r3, [r2, #0]
 8009d88:	4615      	mov	r5, r2
 8009d8a:	b933      	cbnz	r3, 8009d9a <_free_r+0x32>
 8009d8c:	6063      	str	r3, [r4, #4]
 8009d8e:	6014      	str	r4, [r2, #0]
 8009d90:	b003      	add	sp, #12
 8009d92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d96:	f000 bc2f 	b.w	800a5f8 <__malloc_unlock>
 8009d9a:	42a3      	cmp	r3, r4
 8009d9c:	d90b      	bls.n	8009db6 <_free_r+0x4e>
 8009d9e:	6821      	ldr	r1, [r4, #0]
 8009da0:	1862      	adds	r2, r4, r1
 8009da2:	4293      	cmp	r3, r2
 8009da4:	bf04      	itt	eq
 8009da6:	681a      	ldreq	r2, [r3, #0]
 8009da8:	685b      	ldreq	r3, [r3, #4]
 8009daa:	6063      	str	r3, [r4, #4]
 8009dac:	bf04      	itt	eq
 8009dae:	1852      	addeq	r2, r2, r1
 8009db0:	6022      	streq	r2, [r4, #0]
 8009db2:	602c      	str	r4, [r5, #0]
 8009db4:	e7ec      	b.n	8009d90 <_free_r+0x28>
 8009db6:	461a      	mov	r2, r3
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	b10b      	cbz	r3, 8009dc0 <_free_r+0x58>
 8009dbc:	42a3      	cmp	r3, r4
 8009dbe:	d9fa      	bls.n	8009db6 <_free_r+0x4e>
 8009dc0:	6811      	ldr	r1, [r2, #0]
 8009dc2:	1855      	adds	r5, r2, r1
 8009dc4:	42a5      	cmp	r5, r4
 8009dc6:	d10b      	bne.n	8009de0 <_free_r+0x78>
 8009dc8:	6824      	ldr	r4, [r4, #0]
 8009dca:	4421      	add	r1, r4
 8009dcc:	1854      	adds	r4, r2, r1
 8009dce:	42a3      	cmp	r3, r4
 8009dd0:	6011      	str	r1, [r2, #0]
 8009dd2:	d1dd      	bne.n	8009d90 <_free_r+0x28>
 8009dd4:	681c      	ldr	r4, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	6053      	str	r3, [r2, #4]
 8009dda:	4421      	add	r1, r4
 8009ddc:	6011      	str	r1, [r2, #0]
 8009dde:	e7d7      	b.n	8009d90 <_free_r+0x28>
 8009de0:	d902      	bls.n	8009de8 <_free_r+0x80>
 8009de2:	230c      	movs	r3, #12
 8009de4:	6003      	str	r3, [r0, #0]
 8009de6:	e7d3      	b.n	8009d90 <_free_r+0x28>
 8009de8:	6825      	ldr	r5, [r4, #0]
 8009dea:	1961      	adds	r1, r4, r5
 8009dec:	428b      	cmp	r3, r1
 8009dee:	bf04      	itt	eq
 8009df0:	6819      	ldreq	r1, [r3, #0]
 8009df2:	685b      	ldreq	r3, [r3, #4]
 8009df4:	6063      	str	r3, [r4, #4]
 8009df6:	bf04      	itt	eq
 8009df8:	1949      	addeq	r1, r1, r5
 8009dfa:	6021      	streq	r1, [r4, #0]
 8009dfc:	6054      	str	r4, [r2, #4]
 8009dfe:	e7c7      	b.n	8009d90 <_free_r+0x28>
 8009e00:	b003      	add	sp, #12
 8009e02:	bd30      	pop	{r4, r5, pc}
 8009e04:	200006a4 	.word	0x200006a4

08009e08 <_malloc_r>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	1ccd      	adds	r5, r1, #3
 8009e0c:	f025 0503 	bic.w	r5, r5, #3
 8009e10:	3508      	adds	r5, #8
 8009e12:	2d0c      	cmp	r5, #12
 8009e14:	bf38      	it	cc
 8009e16:	250c      	movcc	r5, #12
 8009e18:	2d00      	cmp	r5, #0
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	db01      	blt.n	8009e22 <_malloc_r+0x1a>
 8009e1e:	42a9      	cmp	r1, r5
 8009e20:	d903      	bls.n	8009e2a <_malloc_r+0x22>
 8009e22:	230c      	movs	r3, #12
 8009e24:	6033      	str	r3, [r6, #0]
 8009e26:	2000      	movs	r0, #0
 8009e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e2a:	f000 fbdf 	bl	800a5ec <__malloc_lock>
 8009e2e:	4921      	ldr	r1, [pc, #132]	; (8009eb4 <_malloc_r+0xac>)
 8009e30:	680a      	ldr	r2, [r1, #0]
 8009e32:	4614      	mov	r4, r2
 8009e34:	b99c      	cbnz	r4, 8009e5e <_malloc_r+0x56>
 8009e36:	4f20      	ldr	r7, [pc, #128]	; (8009eb8 <_malloc_r+0xb0>)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	b923      	cbnz	r3, 8009e46 <_malloc_r+0x3e>
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f000 fb2a 	bl	800a498 <_sbrk_r>
 8009e44:	6038      	str	r0, [r7, #0]
 8009e46:	4629      	mov	r1, r5
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f000 fb25 	bl	800a498 <_sbrk_r>
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	d123      	bne.n	8009e9a <_malloc_r+0x92>
 8009e52:	230c      	movs	r3, #12
 8009e54:	6033      	str	r3, [r6, #0]
 8009e56:	4630      	mov	r0, r6
 8009e58:	f000 fbce 	bl	800a5f8 <__malloc_unlock>
 8009e5c:	e7e3      	b.n	8009e26 <_malloc_r+0x1e>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	1b5b      	subs	r3, r3, r5
 8009e62:	d417      	bmi.n	8009e94 <_malloc_r+0x8c>
 8009e64:	2b0b      	cmp	r3, #11
 8009e66:	d903      	bls.n	8009e70 <_malloc_r+0x68>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	441c      	add	r4, r3
 8009e6c:	6025      	str	r5, [r4, #0]
 8009e6e:	e004      	b.n	8009e7a <_malloc_r+0x72>
 8009e70:	6863      	ldr	r3, [r4, #4]
 8009e72:	42a2      	cmp	r2, r4
 8009e74:	bf0c      	ite	eq
 8009e76:	600b      	streq	r3, [r1, #0]
 8009e78:	6053      	strne	r3, [r2, #4]
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f000 fbbc 	bl	800a5f8 <__malloc_unlock>
 8009e80:	f104 000b 	add.w	r0, r4, #11
 8009e84:	1d23      	adds	r3, r4, #4
 8009e86:	f020 0007 	bic.w	r0, r0, #7
 8009e8a:	1ac2      	subs	r2, r0, r3
 8009e8c:	d0cc      	beq.n	8009e28 <_malloc_r+0x20>
 8009e8e:	1a1b      	subs	r3, r3, r0
 8009e90:	50a3      	str	r3, [r4, r2]
 8009e92:	e7c9      	b.n	8009e28 <_malloc_r+0x20>
 8009e94:	4622      	mov	r2, r4
 8009e96:	6864      	ldr	r4, [r4, #4]
 8009e98:	e7cc      	b.n	8009e34 <_malloc_r+0x2c>
 8009e9a:	1cc4      	adds	r4, r0, #3
 8009e9c:	f024 0403 	bic.w	r4, r4, #3
 8009ea0:	42a0      	cmp	r0, r4
 8009ea2:	d0e3      	beq.n	8009e6c <_malloc_r+0x64>
 8009ea4:	1a21      	subs	r1, r4, r0
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f000 faf6 	bl	800a498 <_sbrk_r>
 8009eac:	3001      	adds	r0, #1
 8009eae:	d1dd      	bne.n	8009e6c <_malloc_r+0x64>
 8009eb0:	e7cf      	b.n	8009e52 <_malloc_r+0x4a>
 8009eb2:	bf00      	nop
 8009eb4:	200006a4 	.word	0x200006a4
 8009eb8:	200006a8 	.word	0x200006a8

08009ebc <__sfputc_r>:
 8009ebc:	6893      	ldr	r3, [r2, #8]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	b410      	push	{r4}
 8009ec4:	6093      	str	r3, [r2, #8]
 8009ec6:	da08      	bge.n	8009eda <__sfputc_r+0x1e>
 8009ec8:	6994      	ldr	r4, [r2, #24]
 8009eca:	42a3      	cmp	r3, r4
 8009ecc:	db01      	blt.n	8009ed2 <__sfputc_r+0x16>
 8009ece:	290a      	cmp	r1, #10
 8009ed0:	d103      	bne.n	8009eda <__sfputc_r+0x1e>
 8009ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed6:	f7ff bc69 	b.w	80097ac <__swbuf_r>
 8009eda:	6813      	ldr	r3, [r2, #0]
 8009edc:	1c58      	adds	r0, r3, #1
 8009ede:	6010      	str	r0, [r2, #0]
 8009ee0:	7019      	strb	r1, [r3, #0]
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <__sfputs_r>:
 8009eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eec:	4606      	mov	r6, r0
 8009eee:	460f      	mov	r7, r1
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	18d5      	adds	r5, r2, r3
 8009ef4:	42ac      	cmp	r4, r5
 8009ef6:	d101      	bne.n	8009efc <__sfputs_r+0x12>
 8009ef8:	2000      	movs	r0, #0
 8009efa:	e007      	b.n	8009f0c <__sfputs_r+0x22>
 8009efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f00:	463a      	mov	r2, r7
 8009f02:	4630      	mov	r0, r6
 8009f04:	f7ff ffda 	bl	8009ebc <__sfputc_r>
 8009f08:	1c43      	adds	r3, r0, #1
 8009f0a:	d1f3      	bne.n	8009ef4 <__sfputs_r+0xa>
 8009f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f10 <_vfiprintf_r>:
 8009f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	460d      	mov	r5, r1
 8009f16:	b09d      	sub	sp, #116	; 0x74
 8009f18:	4614      	mov	r4, r2
 8009f1a:	4698      	mov	r8, r3
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	b118      	cbz	r0, 8009f28 <_vfiprintf_r+0x18>
 8009f20:	6983      	ldr	r3, [r0, #24]
 8009f22:	b90b      	cbnz	r3, 8009f28 <_vfiprintf_r+0x18>
 8009f24:	f7ff fe1c 	bl	8009b60 <__sinit>
 8009f28:	4b89      	ldr	r3, [pc, #548]	; (800a150 <_vfiprintf_r+0x240>)
 8009f2a:	429d      	cmp	r5, r3
 8009f2c:	d11b      	bne.n	8009f66 <_vfiprintf_r+0x56>
 8009f2e:	6875      	ldr	r5, [r6, #4]
 8009f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f32:	07d9      	lsls	r1, r3, #31
 8009f34:	d405      	bmi.n	8009f42 <_vfiprintf_r+0x32>
 8009f36:	89ab      	ldrh	r3, [r5, #12]
 8009f38:	059a      	lsls	r2, r3, #22
 8009f3a:	d402      	bmi.n	8009f42 <_vfiprintf_r+0x32>
 8009f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f3e:	f7ff fead 	bl	8009c9c <__retarget_lock_acquire_recursive>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	071b      	lsls	r3, r3, #28
 8009f46:	d501      	bpl.n	8009f4c <_vfiprintf_r+0x3c>
 8009f48:	692b      	ldr	r3, [r5, #16]
 8009f4a:	b9eb      	cbnz	r3, 8009f88 <_vfiprintf_r+0x78>
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7ff fc7e 	bl	8009850 <__swsetup_r>
 8009f54:	b1c0      	cbz	r0, 8009f88 <_vfiprintf_r+0x78>
 8009f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f58:	07dc      	lsls	r4, r3, #31
 8009f5a:	d50e      	bpl.n	8009f7a <_vfiprintf_r+0x6a>
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f60:	b01d      	add	sp, #116	; 0x74
 8009f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f66:	4b7b      	ldr	r3, [pc, #492]	; (800a154 <_vfiprintf_r+0x244>)
 8009f68:	429d      	cmp	r5, r3
 8009f6a:	d101      	bne.n	8009f70 <_vfiprintf_r+0x60>
 8009f6c:	68b5      	ldr	r5, [r6, #8]
 8009f6e:	e7df      	b.n	8009f30 <_vfiprintf_r+0x20>
 8009f70:	4b79      	ldr	r3, [pc, #484]	; (800a158 <_vfiprintf_r+0x248>)
 8009f72:	429d      	cmp	r5, r3
 8009f74:	bf08      	it	eq
 8009f76:	68f5      	ldreq	r5, [r6, #12]
 8009f78:	e7da      	b.n	8009f30 <_vfiprintf_r+0x20>
 8009f7a:	89ab      	ldrh	r3, [r5, #12]
 8009f7c:	0598      	lsls	r0, r3, #22
 8009f7e:	d4ed      	bmi.n	8009f5c <_vfiprintf_r+0x4c>
 8009f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f82:	f7ff fe8c 	bl	8009c9e <__retarget_lock_release_recursive>
 8009f86:	e7e9      	b.n	8009f5c <_vfiprintf_r+0x4c>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f8c:	2320      	movs	r3, #32
 8009f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f96:	2330      	movs	r3, #48	; 0x30
 8009f98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a15c <_vfiprintf_r+0x24c>
 8009f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fa0:	f04f 0901 	mov.w	r9, #1
 8009fa4:	4623      	mov	r3, r4
 8009fa6:	469a      	mov	sl, r3
 8009fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fac:	b10a      	cbz	r2, 8009fb2 <_vfiprintf_r+0xa2>
 8009fae:	2a25      	cmp	r2, #37	; 0x25
 8009fb0:	d1f9      	bne.n	8009fa6 <_vfiprintf_r+0x96>
 8009fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb6:	d00b      	beq.n	8009fd0 <_vfiprintf_r+0xc0>
 8009fb8:	465b      	mov	r3, fp
 8009fba:	4622      	mov	r2, r4
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7ff ff93 	bl	8009eea <__sfputs_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	f000 80aa 	beq.w	800a11e <_vfiprintf_r+0x20e>
 8009fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fcc:	445a      	add	r2, fp
 8009fce:	9209      	str	r2, [sp, #36]	; 0x24
 8009fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 80a2 	beq.w	800a11e <_vfiprintf_r+0x20e>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe4:	f10a 0a01 	add.w	sl, sl, #1
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	9307      	str	r3, [sp, #28]
 8009fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ff2:	4654      	mov	r4, sl
 8009ff4:	2205      	movs	r2, #5
 8009ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ffa:	4858      	ldr	r0, [pc, #352]	; (800a15c <_vfiprintf_r+0x24c>)
 8009ffc:	f7f6 f970 	bl	80002e0 <memchr>
 800a000:	9a04      	ldr	r2, [sp, #16]
 800a002:	b9d8      	cbnz	r0, 800a03c <_vfiprintf_r+0x12c>
 800a004:	06d1      	lsls	r1, r2, #27
 800a006:	bf44      	itt	mi
 800a008:	2320      	movmi	r3, #32
 800a00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a00e:	0713      	lsls	r3, r2, #28
 800a010:	bf44      	itt	mi
 800a012:	232b      	movmi	r3, #43	; 0x2b
 800a014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a018:	f89a 3000 	ldrb.w	r3, [sl]
 800a01c:	2b2a      	cmp	r3, #42	; 0x2a
 800a01e:	d015      	beq.n	800a04c <_vfiprintf_r+0x13c>
 800a020:	9a07      	ldr	r2, [sp, #28]
 800a022:	4654      	mov	r4, sl
 800a024:	2000      	movs	r0, #0
 800a026:	f04f 0c0a 	mov.w	ip, #10
 800a02a:	4621      	mov	r1, r4
 800a02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a030:	3b30      	subs	r3, #48	; 0x30
 800a032:	2b09      	cmp	r3, #9
 800a034:	d94e      	bls.n	800a0d4 <_vfiprintf_r+0x1c4>
 800a036:	b1b0      	cbz	r0, 800a066 <_vfiprintf_r+0x156>
 800a038:	9207      	str	r2, [sp, #28]
 800a03a:	e014      	b.n	800a066 <_vfiprintf_r+0x156>
 800a03c:	eba0 0308 	sub.w	r3, r0, r8
 800a040:	fa09 f303 	lsl.w	r3, r9, r3
 800a044:	4313      	orrs	r3, r2
 800a046:	9304      	str	r3, [sp, #16]
 800a048:	46a2      	mov	sl, r4
 800a04a:	e7d2      	b.n	8009ff2 <_vfiprintf_r+0xe2>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	1d19      	adds	r1, r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	9103      	str	r1, [sp, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	bfbb      	ittet	lt
 800a058:	425b      	neglt	r3, r3
 800a05a:	f042 0202 	orrlt.w	r2, r2, #2
 800a05e:	9307      	strge	r3, [sp, #28]
 800a060:	9307      	strlt	r3, [sp, #28]
 800a062:	bfb8      	it	lt
 800a064:	9204      	strlt	r2, [sp, #16]
 800a066:	7823      	ldrb	r3, [r4, #0]
 800a068:	2b2e      	cmp	r3, #46	; 0x2e
 800a06a:	d10c      	bne.n	800a086 <_vfiprintf_r+0x176>
 800a06c:	7863      	ldrb	r3, [r4, #1]
 800a06e:	2b2a      	cmp	r3, #42	; 0x2a
 800a070:	d135      	bne.n	800a0de <_vfiprintf_r+0x1ce>
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	1d1a      	adds	r2, r3, #4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	9203      	str	r2, [sp, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bfb8      	it	lt
 800a07e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a082:	3402      	adds	r4, #2
 800a084:	9305      	str	r3, [sp, #20]
 800a086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a16c <_vfiprintf_r+0x25c>
 800a08a:	7821      	ldrb	r1, [r4, #0]
 800a08c:	2203      	movs	r2, #3
 800a08e:	4650      	mov	r0, sl
 800a090:	f7f6 f926 	bl	80002e0 <memchr>
 800a094:	b140      	cbz	r0, 800a0a8 <_vfiprintf_r+0x198>
 800a096:	2340      	movs	r3, #64	; 0x40
 800a098:	eba0 000a 	sub.w	r0, r0, sl
 800a09c:	fa03 f000 	lsl.w	r0, r3, r0
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	4303      	orrs	r3, r0
 800a0a4:	3401      	adds	r4, #1
 800a0a6:	9304      	str	r3, [sp, #16]
 800a0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ac:	482c      	ldr	r0, [pc, #176]	; (800a160 <_vfiprintf_r+0x250>)
 800a0ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0b2:	2206      	movs	r2, #6
 800a0b4:	f7f6 f914 	bl	80002e0 <memchr>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d03f      	beq.n	800a13c <_vfiprintf_r+0x22c>
 800a0bc:	4b29      	ldr	r3, [pc, #164]	; (800a164 <_vfiprintf_r+0x254>)
 800a0be:	bb1b      	cbnz	r3, 800a108 <_vfiprintf_r+0x1f8>
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	3307      	adds	r3, #7
 800a0c4:	f023 0307 	bic.w	r3, r3, #7
 800a0c8:	3308      	adds	r3, #8
 800a0ca:	9303      	str	r3, [sp, #12]
 800a0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ce:	443b      	add	r3, r7
 800a0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d2:	e767      	b.n	8009fa4 <_vfiprintf_r+0x94>
 800a0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0d8:	460c      	mov	r4, r1
 800a0da:	2001      	movs	r0, #1
 800a0dc:	e7a5      	b.n	800a02a <_vfiprintf_r+0x11a>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	3401      	adds	r4, #1
 800a0e2:	9305      	str	r3, [sp, #20]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	f04f 0c0a 	mov.w	ip, #10
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0f0:	3a30      	subs	r2, #48	; 0x30
 800a0f2:	2a09      	cmp	r2, #9
 800a0f4:	d903      	bls.n	800a0fe <_vfiprintf_r+0x1ee>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0c5      	beq.n	800a086 <_vfiprintf_r+0x176>
 800a0fa:	9105      	str	r1, [sp, #20]
 800a0fc:	e7c3      	b.n	800a086 <_vfiprintf_r+0x176>
 800a0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a102:	4604      	mov	r4, r0
 800a104:	2301      	movs	r3, #1
 800a106:	e7f0      	b.n	800a0ea <_vfiprintf_r+0x1da>
 800a108:	ab03      	add	r3, sp, #12
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	462a      	mov	r2, r5
 800a10e:	4b16      	ldr	r3, [pc, #88]	; (800a168 <_vfiprintf_r+0x258>)
 800a110:	a904      	add	r1, sp, #16
 800a112:	4630      	mov	r0, r6
 800a114:	f3af 8000 	nop.w
 800a118:	4607      	mov	r7, r0
 800a11a:	1c78      	adds	r0, r7, #1
 800a11c:	d1d6      	bne.n	800a0cc <_vfiprintf_r+0x1bc>
 800a11e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a120:	07d9      	lsls	r1, r3, #31
 800a122:	d405      	bmi.n	800a130 <_vfiprintf_r+0x220>
 800a124:	89ab      	ldrh	r3, [r5, #12]
 800a126:	059a      	lsls	r2, r3, #22
 800a128:	d402      	bmi.n	800a130 <_vfiprintf_r+0x220>
 800a12a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12c:	f7ff fdb7 	bl	8009c9e <__retarget_lock_release_recursive>
 800a130:	89ab      	ldrh	r3, [r5, #12]
 800a132:	065b      	lsls	r3, r3, #25
 800a134:	f53f af12 	bmi.w	8009f5c <_vfiprintf_r+0x4c>
 800a138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a13a:	e711      	b.n	8009f60 <_vfiprintf_r+0x50>
 800a13c:	ab03      	add	r3, sp, #12
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	462a      	mov	r2, r5
 800a142:	4b09      	ldr	r3, [pc, #36]	; (800a168 <_vfiprintf_r+0x258>)
 800a144:	a904      	add	r1, sp, #16
 800a146:	4630      	mov	r0, r6
 800a148:	f000 f880 	bl	800a24c <_printf_i>
 800a14c:	e7e4      	b.n	800a118 <_vfiprintf_r+0x208>
 800a14e:	bf00      	nop
 800a150:	0800a86c 	.word	0x0800a86c
 800a154:	0800a88c 	.word	0x0800a88c
 800a158:	0800a84c 	.word	0x0800a84c
 800a15c:	0800a8ac 	.word	0x0800a8ac
 800a160:	0800a8b6 	.word	0x0800a8b6
 800a164:	00000000 	.word	0x00000000
 800a168:	08009eeb 	.word	0x08009eeb
 800a16c:	0800a8b2 	.word	0x0800a8b2

0800a170 <_printf_common>:
 800a170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a174:	4616      	mov	r6, r2
 800a176:	4699      	mov	r9, r3
 800a178:	688a      	ldr	r2, [r1, #8]
 800a17a:	690b      	ldr	r3, [r1, #16]
 800a17c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a180:	4293      	cmp	r3, r2
 800a182:	bfb8      	it	lt
 800a184:	4613      	movlt	r3, r2
 800a186:	6033      	str	r3, [r6, #0]
 800a188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a18c:	4607      	mov	r7, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	b10a      	cbz	r2, 800a196 <_printf_common+0x26>
 800a192:	3301      	adds	r3, #1
 800a194:	6033      	str	r3, [r6, #0]
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	0699      	lsls	r1, r3, #26
 800a19a:	bf42      	ittt	mi
 800a19c:	6833      	ldrmi	r3, [r6, #0]
 800a19e:	3302      	addmi	r3, #2
 800a1a0:	6033      	strmi	r3, [r6, #0]
 800a1a2:	6825      	ldr	r5, [r4, #0]
 800a1a4:	f015 0506 	ands.w	r5, r5, #6
 800a1a8:	d106      	bne.n	800a1b8 <_printf_common+0x48>
 800a1aa:	f104 0a19 	add.w	sl, r4, #25
 800a1ae:	68e3      	ldr	r3, [r4, #12]
 800a1b0:	6832      	ldr	r2, [r6, #0]
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	dc26      	bgt.n	800a206 <_printf_common+0x96>
 800a1b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1bc:	1e13      	subs	r3, r2, #0
 800a1be:	6822      	ldr	r2, [r4, #0]
 800a1c0:	bf18      	it	ne
 800a1c2:	2301      	movne	r3, #1
 800a1c4:	0692      	lsls	r2, r2, #26
 800a1c6:	d42b      	bmi.n	800a220 <_printf_common+0xb0>
 800a1c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	47c0      	blx	r8
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	d01e      	beq.n	800a214 <_printf_common+0xa4>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	68e5      	ldr	r5, [r4, #12]
 800a1da:	6832      	ldr	r2, [r6, #0]
 800a1dc:	f003 0306 	and.w	r3, r3, #6
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	bf08      	it	eq
 800a1e4:	1aad      	subeq	r5, r5, r2
 800a1e6:	68a3      	ldr	r3, [r4, #8]
 800a1e8:	6922      	ldr	r2, [r4, #16]
 800a1ea:	bf0c      	ite	eq
 800a1ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1f0:	2500      	movne	r5, #0
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	bfc4      	itt	gt
 800a1f6:	1a9b      	subgt	r3, r3, r2
 800a1f8:	18ed      	addgt	r5, r5, r3
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	341a      	adds	r4, #26
 800a1fe:	42b5      	cmp	r5, r6
 800a200:	d11a      	bne.n	800a238 <_printf_common+0xc8>
 800a202:	2000      	movs	r0, #0
 800a204:	e008      	b.n	800a218 <_printf_common+0xa8>
 800a206:	2301      	movs	r3, #1
 800a208:	4652      	mov	r2, sl
 800a20a:	4649      	mov	r1, r9
 800a20c:	4638      	mov	r0, r7
 800a20e:	47c0      	blx	r8
 800a210:	3001      	adds	r0, #1
 800a212:	d103      	bne.n	800a21c <_printf_common+0xac>
 800a214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a21c:	3501      	adds	r5, #1
 800a21e:	e7c6      	b.n	800a1ae <_printf_common+0x3e>
 800a220:	18e1      	adds	r1, r4, r3
 800a222:	1c5a      	adds	r2, r3, #1
 800a224:	2030      	movs	r0, #48	; 0x30
 800a226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a22a:	4422      	add	r2, r4
 800a22c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a234:	3302      	adds	r3, #2
 800a236:	e7c7      	b.n	800a1c8 <_printf_common+0x58>
 800a238:	2301      	movs	r3, #1
 800a23a:	4622      	mov	r2, r4
 800a23c:	4649      	mov	r1, r9
 800a23e:	4638      	mov	r0, r7
 800a240:	47c0      	blx	r8
 800a242:	3001      	adds	r0, #1
 800a244:	d0e6      	beq.n	800a214 <_printf_common+0xa4>
 800a246:	3601      	adds	r6, #1
 800a248:	e7d9      	b.n	800a1fe <_printf_common+0x8e>
	...

0800a24c <_printf_i>:
 800a24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	460c      	mov	r4, r1
 800a252:	4691      	mov	r9, r2
 800a254:	7e27      	ldrb	r7, [r4, #24]
 800a256:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a258:	2f78      	cmp	r7, #120	; 0x78
 800a25a:	4680      	mov	r8, r0
 800a25c:	469a      	mov	sl, r3
 800a25e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a262:	d807      	bhi.n	800a274 <_printf_i+0x28>
 800a264:	2f62      	cmp	r7, #98	; 0x62
 800a266:	d80a      	bhi.n	800a27e <_printf_i+0x32>
 800a268:	2f00      	cmp	r7, #0
 800a26a:	f000 80d8 	beq.w	800a41e <_printf_i+0x1d2>
 800a26e:	2f58      	cmp	r7, #88	; 0x58
 800a270:	f000 80a3 	beq.w	800a3ba <_printf_i+0x16e>
 800a274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a27c:	e03a      	b.n	800a2f4 <_printf_i+0xa8>
 800a27e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a282:	2b15      	cmp	r3, #21
 800a284:	d8f6      	bhi.n	800a274 <_printf_i+0x28>
 800a286:	a001      	add	r0, pc, #4	; (adr r0, 800a28c <_printf_i+0x40>)
 800a288:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a28c:	0800a2e5 	.word	0x0800a2e5
 800a290:	0800a2f9 	.word	0x0800a2f9
 800a294:	0800a275 	.word	0x0800a275
 800a298:	0800a275 	.word	0x0800a275
 800a29c:	0800a275 	.word	0x0800a275
 800a2a0:	0800a275 	.word	0x0800a275
 800a2a4:	0800a2f9 	.word	0x0800a2f9
 800a2a8:	0800a275 	.word	0x0800a275
 800a2ac:	0800a275 	.word	0x0800a275
 800a2b0:	0800a275 	.word	0x0800a275
 800a2b4:	0800a275 	.word	0x0800a275
 800a2b8:	0800a405 	.word	0x0800a405
 800a2bc:	0800a329 	.word	0x0800a329
 800a2c0:	0800a3e7 	.word	0x0800a3e7
 800a2c4:	0800a275 	.word	0x0800a275
 800a2c8:	0800a275 	.word	0x0800a275
 800a2cc:	0800a427 	.word	0x0800a427
 800a2d0:	0800a275 	.word	0x0800a275
 800a2d4:	0800a329 	.word	0x0800a329
 800a2d8:	0800a275 	.word	0x0800a275
 800a2dc:	0800a275 	.word	0x0800a275
 800a2e0:	0800a3ef 	.word	0x0800a3ef
 800a2e4:	680b      	ldr	r3, [r1, #0]
 800a2e6:	1d1a      	adds	r2, r3, #4
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	600a      	str	r2, [r1, #0]
 800a2ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a2f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e0a3      	b.n	800a440 <_printf_i+0x1f4>
 800a2f8:	6825      	ldr	r5, [r4, #0]
 800a2fa:	6808      	ldr	r0, [r1, #0]
 800a2fc:	062e      	lsls	r6, r5, #24
 800a2fe:	f100 0304 	add.w	r3, r0, #4
 800a302:	d50a      	bpl.n	800a31a <_printf_i+0xce>
 800a304:	6805      	ldr	r5, [r0, #0]
 800a306:	600b      	str	r3, [r1, #0]
 800a308:	2d00      	cmp	r5, #0
 800a30a:	da03      	bge.n	800a314 <_printf_i+0xc8>
 800a30c:	232d      	movs	r3, #45	; 0x2d
 800a30e:	426d      	negs	r5, r5
 800a310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a314:	485e      	ldr	r0, [pc, #376]	; (800a490 <_printf_i+0x244>)
 800a316:	230a      	movs	r3, #10
 800a318:	e019      	b.n	800a34e <_printf_i+0x102>
 800a31a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a31e:	6805      	ldr	r5, [r0, #0]
 800a320:	600b      	str	r3, [r1, #0]
 800a322:	bf18      	it	ne
 800a324:	b22d      	sxthne	r5, r5
 800a326:	e7ef      	b.n	800a308 <_printf_i+0xbc>
 800a328:	680b      	ldr	r3, [r1, #0]
 800a32a:	6825      	ldr	r5, [r4, #0]
 800a32c:	1d18      	adds	r0, r3, #4
 800a32e:	6008      	str	r0, [r1, #0]
 800a330:	0628      	lsls	r0, r5, #24
 800a332:	d501      	bpl.n	800a338 <_printf_i+0xec>
 800a334:	681d      	ldr	r5, [r3, #0]
 800a336:	e002      	b.n	800a33e <_printf_i+0xf2>
 800a338:	0669      	lsls	r1, r5, #25
 800a33a:	d5fb      	bpl.n	800a334 <_printf_i+0xe8>
 800a33c:	881d      	ldrh	r5, [r3, #0]
 800a33e:	4854      	ldr	r0, [pc, #336]	; (800a490 <_printf_i+0x244>)
 800a340:	2f6f      	cmp	r7, #111	; 0x6f
 800a342:	bf0c      	ite	eq
 800a344:	2308      	moveq	r3, #8
 800a346:	230a      	movne	r3, #10
 800a348:	2100      	movs	r1, #0
 800a34a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a34e:	6866      	ldr	r6, [r4, #4]
 800a350:	60a6      	str	r6, [r4, #8]
 800a352:	2e00      	cmp	r6, #0
 800a354:	bfa2      	ittt	ge
 800a356:	6821      	ldrge	r1, [r4, #0]
 800a358:	f021 0104 	bicge.w	r1, r1, #4
 800a35c:	6021      	strge	r1, [r4, #0]
 800a35e:	b90d      	cbnz	r5, 800a364 <_printf_i+0x118>
 800a360:	2e00      	cmp	r6, #0
 800a362:	d04d      	beq.n	800a400 <_printf_i+0x1b4>
 800a364:	4616      	mov	r6, r2
 800a366:	fbb5 f1f3 	udiv	r1, r5, r3
 800a36a:	fb03 5711 	mls	r7, r3, r1, r5
 800a36e:	5dc7      	ldrb	r7, [r0, r7]
 800a370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a374:	462f      	mov	r7, r5
 800a376:	42bb      	cmp	r3, r7
 800a378:	460d      	mov	r5, r1
 800a37a:	d9f4      	bls.n	800a366 <_printf_i+0x11a>
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	d10b      	bne.n	800a398 <_printf_i+0x14c>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	07df      	lsls	r7, r3, #31
 800a384:	d508      	bpl.n	800a398 <_printf_i+0x14c>
 800a386:	6923      	ldr	r3, [r4, #16]
 800a388:	6861      	ldr	r1, [r4, #4]
 800a38a:	4299      	cmp	r1, r3
 800a38c:	bfde      	ittt	le
 800a38e:	2330      	movle	r3, #48	; 0x30
 800a390:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a394:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a398:	1b92      	subs	r2, r2, r6
 800a39a:	6122      	str	r2, [r4, #16]
 800a39c:	f8cd a000 	str.w	sl, [sp]
 800a3a0:	464b      	mov	r3, r9
 800a3a2:	aa03      	add	r2, sp, #12
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	f7ff fee2 	bl	800a170 <_printf_common>
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d14c      	bne.n	800a44a <_printf_i+0x1fe>
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3b4:	b004      	add	sp, #16
 800a3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ba:	4835      	ldr	r0, [pc, #212]	; (800a490 <_printf_i+0x244>)
 800a3bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	680e      	ldr	r6, [r1, #0]
 800a3c4:	061f      	lsls	r7, r3, #24
 800a3c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800a3ca:	600e      	str	r6, [r1, #0]
 800a3cc:	d514      	bpl.n	800a3f8 <_printf_i+0x1ac>
 800a3ce:	07d9      	lsls	r1, r3, #31
 800a3d0:	bf44      	itt	mi
 800a3d2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3d6:	6023      	strmi	r3, [r4, #0]
 800a3d8:	b91d      	cbnz	r5, 800a3e2 <_printf_i+0x196>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	f023 0320 	bic.w	r3, r3, #32
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	2310      	movs	r3, #16
 800a3e4:	e7b0      	b.n	800a348 <_printf_i+0xfc>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	f043 0320 	orr.w	r3, r3, #32
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	2378      	movs	r3, #120	; 0x78
 800a3f0:	4828      	ldr	r0, [pc, #160]	; (800a494 <_printf_i+0x248>)
 800a3f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3f6:	e7e3      	b.n	800a3c0 <_printf_i+0x174>
 800a3f8:	065e      	lsls	r6, r3, #25
 800a3fa:	bf48      	it	mi
 800a3fc:	b2ad      	uxthmi	r5, r5
 800a3fe:	e7e6      	b.n	800a3ce <_printf_i+0x182>
 800a400:	4616      	mov	r6, r2
 800a402:	e7bb      	b.n	800a37c <_printf_i+0x130>
 800a404:	680b      	ldr	r3, [r1, #0]
 800a406:	6826      	ldr	r6, [r4, #0]
 800a408:	6960      	ldr	r0, [r4, #20]
 800a40a:	1d1d      	adds	r5, r3, #4
 800a40c:	600d      	str	r5, [r1, #0]
 800a40e:	0635      	lsls	r5, r6, #24
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	d501      	bpl.n	800a418 <_printf_i+0x1cc>
 800a414:	6018      	str	r0, [r3, #0]
 800a416:	e002      	b.n	800a41e <_printf_i+0x1d2>
 800a418:	0671      	lsls	r1, r6, #25
 800a41a:	d5fb      	bpl.n	800a414 <_printf_i+0x1c8>
 800a41c:	8018      	strh	r0, [r3, #0]
 800a41e:	2300      	movs	r3, #0
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	4616      	mov	r6, r2
 800a424:	e7ba      	b.n	800a39c <_printf_i+0x150>
 800a426:	680b      	ldr	r3, [r1, #0]
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	600a      	str	r2, [r1, #0]
 800a42c:	681e      	ldr	r6, [r3, #0]
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	2100      	movs	r1, #0
 800a432:	4630      	mov	r0, r6
 800a434:	f7f5 ff54 	bl	80002e0 <memchr>
 800a438:	b108      	cbz	r0, 800a43e <_printf_i+0x1f2>
 800a43a:	1b80      	subs	r0, r0, r6
 800a43c:	6060      	str	r0, [r4, #4]
 800a43e:	6863      	ldr	r3, [r4, #4]
 800a440:	6123      	str	r3, [r4, #16]
 800a442:	2300      	movs	r3, #0
 800a444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a448:	e7a8      	b.n	800a39c <_printf_i+0x150>
 800a44a:	6923      	ldr	r3, [r4, #16]
 800a44c:	4632      	mov	r2, r6
 800a44e:	4649      	mov	r1, r9
 800a450:	4640      	mov	r0, r8
 800a452:	47d0      	blx	sl
 800a454:	3001      	adds	r0, #1
 800a456:	d0ab      	beq.n	800a3b0 <_printf_i+0x164>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	079b      	lsls	r3, r3, #30
 800a45c:	d413      	bmi.n	800a486 <_printf_i+0x23a>
 800a45e:	68e0      	ldr	r0, [r4, #12]
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	4298      	cmp	r0, r3
 800a464:	bfb8      	it	lt
 800a466:	4618      	movlt	r0, r3
 800a468:	e7a4      	b.n	800a3b4 <_printf_i+0x168>
 800a46a:	2301      	movs	r3, #1
 800a46c:	4632      	mov	r2, r6
 800a46e:	4649      	mov	r1, r9
 800a470:	4640      	mov	r0, r8
 800a472:	47d0      	blx	sl
 800a474:	3001      	adds	r0, #1
 800a476:	d09b      	beq.n	800a3b0 <_printf_i+0x164>
 800a478:	3501      	adds	r5, #1
 800a47a:	68e3      	ldr	r3, [r4, #12]
 800a47c:	9903      	ldr	r1, [sp, #12]
 800a47e:	1a5b      	subs	r3, r3, r1
 800a480:	42ab      	cmp	r3, r5
 800a482:	dcf2      	bgt.n	800a46a <_printf_i+0x21e>
 800a484:	e7eb      	b.n	800a45e <_printf_i+0x212>
 800a486:	2500      	movs	r5, #0
 800a488:	f104 0619 	add.w	r6, r4, #25
 800a48c:	e7f5      	b.n	800a47a <_printf_i+0x22e>
 800a48e:	bf00      	nop
 800a490:	0800a8bd 	.word	0x0800a8bd
 800a494:	0800a8ce 	.word	0x0800a8ce

0800a498 <_sbrk_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4d06      	ldr	r5, [pc, #24]	; (800a4b4 <_sbrk_r+0x1c>)
 800a49c:	2300      	movs	r3, #0
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4608      	mov	r0, r1
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	f7f6 ff76 	bl	8001394 <_sbrk>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_sbrk_r+0x1a>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_sbrk_r+0x1a>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	2000496c 	.word	0x2000496c

0800a4b8 <__sread>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c0:	f000 f8a0 	bl	800a604 <_read_r>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	bfab      	itete	ge
 800a4c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a4cc:	181b      	addge	r3, r3, r0
 800a4ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4d2:	bfac      	ite	ge
 800a4d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4d6:	81a3      	strhlt	r3, [r4, #12]
 800a4d8:	bd10      	pop	{r4, pc}

0800a4da <__swrite>:
 800a4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	461f      	mov	r7, r3
 800a4e0:	898b      	ldrh	r3, [r1, #12]
 800a4e2:	05db      	lsls	r3, r3, #23
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	d505      	bpl.n	800a4f8 <__swrite+0x1e>
 800a4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f000 f868 	bl	800a5c8 <_lseek_r>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a502:	81a3      	strh	r3, [r4, #12]
 800a504:	4632      	mov	r2, r6
 800a506:	463b      	mov	r3, r7
 800a508:	4628      	mov	r0, r5
 800a50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	f000 b817 	b.w	800a540 <_write_r>

0800a512 <__sseek>:
 800a512:	b510      	push	{r4, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51a:	f000 f855 	bl	800a5c8 <_lseek_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	bf15      	itete	ne
 800a524:	6560      	strne	r0, [r4, #84]	; 0x54
 800a526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a52e:	81a3      	strheq	r3, [r4, #12]
 800a530:	bf18      	it	ne
 800a532:	81a3      	strhne	r3, [r4, #12]
 800a534:	bd10      	pop	{r4, pc}

0800a536 <__sclose>:
 800a536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53a:	f000 b813 	b.w	800a564 <_close_r>
	...

0800a540 <_write_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	; (800a560 <_write_r+0x20>)
 800a544:	4604      	mov	r4, r0
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	602a      	str	r2, [r5, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	f7f6 fecf 	bl	80012f2 <_write>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_write_r+0x1e>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_write_r+0x1e>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	2000496c 	.word	0x2000496c

0800a564 <_close_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	; (800a580 <_close_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7f6 fedb 	bl	800132a <_close>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_close_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_close_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	2000496c 	.word	0x2000496c

0800a584 <_fstat_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	; (800a5a4 <_fstat_r+0x20>)
 800a588:	2300      	movs	r3, #0
 800a58a:	4604      	mov	r4, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	4611      	mov	r1, r2
 800a590:	602b      	str	r3, [r5, #0]
 800a592:	f7f6 fed6 	bl	8001342 <_fstat>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d102      	bne.n	800a5a0 <_fstat_r+0x1c>
 800a59a:	682b      	ldr	r3, [r5, #0]
 800a59c:	b103      	cbz	r3, 800a5a0 <_fstat_r+0x1c>
 800a59e:	6023      	str	r3, [r4, #0]
 800a5a0:	bd38      	pop	{r3, r4, r5, pc}
 800a5a2:	bf00      	nop
 800a5a4:	2000496c 	.word	0x2000496c

0800a5a8 <_isatty_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d06      	ldr	r5, [pc, #24]	; (800a5c4 <_isatty_r+0x1c>)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	f7f6 fed5 	bl	8001362 <_isatty>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_isatty_r+0x1a>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_isatty_r+0x1a>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	2000496c 	.word	0x2000496c

0800a5c8 <_lseek_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	; (800a5e8 <_lseek_r+0x20>)
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f7f6 fece 	bl	8001378 <_lseek>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_lseek_r+0x1e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_lseek_r+0x1e>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	2000496c 	.word	0x2000496c

0800a5ec <__malloc_lock>:
 800a5ec:	4801      	ldr	r0, [pc, #4]	; (800a5f4 <__malloc_lock+0x8>)
 800a5ee:	f7ff bb55 	b.w	8009c9c <__retarget_lock_acquire_recursive>
 800a5f2:	bf00      	nop
 800a5f4:	20004964 	.word	0x20004964

0800a5f8 <__malloc_unlock>:
 800a5f8:	4801      	ldr	r0, [pc, #4]	; (800a600 <__malloc_unlock+0x8>)
 800a5fa:	f7ff bb50 	b.w	8009c9e <__retarget_lock_release_recursive>
 800a5fe:	bf00      	nop
 800a600:	20004964 	.word	0x20004964

0800a604 <_read_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4d07      	ldr	r5, [pc, #28]	; (800a624 <_read_r+0x20>)
 800a608:	4604      	mov	r4, r0
 800a60a:	4608      	mov	r0, r1
 800a60c:	4611      	mov	r1, r2
 800a60e:	2200      	movs	r2, #0
 800a610:	602a      	str	r2, [r5, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	f7f6 fe50 	bl	80012b8 <_read>
 800a618:	1c43      	adds	r3, r0, #1
 800a61a:	d102      	bne.n	800a622 <_read_r+0x1e>
 800a61c:	682b      	ldr	r3, [r5, #0]
 800a61e:	b103      	cbz	r3, 800a622 <_read_r+0x1e>
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	bd38      	pop	{r3, r4, r5, pc}
 800a624:	2000496c 	.word	0x2000496c

0800a628 <_init>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	bf00      	nop
 800a62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62e:	bc08      	pop	{r3}
 800a630:	469e      	mov	lr, r3
 800a632:	4770      	bx	lr

0800a634 <_fini>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	bf00      	nop
 800a638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63a:	bc08      	pop	{r3}
 800a63c:	469e      	mov	lr, r3
 800a63e:	4770      	bx	lr
