
MyFirstBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b88  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080094d4  080094d4  000194d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  080094dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000048e0  2000008c  08009568  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000496c  08009568  0002496c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d9cb  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000380b  00000000  00000000  0003da85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cf0  00000000  00000000  00041290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ba8  00000000  00000000  00041f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000377c7  00000000  00000000  00042b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013dfe  00000000  00000000  0007a2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00154d77  00000000  00000000  0008e0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001e2e64  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d50  00000000  00000000  001e2eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stab         0000009c  00000000  00000000  001e6c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  001e6ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2000008c 	.word	0x2000008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008e10 	.word	0x08008e10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000090 	.word	0x20000090
 80002dc:	08008e10 	.word	0x08008e10

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <bl_fatsd>:
#include <stdarg.h> //for va_list var arg functions

const char image_name[] = "firmware_v1.bin";

void bl_fatsd(unsigned timeout)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b096      	sub	sp, #88	; 0x58
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	//bl_type = NONE; // The type of the bootloader, whether loading from USB or USART, will be determined by on what port the bootloader recevies its first valid command.
	//volatile uint32_t  bl_state = 0; // Must see correct command sequence to erase and reboot (commit first word)
	uint32_t  address = 0; 	//board_info.fw_size; /* force erase before upload will work */
 8000388:	2300      	movs	r3, #0
 800038a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  first_word = 0xffffffff;
 800038c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000390:	64fb      	str	r3, [r7, #76]	; 0x4c
	// led_off(LED_ACTIVITY);

	// open firmware binary from sd card.
	//Open the file system

	HAL_Delay(1000);
 8000392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000396:	f000 fe03 	bl	8000fa0 <HAL_Delay>

	fres = f_mount(&FatFs, "", 1); //1=mount now
 800039a:	2201      	movs	r2, #1
 800039c:	496c      	ldr	r1, [pc, #432]	; (8000550 <bl_fatsd+0x1d0>)
 800039e:	486d      	ldr	r0, [pc, #436]	; (8000554 <bl_fatsd+0x1d4>)
 80003a0:	f006 fd00 	bl	8006da4 <f_mount>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b6b      	ldr	r3, [pc, #428]	; (8000558 <bl_fatsd+0x1d8>)
 80003aa:	701a      	strb	r2, [r3, #0]
	FRESULT res = fres;
 80003ac:	4b6a      	ldr	r3, [pc, #424]	; (8000558 <bl_fatsd+0x1d8>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	if (fres != FR_OK)
 80003b4:	4b68      	ldr	r3, [pc, #416]	; (8000558 <bl_fatsd+0x1d8>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d003      	beq.n	80003c4 <bl_fatsd+0x44>
	{
		printf("f_mount error \r\n");
 80003bc:	4867      	ldr	r0, [pc, #412]	; (800055c <bl_fatsd+0x1dc>)
 80003be:	f007 fbd1 	bl	8007b64 <puts>
		return;
 80003c2:	e0c2      	b.n	800054a <bl_fatsd+0x1ca>

	DWORD free_clusters, free_sectors, total_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 80003c4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80003c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003cc:	4619      	mov	r1, r3
 80003ce:	4860      	ldr	r0, [pc, #384]	; (8000550 <bl_fatsd+0x1d0>)
 80003d0:	f007 f901 	bl	80075d6 <f_getfree>
 80003d4:	4603      	mov	r3, r0
 80003d6:	461a      	mov	r2, r3
 80003d8:	4b5f      	ldr	r3, [pc, #380]	; (8000558 <bl_fatsd+0x1d8>)
 80003da:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80003dc:	4b5e      	ldr	r3, [pc, #376]	; (8000558 <bl_fatsd+0x1d8>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d000      	beq.n	80003e6 <bl_fatsd+0x66>
		//sprintf("f_getfree error (%i)\r\n", fres);
		while(1);
 80003e4:	e7fe      	b.n	80003e4 <bl_fatsd+0x64>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80003e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	3b02      	subs	r3, #2
 80003ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003ee:	8952      	ldrh	r2, [r2, #10]
 80003f0:	fb02 f303 	mul.w	r3, r2, r3
 80003f4:	647b      	str	r3, [r7, #68]	; 0x44
	free_sectors = free_clusters * getFreeFs->csize;
 80003f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003f8:	895b      	ldrh	r3, [r3, #10]
 80003fa:	461a      	mov	r2, r3
 80003fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003fe:	fb03 f302 	mul.w	r3, r3, r2
 8000402:	643b      	str	r3, [r7, #64]	; 0x40

	sprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000406:	085b      	lsrs	r3, r3, #1
 8000408:	4619      	mov	r1, r3
 800040a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800040c:	085b      	lsrs	r3, r3, #1
 800040e:	461a      	mov	r2, r3
 8000410:	4853      	ldr	r0, [pc, #332]	; (8000560 <bl_fatsd+0x1e0>)
 8000412:	f007 fbaf 	bl	8007b74 <siprintf>

	///Now let's try to open file "test.txt"
	fres = f_open(&fil, "test.txt", FA_READ);
 8000416:	2201      	movs	r2, #1
 8000418:	4952      	ldr	r1, [pc, #328]	; (8000564 <bl_fatsd+0x1e4>)
 800041a:	4853      	ldr	r0, [pc, #332]	; (8000568 <bl_fatsd+0x1e8>)
 800041c:	f006 fd08 	bl	8006e30 <f_open>
 8000420:	4603      	mov	r3, r0
 8000422:	461a      	mov	r2, r3
 8000424:	4b4c      	ldr	r3, [pc, #304]	; (8000558 <bl_fatsd+0x1d8>)
 8000426:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000428:	4b4b      	ldr	r3, [pc, #300]	; (8000558 <bl_fatsd+0x1d8>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d000      	beq.n	8000432 <bl_fatsd+0xb2>
		//sprintf("f_open error (%i)\r\n");
		while(1);
 8000430:	e7fe      	b.n	8000430 <bl_fatsd+0xb0>
	//Read 30 bytes from "test.txt" on the SD card
	BYTE readBuf[30];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000432:	f107 030c 	add.w	r3, r7, #12
 8000436:	4a4c      	ldr	r2, [pc, #304]	; (8000568 <bl_fatsd+0x1e8>)
 8000438:	211e      	movs	r1, #30
 800043a:	4618      	mov	r0, r3
 800043c:	f007 f980 	bl	8007740 <f_gets>
 8000440:	63f8      	str	r0, [r7, #60]	; 0x3c
	} else {
		//sprintf("f_gets error (%i)\r\n", fres);
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8000442:	4849      	ldr	r0, [pc, #292]	; (8000568 <bl_fatsd+0x1e8>)
 8000444:	f007 f89d 	bl	8007582 <f_close>

	//Locate and check for loadable firmware. (iterate over images to find the latest and make checks).
	const image_hdr_t *image_hdr;
	image_hdr = image_get_header(image_name);
 8000448:	4848      	ldr	r0, [pc, #288]	; (800056c <bl_fatsd+0x1ec>)
 800044a:	f000 f89d 	bl	8000588 <image_get_header>
 800044e:	63b8      	str	r0, [r7, #56]	; 0x38
	uint8_t err = image_validate(image_hdr);
 8000450:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000452:	f000 f8c7 	bl	80005e4 <image_validate>
 8000456:	4603      	mov	r3, r0
 8000458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(err != 0)
 800045c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000460:	2b00      	cmp	r3, #0
 8000462:	d171      	bne.n	8000548 <bl_fatsd+0x1c8>
	{
		return;
	}
	printf("New valid image found in SD. Uploading firmware...\r\n");
 8000464:	4842      	ldr	r0, [pc, #264]	; (8000570 <bl_fatsd+0x1f0>)
 8000466:	f007 fb7d 	bl	8007b64 <puts>


	//Open new firmware to load.
	fres = f_open(&fil, image_name, FA_READ);
 800046a:	2201      	movs	r2, #1
 800046c:	493f      	ldr	r1, [pc, #252]	; (800056c <bl_fatsd+0x1ec>)
 800046e:	483e      	ldr	r0, [pc, #248]	; (8000568 <bl_fatsd+0x1e8>)
 8000470:	f006 fcde 	bl	8006e30 <f_open>
 8000474:	4603      	mov	r3, r0
 8000476:	461a      	mov	r2, r3
 8000478:	4b37      	ldr	r3, [pc, #220]	; (8000558 <bl_fatsd+0x1d8>)
 800047a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 800047c:	4b36      	ldr	r3, [pc, #216]	; (8000558 <bl_fatsd+0x1d8>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d003      	beq.n	800048c <bl_fatsd+0x10c>
	{
		printf("f_open error \r\n");
 8000484:	483b      	ldr	r0, [pc, #236]	; (8000574 <bl_fatsd+0x1f4>)
 8000486:	f007 fb6d 	bl	8007b64 <puts>
		return;
 800048a:	e05e      	b.n	800054a <bl_fatsd+0x1ca>
	}
	printf("Uploading image");
 800048c:	483a      	ldr	r0, [pc, #232]	; (8000578 <bl_fatsd+0x1f8>)
 800048e:	f007 fae3 	bl	8007a58 <iprintf>
//		//if (flash_func_read_word(address) != 0xffffffff) {
//		//	goto cmd_fail;
//		//}
//	}

	address = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t EndOfFIle = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	while(!EndOfFIle)
 800049c:	e03d      	b.n	800051a <bl_fatsd+0x19a>
	{
		uint8_t readBytes = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	72fb      	strb	r3, [r7, #11]

		// read maximum number of bytes from file.
		FRESULT rres = f_read(&fil, &flash_buffer.c[0], sizeof(flash_buffer.c)/sizeof(flash_buffer.c[0]), (UINT*)&readBytes);
 80004a2:	f107 030b 	add.w	r3, r7, #11
 80004a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004aa:	4934      	ldr	r1, [pc, #208]	; (800057c <bl_fatsd+0x1fc>)
 80004ac:	482e      	ldr	r0, [pc, #184]	; (8000568 <bl_fatsd+0x1e8>)
 80004ae:	f006 fe8b 	bl	80071c8 <f_read>
 80004b2:	4603      	mov	r3, r0
 80004b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		if(rres != FR_OK) {
 80004b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d003      	beq.n	80004c8 <bl_fatsd+0x148>
			printf("Read string from 'test.txt' contents:\r\n");
 80004c0:	482f      	ldr	r0, [pc, #188]	; (8000580 <bl_fatsd+0x200>)
 80004c2:	f007 fb4f 	bl	8007b64 <puts>
 80004c6:	e005      	b.n	80004d4 <bl_fatsd+0x154>
		} else {
			printf("f_gets error (%i)\r\n", fres);
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <bl_fatsd+0x1d8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4619      	mov	r1, r3
 80004ce:	482d      	ldr	r0, [pc, #180]	; (8000584 <bl_fatsd+0x204>)
 80004d0:	f007 fac2 	bl	8007a58 <iprintf>
		{
			//goto cmd_bad;
		}

		// sanity-checks
		for(uint8_t i = 0; i < readBytes; i++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80004da:	e004      	b.n	80004e6 <bl_fatsd+0x166>
 80004dc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80004e0:	3301      	adds	r3, #1
 80004e2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80004e6:	7afb      	ldrb	r3, [r7, #11]
 80004e8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d3f5      	bcc.n	80004dc <bl_fatsd+0x15c>
			//first_word = flash_buffer.c[0];
			// replace first word with bits we can overwrite later
			//flash_buffer.c[0] = 0xffffffff;
		}

		readBytes /= 4;
 80004f0:	7afb      	ldrb	r3, [r7, #11]
 80004f2:	089b      	lsrs	r3, r3, #2
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	72fb      	strb	r3, [r7, #11]

		for (uint8_t i = 0; i < readBytes; i++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80004fe:	e007      	b.n	8000510 <bl_fatsd+0x190>
			// do immediate read-back verify
			//if (flash_func_read_word(address) != flash_buffer.c[i*4]) {
			//	goto cmd_fail;
			//}

			address += 4;
 8000500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000502:	3304      	adds	r3, #4
 8000504:	657b      	str	r3, [r7, #84]	; 0x54
		for (uint8_t i = 0; i < readBytes; i++)
 8000506:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800050a:	3301      	adds	r3, #1
 800050c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8000510:	7afb      	ldrb	r3, [r7, #11]
 8000512:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8000516:	429a      	cmp	r2, r3
 8000518:	d3f2      	bcc.n	8000500 <bl_fatsd+0x180>
	while(!EndOfFIle)
 800051a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0bd      	beq.n	800049e <bl_fatsd+0x11e>
			//cout_word(sum);
		}


	//Close file
	f_close(&fil);
 8000522:	4811      	ldr	r0, [pc, #68]	; (8000568 <bl_fatsd+0x1e8>)
 8000524:	f007 f82d 	bl	8007582 <f_close>

	//Unmount the drive
	f_mount(NULL, "", 0);
 8000528:	2200      	movs	r2, #0
 800052a:	4909      	ldr	r1, [pc, #36]	; (8000550 <bl_fatsd+0x1d0>)
 800052c:	2000      	movs	r0, #0
 800052e:	f006 fc39 	bl	8006da4 <f_mount>
	//	if (first_word != 0xffffffff && (bl_state & STATE_ALLOWS_REBOOT) != STATE_ALLOWS_REBOOT) {
	//		goto cmd_bad;
	//	}

	// program the deferred first word
	if (first_word != 0xffffffff) {
 8000532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000538:	d002      	beq.n	8000540 <bl_fatsd+0x1c0>
		//if (flash_func_read_word(0) != first_word) {
		//	goto cmd_fail;
		//}

		// revert in case the flash was bad...
		first_word = 0xffffffff;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}


	// start image
	image_start(image_hdr);
 8000540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000542:	f000 faff 	bl	8000b44 <image_start>
 8000546:	e000      	b.n	800054a <bl_fatsd+0x1ca>
		return;
 8000548:	bf00      	nop
//cmd_fail:
		// send a 'command failed' response but don't kill the timeout - could be garbage
		//failure_response();
		//continue;

}
 800054a:	3758      	adds	r7, #88	; 0x58
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	08008e28 	.word	0x08008e28
 8000554:	200007ec 	.word	0x200007ec
 8000558:	20001824 	.word	0x20001824
 800055c:	08008e2c 	.word	0x08008e2c
 8000560:	08008e3c 	.word	0x08008e3c
 8000564:	08008e84 	.word	0x08008e84
 8000568:	20001828 	.word	0x20001828
 800056c:	08008fdc 	.word	0x08008fdc
 8000570:	08008e90 	.word	0x08008e90
 8000574:	08008ec4 	.word	0x08008ec4
 8000578:	08008ed4 	.word	0x08008ed4
 800057c:	200000a8 	.word	0x200000a8
 8000580:	08008ee4 	.word	0x08008ee4
 8000584:	08008f0c 	.word	0x08008f0c

08000588 <image_get_header>:

const image_hdr_t *image_get_header(const char *image_path)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b092      	sub	sp, #72	; 0x48
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	//open the file.

	//read image_hdr_t
	uint8_t readBytes = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t ima_hdr_buff[sizeof(image_hdr_t)];

	// read maximum number of bytes from file.
	FRESULT rres = f_read(&fil, &ima_hdr_buff, sizeof(image_hdr_t), (UINT*)&readBytes);
 8000596:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 800059a:	f107 0108 	add.w	r1, r7, #8
 800059e:	2235      	movs	r2, #53	; 0x35
 80005a0:	480e      	ldr	r0, [pc, #56]	; (80005dc <image_get_header+0x54>)
 80005a2:	f006 fe11 	bl	80071c8 <f_read>
 80005a6:	4603      	mov	r3, r0
 80005a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(rres != FR_OK) {
 80005ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <image_get_header+0x32>
		printf("Error.");
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <image_get_header+0x58>)
 80005b6:	f007 fa4f 	bl	8007a58 <iprintf>
	}

	// check if end of file reached.
	if(sizeof(image_hdr_t) > readBytes)
 80005ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005be:	2b34      	cmp	r3, #52	; 0x34
 80005c0:	d802      	bhi.n	80005c8 <image_get_header+0x40>
	{
		printf("Error.");
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <image_get_header+0x58>)
 80005c4:	f007 fa48 	bl	8007a58 <iprintf>
	}

	// cast
	const image_hdr_t *hdr = NULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
	hdr = (const image_hdr_t *)&ima_hdr_buff[0];
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40

	return hdr;
 80005d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	if (hdr && hdr->image_magic == IMAGE_MAGIC) {
	        return hdr;
	    } else {
	        return NULL;
	    }
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3748      	adds	r7, #72	; 0x48
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20001828 	.word	0x20001828
 80005e0:	08008f20 	.word	0x08008f20

080005e4 <image_validate>:

int image_validate(const image_hdr_t *hdr) {
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
//        return 0;
//    } else {
//        printf("CRC Mismatch: %lx vs %lx\n", a, b);
//        return -1;
//    }
	return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <crc32>:
 */

#include <crc32.h>

uint32_t crc32(const uint8_t *src, uint8_t len, uint32_t state)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	460b      	mov	r3, r1
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	72fb      	strb	r3, [r7, #11]
	static uint32_t crctab[256];

	/* check whether we have generated the CRC table yet */
	/* this is much smaller than a static table */
	if (crctab[1] == 0) {
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <crc32+0xa4>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d126      	bne.n	8000660 <crc32+0x64>
		for (unsigned i = 0; i < 256; i++)
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
 8000616:	e020      	b.n	800065a <crc32+0x5e>
		{
			uint32_t c = i;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	61bb      	str	r3, [r7, #24]

			for (unsigned j = 0; j < 8; j++)
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	e010      	b.n	8000644 <crc32+0x48>
			{
				if (c & 1)
 8000622:	69bb      	ldr	r3, [r7, #24]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	2b00      	cmp	r3, #0
 800062a:	d005      	beq.n	8000638 <crc32+0x3c>
				{
					c = 0xedb88320U ^ (c >> 1);
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	085a      	lsrs	r2, r3, #1
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <crc32+0xa8>)
 8000632:	4053      	eors	r3, r2
 8000634:	61bb      	str	r3, [r7, #24]
 8000636:	e002      	b.n	800063e <crc32+0x42>
				}
				else
				{
					c = c >> 1;
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
			for (unsigned j = 0; j < 8; j++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b07      	cmp	r3, #7
 8000648:	d9eb      	bls.n	8000622 <crc32+0x26>
				}
			}

			crctab[i] = c;
 800064a:	4915      	ldr	r1, [pc, #84]	; (80006a0 <crc32+0xa4>)
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	69ba      	ldr	r2, [r7, #24]
 8000650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (unsigned i = 0; i < 256; i++)
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	3301      	adds	r3, #1
 8000658:	61fb      	str	r3, [r7, #28]
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	2bff      	cmp	r3, #255	; 0xff
 800065e:	d9db      	bls.n	8000618 <crc32+0x1c>
		}
	}

	for (unsigned i = 0; i < len; i++) {
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	e011      	b.n	800068a <crc32+0x8e>
		state = crctab[(state ^ src[i]) & 0xff] ^ (state >> 8);
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4053      	eors	r3, r2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <crc32+0xa4>)
 8000678:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	0a1b      	lsrs	r3, r3, #8
 8000680:	4053      	eors	r3, r2
 8000682:	607b      	str	r3, [r7, #4]
	for (unsigned i = 0; i < len; i++) {
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	3301      	adds	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	7afb      	ldrb	r3, [r7, #11]
 800068c:	693a      	ldr	r2, [r7, #16]
 800068e:	429a      	cmp	r2, r3
 8000690:	d3e9      	bcc.n	8000666 <crc32+0x6a>
	}

	return state;
 8000692:	687b      	ldr	r3, [r7, #4]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3724      	adds	r7, #36	; 0x24
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	200001a8 	.word	0x200001a8
 80006a4:	edb88320 	.word	0xedb88320

080006a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ac:	f3bf 8f4f 	dsb	sy
}
 80006b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <__NVIC_SystemReset+0x24>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ba:	4904      	ldr	r1, [pc, #16]	; (80006cc <__NVIC_SystemReset+0x24>)
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <__NVIC_SystemReset+0x28>)
 80006be:	4313      	orrs	r3, r2
 80006c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
}
 80006c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <__NVIC_SystemReset+0x20>
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	05fa0004 	.word	0x05fa0004

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fbcf 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f853 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f915 	bl	8000910 <MX_GPIO_Init>
  MX_FATFS_Init();
 80006e6:	f003 fc2f 	bl	8003f48 <MX_FATFS_Init>
  MX_SPI4_Init();
 80006ea:	f000 f8b9 	bl	8000860 <MX_SPI4_Init>

    /* USER CODE BEGIN 3 */
	  // Check firmware updates.
	  //bootloader(timeout);
	#if SD_INTERFACE
	bl_fatsd(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f2:	f7ff fe45 	bl	8000380 <bl_fatsd>
	#endif

	  // Check image.
	  image_hdr_t *image_hdr = (image_hdr_t *) &(__app_start__);
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <main+0xa4>)
 80006f8:	617b      	str	r3, [r7, #20]
	  uint32_t crc = image_hdr->crc;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	613b      	str	r3, [r7, #16]

	  //pass all the flash memory addresses. //Start address is 0x08020000 (for this controller)
	  // TODO: Pass the starting flash address as parameter.
	  uint32_t flash_prog_start_add = 0x08020000 + 0x200; 		//512 is image_hdr memory space.
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <main+0xa8>)
 8000702:	60fb      	str	r3, [r7, #12]

	  // compute CRC of the programmed area
	  uint32_t sum = ~0U;
 8000704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000708:	61fb      	str	r3, [r7, #28]
	  for (uint32_t p = 0; p < image_hdr->data_size; p += 4)
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	e01a      	b.n	8000746 <main+0x72>
	  {
		  uint32_t bytes;
		  uint32_t address = flash_prog_start_add + p;
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	4413      	add	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]

		  if(address & 3)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	f003 0303 	and.w	r3, r3, #3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x58>
		  {
			  printf("Error. Bad memory access.");
 8000722:	4817      	ldr	r0, [pc, #92]	; (8000780 <main+0xac>)
 8000724:	f007 f998 	bl	8007a58 <iprintf>
			  return 0;
 8000728:	2300      	movs	r3, #0
 800072a:	e021      	b.n	8000770 <main+0x9c>
		  }

		  //get data from flash
		  bytes = *(uint32_t *) address;
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	607b      	str	r3, [r7, #4]

		  sum = crc32((uint8_t *)&bytes, sizeof(bytes), sum);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	69fa      	ldr	r2, [r7, #28]
 8000736:	2104      	movs	r1, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff5f 	bl	80005fc <crc32>
 800073e:	61f8      	str	r0, [r7, #28]
	  for (uint32_t p = 0; p < image_hdr->data_size; p += 4)
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	3304      	adds	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	69ba      	ldr	r2, [r7, #24]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3df      	bcc.n	8000710 <main+0x3c>
	  }
	  sum = sum ^ ~0U;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	43db      	mvns	r3, r3
 8000754:	61fb      	str	r3, [r7, #28]

	  if(crc != sum)
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	429a      	cmp	r2, r3
 800075c:	d004      	beq.n	8000768 <main+0x94>
	  {
	    printf("Error. Flash memory data corruption");
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <main+0xb0>)
 8000760:	f007 f97a 	bl	8007a58 <iprintf>
	    return 0;
 8000764:	2300      	movs	r3, #0
 8000766:	e003      	b.n	8000770 <main+0x9c>
	  }

	  // Launch image.
	  image_start(image_hdr);
 8000768:	6978      	ldr	r0, [r7, #20]
 800076a:	f000 f9eb 	bl	8000b44 <image_start>
  {
 800076e:	e7be      	b.n	80006ee <main+0x1a>

  }
  /* USER CODE END 3 */
}
 8000770:	4618      	mov	r0, r3
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08020000 	.word	0x08020000
 800077c:	08020200 	.word	0x08020200
 8000780:	08008f28 	.word	0x08008f28
 8000784:	08008f44 	.word	0x08008f44

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09c      	sub	sp, #112	; 0x70
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	224c      	movs	r2, #76	; 0x4c
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f007 f956 	bl	8007a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2220      	movs	r2, #32
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 f950 	bl	8007a48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a8:	2002      	movs	r0, #2
 80007aa:	f000 fed7 	bl	800155c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b29      	ldr	r3, [pc, #164]	; (8000858 <SystemClock_Config+0xd0>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b6:	4a28      	ldr	r2, [pc, #160]	; (8000858 <SystemClock_Config+0xd0>)
 80007b8:	f023 0301 	bic.w	r3, r3, #1
 80007bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <SystemClock_Config+0xd0>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <SystemClock_Config+0xd4>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <SystemClock_Config+0xd4>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b20      	ldr	r3, [pc, #128]	; (800085c <SystemClock_Config+0xd4>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e4:	bf00      	nop
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <SystemClock_Config+0xd4>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f2:	d1f8      	bne.n	80007e6 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000800:	2300      	movs	r3, #0
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fee1 	bl	80015d0 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000814:	f000 f9ce 	bl	8000bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	233f      	movs	r3, #63	; 0x3f
 800081a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2101      	movs	r1, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fad6 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800084a:	f000 f9b3 	bl	8000bb4 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3770      	adds	r7, #112	; 0x70
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	58000400 	.word	0x58000400
 800085c:	58024800 	.word	0x58024800

08000860 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_SPI4_Init+0xa8>)
 8000866:	4a29      	ldr	r2, [pc, #164]	; (800090c <MX_SPI4_Init+0xac>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <MX_SPI4_Init+0xa8>)
 800086c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000870:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_SPI4_Init+0xa8>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_SPI4_Init+0xa8>)
 800087a:	2207      	movs	r2, #7
 800087c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_SPI4_Init+0xa8>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_SPI4_Init+0xa8>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_SPI4_Init+0xa8>)
 800088c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000890:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_SPI4_Init+0xa8>)
 8000894:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000898:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_SPI4_Init+0xa8>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80008ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_SPI4_Init+0xa8>)
 80008f4:	f002 fe50 	bl	8003598 <HAL_SPI_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80008fe:	f000 f959 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20002858 	.word	0x20002858
 800090c:	40013400 	.word	0x40013400

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000926:	4b7f      	ldr	r3, [pc, #508]	; (8000b24 <MX_GPIO_Init+0x214>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a7d      	ldr	r2, [pc, #500]	; (8000b24 <MX_GPIO_Init+0x214>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b7b      	ldr	r3, [pc, #492]	; (8000b24 <MX_GPIO_Init+0x214>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <MX_GPIO_Init+0x214>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	4a76      	ldr	r2, [pc, #472]	; (8000b24 <MX_GPIO_Init+0x214>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000954:	4b73      	ldr	r3, [pc, #460]	; (8000b24 <MX_GPIO_Init+0x214>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	4b70      	ldr	r3, [pc, #448]	; (8000b24 <MX_GPIO_Init+0x214>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	4a6e      	ldr	r2, [pc, #440]	; (8000b24 <MX_GPIO_Init+0x214>)
 800096a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000972:	4b6c      	ldr	r3, [pc, #432]	; (8000b24 <MX_GPIO_Init+0x214>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b68      	ldr	r3, [pc, #416]	; (8000b24 <MX_GPIO_Init+0x214>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	4a67      	ldr	r2, [pc, #412]	; (8000b24 <MX_GPIO_Init+0x214>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000990:	4b64      	ldr	r3, [pc, #400]	; (8000b24 <MX_GPIO_Init+0x214>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b61      	ldr	r3, [pc, #388]	; (8000b24 <MX_GPIO_Init+0x214>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	4a5f      	ldr	r2, [pc, #380]	; (8000b24 <MX_GPIO_Init+0x214>)
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ae:	4b5d      	ldr	r3, [pc, #372]	; (8000b24 <MX_GPIO_Init+0x214>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009bc:	4b59      	ldr	r3, [pc, #356]	; (8000b24 <MX_GPIO_Init+0x214>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	4a58      	ldr	r2, [pc, #352]	; (8000b24 <MX_GPIO_Init+0x214>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009cc:	4b55      	ldr	r3, [pc, #340]	; (8000b24 <MX_GPIO_Init+0x214>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009da:	4b52      	ldr	r3, [pc, #328]	; (8000b24 <MX_GPIO_Init+0x214>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	4a50      	ldr	r2, [pc, #320]	; (8000b24 <MX_GPIO_Init+0x214>)
 80009e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ea:	4b4e      	ldr	r3, [pc, #312]	; (8000b24 <MX_GPIO_Init+0x214>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2110      	movs	r1, #16
 80009fc:	484a      	ldr	r0, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x218>)
 80009fe:	f000 fd93 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	4849      	ldr	r0, [pc, #292]	; (8000b2c <MX_GPIO_Init+0x21c>)
 8000a08:	f000 fd8e 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4841      	ldr	r0, [pc, #260]	; (8000b28 <MX_GPIO_Init+0x218>)
 8000a24:	f000 fbd0 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	4b40      	ldr	r3, [pc, #256]	; (8000b30 <MX_GPIO_Init+0x220>)
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	483d      	ldr	r0, [pc, #244]	; (8000b34 <MX_GPIO_Init+0x224>)
 8000a3e:	f000 fbc3 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a42:	2332      	movs	r3, #50	; 0x32
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a52:	230b      	movs	r3, #11
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4835      	ldr	r0, [pc, #212]	; (8000b34 <MX_GPIO_Init+0x224>)
 8000a5e:	f000 fbb3 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 8000a62:	2386      	movs	r3, #134	; 0x86
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	230b      	movs	r3, #11
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	482e      	ldr	r0, [pc, #184]	; (8000b38 <MX_GPIO_Init+0x228>)
 8000a7e:	f000 fba3 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a94:	230b      	movs	r3, #11
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4827      	ldr	r0, [pc, #156]	; (8000b3c <MX_GPIO_Init+0x22c>)
 8000aa0:	f000 fb92 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481f      	ldr	r0, [pc, #124]	; (8000b40 <MX_GPIO_Init+0x230>)
 8000ac2:	f000 fb81 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <MX_GPIO_Init+0x21c>)
 8000ade:	f000 fb73 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_GPIO_Init+0x21c>)
 8000af6:	f000 fb67 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000afa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_GPIO_Init+0x21c>)
 8000b18:	f000 fb56 	bl	80011c8 <HAL_GPIO_Init>

}
 8000b1c:	bf00      	nop
 8000b1e:	3730      	adds	r7, #48	; 0x30
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	58024400 	.word	0x58024400
 8000b28:	58021000 	.word	0x58021000
 8000b2c:	58021800 	.word	0x58021800
 8000b30:	11110000 	.word	0x11110000
 8000b34:	58020800 	.word	0x58020800
 8000b38:	58020000 	.word	0x58020000
 8000b3c:	58020400 	.word	0x58020400
 8000b40:	58020c00 	.word	0x58020c00

08000b44 <image_start>:

/* USER CODE BEGIN 4 */
void image_start(const image_hdr_t *image_hdr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	uint32_t jumpAddr;
	ptrF Jump_To_Application;

	// check if available image in Flash.
	uint32_t vector_add_offset = (uint32_t)image_hdr + (uint32_t)image_hdr->vector_addr;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f8d3 2023 	ldr.w	r2, [r3, #35]	; 0x23
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]

	if(((*(uint32_t*) vector_add_offset) & 0x2FFE0000) == 0x20020000)		//0x20020000 &
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <image_start+0x60>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <image_start+0x64>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d115      	bne.n	8000b92 <image_start+0x4e>
	{
		// loaded image info.
		printf("Image start... \r\n");
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <image_start+0x68>)
 8000b68:	f006 fffc 	bl	8007b64 <puts>
		HAL_Delay(100);
 8000b6c:	2064      	movs	r0, #100	; 0x64
 8000b6e:	f000 fa17 	bl	8000fa0 <HAL_Delay>

		//Jump to firmware.
		jumpAddr = *(uint32_t*)(vector_add_offset + 4);
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3304      	adds	r3, #4
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	613b      	str	r3, [r7, #16]
		Jump_To_Application = (ptrF)jumpAddr;
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	60fb      	str	r3, [r7, #12]

		//Initialize firmware stack pointer.
		__set_MSP(*(uint32_t*)vector_add_offset);
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	f383 8808 	msr	MSP, r3
}
 8000b8a:	bf00      	nop
		Jump_To_Application();
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4798      	blx	r3
		while(1)
		{
			NVIC_SystemReset();
		}
	}
}
 8000b90:	e004      	b.n	8000b9c <image_start+0x58>
		printf("No firmware loaded \r\n");
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <image_start+0x6c>)
 8000b94:	f006 ffe6 	bl	8007b64 <puts>
			NVIC_SystemReset();
 8000b98:	f7ff fd86 	bl	80006a8 <__NVIC_SystemReset>
}
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2ffe0000 	.word	0x2ffe0000
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	08008f68 	.word	0x08008f68
 8000bb0:	08008f7c 	.word	0x08008f7c

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	58024400 	.word	0x58024400

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0b8      	sub	sp, #224	; 0xe0
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	22bc      	movs	r2, #188	; 0xbc
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f006 ff17 	bl	8007a48 <memset>
  if(hspi->Instance==SPI4)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a24      	ldr	r2, [pc, #144]	; (8000cb0 <HAL_SPI_MspInit+0xbc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d141      	bne.n	8000ca8 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fc0c 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000c3e:	f7ff ffb9 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <HAL_SPI_MspInit+0xc0>)
 8000c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <HAL_SPI_MspInit+0xc0>)
 8000c4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_SPI_MspInit+0xc0>)
 8000c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_SPI_MspInit+0xc0>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <HAL_SPI_MspInit+0xc0>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_SPI_MspInit+0xc0>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000c7e:	2364      	movs	r3, #100	; 0x64
 8000c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000c96:	2305      	movs	r3, #5
 8000c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_SPI_MspInit+0xc4>)
 8000ca4:	f000 fa90 	bl	80011c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	37e0      	adds	r7, #224	; 0xe0
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40013400 	.word	0x40013400
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	58021000 	.word	0x58021000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f92a 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d14:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <SystemInit+0xec>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a38      	ldr	r2, [pc, #224]	; (8000dfc <SystemInit+0xec>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d24:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <SystemInit+0xf0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d807      	bhi.n	8000d40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <SystemInit+0xf0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f023 030f 	bic.w	r3, r3, #15
 8000d38:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <SystemInit+0xf0>)
 8000d3a:	f043 0307 	orr.w	r3, r3, #7
 8000d3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <SystemInit+0xf4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <SystemInit+0xf4>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <SystemInit+0xf4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d52:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <SystemInit+0xf4>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	492b      	ldr	r1, [pc, #172]	; (8000e04 <SystemInit+0xf4>)
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <SystemInit+0xf8>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <SystemInit+0xf0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d007      	beq.n	8000d7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <SystemInit+0xf0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f023 030f 	bic.w	r3, r3, #15
 8000d72:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <SystemInit+0xf0>)
 8000d74:	f043 0307 	orr.w	r3, r3, #7
 8000d78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <SystemInit+0xf4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <SystemInit+0xf4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <SystemInit+0xf4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <SystemInit+0xf4>)
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <SystemInit+0xfc>)
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <SystemInit+0xf4>)
 8000d94:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <SystemInit+0x100>)
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <SystemInit+0xf4>)
 8000d9a:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <SystemInit+0x104>)
 8000d9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <SystemInit+0xf4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <SystemInit+0xf4>)
 8000da6:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <SystemInit+0x104>)
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <SystemInit+0xf4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <SystemInit+0xf4>)
 8000db2:	4a18      	ldr	r2, [pc, #96]	; (8000e14 <SystemInit+0x104>)
 8000db4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <SystemInit+0xf4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <SystemInit+0xf4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <SystemInit+0xf4>)
 8000dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <SystemInit+0xf4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <SystemInit+0x108>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <SystemInit+0x10c>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dda:	d202      	bcs.n	8000de2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <SystemInit+0x110>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <SystemInit+0x114>)
 8000de4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000de8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SystemInit+0xec>)
 8000dec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	52002000 	.word	0x52002000
 8000e04:	58024400 	.word	0x58024400
 8000e08:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e0c:	02020200 	.word	0x02020200
 8000e10:	01ff0000 	.word	0x01ff0000
 8000e14:	01010280 	.word	0x01010280
 8000e18:	5c001000 	.word	0x5c001000
 8000e1c:	ffff0000 	.word	0xffff0000
 8000e20:	51008108 	.word	0x51008108
 8000e24:	52004000 	.word	0x52004000

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f7ff ff70 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f006 fdd3 	bl	8007a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fc3b 	bl	80006d4 <main>
  bx  lr
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000e6c:	080094dc 	.word	0x080094dc
  ldr r2, =_sbss
 8000e70:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000e74:	2000496c 	.word	0x2000496c

08000e78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC3_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e82:	2003      	movs	r0, #3
 8000e84:	f000 f96e 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e88:	f001 f968 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_Init+0x68>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	4913      	ldr	r1, [pc, #76]	; (8000ee8 <HAL_Init+0x6c>)
 8000e9a:	5ccb      	ldrb	r3, [r1, r3]
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_Init+0x68>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_Init+0x6c>)
 8000eb0:	5cd3      	ldrb	r3, [r2, r3]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_Init+0x70>)
 8000ebe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_Init+0x74>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f814 	bl	8000ef4 <HAL_InitTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e002      	b.n	8000edc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed6:	f7ff fe73 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	08008fec 	.word	0x08008fec
 8000eec:	20000004 	.word	0x20000004
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_InitTick+0x60>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e021      	b.n	8000f4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_InitTick+0x64>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_InitTick+0x60>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f945 	bl	80011ae <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f000 f91d 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x68>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000000c 	.word	0x2000000c
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	200028e0 	.word	0x200028e0

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200028e0 	.word	0x200028e0

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000000c 	.word	0x2000000c

08000fe8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetREVID+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0c1b      	lsrs	r3, r3, #16
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	5c001000 	.word	0x5c001000

08001000 <__NVIC_SetPriorityGrouping>:
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <__NVIC_SetPriorityGrouping+0x40>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	4313      	orrs	r3, r2
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x40>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	05fa0000 	.word	0x05fa0000

08001048 <__NVIC_GetPriorityGrouping>:
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_SetPriority>:
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff47 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff5e 	bl	8001048 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff90 	bl	80010b8 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5f 	bl	8001064 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffb2 	bl	8001120 <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011d6:	4b89      	ldr	r3, [pc, #548]	; (80013fc <HAL_GPIO_Init+0x234>)
 80011d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011da:	e194      	b.n	8001506 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8186 	beq.w	8001500 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d00b      	beq.n	8001214 <HAL_GPIO_Init+0x4c>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d007      	beq.n	8001214 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001208:	2b11      	cmp	r3, #17
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b12      	cmp	r3, #18
 8001212:	d130      	bne.n	8001276 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124a:	2201      	movs	r2, #1
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	f003 0201 	and.w	r2, r3, #1
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0xee>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b12      	cmp	r3, #18
 80012b4:	d123      	bne.n	80012fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	69b9      	ldr	r1, [r7, #24]
 80012fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0203 	and.w	r2, r3, #3
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80e0 	beq.w	8001500 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_GPIO_Init+0x238>)
 8001342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001346:	4a2e      	ldr	r2, [pc, #184]	; (8001400 <HAL_GPIO_Init+0x238>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_GPIO_Init+0x238>)
 8001352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <HAL_GPIO_Init+0x23c>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a20      	ldr	r2, [pc, #128]	; (8001408 <HAL_GPIO_Init+0x240>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d052      	beq.n	8001430 <HAL_GPIO_Init+0x268>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a1f      	ldr	r2, [pc, #124]	; (800140c <HAL_GPIO_Init+0x244>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d031      	beq.n	80013f6 <HAL_GPIO_Init+0x22e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_GPIO_Init+0x248>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d02b      	beq.n	80013f2 <HAL_GPIO_Init+0x22a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_GPIO_Init+0x24c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x226>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <HAL_GPIO_Init+0x250>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x222>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <HAL_GPIO_Init+0x254>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x21e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <HAL_GPIO_Init+0x258>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x21a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <HAL_GPIO_Init+0x25c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x216>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a18      	ldr	r2, [pc, #96]	; (8001428 <HAL_GPIO_Init+0x260>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x212>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_GPIO_Init+0x264>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x20e>
 80013d2:	2309      	movs	r3, #9
 80013d4:	e02d      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013d6:	230a      	movs	r3, #10
 80013d8:	e02b      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013da:	2308      	movs	r3, #8
 80013dc:	e029      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013de:	2307      	movs	r3, #7
 80013e0:	e027      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013e2:	2306      	movs	r3, #6
 80013e4:	e025      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013e6:	2305      	movs	r3, #5
 80013e8:	e023      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013ea:	2304      	movs	r3, #4
 80013ec:	e021      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e01f      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e01d      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e01b      	b.n	8001432 <HAL_GPIO_Init+0x26a>
 80013fa:	bf00      	nop
 80013fc:	58000080 	.word	0x58000080
 8001400:	58024400 	.word	0x58024400
 8001404:	58000400 	.word	0x58000400
 8001408:	58020000 	.word	0x58020000
 800140c:	58020400 	.word	0x58020400
 8001410:	58020800 	.word	0x58020800
 8001414:	58020c00 	.word	0x58020c00
 8001418:	58021000 	.word	0x58021000
 800141c:	58021400 	.word	0x58021400
 8001420:	58021800 	.word	0x58021800
 8001424:	58021c00 	.word	0x58021c00
 8001428:	58022000 	.word	0x58022000
 800142c:	58022400 	.word	0x58022400
 8001430:	2300      	movs	r3, #0
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	4093      	lsls	r3, r2
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001442:	4938      	ldr	r1, [pc, #224]	; (8001524 <HAL_GPIO_Init+0x35c>)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3301      	adds	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	f47f ae63 	bne.w	80011dc <HAL_GPIO_Init+0x14>
  }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3724      	adds	r7, #36	; 0x24
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	58000400 	.word	0x58000400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	619a      	str	r2, [r3, #24]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_PWREx_ConfigSupply+0x70>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b04      	cmp	r3, #4
 800156e:	d00a      	beq.n	8001586 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_PWREx_ConfigSupply+0x70>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	d001      	beq.n	8001582 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e01f      	b.n	80015c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e01d      	b.n	80015c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_PWREx_ConfigSupply+0x70>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f023 0207 	bic.w	r2, r3, #7
 800158e:	490f      	ldr	r1, [pc, #60]	; (80015cc <HAL_PWREx_ConfigSupply+0x70>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001596:	f7ff fcf7 	bl	8000f88 <HAL_GetTick>
 800159a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800159c:	e009      	b.n	80015b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800159e:	f7ff fcf3 	bl	8000f88 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ac:	d901      	bls.n	80015b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e007      	b.n	80015c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_PWREx_ConfigSupply+0x70>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015be:	d1ee      	bne.n	800159e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	58024800 	.word	0x58024800

080015d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e3ff      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8087 	beq.w	80016fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f0:	4b99      	ldr	r3, [pc, #612]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015fa:	4b97      	ldr	r3, [pc, #604]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	2b10      	cmp	r3, #16
 8001604:	d007      	beq.n	8001616 <HAL_RCC_OscConfig+0x46>
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	2b18      	cmp	r3, #24
 800160a:	d110      	bne.n	800162e <HAL_RCC_OscConfig+0x5e>
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d10b      	bne.n	800162e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001616:	4b90      	ldr	r3, [pc, #576]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d06c      	beq.n	80016fc <HAL_RCC_OscConfig+0x12c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d168      	bne.n	80016fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e3d9      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x76>
 8001638:	4b87      	ldr	r3, [pc, #540]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a86      	ldr	r2, [pc, #536]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e02e      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x98>
 800164e:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a81      	ldr	r2, [pc, #516]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7e      	ldr	r2, [pc, #504]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e01d      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0xbc>
 8001672:	4b79      	ldr	r3, [pc, #484]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a78      	ldr	r2, [pc, #480]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b76      	ldr	r3, [pc, #472]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a75      	ldr	r2, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 800168c:	4b72      	ldr	r3, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a71      	ldr	r2, [pc, #452]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b6f      	ldr	r3, [pc, #444]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a6e      	ldr	r2, [pc, #440]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fc6c 	bl	8000f88 <HAL_GetTick>
 80016b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fc68 	bl	8000f88 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e38d      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c6:	4b64      	ldr	r3, [pc, #400]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0xe4>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fc58 	bl	8000f88 <HAL_GetTick>
 80016d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fc54 	bl	8000f88 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e379      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016ee:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x10c>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80ae 	beq.w	8001868 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170c:	4b52      	ldr	r3, [pc, #328]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001714:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001716:	4b50      	ldr	r3, [pc, #320]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_RCC_OscConfig+0x162>
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	2b18      	cmp	r3, #24
 8001726:	d13a      	bne.n	800179e <HAL_RCC_OscConfig+0x1ce>
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d135      	bne.n	800179e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001732:	4b49      	ldr	r3, [pc, #292]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x17a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e34b      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	f7ff fc4d 	bl	8000fe8 <HAL_GetREVID>
 800174e:	4603      	mov	r3, r0
 8001750:	f241 0203 	movw	r2, #4099	; 0x1003
 8001754:	4293      	cmp	r3, r2
 8001756:	d817      	bhi.n	8001788 <HAL_RCC_OscConfig+0x1b8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	2b40      	cmp	r3, #64	; 0x40
 800175e:	d108      	bne.n	8001772 <HAL_RCC_OscConfig+0x1a2>
 8001760:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800176a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	e07a      	b.n	8001868 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	031b      	lsls	r3, r3, #12
 8001780:	4935      	ldr	r1, [pc, #212]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001786:	e06f      	b.n	8001868 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	061b      	lsls	r3, r3, #24
 8001796:	4930      	ldr	r1, [pc, #192]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800179c:	e064      	b.n	8001868 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d045      	beq.n	8001832 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017a6:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0219 	bic.w	r2, r3, #25
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4929      	ldr	r1, [pc, #164]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fbe6 	bl	8000f88 <HAL_GetTick>
 80017bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c0:	f7ff fbe2 	bl	8000f88 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e307      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017de:	f7ff fc03 	bl	8000fe8 <HAL_GetREVID>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d817      	bhi.n	800181c <HAL_RCC_OscConfig+0x24c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	2b40      	cmp	r3, #64	; 0x40
 80017f2:	d108      	bne.n	8001806 <HAL_RCC_OscConfig+0x236>
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 80017fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001802:	6053      	str	r3, [r2, #4]
 8001804:	e030      	b.n	8001868 <HAL_RCC_OscConfig+0x298>
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	031b      	lsls	r3, r3, #12
 8001814:	4910      	ldr	r1, [pc, #64]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
 800181a:	e025      	b.n	8001868 <HAL_RCC_OscConfig+0x298>
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	490b      	ldr	r1, [pc, #44]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
 8001830:	e01a      	b.n	8001868 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_RCC_OscConfig+0x288>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff fba3 	bl	8000f88 <HAL_GetTick>
 8001842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001846:	f7ff fb9f 	bl	8000f88 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d903      	bls.n	800185c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e2c4      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
 8001858:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800185c:	4ba4      	ldr	r3, [pc, #656]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ee      	bne.n	8001846 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80a9 	beq.w	80019c8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001876:	4b9e      	ldr	r3, [pc, #632]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800187e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001880:	4b9b      	ldr	r3, [pc, #620]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2b08      	cmp	r3, #8
 800188a:	d007      	beq.n	800189c <HAL_RCC_OscConfig+0x2cc>
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b18      	cmp	r3, #24
 8001890:	d13a      	bne.n	8001908 <HAL_RCC_OscConfig+0x338>
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d135      	bne.n	8001908 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800189c:	4b94      	ldr	r3, [pc, #592]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2e4>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b80      	cmp	r3, #128	; 0x80
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e296      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018b4:	f7ff fb98 	bl	8000fe8 <HAL_GetREVID>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80018be:	4293      	cmp	r3, r2
 80018c0:	d817      	bhi.n	80018f2 <HAL_RCC_OscConfig+0x322>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	2b20      	cmp	r3, #32
 80018c8:	d108      	bne.n	80018dc <HAL_RCC_OscConfig+0x30c>
 80018ca:	4b89      	ldr	r3, [pc, #548]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018d2:	4a87      	ldr	r2, [pc, #540]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 80018d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018da:	e075      	b.n	80019c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018dc:	4b84      	ldr	r3, [pc, #528]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	069b      	lsls	r3, r3, #26
 80018ea:	4981      	ldr	r1, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018f0:	e06a      	b.n	80019c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018f2:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	061b      	lsls	r3, r3, #24
 8001900:	497b      	ldr	r1, [pc, #492]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001902:	4313      	orrs	r3, r2
 8001904:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001906:	e05f      	b.n	80019c8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d042      	beq.n	8001996 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001910:	4b77      	ldr	r3, [pc, #476]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a76      	ldr	r2, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fb34 	bl	8000f88 <HAL_GetTick>
 8001920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001924:	f7ff fb30 	bl	8000f88 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e255      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001936:	4b6e      	ldr	r3, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001942:	f7ff fb51 	bl	8000fe8 <HAL_GetREVID>
 8001946:	4603      	mov	r3, r0
 8001948:	f241 0203 	movw	r2, #4099	; 0x1003
 800194c:	4293      	cmp	r3, r2
 800194e:	d817      	bhi.n	8001980 <HAL_RCC_OscConfig+0x3b0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	2b20      	cmp	r3, #32
 8001956:	d108      	bne.n	800196a <HAL_RCC_OscConfig+0x39a>
 8001958:	4b65      	ldr	r3, [pc, #404]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001960:	4a63      	ldr	r2, [pc, #396]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001966:	6053      	str	r3, [r2, #4]
 8001968:	e02e      	b.n	80019c8 <HAL_RCC_OscConfig+0x3f8>
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	069b      	lsls	r3, r3, #26
 8001978:	495d      	ldr	r1, [pc, #372]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
 800197e:	e023      	b.n	80019c8 <HAL_RCC_OscConfig+0x3f8>
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	4958      	ldr	r1, [pc, #352]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001990:	4313      	orrs	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
 8001994:	e018      	b.n	80019c8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a55      	ldr	r2, [pc, #340]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 800199c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff faf1 	bl	8000f88 <HAL_GetTick>
 80019a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019aa:	f7ff faed 	bl	8000f88 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e212      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d036      	beq.n	8001a42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d019      	beq.n	8001a10 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019dc:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 80019de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e0:	4a43      	ldr	r2, [pc, #268]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff face 	bl	8000f88 <HAL_GetTick>
 80019ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f0:	f7ff faca 	bl	8000f88 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1ef      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x420>
 8001a0e:	e018      	b.n	8001a42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a10:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a14:	4a36      	ldr	r2, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fab4 	bl	8000f88 <HAL_GetTick>
 8001a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff fab0 	bl	8000f88 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1d5      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d036      	beq.n	8001abc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa91 	bl	8000f88 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a6a:	f7ff fa8d 	bl	8000f88 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1b2      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x49a>
 8001a88:	e018      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fa77 	bl	8000f88 <HAL_GetTick>
 8001a9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a9e:	f7ff fa73 	bl	8000f88 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e198      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_RCC_OscConfig+0x520>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8085 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_OscConfig+0x524>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_RCC_OscConfig+0x524>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ad6:	f7ff fa57 	bl	8000f88 <HAL_GetTick>
 8001ada:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001adc:	e00c      	b.n	8001af8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff fa53 	bl	8000f88 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	; 0x64
 8001aea:	d905      	bls.n	8001af8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e178      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
 8001af0:	58024400 	.word	0x58024400
 8001af4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001af8:	4b96      	ldr	r3, [pc, #600]	; (8001d54 <HAL_RCC_OscConfig+0x784>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ec      	beq.n	8001ade <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x54a>
 8001b0c:	4b92      	ldr	r3, [pc, #584]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	4a91      	ldr	r2, [pc, #580]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
 8001b18:	e02d      	b.n	8001b76 <HAL_RCC_OscConfig+0x5a6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x56c>
 8001b22:	4b8d      	ldr	r3, [pc, #564]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	4a8c      	ldr	r2, [pc, #560]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2e:	4b8a      	ldr	r3, [pc, #552]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a89      	ldr	r2, [pc, #548]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	e01c      	b.n	8001b76 <HAL_RCC_OscConfig+0x5a6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x58e>
 8001b44:	4b84      	ldr	r3, [pc, #528]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a83      	ldr	r2, [pc, #524]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	4b81      	ldr	r3, [pc, #516]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a80      	ldr	r2, [pc, #512]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0x5a6>
 8001b5e:	4b7e      	ldr	r3, [pc, #504]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a7d      	ldr	r2, [pc, #500]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	4b7b      	ldr	r3, [pc, #492]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a7a      	ldr	r2, [pc, #488]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d015      	beq.n	8001baa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fa03 	bl	8000f88 <HAL_GetTick>
 8001b82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff f9ff 	bl	8000f88 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e122      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b9c:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ee      	beq.n	8001b86 <HAL_RCC_OscConfig+0x5b6>
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7ff f9ed 	bl	8000f88 <HAL_GetTick>
 8001bae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff f9e9 	bl	8000f88 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e10c      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bc8:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ee      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8101 	beq.w	8001de0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bde:	4b5e      	ldr	r3, [pc, #376]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001be6:	2b18      	cmp	r3, #24
 8001be8:	f000 80bc 	beq.w	8001d64 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	f040 8095 	bne.w	8001d20 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b58      	ldr	r3, [pc, #352]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a57      	ldr	r2, [pc, #348]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff f9c1 	bl	8000f88 <HAL_GetTick>
 8001c06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff f9bd 	bl	8000f88 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0e2      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c1c:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c28:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <HAL_RCC_OscConfig+0x78c>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	4946      	ldr	r1, [pc, #280]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	628b      	str	r3, [r1, #40]	; 0x28
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c50:	3b01      	subs	r3, #1
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c72:	4939      	ldr	r1, [pc, #228]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c78:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	4a36      	ldr	r2, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c84:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_RCC_OscConfig+0x790>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c90:	00d2      	lsls	r2, r2, #3
 8001c92:	4931      	ldr	r1, [pc, #196]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f023 020c 	bic.w	r2, r3, #12
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	492c      	ldr	r1, [pc, #176]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	f023 0202 	bic.w	r2, r3, #2
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4928      	ldr	r1, [pc, #160]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f946 	bl	8000f88 <HAL_GetTick>
 8001cfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff f942 	bl	8000f88 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e067      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x730>
 8001d1e:	e05f      	b.n	8001de0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f92c 	bl	8000f88 <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff f928 	bl	8000f88 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e04d      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_RCC_OscConfig+0x788>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x764>
 8001d52:	e045      	b.n	8001de0 <HAL_RCC_OscConfig+0x810>
 8001d54:	58024800 	.word	0x58024800
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	fffffc0c 	.word	0xfffffc0c
 8001d60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_RCC_OscConfig+0x81c>)
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_OscConfig+0x81c>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d031      	beq.n	8001ddc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	f003 0203 	and.w	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d12a      	bne.n	8001ddc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d122      	bne.n	8001ddc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d11a      	bne.n	8001ddc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	0a5b      	lsrs	r3, r3, #9
 8001daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d111      	bne.n	8001ddc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d108      	bne.n	8001ddc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0e1b      	lsrs	r3, r3, #24
 8001dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3730      	adds	r7, #48	; 0x30
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	58024400 	.word	0x58024400

08001df0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e19c      	b.n	800213e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b8a      	ldr	r3, [pc, #552]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b87      	ldr	r3, [pc, #540]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 020f 	bic.w	r2, r3, #15
 8001e1a:	4985      	ldr	r1, [pc, #532]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b83      	ldr	r3, [pc, #524]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e184      	b.n	800213e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	4b7b      	ldr	r3, [pc, #492]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d908      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e50:	4b78      	ldr	r3, [pc, #480]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4975      	ldr	r1, [pc, #468]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d010      	beq.n	8001e90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	4b70      	ldr	r3, [pc, #448]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d908      	bls.n	8001e90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e7e:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	496a      	ldr	r1, [pc, #424]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d010      	beq.n	8001ebe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d908      	bls.n	8001ebe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eac:	4b61      	ldr	r3, [pc, #388]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	495e      	ldr	r1, [pc, #376]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d010      	beq.n	8001eec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d908      	bls.n	8001eec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001eda:	4b56      	ldr	r3, [pc, #344]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4953      	ldr	r1, [pc, #332]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d010      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d908      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f023 020f 	bic.w	r2, r3, #15
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4947      	ldr	r1, [pc, #284]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d055      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4940      	ldr	r1, [pc, #256]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f40:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d121      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0f6      	b.n	800213e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d115      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0ea      	b.n	800213e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f70:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0de      	b.n	800213e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f80:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0d6      	b.n	800213e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f023 0207 	bic.w	r2, r3, #7
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4925      	ldr	r1, [pc, #148]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fff1 	bl	8000f88 <HAL_GetTick>
 8001fa6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001faa:	f7fe ffed 	bl	8000f88 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0be      	b.n	800213e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d1eb      	bne.n	8001faa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d010      	beq.n	8002000 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d208      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f023 020f 	bic.w	r2, r3, #15
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	490e      	ldr	r1, [pc, #56]	; (8002034 <HAL_RCC_ClockConfig+0x244>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d214      	bcs.n	8002038 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 020f 	bic.w	r2, r3, #15
 8002016:	4906      	ldr	r1, [pc, #24]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_RCC_ClockConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e086      	b.n	800213e <HAL_RCC_ClockConfig+0x34e>
 8002030:	52002000 	.word	0x52002000
 8002034:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d010      	beq.n	8002066 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	4b3f      	ldr	r3, [pc, #252]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002050:	429a      	cmp	r2, r3
 8002052:	d208      	bcs.n	8002066 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002054:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	4939      	ldr	r1, [pc, #228]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 8002062:	4313      	orrs	r3, r2
 8002064:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800207e:	429a      	cmp	r2, r3
 8002080:	d208      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002082:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	492e      	ldr	r1, [pc, #184]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 8002090:	4313      	orrs	r3, r2
 8002092:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	d010      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d208      	bcs.n	80020c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4922      	ldr	r1, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d010      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020da:	429a      	cmp	r2, r3
 80020dc:	d208      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4917      	ldr	r1, [pc, #92]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020f0:	f000 f834 	bl	800215c <HAL_RCC_GetSysClockFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	4912      	ldr	r1, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x35c>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_RCC_ClockConfig+0x358>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4a0d      	ldr	r2, [pc, #52]	; (800214c <HAL_RCC_ClockConfig+0x35c>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x360>)
 8002126:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x364>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x368>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fede 	bl	8000ef4 <HAL_InitTick>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	58024400 	.word	0x58024400
 800214c:	08008fec 	.word	0x08008fec
 8002150:	20000004 	.word	0x20000004
 8002154:	20000000 	.word	0x20000000
 8002158:	20000008 	.word	0x20000008

0800215c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002162:	4bb3      	ldr	r3, [pc, #716]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800216a:	2b18      	cmp	r3, #24
 800216c:	f200 8155 	bhi.w	800241a <HAL_RCC_GetSysClockFreq+0x2be>
 8002170:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	080021dd 	.word	0x080021dd
 800217c:	0800241b 	.word	0x0800241b
 8002180:	0800241b 	.word	0x0800241b
 8002184:	0800241b 	.word	0x0800241b
 8002188:	0800241b 	.word	0x0800241b
 800218c:	0800241b 	.word	0x0800241b
 8002190:	0800241b 	.word	0x0800241b
 8002194:	0800241b 	.word	0x0800241b
 8002198:	08002203 	.word	0x08002203
 800219c:	0800241b 	.word	0x0800241b
 80021a0:	0800241b 	.word	0x0800241b
 80021a4:	0800241b 	.word	0x0800241b
 80021a8:	0800241b 	.word	0x0800241b
 80021ac:	0800241b 	.word	0x0800241b
 80021b0:	0800241b 	.word	0x0800241b
 80021b4:	0800241b 	.word	0x0800241b
 80021b8:	08002209 	.word	0x08002209
 80021bc:	0800241b 	.word	0x0800241b
 80021c0:	0800241b 	.word	0x0800241b
 80021c4:	0800241b 	.word	0x0800241b
 80021c8:	0800241b 	.word	0x0800241b
 80021cc:	0800241b 	.word	0x0800241b
 80021d0:	0800241b 	.word	0x0800241b
 80021d4:	0800241b 	.word	0x0800241b
 80021d8:	0800220f 	.word	0x0800220f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021dc:	4b94      	ldr	r3, [pc, #592]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d009      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021e8:	4b91      	ldr	r3, [pc, #580]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	4a90      	ldr	r2, [pc, #576]	; (8002434 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80021fa:	e111      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021fc:	4b8d      	ldr	r3, [pc, #564]	; (8002434 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021fe:	61bb      	str	r3, [r7, #24]
    break;
 8002200:	e10e      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002202:	4b8d      	ldr	r3, [pc, #564]	; (8002438 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002204:	61bb      	str	r3, [r7, #24]
    break;
 8002206:	e10b      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002208:	4b8c      	ldr	r3, [pc, #560]	; (800243c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800220a:	61bb      	str	r3, [r7, #24]
    break;
 800220c:	e108      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002218:	4b85      	ldr	r3, [pc, #532]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002222:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002224:	4b82      	ldr	r3, [pc, #520]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800222e:	4b80      	ldr	r3, [pc, #512]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002232:	08db      	lsrs	r3, r3, #3
 8002234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002246:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80e1 	beq.w	8002414 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b02      	cmp	r3, #2
 8002256:	f000 8083 	beq.w	8002360 <HAL_RCC_GetSysClockFreq+0x204>
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b02      	cmp	r3, #2
 800225e:	f200 80a1 	bhi.w	80023a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x114>
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d056      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x1c0>
 800226e:	e099      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002270:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d02d      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800227c:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	4a6b      	ldr	r2, [pc, #428]	; (8002434 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	ee07 3a90 	vmov	s15, r3
 8002294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022a6:	4b62      	ldr	r3, [pc, #392]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002440 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80022d6:	e087      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002444 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ea:	4b51      	ldr	r3, [pc, #324]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80022fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002440 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800230a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800230e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800231a:	e065      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002326:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002448 <HAL_RCC_GetSysClockFreq+0x2ec>
 800232a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800232e:	4b40      	ldr	r3, [pc, #256]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800233e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002342:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002440 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800234a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800234e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800235e:	e043      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800244c <HAL_RCC_GetSysClockFreq+0x2f0>
 800236e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002372:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002382:	ed97 6a02 	vldr	s12, [r7, #8]
 8002386:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002440 <HAL_RCC_GetSysClockFreq+0x2e4>
 800238a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800238e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023a2:	e021      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002448 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002440 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	0a5b      	lsrs	r3, r3, #9
 80023ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023f2:	3301      	adds	r3, #1
 80023f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002400:	edd7 6a07 	vldr	s13, [r7, #28]
 8002404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800240c:	ee17 3a90 	vmov	r3, s15
 8002410:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002412:	e005      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
    break;
 8002418:	e002      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800241c:	61bb      	str	r3, [r7, #24]
    break;
 800241e:	bf00      	nop
  }

  return sysclockfreq;
 8002420:	69bb      	ldr	r3, [r7, #24]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	; 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	58024400 	.word	0x58024400
 8002434:	03d09000 	.word	0x03d09000
 8002438:	003d0900 	.word	0x003d0900
 800243c:	017d7840 	.word	0x017d7840
 8002440:	46000000 	.word	0x46000000
 8002444:	4c742400 	.word	0x4c742400
 8002448:	4a742400 	.word	0x4a742400
 800244c:	4bbebc20 	.word	0x4bbebc20

08002450 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002458:	2300      	movs	r3, #0
 800245a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800245c:	2300      	movs	r3, #0
 800245e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d03f      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002470:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002474:	d02a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002476:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800247a:	d824      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800247c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002480:	d018      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002486:	d81e      	bhi.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800248c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002490:	d007      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002492:	e018      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002494:	4bab      	ldr	r3, [pc, #684]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	4aaa      	ldr	r2, [pc, #680]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800249a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024a0:	e015      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2102      	movs	r1, #2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 ff11 	bl	80032d0 <RCCEx_PLL2_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024b2:	e00c      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3324      	adds	r3, #36	; 0x24
 80024b8:	2102      	movs	r1, #2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 ffba 	bl	8003434 <RCCEx_PLL3_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024c4:	e003      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
      break;
 80024ca:	e000      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024d4:	4b9b      	ldr	r3, [pc, #620]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e0:	4998      	ldr	r1, [pc, #608]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	650b      	str	r3, [r1, #80]	; 0x50
 80024e6:	e001      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d03d      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d826      	bhi.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002500:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002506:	bf00      	nop
 8002508:	0800251d 	.word	0x0800251d
 800250c:	0800252b 	.word	0x0800252b
 8002510:	0800253d 	.word	0x0800253d
 8002514:	08002555 	.word	0x08002555
 8002518:	08002555 	.word	0x08002555
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800251c:	4b89      	ldr	r3, [pc, #548]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	4a88      	ldr	r2, [pc, #544]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002528:	e015      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fecd 	bl	80032d0 <RCCEx_PLL2_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800253a:	e00c      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3324      	adds	r3, #36	; 0x24
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f000 ff76 	bl	8003434 <RCCEx_PLL3_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800254c:	e003      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
      break;
 8002552:	e000      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800255c:	4b79      	ldr	r3, [pc, #484]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	f023 0207 	bic.w	r2, r3, #7
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	4976      	ldr	r1, [pc, #472]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	650b      	str	r3, [r1, #80]	; 0x50
 800256e:	e001      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	2b00      	cmp	r3, #0
 800257e:	d042      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002588:	d02b      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800258a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258e:	d825      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002590:	2bc0      	cmp	r3, #192	; 0xc0
 8002592:	d028      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002594:	2bc0      	cmp	r3, #192	; 0xc0
 8002596:	d821      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002598:	2b80      	cmp	r3, #128	; 0x80
 800259a:	d016      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d81d      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d007      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80025a8:	e018      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025aa:	4b66      	ldr	r3, [pc, #408]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80025b6:	e017      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fe86 	bl	80032d0 <RCCEx_PLL2_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80025c8:	e00e      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3324      	adds	r3, #36	; 0x24
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 ff2f 	bl	8003434 <RCCEx_PLL3_Config>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80025da:	e005      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	75fb      	strb	r3, [r7, #23]
      break;
 80025e0:	e002      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80025e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80025ee:	4b55      	ldr	r3, [pc, #340]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4952      	ldr	r1, [pc, #328]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	650b      	str	r3, [r1, #80]	; 0x50
 8002600:	e001      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002602:	7dfb      	ldrb	r3, [r7, #23]
 8002604:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260e:	2b00      	cmp	r3, #0
 8002610:	d049      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800261c:	d030      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800261e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002622:	d82a      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002624:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002628:	d02c      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800262a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800262e:	d824      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002634:	d018      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263a:	d81e      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002644:	d007      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002646:	e018      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	4a3d      	ldr	r2, [pc, #244]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002654:	e017      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3304      	adds	r3, #4
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fe37 	bl	80032d0 <RCCEx_PLL2_Config>
 8002662:	4603      	mov	r3, r0
 8002664:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002666:	e00e      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3324      	adds	r3, #36	; 0x24
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fee0 	bl	8003434 <RCCEx_PLL3_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002678:	e005      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
      break;
 800267e:	e002      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002680:	bf00      	nop
 8002682:	e000      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800269a:	492a      	ldr	r1, [pc, #168]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	658b      	str	r3, [r1, #88]	; 0x58
 80026a0:	e001      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d04c      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80026b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026bc:	d030      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80026be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026c2:	d82a      	bhi.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80026c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026c8:	d02c      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80026ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026ce:	d824      	bhi.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80026d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026d4:	d018      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80026d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026da:	d81e      	bhi.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d007      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80026e6:	e018      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026f4:	e017      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fde7 	bl	80032d0 <RCCEx_PLL2_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002706:	e00e      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3324      	adds	r3, #36	; 0x24
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fe90 	bl	8003434 <RCCEx_PLL3_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002718:	e005      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002720:	bf00      	nop
 8002722:	e000      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10d      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800273a:	4902      	ldr	r1, [pc, #8]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	658b      	str	r3, [r1, #88]	; 0x58
 8002740:	e004      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002742:	bf00      	nop
 8002744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d032      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275c:	2b30      	cmp	r3, #48	; 0x30
 800275e:	d01c      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002760:	2b30      	cmp	r3, #48	; 0x30
 8002762:	d817      	bhi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002764:	2b20      	cmp	r3, #32
 8002766:	d00c      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002768:	2b20      	cmp	r3, #32
 800276a:	d813      	bhi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d016      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002770:	2b10      	cmp	r3, #16
 8002772:	d10f      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002774:	4baf      	ldr	r3, [pc, #700]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	4aae      	ldr	r2, [pc, #696]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800277a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002780:	e00e      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	2102      	movs	r1, #2
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fda1 	bl	80032d0 <RCCEx_PLL2_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002792:	e005      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	75fb      	strb	r3, [r7, #23]
      break;
 8002798:	e002      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800279e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80027a6:	4ba3      	ldr	r3, [pc, #652]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	49a0      	ldr	r1, [pc, #640]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80027b8:	e001      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d047      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d2:	d030      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80027d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d8:	d82a      	bhi.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80027da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027de:	d02c      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80027e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027e4:	d824      	bhi.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ea:	d018      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f0:	d81e      	bhi.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fa:	d007      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80027fc:	e018      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fe:	4b8d      	ldr	r3, [pc, #564]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	4a8c      	ldr	r2, [pc, #560]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800280a:	e017      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fd5c 	bl	80032d0 <RCCEx_PLL2_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800281c:	e00e      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3324      	adds	r3, #36	; 0x24
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fe05 	bl	8003434 <RCCEx_PLL3_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800282e:	e005      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	75fb      	strb	r3, [r7, #23]
      break;
 8002834:	e002      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002836:	bf00      	nop
 8002838:	e000      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800283a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002842:	4b7c      	ldr	r3, [pc, #496]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002846:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	4979      	ldr	r1, [pc, #484]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	650b      	str	r3, [r1, #80]	; 0x50
 8002854:	e001      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d049      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286e:	d02e      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d828      	bhi.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800287a:	d02a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800287c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002880:	d822      	bhi.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002882:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002886:	d026      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002888:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800288c:	d81c      	bhi.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800288e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002892:	d010      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002898:	d816      	bhi.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01d      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d111      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fd10 	bl	80032d0 <RCCEx_PLL2_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80028b4:	e012      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3324      	adds	r3, #36	; 0x24
 80028ba:	2101      	movs	r1, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fdb9 	bl	8003434 <RCCEx_PLL3_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
      break;
 80028cc:	e006      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80028ce:	bf00      	nop
 80028d0:	e004      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80028da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028e2:	4b54      	ldr	r3, [pc, #336]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	4951      	ldr	r1, [pc, #324]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	650b      	str	r3, [r1, #80]	; 0x50
 80028f4:	e001      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d04b      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800290c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002910:	d02e      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002916:	d828      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d02a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d822      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002924:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002928:	d026      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800292a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800292e:	d81c      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002934:	d010      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800293a:	d816      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01d      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002944:	d111      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	2101      	movs	r1, #1
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fcbf 	bl	80032d0 <RCCEx_PLL2_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002956:	e012      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3324      	adds	r3, #36	; 0x24
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fd68 	bl	8003434 <RCCEx_PLL3_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002968:	e009      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
      break;
 800296e:	e006      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002970:	bf00      	nop
 8002972:	e004      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002974:	bf00      	nop
 8002976:	e002      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002978:	bf00      	nop
 800297a:	e000      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800297c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002992:	4928      	ldr	r1, [pc, #160]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	658b      	str	r3, [r1, #88]	; 0x58
 8002998:	e001      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02f      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b2:	d00e      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80029b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b8:	d814      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d015      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80029be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029c2:	d10f      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80029d0:	e00c      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2101      	movs	r1, #1
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fc79 	bl	80032d0 <RCCEx_PLL2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80029e2:	e003      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
      break;
 80029e8:	e000      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80029ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fe:	490d      	ldr	r1, [pc, #52]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	650b      	str	r3, [r1, #80]	; 0x50
 8002a04:	e001      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d033      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d81c      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a5f 	.word	0x08002a5f
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a47 	.word	0x08002a47
 8002a30:	08002a5f 	.word	0x08002a5f
 8002a34:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a38:	4bb8      	ldr	r3, [pc, #736]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	4ab7      	ldr	r2, [pc, #732]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a44:	e00c      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fc3f 	bl	80032d0 <RCCEx_PLL2_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a56:	e003      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5c:	e000      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a66:	4bad      	ldr	r3, [pc, #692]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	49aa      	ldr	r1, [pc, #680]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a78:	e001      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8086 	beq.w	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8c:	4ba4      	ldr	r3, [pc, #656]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4aa3      	ldr	r2, [pc, #652]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fa76 	bl	8000f88 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a9e:	e009      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7fe fa72 	bl	8000f88 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d902      	bls.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	75fb      	strb	r3, [r7, #23]
        break;
 8002ab2:	e005      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab4:	4b9a      	ldr	r3, [pc, #616]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ef      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d166      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ac6:	4b95      	ldr	r3, [pc, #596]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ac8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ad0:	4053      	eors	r3, r2
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ada:	4b90      	ldr	r3, [pc, #576]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ae4:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a8c      	ldr	r2, [pc, #560]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002af0:	4b8a      	ldr	r3, [pc, #552]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a89      	ldr	r2, [pc, #548]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002afc:	4a87      	ldr	r2, [pc, #540]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0c:	d115      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fa3b 	bl	8000f88 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b14:	e00b      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fa37 	bl	8000f88 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d902      	bls.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	75fb      	strb	r3, [r7, #23]
            break;
 8002b2c:	e005      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b2e:	4b7b      	ldr	r3, [pc, #492]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ed      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d126      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b4e:	d10d      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002b50:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b5e:	0919      	lsrs	r1, r3, #4
 8002b60:	4b70      	ldr	r3, [pc, #448]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002b62:	400b      	ands	r3, r1
 8002b64:	496d      	ldr	r1, [pc, #436]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	610b      	str	r3, [r1, #16]
 8002b6a:	e005      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002b6c:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	4a6a      	ldr	r2, [pc, #424]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b76:	6113      	str	r3, [r2, #16]
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b86:	4965      	ldr	r1, [pc, #404]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	670b      	str	r3, [r1, #112]	; 0x70
 8002b8c:	e004      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	75bb      	strb	r3, [r7, #22]
 8002b92:	e001      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d07e      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba8:	2b28      	cmp	r3, #40	; 0x28
 8002baa:	d867      	bhi.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002c83 	.word	0x08002c83
 8002bb8:	08002c7d 	.word	0x08002c7d
 8002bbc:	08002c7d 	.word	0x08002c7d
 8002bc0:	08002c7d 	.word	0x08002c7d
 8002bc4:	08002c7d 	.word	0x08002c7d
 8002bc8:	08002c7d 	.word	0x08002c7d
 8002bcc:	08002c7d 	.word	0x08002c7d
 8002bd0:	08002c7d 	.word	0x08002c7d
 8002bd4:	08002c59 	.word	0x08002c59
 8002bd8:	08002c7d 	.word	0x08002c7d
 8002bdc:	08002c7d 	.word	0x08002c7d
 8002be0:	08002c7d 	.word	0x08002c7d
 8002be4:	08002c7d 	.word	0x08002c7d
 8002be8:	08002c7d 	.word	0x08002c7d
 8002bec:	08002c7d 	.word	0x08002c7d
 8002bf0:	08002c7d 	.word	0x08002c7d
 8002bf4:	08002c6b 	.word	0x08002c6b
 8002bf8:	08002c7d 	.word	0x08002c7d
 8002bfc:	08002c7d 	.word	0x08002c7d
 8002c00:	08002c7d 	.word	0x08002c7d
 8002c04:	08002c7d 	.word	0x08002c7d
 8002c08:	08002c7d 	.word	0x08002c7d
 8002c0c:	08002c7d 	.word	0x08002c7d
 8002c10:	08002c7d 	.word	0x08002c7d
 8002c14:	08002c83 	.word	0x08002c83
 8002c18:	08002c7d 	.word	0x08002c7d
 8002c1c:	08002c7d 	.word	0x08002c7d
 8002c20:	08002c7d 	.word	0x08002c7d
 8002c24:	08002c7d 	.word	0x08002c7d
 8002c28:	08002c7d 	.word	0x08002c7d
 8002c2c:	08002c7d 	.word	0x08002c7d
 8002c30:	08002c7d 	.word	0x08002c7d
 8002c34:	08002c83 	.word	0x08002c83
 8002c38:	08002c7d 	.word	0x08002c7d
 8002c3c:	08002c7d 	.word	0x08002c7d
 8002c40:	08002c7d 	.word	0x08002c7d
 8002c44:	08002c7d 	.word	0x08002c7d
 8002c48:	08002c7d 	.word	0x08002c7d
 8002c4c:	08002c7d 	.word	0x08002c7d
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08002c83 	.word	0x08002c83
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fb36 	bl	80032d0 <RCCEx_PLL2_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c68:	e00c      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3324      	adds	r3, #36	; 0x24
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fbdf 	bl	8003434 <RCCEx_PLL3_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c7a:	e003      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c80:	e000      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c96:	4921      	ldr	r1, [pc, #132]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	654b      	str	r3, [r1, #84]	; 0x54
 8002c9c:	e001      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03e      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d820      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002cff 	.word	0x08002cff
 8002cc0:	08002cd5 	.word	0x08002cd5
 8002cc4:	08002ce7 	.word	0x08002ce7
 8002cc8:	08002cff 	.word	0x08002cff
 8002ccc:	08002cff 	.word	0x08002cff
 8002cd0:	08002cff 	.word	0x08002cff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 faf8 	bl	80032d0 <RCCEx_PLL2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3324      	adds	r3, #36	; 0x24
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fba1 	bl	8003434 <RCCEx_PLL3_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002cf6:	e003      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cfc:	e000      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8002cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d110      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	4902      	ldr	r1, [pc, #8]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	654b      	str	r3, [r1, #84]	; 0x54
 8002d18:	e008      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8002d1a:	bf00      	nop
 8002d1c:	58024400 	.word	0x58024400
 8002d20:	58024800 	.word	0x58024800
 8002d24:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
 8002d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d039      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d820      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d8b 	.word	0x08002d8b
 8002d4c:	08002d61 	.word	0x08002d61
 8002d50:	08002d73 	.word	0x08002d73
 8002d54:	08002d8b 	.word	0x08002d8b
 8002d58:	08002d8b 	.word	0x08002d8b
 8002d5c:	08002d8b 	.word	0x08002d8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	2101      	movs	r1, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fab2 	bl	80032d0 <RCCEx_PLL2_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d70:	e00c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3324      	adds	r3, #36	; 0x24
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fb5b 	bl	8003434 <RCCEx_PLL3_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d82:	e003      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
      break;
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8002d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d92:	4bb7      	ldr	r3, [pc, #732]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	f023 0207 	bic.w	r2, r3, #7
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	49b3      	ldr	r1, [pc, #716]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	658b      	str	r3, [r1, #88]	; 0x58
 8002da6:	e001      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d04b      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc2:	d02e      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8002dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc8:	d828      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dce:	d02a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d822      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002dd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dda:	d026      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002ddc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002de0:	d81c      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de6:	d010      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dec:	d816      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01d      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df6:	d111      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fa66 	bl	80032d0 <RCCEx_PLL2_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e08:	e012      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3324      	adds	r3, #36	; 0x24
 8002e0e:	2102      	movs	r1, #2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fb0f 	bl	8003434 <RCCEx_PLL3_Config>
 8002e16:	4603      	mov	r3, r0
 8002e18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e1a:	e009      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e20:	e006      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002e22:	bf00      	nop
 8002e24:	e004      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e36:	4b8e      	ldr	r3, [pc, #568]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e44:	498a      	ldr	r1, [pc, #552]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	654b      	str	r3, [r1, #84]	; 0x54
 8002e4a:	e001      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d04b      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e66:	d02e      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8002e68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e6c:	d828      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e72:	d02a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e78:	d822      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e7e:	d026      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e84:	d81c      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8a:	d010      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8002e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e90:	d816      	bhi.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d01d      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9a:	d111      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fa14 	bl	80032d0 <RCCEx_PLL2_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002eac:	e012      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3324      	adds	r3, #36	; 0x24
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fabd 	bl	8003434 <RCCEx_PLL3_Config>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ebe:	e009      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec4:	e006      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e004      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eda:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee8:	4961      	ldr	r1, [pc, #388]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	658b      	str	r3, [r1, #88]	; 0x58
 8002eee:	e001      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d04b      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f0a:	d02e      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8002f0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f10:	d828      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f16:	d02a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8002f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1c:	d822      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002f1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f22:	d026      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002f24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f28:	d81c      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f2e:	d010      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8002f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f34:	d816      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01d      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3e:	d111      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f9c2 	bl	80032d0 <RCCEx_PLL2_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f50:	e012      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3324      	adds	r3, #36	; 0x24
 8002f56:	2102      	movs	r1, #2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fa6b 	bl	8003434 <RCCEx_PLL3_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f62:	e009      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
      break;
 8002f68:	e006      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e004      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e002      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f7e:	4b3c      	ldr	r3, [pc, #240]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f8c:	4938      	ldr	r1, [pc, #224]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	658b      	str	r3, [r1, #88]	; 0x58
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fae:	d10a      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3324      	adds	r3, #36	; 0x24
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fa3c 	bl	8003434 <RCCEx_PLL3_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd4:	4926      	ldr	r1, [pc, #152]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff0:	d10a      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3324      	adds	r3, #36	; 0x24
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fa1b 	bl	8003434 <RCCEx_PLL3_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003016:	4916      	ldr	r1, [pc, #88]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003018:	4313      	orrs	r3, r2
 800301a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d036      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800302e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003032:	d01f      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003038:	d817      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800303e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003042:	d009      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003044:	e011      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f93f 	bl	80032d0 <RCCEx_PLL2_Config>
 8003052:	4603      	mov	r3, r0
 8003054:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003056:	e00e      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3324      	adds	r3, #36	; 0x24
 800305c:	2102      	movs	r1, #2
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f9e8 	bl	8003434 <RCCEx_PLL3_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003068:	e005      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	75fb      	strb	r3, [r7, #23]
      break;
 800306e:	e002      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003070:	58024400 	.word	0x58024400
      break;
 8003074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003076:	7dfb      	ldrb	r3, [r7, #23]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800307c:	4b93      	ldr	r3, [pc, #588]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800308a:	4990      	ldr	r1, [pc, #576]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800308c:	4313      	orrs	r3, r2
 800308e:	658b      	str	r3, [r1, #88]	; 0x58
 8003090:	e001      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d033      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030ac:	d01c      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80030ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030b2:	d816      	bhi.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80030b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b8:	d003      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80030ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030be:	d007      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80030c0:	e00f      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c2:	4b82      	ldr	r3, [pc, #520]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	4a81      	ldr	r2, [pc, #516]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80030ce:	e00c      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3324      	adds	r3, #36	; 0x24
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f9ac 	bl	8003434 <RCCEx_PLL3_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
      break;
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80030e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030f0:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fe:	4973      	ldr	r1, [pc, #460]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003100:	4313      	orrs	r3, r2
 8003102:	654b      	str	r3, [r1, #84]	; 0x54
 8003104:	e001      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d029      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800311e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003122:	d007      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003124:	e00f      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003126:	4b69      	ldr	r3, [pc, #420]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	4a68      	ldr	r2, [pc, #416]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003130:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003132:	e00b      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	2102      	movs	r1, #2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f8c8 	bl	80032d0 <RCCEx_PLL2_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003144:	e002      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
      break;
 800314a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003152:	4b5e      	ldr	r3, [pc, #376]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315e:	495b      	ldr	r1, [pc, #364]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003160:	4313      	orrs	r3, r2
 8003162:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003164:	e001      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3324      	adds	r3, #36	; 0x24
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f959 	bl	8003434 <RCCEx_PLL3_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d030      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800319c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a0:	d017      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80031a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a6:	d811      	bhi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d013      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80031ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b2:	d80b      	bhi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d010      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80031b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031bc:	d106      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031be:	4b43      	ldr	r3, [pc, #268]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	4a42      	ldr	r2, [pc, #264]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80031ca:	e007      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	75fb      	strb	r3, [r7, #23]
      break;
 80031d0:	e004      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80031d2:	bf00      	nop
 80031d4:	e002      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80031d6:	bf00      	nop
 80031d8:	e000      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80031da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031e2:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ee:	4937      	ldr	r1, [pc, #220]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	654b      	str	r3, [r1, #84]	; 0x54
 80031f4:	e001      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003206:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	492e      	ldr	r1, [pc, #184]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003214:	4313      	orrs	r3, r2
 8003216:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003232:	4926      	ldr	r1, [pc, #152]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003234:	4313      	orrs	r3, r2
 8003236:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003244:	4b21      	ldr	r3, [pc, #132]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003248:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003250:	491e      	ldr	r1, [pc, #120]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800326c:	6113      	str	r3, [r2, #16]
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003278:	4914      	ldr	r1, [pc, #80]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800327a:	4313      	orrs	r3, r2
 800327c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	da08      	bge.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003292:	490e      	ldr	r1, [pc, #56]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003294:	4313      	orrs	r3, r2
 8003296:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	4906      	ldr	r1, [pc, #24]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80032b8:	7dbb      	ldrb	r3, [r7, #22]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	58024400 	.word	0x58024400

080032d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80032de:	4b53      	ldr	r3, [pc, #332]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d101      	bne.n	80032ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e099      	b.n	8003422 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80032ee:	4b4f      	ldr	r3, [pc, #316]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a4e      	ldr	r2, [pc, #312]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80032f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fa:	f7fd fe45 	bl	8000f88 <HAL_GetTick>
 80032fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003300:	e008      	b.n	8003314 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003302:	f7fd fe41 	bl	8000f88 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e086      	b.n	8003422 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003314:	4b45      	ldr	r3, [pc, #276]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f0      	bne.n	8003302 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003320:	4b42      	ldr	r3, [pc, #264]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	031b      	lsls	r3, r3, #12
 800332e:	493f      	ldr	r1, [pc, #252]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	628b      	str	r3, [r1, #40]	; 0x28
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	3b01      	subs	r3, #1
 800333a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	3b01      	subs	r3, #1
 8003344:	025b      	lsls	r3, r3, #9
 8003346:	b29b      	uxth	r3, r3
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	3b01      	subs	r3, #1
 8003350:	041b      	lsls	r3, r3, #16
 8003352:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	3b01      	subs	r3, #1
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003364:	4931      	ldr	r1, [pc, #196]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 8003366:	4313      	orrs	r3, r2
 8003368:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800336a:	4b30      	ldr	r3, [pc, #192]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	492d      	ldr	r1, [pc, #180]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 8003378:	4313      	orrs	r3, r2
 800337a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800337c:	4b2b      	ldr	r3, [pc, #172]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f023 0220 	bic.w	r2, r3, #32
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4928      	ldr	r1, [pc, #160]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 800338a:	4313      	orrs	r3, r2
 800338c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	4a26      	ldr	r2, [pc, #152]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 8003394:	f023 0310 	bic.w	r3, r3, #16
 8003398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 800339c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <RCCEx_PLL2_Config+0x160>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	69d2      	ldr	r2, [r2, #28]
 80033a6:	00d2      	lsls	r2, r2, #3
 80033a8:	4920      	ldr	r1, [pc, #128]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80033ae:	4b1f      	ldr	r3, [pc, #124]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	4a1e      	ldr	r2, [pc, #120]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033b4:	f043 0310 	orr.w	r3, r3, #16
 80033b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	4a19      	ldr	r2, [pc, #100]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033cc:	e00f      	b.n	80033ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d106      	bne.n	80033e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80033d4:	4b15      	ldr	r3, [pc, #84]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033e0:	e005      	b.n	80033ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	4a11      	ldr	r2, [pc, #68]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a0e      	ldr	r2, [pc, #56]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 80033f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fa:	f7fd fdc5 	bl	8000f88 <HAL_GetTick>
 80033fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003400:	e008      	b.n	8003414 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003402:	f7fd fdc1 	bl	8000f88 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e006      	b.n	8003422 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <RCCEx_PLL2_Config+0x15c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	58024400 	.word	0x58024400
 8003430:	ffff0007 	.word	0xffff0007

08003434 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003442:	4b53      	ldr	r3, [pc, #332]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b03      	cmp	r3, #3
 800344c:	d101      	bne.n	8003452 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e099      	b.n	8003586 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003452:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a4e      	ldr	r2, [pc, #312]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345e:	f7fd fd93 	bl	8000f88 <HAL_GetTick>
 8003462:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003464:	e008      	b.n	8003478 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003466:	f7fd fd8f 	bl	8000f88 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e086      	b.n	8003586 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003478:	4b45      	ldr	r3, [pc, #276]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003484:	4b42      	ldr	r3, [pc, #264]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	051b      	lsls	r3, r3, #20
 8003492:	493f      	ldr	r1, [pc, #252]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003494:	4313      	orrs	r3, r2
 8003496:	628b      	str	r3, [r1, #40]	; 0x28
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	3b01      	subs	r3, #1
 800349e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	025b      	lsls	r3, r3, #9
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	061b      	lsls	r3, r3, #24
 80034c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034c8:	4931      	ldr	r1, [pc, #196]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80034ce:	4b30      	ldr	r3, [pc, #192]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	492d      	ldr	r1, [pc, #180]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4928      	ldr	r1, [pc, #160]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80034f2:	4b27      	ldr	r3, [pc, #156]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	4a26      	ldr	r2, [pc, #152]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 80034f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <RCCEx_PLL3_Config+0x160>)
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	69d2      	ldr	r2, [r2, #28]
 800350a:	00d2      	lsls	r2, r2, #3
 800350c:	4920      	ldr	r1, [pc, #128]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 800350e:	4313      	orrs	r3, r2
 8003510:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003512:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d106      	bne.n	8003532 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4a19      	ldr	r2, [pc, #100]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 800352a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800352e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003530:	e00f      	b.n	8003552 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 800353e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003542:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003544:	e005      	b.n	8003552 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	4a11      	ldr	r2, [pc, #68]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 800354c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003550:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355e:	f7fd fd13 	bl	8000f88 <HAL_GetTick>
 8003562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003564:	e008      	b.n	8003578 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003566:	f7fd fd0f 	bl	8000f88 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e006      	b.n	8003586 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <RCCEx_PLL3_Config+0x15c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	58024400 	.word	0x58024400
 8003594:	ffff0007 	.word	0xffff0007

08003598 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0eb      	b.n	8003786 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a75      	ldr	r2, [pc, #468]	; (8003790 <HAL_SPI_Init+0x1f8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00f      	beq.n	80035de <HAL_SPI_Init+0x46>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a74      	ldr	r2, [pc, #464]	; (8003794 <HAL_SPI_Init+0x1fc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00a      	beq.n	80035de <HAL_SPI_Init+0x46>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a72      	ldr	r2, [pc, #456]	; (8003798 <HAL_SPI_Init+0x200>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d005      	beq.n	80035de <HAL_SPI_Init+0x46>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	d901      	bls.n	80035de <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0d3      	b.n	8003786 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fc96 	bl	8003f10 <SPI_GetPacketSize>
 80035e4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a69      	ldr	r2, [pc, #420]	; (8003790 <HAL_SPI_Init+0x1f8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00c      	beq.n	800360a <HAL_SPI_Init+0x72>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a67      	ldr	r2, [pc, #412]	; (8003794 <HAL_SPI_Init+0x1fc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <HAL_SPI_Init+0x72>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a66      	ldr	r2, [pc, #408]	; (8003798 <HAL_SPI_Init+0x200>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d002      	beq.n	800360a <HAL_SPI_Init+0x72>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b08      	cmp	r3, #8
 8003608:	d811      	bhi.n	800362e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800360e:	4a60      	ldr	r2, [pc, #384]	; (8003790 <HAL_SPI_Init+0x1f8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5e      	ldr	r2, [pc, #376]	; (8003794 <HAL_SPI_Init+0x1fc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_SPI_Init+0x90>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <HAL_SPI_Init+0x200>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d104      	bne.n	8003632 <HAL_SPI_Init+0x9a>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b10      	cmp	r3, #16
 800362c:	d901      	bls.n	8003632 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0a9      	b.n	8003786 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fd fad4 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800366c:	d119      	bne.n	80036a2 <HAL_SPI_Init+0x10a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003676:	d103      	bne.n	8003680 <HAL_SPI_Init+0xe8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10c      	bne.n	80036a2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003690:	d107      	bne.n	80036a2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	431a      	orrs	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	ea42 0103 	orr.w	r1, r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	ea42 0103 	orr.w	r1, r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d113      	bne.n	8003742 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003740:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40013000 	.word	0x40013000
 8003794:	40003800 	.word	0x40003800
 8003798:	40003c00 	.word	0x40003c00

0800379c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08e      	sub	sp, #56	; 0x38
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3320      	adds	r3, #32
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3330      	adds	r3, #48	; 0x30
 80037be:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_SPI_TransmitReceive+0x32>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e2ce      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x5d0>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d6:	f7fd fbd7 	bl	8000f88 <HAL_GetTick>
 80037da:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80037ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037f2:	7efb      	ldrb	r3, [r7, #27]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d014      	beq.n	8003822 <HAL_SPI_TransmitReceive+0x86>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fe:	d106      	bne.n	800380e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <HAL_SPI_TransmitReceive+0x72>
 8003808:	7efb      	ldrb	r3, [r7, #27]
 800380a:	2b04      	cmp	r3, #4
 800380c:	d009      	beq.n	8003822 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800380e:	2302      	movs	r3, #2
 8003810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800381c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003820:	e2a4      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x98>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x98>
 800382e:	887b      	ldrh	r3, [r7, #2]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003846:	e291      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b04      	cmp	r3, #4
 8003852:	d003      	beq.n	800385c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2205      	movs	r2, #5
 8003858:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	887a      	ldrh	r2, [r7, #2]
 800386e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	887a      	ldrh	r2, [r7, #2]
 8003876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4b9f      	ldr	r3, [pc, #636]	; (8003b20 <HAL_SPI_TransmitReceive+0x384>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	8879      	ldrh	r1, [r7, #2]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c8:	d107      	bne.n	80038da <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b0f      	cmp	r3, #15
 80038e0:	d970      	bls.n	80039c4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80038e2:	e068      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d11a      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x18c>
 80038f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d017      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003926:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	f248 0308 	movw	r3, #32776	; 0x8008
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01a      	beq.n	800396e <HAL_SPI_TransmitReceive+0x1d2>
 8003938:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d017      	beq.n	800396e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003946:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003948:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800394e:	1d1a      	adds	r2, r3, #4
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800396c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800396e:	f7fd fb0b 	bl	8000f88 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800397a:	429a      	cmp	r2, r3
 800397c:	d803      	bhi.n	8003986 <HAL_SPI_TransmitReceive+0x1ea>
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003984:	d102      	bne.n	800398c <HAL_SPI_TransmitReceive+0x1f0>
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	2b00      	cmp	r3, #0
 800398a:	d114      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f9f1 	bl	8003d74 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1da      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80039b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d193      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x148>
 80039bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d190      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x148>
 80039c2:	e1ac      	b.n	8003d1e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	f240 81a0 	bls.w	8003d0e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80039ce:	e0a9      	b.n	8003b24 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d139      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x2b6>
 80039de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d036      	beq.n	8003a52 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80039e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d91c      	bls.n	8003a24 <HAL_SPI_TransmitReceive+0x288>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d018      	beq.n	8003a24 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b02      	subs	r3, #2
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003a20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003a22:	e016      	b.n	8003a52 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003a50:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d03a      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0x33a>
 8003a60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d037      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d018      	beq.n	8003aa6 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a7e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b02      	subs	r3, #2
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003aa2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003aa4:	e017      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	8812      	ldrh	r2, [r2, #0]
 8003aae:	b292      	uxth	r2, r2
 8003ab0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab6:	1c9a      	adds	r2, r3, #2
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003ad4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad6:	f7fd fa57 	bl	8000f88 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d803      	bhi.n	8003aee <HAL_SPI_TransmitReceive+0x352>
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aec:	d102      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x358>
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d117      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f93d 	bl	8003d74 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e126      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x5d0>
 8003b1e:	bf00      	nop
 8003b20:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003b24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f47f af52 	bne.w	80039d0 <HAL_SPI_TransmitReceive+0x234>
 8003b2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f47f af4e 	bne.w	80039d0 <HAL_SPI_TransmitReceive+0x234>
 8003b34:	e0f3      	b.n	8003d1e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d15a      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x45e>
 8003b44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d057      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d91c      	bls.n	8003b8a <HAL_SPI_TransmitReceive+0x3ee>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d918      	bls.n	8003b8a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	1d1a      	adds	r2, r3, #4
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b04      	subs	r3, #4
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b86:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003b88:	e037      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003b8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d91b      	bls.n	8003bc8 <HAL_SPI_TransmitReceive+0x42c>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d017      	beq.n	8003bc8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9c:	881a      	ldrh	r2, [r3, #0]
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	1c9a      	adds	r2, r3, #2
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b02      	subs	r3, #2
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003bc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003bc6:	e018      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3320      	adds	r3, #32
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003bf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d05e      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x52a>
 8003c08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d05b      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d018      	beq.n	8003c4e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c26:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c2c:	1d1a      	adds	r2, r3, #4
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003c4c:	e03b      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5c:	d918      	bls.n	8003c90 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c62:	6a3a      	ldr	r2, [r7, #32]
 8003c64:	8812      	ldrh	r2, [r2, #0]
 8003c66:	b292      	uxth	r2, r2
 8003c68:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c6e:	1c9a      	adds	r2, r3, #2
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b02      	subs	r3, #2
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003c8e:	e01a      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9c:	7812      	ldrb	r2, [r2, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003cc4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc6:	f7fd f95f 	bl	8000f88 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d803      	bhi.n	8003cde <HAL_SPI_TransmitReceive+0x542>
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cdc:	d102      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x548>
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d114      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f845 	bl	8003d74 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e02e      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f47f af10 	bne.w	8003b36 <HAL_SPI_TransmitReceive+0x39a>
 8003d16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f47f af0c 	bne.w	8003b36 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2108      	movs	r1, #8
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f8c3 	bl	8003eb4 <SPI_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3a:	f043 0220 	orr.w	r2, r3, #32
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f815 	bl	8003d74 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e001      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8003d68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3730      	adds	r7, #48	; 0x30
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0208 	orr.w	r2, r2, #8
 8003d92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0210 	orr.w	r2, r2, #16
 8003da2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6919      	ldr	r1, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b3c      	ldr	r3, [pc, #240]	; (8003eb0 <SPI_CloseTransfer+0x13c>)
 8003dc0:	400b      	ands	r3, r1
 8003dc2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003dd2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d014      	beq.n	8003e0a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00f      	beq.n	8003e0a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0220 	orr.w	r2, r2, #32
 8003e08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d014      	beq.n	8003e40 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00f      	beq.n	8003e40 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e26:	f043 0204 	orr.w	r2, r3, #4
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00f      	beq.n	8003e6a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00f      	beq.n	8003e94 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7a:	f043 0208 	orr.w	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	fffffc90 	.word	0xfffffc90

08003eb4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003ec4:	e010      	b.n	8003ee8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec6:	f7fd f85f 	bl	8000f88 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d803      	bhi.n	8003ede <SPI_WaitOnFlagUntilTimeout+0x2a>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003edc:	d102      	bne.n	8003ee4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e00f      	b.n	8003f08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d0df      	beq.n	8003ec6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	3301      	adds	r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3307      	adds	r3, #7
 8003f2e:	08db      	lsrs	r3, r3, #3
 8003f30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f4c:	4904      	ldr	r1, [pc, #16]	; (8003f60 <MX_FATFS_Init+0x18>)
 8003f4e:	4805      	ldr	r0, [pc, #20]	; (8003f64 <MX_FATFS_Init+0x1c>)
 8003f50:	f003 fc80 	bl	8007854 <FATFS_LinkDriver>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <MX_FATFS_Init+0x20>)
 8003f5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	200028e4 	.word	0x200028e4
 8003f64:	20000010 	.word	0x20000010
 8003f68:	200028e8 	.word	0x200028e8

08003f6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003f70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f9d9 	bl	8004340 <USER_SPI_initialize>
 8003f8e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fab7 	bl	8004518 <USER_SPI_status>
 8003faa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8003fc4:	7bf8      	ldrb	r0, [r7, #15]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	f000 faba 	bl	8004544 <USER_SPI_read>
 8003fd0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
     return USER_SPI_write(pdrv, buff, sector, count);
 8003fea:	7bf8      	ldrb	r0, [r7, #15]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	f000 fb0d 	bl	8004610 <USER_SPI_write>
 8003ff6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	603a      	str	r2, [r7, #0]
 800400a:	71fb      	strb	r3, [r7, #7]
 800400c:	460b      	mov	r3, r1
 800400e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8004010:	79b9      	ldrb	r1, [r7, #6]
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fb76 	bl	8004708 <USER_SPI_ioctl>
 800401c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004030:	f7fc ffaa 	bl	8000f88 <HAL_GetTick>
 8004034:	4603      	mov	r3, r0
 8004036:	4a04      	ldr	r2, [pc, #16]	; (8004048 <SPI_Timer_On+0x20>)
 8004038:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <SPI_Timer_On+0x24>)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20004954 	.word	0x20004954
 800404c:	20004958 	.word	0x20004958

08004050 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004054:	f7fc ff98 	bl	8000f88 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <SPI_Timer_Status+0x24>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <SPI_Timer_Status+0x28>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	bf34      	ite	cc
 8004068:	2301      	movcc	r3, #1
 800406a:	2300      	movcs	r3, #0
 800406c:	b2db      	uxtb	r3, r3
}
 800406e:	4618      	mov	r0, r3
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20004954 	.word	0x20004954
 8004078:	20004958 	.word	0x20004958

0800407c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af02      	add	r7, sp, #8
 8004082:	4603      	mov	r3, r0
 8004084:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004086:	f107 020f 	add.w	r2, r7, #15
 800408a:	1df9      	adds	r1, r7, #7
 800408c:	2332      	movs	r3, #50	; 0x32
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2301      	movs	r3, #1
 8004092:	4804      	ldr	r0, [pc, #16]	; (80040a4 <xchg_spi+0x28>)
 8004094:	f7ff fb82 	bl	800379c <HAL_SPI_TransmitReceive>
    return rxDat;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20002858 	.word	0x20002858

080040a8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e00a      	b.n	80040ce <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	18d4      	adds	r4, r2, r3
 80040be:	20ff      	movs	r0, #255	; 0xff
 80040c0:	f7ff ffdc 	bl	800407c <xchg_spi>
 80040c4:	4603      	mov	r3, r0
 80040c6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d3f0      	bcc.n	80040b8 <rcvr_spi_multi+0x10>
	}
}
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd90      	pop	{r4, r7, pc}

080040e0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e009      	b.n	8004104 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ffbf 	bl	800407c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d3f1      	bcc.n	80040f0 <xmit_spi_multi+0x10>
	}
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800411e:	f7fc ff33 	bl	8000f88 <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004128:	20ff      	movs	r0, #255	; 0xff
 800412a:	f7ff ffa7 	bl	800407c <xchg_spi>
 800412e:	4603      	mov	r3, r0
 8004130:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2bff      	cmp	r3, #255	; 0xff
 8004136:	d007      	beq.n	8004148 <wait_ready+0x32>
 8004138:	f7fc ff26 	bl	8000f88 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d8ef      	bhi.n	8004128 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2bff      	cmp	r3, #255	; 0xff
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004160:	2201      	movs	r2, #1
 8004162:	2110      	movs	r1, #16
 8004164:	4803      	ldr	r0, [pc, #12]	; (8004174 <despiselect+0x18>)
 8004166:	f7fd f9df 	bl	8001528 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800416a:	20ff      	movs	r0, #255	; 0xff
 800416c:	f7ff ff86 	bl	800407c <xchg_spi>

}
 8004170:	bf00      	nop
 8004172:	bd80      	pop	{r7, pc}
 8004174:	58021000 	.word	0x58021000

08004178 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800417c:	2200      	movs	r2, #0
 800417e:	2110      	movs	r1, #16
 8004180:	4809      	ldr	r0, [pc, #36]	; (80041a8 <spiselect+0x30>)
 8004182:	f7fd f9d1 	bl	8001528 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004186:	20ff      	movs	r0, #255	; 0xff
 8004188:	f7ff ff78 	bl	800407c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800418c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004190:	f7ff ffc1 	bl	8004116 <wait_ready>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <spiselect+0x26>
 800419a:	2301      	movs	r3, #1
 800419c:	e002      	b.n	80041a4 <spiselect+0x2c>

	despiselect();
 800419e:	f7ff ffdd 	bl	800415c <despiselect>
	return 0;	/* Timeout */
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	58021000 	.word	0x58021000

080041ac <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80041b6:	20c8      	movs	r0, #200	; 0xc8
 80041b8:	f7ff ff36 	bl	8004028 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80041bc:	20ff      	movs	r0, #255	; 0xff
 80041be:	f7ff ff5d 	bl	800407c <xchg_spi>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2bff      	cmp	r3, #255	; 0xff
 80041ca:	d104      	bne.n	80041d6 <rcvr_datablock+0x2a>
 80041cc:	f7ff ff40 	bl	8004050 <SPI_Timer_Status>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f2      	bne.n	80041bc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2bfe      	cmp	r3, #254	; 0xfe
 80041da:	d001      	beq.n	80041e0 <rcvr_datablock+0x34>
 80041dc:	2300      	movs	r3, #0
 80041de:	e00a      	b.n	80041f6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80041e0:	6839      	ldr	r1, [r7, #0]
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff ff60 	bl	80040a8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80041e8:	20ff      	movs	r0, #255	; 0xff
 80041ea:	f7ff ff47 	bl	800407c <xchg_spi>
 80041ee:	20ff      	movs	r0, #255	; 0xff
 80041f0:	f7ff ff44 	bl	800407c <xchg_spi>

	return 1;						/* Function succeeded */
 80041f4:	2301      	movs	r3, #1
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800420a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800420e:	f7ff ff82 	bl	8004116 <wait_ready>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <xmit_datablock+0x1e>
 8004218:	2300      	movs	r3, #0
 800421a:	e01e      	b.n	800425a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ff2c 	bl	800407c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	2bfd      	cmp	r3, #253	; 0xfd
 8004228:	d016      	beq.n	8004258 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800422a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ff56 	bl	80040e0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004234:	20ff      	movs	r0, #255	; 0xff
 8004236:	f7ff ff21 	bl	800407c <xchg_spi>
 800423a:	20ff      	movs	r0, #255	; 0xff
 800423c:	f7ff ff1e 	bl	800407c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004240:	20ff      	movs	r0, #255	; 0xff
 8004242:	f7ff ff1b 	bl	800407c <xchg_spi>
 8004246:	4603      	mov	r3, r0
 8004248:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2b05      	cmp	r3, #5
 8004252:	d001      	beq.n	8004258 <xmit_datablock+0x5a>
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <xmit_datablock+0x5c>
	}
	return 1;
 8004258:	2301      	movs	r3, #1
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	6039      	str	r1, [r7, #0]
 800426c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	2b00      	cmp	r3, #0
 8004274:	da0e      	bge.n	8004294 <send_cmd+0x32>
		cmd &= 0x7F;
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800427c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800427e:	2100      	movs	r1, #0
 8004280:	2037      	movs	r0, #55	; 0x37
 8004282:	f7ff ffee 	bl	8004262 <send_cmd>
 8004286:	4603      	mov	r3, r0
 8004288:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800428a:	7bbb      	ldrb	r3, [r7, #14]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d901      	bls.n	8004294 <send_cmd+0x32>
 8004290:	7bbb      	ldrb	r3, [r7, #14]
 8004292:	e051      	b.n	8004338 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d008      	beq.n	80042ac <send_cmd+0x4a>
		despiselect();
 800429a:	f7ff ff5f 	bl	800415c <despiselect>
		if (!spiselect()) return 0xFF;
 800429e:	f7ff ff6b 	bl	8004178 <spiselect>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <send_cmd+0x4a>
 80042a8:	23ff      	movs	r3, #255	; 0xff
 80042aa:	e045      	b.n	8004338 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fee1 	bl	800407c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	0e1b      	lsrs	r3, r3, #24
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fedb 	bl	800407c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	0c1b      	lsrs	r3, r3, #16
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fed5 	bl	800407c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fecf 	bl	800407c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff feca 	bl	800407c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <send_cmd+0x94>
 80042f2:	2395      	movs	r3, #149	; 0x95
 80042f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d101      	bne.n	8004300 <send_cmd+0x9e>
 80042fc:	2387      	movs	r3, #135	; 0x87
 80042fe:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff feba 	bl	800407c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	2b0c      	cmp	r3, #12
 800430c:	d102      	bne.n	8004314 <send_cmd+0xb2>
 800430e:	20ff      	movs	r0, #255	; 0xff
 8004310:	f7ff feb4 	bl	800407c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004314:	230a      	movs	r3, #10
 8004316:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004318:	20ff      	movs	r0, #255	; 0xff
 800431a:	f7ff feaf 	bl	800407c <xchg_spi>
 800431e:	4603      	mov	r3, r0
 8004320:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004326:	2b00      	cmp	r3, #0
 8004328:	da05      	bge.n	8004336 <send_cmd+0xd4>
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	3b01      	subs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004336:	7bbb      	ldrb	r3, [r7, #14]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004340:	b590      	push	{r4, r7, lr}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <USER_SPI_initialize+0x14>
 8004350:	2301      	movs	r3, #1
 8004352:	e0d6      	b.n	8004502 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004354:	4b6d      	ldr	r3, [pc, #436]	; (800450c <USER_SPI_initialize+0x1cc>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <USER_SPI_initialize+0x2a>
 8004362:	4b6a      	ldr	r3, [pc, #424]	; (800450c <USER_SPI_initialize+0x1cc>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	e0cb      	b.n	8004502 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800436a:	4b69      	ldr	r3, [pc, #420]	; (8004510 <USER_SPI_initialize+0x1d0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004374:	4b66      	ldr	r3, [pc, #408]	; (8004510 <USER_SPI_initialize+0x1d0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800437c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800437e:	230a      	movs	r3, #10
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	e005      	b.n	8004390 <USER_SPI_initialize+0x50>
 8004384:	20ff      	movs	r0, #255	; 0xff
 8004386:	f7ff fe79 	bl	800407c <xchg_spi>
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	3b01      	subs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f6      	bne.n	8004384 <USER_SPI_initialize+0x44>

	ty = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800439a:	2100      	movs	r1, #0
 800439c:	2000      	movs	r0, #0
 800439e:	f7ff ff60 	bl	8004262 <send_cmd>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	f040 808b 	bne.w	80044c0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80043aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043ae:	f7ff fe3b 	bl	8004028 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80043b2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80043b6:	2008      	movs	r0, #8
 80043b8:	f7ff ff53 	bl	8004262 <send_cmd>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d151      	bne.n	8004466 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	e00d      	b.n	80043e4 <USER_SPI_initialize+0xa4>
 80043c8:	7bfc      	ldrb	r4, [r7, #15]
 80043ca:	20ff      	movs	r0, #255	; 0xff
 80043cc:	f7ff fe56 	bl	800407c <xchg_spi>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	f107 0310 	add.w	r3, r7, #16
 80043d8:	4423      	add	r3, r4
 80043da:	f803 2c08 	strb.w	r2, [r3, #-8]
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	3301      	adds	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d9ee      	bls.n	80043c8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80043ea:	7abb      	ldrb	r3, [r7, #10]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d167      	bne.n	80044c0 <USER_SPI_initialize+0x180>
 80043f0:	7afb      	ldrb	r3, [r7, #11]
 80043f2:	2baa      	cmp	r3, #170	; 0xaa
 80043f4:	d164      	bne.n	80044c0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80043f6:	bf00      	nop
 80043f8:	f7ff fe2a 	bl	8004050 <SPI_Timer_Status>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <USER_SPI_initialize+0xd2>
 8004402:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004406:	20a9      	movs	r0, #169	; 0xa9
 8004408:	f7ff ff2b 	bl	8004262 <send_cmd>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f2      	bne.n	80043f8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004412:	f7ff fe1d 	bl	8004050 <SPI_Timer_Status>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d051      	beq.n	80044c0 <USER_SPI_initialize+0x180>
 800441c:	2100      	movs	r1, #0
 800441e:	203a      	movs	r0, #58	; 0x3a
 8004420:	f7ff ff1f 	bl	8004262 <send_cmd>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d14a      	bne.n	80044c0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
 800442e:	e00d      	b.n	800444c <USER_SPI_initialize+0x10c>
 8004430:	7bfc      	ldrb	r4, [r7, #15]
 8004432:	20ff      	movs	r0, #255	; 0xff
 8004434:	f7ff fe22 	bl	800407c <xchg_spi>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	f107 0310 	add.w	r3, r7, #16
 8004440:	4423      	add	r3, r4
 8004442:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	3301      	adds	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d9ee      	bls.n	8004430 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004452:	7a3b      	ldrb	r3, [r7, #8]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <USER_SPI_initialize+0x120>
 800445c:	230c      	movs	r3, #12
 800445e:	e000      	b.n	8004462 <USER_SPI_initialize+0x122>
 8004460:	2304      	movs	r3, #4
 8004462:	737b      	strb	r3, [r7, #13]
 8004464:	e02c      	b.n	80044c0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004466:	2100      	movs	r1, #0
 8004468:	20a9      	movs	r0, #169	; 0xa9
 800446a:	f7ff fefa 	bl	8004262 <send_cmd>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d804      	bhi.n	800447e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004474:	2302      	movs	r3, #2
 8004476:	737b      	strb	r3, [r7, #13]
 8004478:	23a9      	movs	r3, #169	; 0xa9
 800447a:	73bb      	strb	r3, [r7, #14]
 800447c:	e003      	b.n	8004486 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800447e:	2301      	movs	r3, #1
 8004480:	737b      	strb	r3, [r7, #13]
 8004482:	2301      	movs	r3, #1
 8004484:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004486:	bf00      	nop
 8004488:	f7ff fde2 	bl	8004050 <SPI_Timer_Status>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <USER_SPI_initialize+0x162>
 8004492:	7bbb      	ldrb	r3, [r7, #14]
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fee3 	bl	8004262 <send_cmd>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f2      	bne.n	8004488 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80044a2:	f7ff fdd5 	bl	8004050 <SPI_Timer_Status>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <USER_SPI_initialize+0x17c>
 80044ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044b0:	2010      	movs	r0, #16
 80044b2:	f7ff fed6 	bl	8004262 <send_cmd>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <USER_SPI_initialize+0x180>
				ty = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <USER_SPI_initialize+0x1d4>)
 80044c2:	7b7b      	ldrb	r3, [r7, #13]
 80044c4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80044c6:	f7ff fe49 	bl	800415c <despiselect>

	if (ty) {			/* OK */
 80044ca:	7b7b      	ldrb	r3, [r7, #13]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d012      	beq.n	80044f6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <USER_SPI_initialize+0x1d0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <USER_SPI_initialize+0x1d0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80044e2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <USER_SPI_initialize+0x1cc>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <USER_SPI_initialize+0x1cc>)
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	e002      	b.n	80044fc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <USER_SPI_initialize+0x1cc>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <USER_SPI_initialize+0x1cc>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bd90      	pop	{r4, r7, pc}
 800450a:	bf00      	nop
 800450c:	20000024 	.word	0x20000024
 8004510:	20002858 	.word	0x20002858
 8004514:	200005a8 	.word	0x200005a8

08004518 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <USER_SPI_status+0x14>
 8004528:	2301      	movs	r3, #1
 800452a:	e002      	b.n	8004532 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <USER_SPI_status+0x28>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	b2db      	uxtb	r3, r3
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000024 	.word	0x20000024

08004544 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <USER_SPI_read+0x1c>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <USER_SPI_read+0x20>
 8004560:	2304      	movs	r3, #4
 8004562:	e04d      	b.n	8004600 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004564:	4b28      	ldr	r3, [pc, #160]	; (8004608 <USER_SPI_read+0xc4>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <USER_SPI_read+0x32>
 8004572:	2303      	movs	r3, #3
 8004574:	e044      	b.n	8004600 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004576:	4b25      	ldr	r3, [pc, #148]	; (800460c <USER_SPI_read+0xc8>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <USER_SPI_read+0x44>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	025b      	lsls	r3, r3, #9
 8004586:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d111      	bne.n	80045b2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	2011      	movs	r0, #17
 8004592:	f7ff fe66 	bl	8004262 <send_cmd>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d129      	bne.n	80045f0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800459c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045a0:	68b8      	ldr	r0, [r7, #8]
 80045a2:	f7ff fe03 	bl	80041ac <rcvr_datablock>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d021      	beq.n	80045f0 <USER_SPI_read+0xac>
			count = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	e01e      	b.n	80045f0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	2012      	movs	r0, #18
 80045b6:	f7ff fe54 	bl	8004262 <send_cmd>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d117      	bne.n	80045f0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80045c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045c4:	68b8      	ldr	r0, [r7, #8]
 80045c6:	f7ff fdf1 	bl	80041ac <rcvr_datablock>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <USER_SPI_read+0xa2>
				buff += 512;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80045d6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ed      	bne.n	80045c0 <USER_SPI_read+0x7c>
 80045e4:	e000      	b.n	80045e8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80045e6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80045e8:	2100      	movs	r1, #0
 80045ea:	200c      	movs	r0, #12
 80045ec:	f7ff fe39 	bl	8004262 <send_cmd>
		}
	}
	despiselect();
 80045f0:	f7ff fdb4 	bl	800415c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf14      	ite	ne
 80045fa:	2301      	movne	r3, #1
 80045fc:	2300      	moveq	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000024 	.word	0x20000024
 800460c:	200005a8 	.word	0x200005a8

08004610 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4603      	mov	r3, r0
 800461e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <USER_SPI_write+0x1c>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <USER_SPI_write+0x20>
 800462c:	2304      	movs	r3, #4
 800462e:	e063      	b.n	80046f8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004630:	4b33      	ldr	r3, [pc, #204]	; (8004700 <USER_SPI_write+0xf0>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <USER_SPI_write+0x32>
 800463e:	2303      	movs	r3, #3
 8004640:	e05a      	b.n	80046f8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004642:	4b2f      	ldr	r3, [pc, #188]	; (8004700 <USER_SPI_write+0xf0>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <USER_SPI_write+0x44>
 8004650:	2302      	movs	r3, #2
 8004652:	e051      	b.n	80046f8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004654:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <USER_SPI_write+0xf4>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <USER_SPI_write+0x56>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	025b      	lsls	r3, r3, #9
 8004664:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d110      	bne.n	800468e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	2018      	movs	r0, #24
 8004670:	f7ff fdf7 	bl	8004262 <send_cmd>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d136      	bne.n	80046e8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800467a:	21fe      	movs	r1, #254	; 0xfe
 800467c:	68b8      	ldr	r0, [r7, #8]
 800467e:	f7ff fdbe 	bl	80041fe <xmit_datablock>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02f      	beq.n	80046e8 <USER_SPI_write+0xd8>
			count = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	e02c      	b.n	80046e8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800468e:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <USER_SPI_write+0xf4>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	f003 0306 	and.w	r3, r3, #6
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <USER_SPI_write+0x92>
 800469a:	6839      	ldr	r1, [r7, #0]
 800469c:	2097      	movs	r0, #151	; 0x97
 800469e:	f7ff fde0 	bl	8004262 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	2019      	movs	r0, #25
 80046a6:	f7ff fddc 	bl	8004262 <send_cmd>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11b      	bne.n	80046e8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80046b0:	21fc      	movs	r1, #252	; 0xfc
 80046b2:	68b8      	ldr	r0, [r7, #8]
 80046b4:	f7ff fda3 	bl	80041fe <xmit_datablock>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <USER_SPI_write+0xc4>
				buff += 512;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80046c4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ee      	bne.n	80046b0 <USER_SPI_write+0xa0>
 80046d2:	e000      	b.n	80046d6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80046d4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80046d6:	21fd      	movs	r1, #253	; 0xfd
 80046d8:	2000      	movs	r0, #0
 80046da:	f7ff fd90 	bl	80041fe <xmit_datablock>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <USER_SPI_write+0xd8>
 80046e4:	2301      	movs	r3, #1
 80046e6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80046e8:	f7ff fd38 	bl	800415c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bf14      	ite	ne
 80046f2:	2301      	movne	r3, #1
 80046f4:	2300      	moveq	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000024 	.word	0x20000024
 8004704:	200005a8 	.word	0x200005a8

08004708 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	; 0x30
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	603a      	str	r2, [r7, #0]
 8004712:	71fb      	strb	r3, [r7, #7]
 8004714:	460b      	mov	r3, r1
 8004716:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <USER_SPI_ioctl+0x1a>
 800471e:	2304      	movs	r3, #4
 8004720:	e15a      	b.n	80049d8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004722:	4baf      	ldr	r3, [pc, #700]	; (80049e0 <USER_SPI_ioctl+0x2d8>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <USER_SPI_ioctl+0x2c>
 8004730:	2303      	movs	r3, #3
 8004732:	e151      	b.n	80049d8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800473a:	79bb      	ldrb	r3, [r7, #6]
 800473c:	2b04      	cmp	r3, #4
 800473e:	f200 8136 	bhi.w	80049ae <USER_SPI_ioctl+0x2a6>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <USER_SPI_ioctl+0x40>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	0800475d 	.word	0x0800475d
 800474c:	08004771 	.word	0x08004771
 8004750:	080049af 	.word	0x080049af
 8004754:	0800481d 	.word	0x0800481d
 8004758:	08004913 	.word	0x08004913
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800475c:	f7ff fd0c 	bl	8004178 <spiselect>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8127 	beq.w	80049b6 <USER_SPI_ioctl+0x2ae>
 8004768:	2300      	movs	r3, #0
 800476a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800476e:	e122      	b.n	80049b6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004770:	2100      	movs	r1, #0
 8004772:	2009      	movs	r0, #9
 8004774:	f7ff fd75 	bl	8004262 <send_cmd>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 811d 	bne.w	80049ba <USER_SPI_ioctl+0x2b2>
 8004780:	f107 030c 	add.w	r3, r7, #12
 8004784:	2110      	movs	r1, #16
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fd10 	bl	80041ac <rcvr_datablock>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8113 	beq.w	80049ba <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004794:	7b3b      	ldrb	r3, [r7, #12]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d111      	bne.n	80047c2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800479e:	7d7b      	ldrb	r3, [r7, #21]
 80047a0:	461a      	mov	r2, r3
 80047a2:	7d3b      	ldrb	r3, [r7, #20]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	4413      	add	r3, r2
 80047a8:	461a      	mov	r2, r3
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80047b2:	4413      	add	r3, r2
 80047b4:	3301      	adds	r3, #1
 80047b6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	029a      	lsls	r2, r3, #10
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e028      	b.n	8004814 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80047c2:	7c7b      	ldrb	r3, [r7, #17]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	7dbb      	ldrb	r3, [r7, #22]
 80047cc:	09db      	lsrs	r3, r3, #7
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	7d7b      	ldrb	r3, [r7, #21]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	f003 0306 	and.w	r3, r3, #6
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	4413      	add	r3, r2
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3302      	adds	r3, #2
 80047e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80047ea:	7d3b      	ldrb	r3, [r7, #20]
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	441a      	add	r2, r3
 80047f8:	7cbb      	ldrb	r3, [r7, #18]
 80047fa:	029b      	lsls	r3, r3, #10
 80047fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004800:	4413      	add	r3, r2
 8004802:	3301      	adds	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004806:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800480a:	3b09      	subs	r3, #9
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	409a      	lsls	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800481a:	e0ce      	b.n	80049ba <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800481c:	4b71      	ldr	r3, [pc, #452]	; (80049e4 <USER_SPI_ioctl+0x2dc>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d031      	beq.n	800488c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004828:	2100      	movs	r1, #0
 800482a:	208d      	movs	r0, #141	; 0x8d
 800482c:	f7ff fd19 	bl	8004262 <send_cmd>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 80c3 	bne.w	80049be <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004838:	20ff      	movs	r0, #255	; 0xff
 800483a:	f7ff fc1f 	bl	800407c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800483e:	f107 030c 	add.w	r3, r7, #12
 8004842:	2110      	movs	r1, #16
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fcb1 	bl	80041ac <rcvr_datablock>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80b6 	beq.w	80049be <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004852:	2330      	movs	r3, #48	; 0x30
 8004854:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004858:	e007      	b.n	800486a <USER_SPI_ioctl+0x162>
 800485a:	20ff      	movs	r0, #255	; 0xff
 800485c:	f7ff fc0e 	bl	800407c <xchg_spi>
 8004860:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004864:	3b01      	subs	r3, #1
 8004866:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800486a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f3      	bne.n	800485a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004872:	7dbb      	ldrb	r3, [r7, #22]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	2310      	movs	r3, #16
 800487c:	fa03 f202 	lsl.w	r2, r3, r2
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800488a:	e098      	b.n	80049be <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800488c:	2100      	movs	r1, #0
 800488e:	2009      	movs	r0, #9
 8004890:	f7ff fce7 	bl	8004262 <send_cmd>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 8091 	bne.w	80049be <USER_SPI_ioctl+0x2b6>
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	2110      	movs	r1, #16
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fc82 	bl	80041ac <rcvr_datablock>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8087 	beq.w	80049be <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80048b0:	4b4c      	ldr	r3, [pc, #304]	; (80049e4 <USER_SPI_ioctl+0x2dc>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d012      	beq.n	80048e2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80048bc:	7dbb      	ldrb	r3, [r7, #22]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80048c4:	7dfa      	ldrb	r2, [r7, #23]
 80048c6:	09d2      	lsrs	r2, r2, #7
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	4413      	add	r3, r2
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	7e7b      	ldrb	r3, [r7, #25]
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e013      	b.n	800490a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80048e2:	7dbb      	ldrb	r3, [r7, #22]
 80048e4:	109b      	asrs	r3, r3, #2
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	3301      	adds	r3, #1
 80048ee:	7dfa      	ldrb	r2, [r7, #23]
 80048f0:	00d2      	lsls	r2, r2, #3
 80048f2:	f002 0218 	and.w	r2, r2, #24
 80048f6:	7df9      	ldrb	r1, [r7, #23]
 80048f8:	0949      	lsrs	r1, r1, #5
 80048fa:	b2c9      	uxtb	r1, r1
 80048fc:	440a      	add	r2, r1
 80048fe:	3201      	adds	r2, #1
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	461a      	mov	r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004910:	e055      	b.n	80049be <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004912:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <USER_SPI_ioctl+0x2dc>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	f003 0306 	and.w	r3, r3, #6
 800491a:	2b00      	cmp	r3, #0
 800491c:	d051      	beq.n	80049c2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800491e:	f107 020c 	add.w	r2, r7, #12
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	210b      	movs	r1, #11
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff feee 	bl	8004708 <USER_SPI_ioctl>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d149      	bne.n	80049c6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004932:	7b3b      	ldrb	r3, [r7, #12]
 8004934:	099b      	lsrs	r3, r3, #6
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d104      	bne.n	8004946 <USER_SPI_ioctl+0x23e>
 800493c:	7dbb      	ldrb	r3, [r7, #22]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d041      	beq.n	80049ca <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004956:	4b23      	ldr	r3, [pc, #140]	; (80049e4 <USER_SPI_ioctl+0x2dc>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	025b      	lsls	r3, r3, #9
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	025b      	lsls	r3, r3, #9
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800496e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004970:	2020      	movs	r0, #32
 8004972:	f7ff fc76 	bl	8004262 <send_cmd>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d128      	bne.n	80049ce <USER_SPI_ioctl+0x2c6>
 800497c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800497e:	2021      	movs	r0, #33	; 0x21
 8004980:	f7ff fc6f 	bl	8004262 <send_cmd>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d121      	bne.n	80049ce <USER_SPI_ioctl+0x2c6>
 800498a:	2100      	movs	r1, #0
 800498c:	2026      	movs	r0, #38	; 0x26
 800498e:	f7ff fc68 	bl	8004262 <send_cmd>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11a      	bne.n	80049ce <USER_SPI_ioctl+0x2c6>
 8004998:	f247 5030 	movw	r0, #30000	; 0x7530
 800499c:	f7ff fbbb 	bl	8004116 <wait_ready>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d013      	beq.n	80049ce <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80049a6:	2300      	movs	r3, #0
 80049a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80049ac:	e00f      	b.n	80049ce <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80049ae:	2304      	movs	r3, #4
 80049b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80049b4:	e00c      	b.n	80049d0 <USER_SPI_ioctl+0x2c8>
		break;
 80049b6:	bf00      	nop
 80049b8:	e00a      	b.n	80049d0 <USER_SPI_ioctl+0x2c8>
		break;
 80049ba:	bf00      	nop
 80049bc:	e008      	b.n	80049d0 <USER_SPI_ioctl+0x2c8>
		break;
 80049be:	bf00      	nop
 80049c0:	e006      	b.n	80049d0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80049c2:	bf00      	nop
 80049c4:	e004      	b.n	80049d0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <USER_SPI_ioctl+0x2c8>
		break;
 80049ce:	bf00      	nop
	}

	despiselect();
 80049d0:	f7ff fbc4 	bl	800415c <despiselect>

	return res;
 80049d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3730      	adds	r7, #48	; 0x30
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000024 	.word	0x20000024
 80049e4:	200005a8 	.word	0x200005a8

080049e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <disk_status+0x30>)
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	79fa      	ldrb	r2, [r7, #7]
 8004a00:	4905      	ldr	r1, [pc, #20]	; (8004a18 <disk_status+0x30>)
 8004a02:	440a      	add	r2, r1
 8004a04:	7a12      	ldrb	r2, [r2, #8]
 8004a06:	4610      	mov	r0, r2
 8004a08:	4798      	blx	r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	200007d4 	.word	0x200007d4

08004a1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <disk_initialize+0x48>)
 8004a2e:	5cd3      	ldrb	r3, [r2, r3]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d111      	bne.n	8004a58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	4a0b      	ldr	r2, [pc, #44]	; (8004a64 <disk_initialize+0x48>)
 8004a38:	2101      	movs	r1, #1
 8004a3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <disk_initialize+0x48>)
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	79fa      	ldrb	r2, [r7, #7]
 8004a4a:	4906      	ldr	r1, [pc, #24]	; (8004a64 <disk_initialize+0x48>)
 8004a4c:	440a      	add	r2, r1
 8004a4e:	7a12      	ldrb	r2, [r2, #8]
 8004a50:	4610      	mov	r0, r2
 8004a52:	4798      	blx	r3
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200007d4 	.word	0x200007d4

08004a68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	4603      	mov	r3, r0
 8004a76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <disk_read+0x3c>)
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	689c      	ldr	r4, [r3, #8]
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	4a07      	ldr	r2, [pc, #28]	; (8004aa4 <disk_read+0x3c>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	7a18      	ldrb	r0, [r3, #8]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	47a0      	blx	r4
 8004a94:	4603      	mov	r3, r0
 8004a96:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd90      	pop	{r4, r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	200007d4 	.word	0x200007d4

08004aa8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <disk_write+0x3c>)
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	68dc      	ldr	r4, [r3, #12]
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <disk_write+0x3c>)
 8004ac8:	4413      	add	r3, r2
 8004aca:	7a18      	ldrb	r0, [r3, #8]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	47a0      	blx	r4
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200007d4 	.word	0x200007d4

08004ae8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	603a      	str	r2, [r7, #0]
 8004af2:	71fb      	strb	r3, [r7, #7]
 8004af4:	460b      	mov	r3, r1
 8004af6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <disk_ioctl+0x38>)
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	79fa      	ldrb	r2, [r7, #7]
 8004b06:	4906      	ldr	r1, [pc, #24]	; (8004b20 <disk_ioctl+0x38>)
 8004b08:	440a      	add	r2, r1
 8004b0a:	7a10      	ldrb	r0, [r2, #8]
 8004b0c:	79b9      	ldrb	r1, [r7, #6]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	4798      	blx	r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	73fb      	strb	r3, [r7, #15]
  return res;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	200007d4 	.word	0x200007d4

08004b24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004b34:	89fb      	ldrh	r3, [r7, #14]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	b21a      	sxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	b21b      	sxth	r3, r3
 8004b40:	4313      	orrs	r3, r2
 8004b42:	b21b      	sxth	r3, r3
 8004b44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004b46:	89fb      	ldrh	r3, [r7, #14]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3303      	adds	r3, #3
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	3202      	adds	r2, #2
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	3201      	adds	r2, #1
 8004b7a:	7812      	ldrb	r2, [r2, #0]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	7812      	ldrb	r2, [r2, #0]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	887a      	ldrh	r2, [r7, #2]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	701a      	strb	r2, [r3, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00d      	beq.n	8004c5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	1c53      	adds	r3, r2, #1
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	1c59      	adds	r1, r3, #1
 8004c4c:	6179      	str	r1, [r7, #20]
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	607b      	str	r3, [r7, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f1      	bne.n	8004c42 <mem_cpy+0x1a>
	}
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c6a:	b480      	push	{r7}
 8004c6c:	b087      	sub	sp, #28
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	617a      	str	r2, [r7, #20]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f3      	bne.n	8004c7a <mem_set+0x10>
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	61fa      	str	r2, [r7, #28]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	61ba      	str	r2, [r7, #24]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	1acb      	subs	r3, r1, r3
 8004ccc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <mem_cmp+0x40>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0eb      	beq.n	8004cb8 <mem_cmp+0x18>

	return r;
 8004ce0:	697b      	ldr	r3, [r7, #20]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3724      	adds	r7, #36	; 0x24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004cf8:	e002      	b.n	8004d00 <chk_chr+0x12>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <chk_chr+0x26>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d1f2      	bne.n	8004cfa <chk_chr+0xc>
	return *str;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	781b      	ldrb	r3, [r3, #0]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e029      	b.n	8004d8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004d38:	4a27      	ldr	r2, [pc, #156]	; (8004dd8 <chk_lock+0xb4>)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	4413      	add	r3, r2
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01d      	beq.n	8004d82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d46:	4a24      	ldr	r2, [pc, #144]	; (8004dd8 <chk_lock+0xb4>)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	4413      	add	r3, r2
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d116      	bne.n	8004d86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004d58:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <chk_lock+0xb4>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	4413      	add	r3, r2
 8004d60:	3304      	adds	r3, #4
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d10c      	bne.n	8004d86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d6c:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <chk_lock+0xb4>)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	4413      	add	r3, r2
 8004d74:	3308      	adds	r3, #8
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d102      	bne.n	8004d86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d80:	e007      	b.n	8004d92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004d82:	2301      	movs	r3, #1
 8004d84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d9d2      	bls.n	8004d38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d109      	bne.n	8004dac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <chk_lock+0x80>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d101      	bne.n	8004da8 <chk_lock+0x84>
 8004da4:	2300      	movs	r3, #0
 8004da6:	e010      	b.n	8004dca <chk_lock+0xa6>
 8004da8:	2312      	movs	r3, #18
 8004daa:	e00e      	b.n	8004dca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <chk_lock+0xa0>
 8004db2:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <chk_lock+0xb4>)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	4413      	add	r3, r2
 8004dba:	330c      	adds	r3, #12
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc2:	d101      	bne.n	8004dc8 <chk_lock+0xa4>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	e000      	b.n	8004dca <chk_lock+0xa6>
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	200005b4 	.word	0x200005b4

08004ddc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004de2:	2300      	movs	r3, #0
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	e002      	b.n	8004dee <enq_lock+0x12>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3301      	adds	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d806      	bhi.n	8004e02 <enq_lock+0x26>
 8004df4:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <enq_lock+0x40>)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	4413      	add	r3, r2
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f2      	bne.n	8004de8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	200005b4 	.word	0x200005b4

08004e20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e01f      	b.n	8004e70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004e30:	4a41      	ldr	r2, [pc, #260]	; (8004f38 <inc_lock+0x118>)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	4413      	add	r3, r2
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d113      	bne.n	8004e6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004e42:	4a3d      	ldr	r2, [pc, #244]	; (8004f38 <inc_lock+0x118>)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	4413      	add	r3, r2
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d109      	bne.n	8004e6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004e56:	4a38      	ldr	r2, [pc, #224]	; (8004f38 <inc_lock+0x118>)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3308      	adds	r3, #8
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d006      	beq.n	8004e78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d9dc      	bls.n	8004e30 <inc_lock+0x10>
 8004e76:	e000      	b.n	8004e7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004e78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d132      	bne.n	8004ee6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e002      	b.n	8004e8c <inc_lock+0x6c>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d806      	bhi.n	8004ea0 <inc_lock+0x80>
 8004e92:	4a29      	ldr	r2, [pc, #164]	; (8004f38 <inc_lock+0x118>)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	4413      	add	r3, r2
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f2      	bne.n	8004e86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d101      	bne.n	8004eaa <inc_lock+0x8a>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e040      	b.n	8004f2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4922      	ldr	r1, [pc, #136]	; (8004f38 <inc_lock+0x118>)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	440b      	add	r3, r1
 8004eb6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	491e      	ldr	r1, [pc, #120]	; (8004f38 <inc_lock+0x118>)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	491a      	ldr	r1, [pc, #104]	; (8004f38 <inc_lock+0x118>)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004ed8:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <inc_lock+0x118>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	4413      	add	r3, r2
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <inc_lock+0xe0>
 8004eec:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <inc_lock+0x118>)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	4413      	add	r3, r2
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <inc_lock+0xe0>
 8004efc:	2300      	movs	r3, #0
 8004efe:	e015      	b.n	8004f2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d108      	bne.n	8004f18 <inc_lock+0xf8>
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <inc_lock+0x118>)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	4413      	add	r3, r2
 8004f0e:	330c      	adds	r3, #12
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	e001      	b.n	8004f1c <inc_lock+0xfc>
 8004f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f1c:	4906      	ldr	r1, [pc, #24]	; (8004f38 <inc_lock+0x118>)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	440b      	add	r3, r1
 8004f24:	330c      	adds	r3, #12
 8004f26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	200005b4 	.word	0x200005b4

08004f3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d825      	bhi.n	8004f9c <dec_lock+0x60>
		n = Files[i].ctr;
 8004f50:	4a17      	ldr	r2, [pc, #92]	; (8004fb0 <dec_lock+0x74>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	4413      	add	r3, r2
 8004f58:	330c      	adds	r3, #12
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004f5e:	89fb      	ldrh	r3, [r7, #14]
 8004f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f64:	d101      	bne.n	8004f6a <dec_lock+0x2e>
 8004f66:	2300      	movs	r3, #0
 8004f68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004f6a:	89fb      	ldrh	r3, [r7, #14]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <dec_lock+0x3a>
 8004f70:	89fb      	ldrh	r3, [r7, #14]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004f76:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <dec_lock+0x74>)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	4413      	add	r3, r2
 8004f7e:	330c      	adds	r3, #12
 8004f80:	89fa      	ldrh	r2, [r7, #14]
 8004f82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004f84:	89fb      	ldrh	r3, [r7, #14]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <dec_lock+0x5a>
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <dec_lock+0x74>)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	4413      	add	r3, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	737b      	strb	r3, [r7, #13]
 8004f9a:	e001      	b.n	8004fa0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004fa0:	7b7b      	ldrb	r3, [r7, #13]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	200005b4 	.word	0x200005b4

08004fb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e010      	b.n	8004fe4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <clear_lock+0x44>)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	4413      	add	r3, r2
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d105      	bne.n	8004fde <clear_lock+0x2a>
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <clear_lock+0x44>)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	4413      	add	r3, r2
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d9eb      	bls.n	8004fc2 <clear_lock+0xe>
	}
}
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	200005b4 	.word	0x200005b4

08004ffc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	78db      	ldrb	r3, [r3, #3]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d034      	beq.n	800507a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	7858      	ldrb	r0, [r3, #1]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005020:	2301      	movs	r3, #1
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	f7ff fd40 	bl	8004aa8 <disk_write>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <sync_window+0x38>
			res = FR_DISK_ERR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
 8005032:	e022      	b.n	800507a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	429a      	cmp	r2, r3
 8005048:	d217      	bcs.n	800507a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	789b      	ldrb	r3, [r3, #2]
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	e010      	b.n	8005074 <sync_window+0x78>
					wsect += fs->fsize;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	7858      	ldrb	r0, [r3, #1]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005066:	2301      	movs	r3, #1
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	f7ff fd1d 	bl	8004aa8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	3b01      	subs	r3, #1
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d8eb      	bhi.n	8005052 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d01b      	beq.n	80050d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff ffad 	bl	8004ffc <sync_window>
 80050a2:	4603      	mov	r3, r0
 80050a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d113      	bne.n	80050d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7858      	ldrb	r0, [r3, #1]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050b6:	2301      	movs	r3, #1
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	f7ff fcd5 	bl	8004a68 <disk_read>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ff87 	bl	8004ffc <sync_window>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d159      	bne.n	80051ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d149      	bne.n	8005194 <sync_fs+0xb4>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	791b      	ldrb	r3, [r3, #4]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d145      	bne.n	8005194 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	899b      	ldrh	r3, [r3, #12]
 8005112:	461a      	mov	r2, r3
 8005114:	2100      	movs	r1, #0
 8005116:	f7ff fda8 	bl	8004c6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3338      	adds	r3, #56	; 0x38
 800511e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005122:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fd37 	bl	8004b9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3338      	adds	r3, #56	; 0x38
 8005130:	4921      	ldr	r1, [pc, #132]	; (80051b8 <sync_fs+0xd8>)
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fd4c 	bl	8004bd0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3338      	adds	r3, #56	; 0x38
 800513c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005140:	491e      	ldr	r1, [pc, #120]	; (80051bc <sync_fs+0xdc>)
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fd44 	bl	8004bd0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3338      	adds	r3, #56	; 0x38
 800514c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f7ff fd3a 	bl	8004bd0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3338      	adds	r3, #56	; 0x38
 8005160:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f7ff fd30 	bl	8004bd0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	7858      	ldrb	r0, [r3, #1]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005188:	2301      	movs	r3, #1
 800518a:	f7ff fc8d 	bl	8004aa8 <disk_write>
			fs->fsi_flag = 0;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	2200      	movs	r2, #0
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fca3 	bl	8004ae8 <disk_ioctl>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <sync_fs+0xcc>
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	41615252 	.word	0x41615252
 80051bc:	61417272 	.word	0x61417272

080051c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	3b02      	subs	r3, #2
 80051ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	3b02      	subs	r3, #2
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d301      	bcc.n	80051e0 <clust2sect+0x20>
 80051dc:	2300      	movs	r3, #0
 80051de:	e008      	b.n	80051f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	895b      	ldrh	r3, [r3, #10]
 80051e4:	461a      	mov	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	fb03 f202 	mul.w	r2, r3, r2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	4413      	add	r3, r2
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d904      	bls.n	800521e <get_fat+0x20>
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <get_fat+0x26>
		val = 1;	/* Internal error */
 800521e:	2301      	movs	r3, #1
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e0bb      	b.n	800539c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005228:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b03      	cmp	r3, #3
 8005230:	f000 8083 	beq.w	800533a <get_fat+0x13c>
 8005234:	2b03      	cmp	r3, #3
 8005236:	f300 80a7 	bgt.w	8005388 <get_fat+0x18a>
 800523a:	2b01      	cmp	r3, #1
 800523c:	d002      	beq.n	8005244 <get_fat+0x46>
 800523e:	2b02      	cmp	r3, #2
 8005240:	d056      	beq.n	80052f0 <get_fat+0xf2>
 8005242:	e0a1      	b.n	8005388 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	899b      	ldrh	r3, [r3, #12]
 800525a:	4619      	mov	r1, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005262:	4413      	add	r3, r2
 8005264:	4619      	mov	r1, r3
 8005266:	6938      	ldr	r0, [r7, #16]
 8005268:	f7ff ff0c 	bl	8005084 <move_window>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 808d 	bne.w	800538e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	60fa      	str	r2, [r7, #12]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	8992      	ldrh	r2, [r2, #12]
 800527e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005282:	fb02 f201 	mul.w	r2, r2, r1
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4413      	add	r3, r2
 800528c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005290:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	899b      	ldrh	r3, [r3, #12]
 800529a:	4619      	mov	r1, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	fbb3 f3f1 	udiv	r3, r3, r1
 80052a2:	4413      	add	r3, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	6938      	ldr	r0, [r7, #16]
 80052a8:	f7ff feec 	bl	8005084 <move_window>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d16f      	bne.n	8005392 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	899b      	ldrh	r3, [r3, #12]
 80052b6:	461a      	mov	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80052be:	fb02 f201 	mul.w	r2, r2, r1
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	461a      	mov	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <get_fat+0xe8>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	e002      	b.n	80052ec <get_fat+0xee>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ec:	617b      	str	r3, [r7, #20]
			break;
 80052ee:	e055      	b.n	800539c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	899b      	ldrh	r3, [r3, #12]
 80052f8:	085b      	lsrs	r3, r3, #1
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	4619      	mov	r1, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	fbb3 f3f1 	udiv	r3, r3, r1
 8005304:	4413      	add	r3, r2
 8005306:	4619      	mov	r1, r3
 8005308:	6938      	ldr	r0, [r7, #16]
 800530a:	f7ff febb 	bl	8005084 <move_window>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d140      	bne.n	8005396 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	8992      	ldrh	r2, [r2, #12]
 8005322:	fbb3 f0f2 	udiv	r0, r3, r2
 8005326:	fb02 f200 	mul.w	r2, r2, r0
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	440b      	add	r3, r1
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fbf8 	bl	8004b24 <ld_word>
 8005334:	4603      	mov	r3, r0
 8005336:	617b      	str	r3, [r7, #20]
			break;
 8005338:	e030      	b.n	800539c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	899b      	ldrh	r3, [r3, #12]
 8005342:	089b      	lsrs	r3, r3, #2
 8005344:	b29b      	uxth	r3, r3
 8005346:	4619      	mov	r1, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	fbb3 f3f1 	udiv	r3, r3, r1
 800534e:	4413      	add	r3, r2
 8005350:	4619      	mov	r1, r3
 8005352:	6938      	ldr	r0, [r7, #16]
 8005354:	f7ff fe96 	bl	8005084 <move_window>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11d      	bne.n	800539a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	8992      	ldrh	r2, [r2, #12]
 800536c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005370:	fb02 f200 	mul.w	r2, r2, r0
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	440b      	add	r3, r1
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fbeb 	bl	8004b54 <ld_dword>
 800537e:	4603      	mov	r3, r0
 8005380:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005384:	617b      	str	r3, [r7, #20]
			break;
 8005386:	e009      	b.n	800539c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005388:	2301      	movs	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e006      	b.n	800539c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800538e:	bf00      	nop
 8005390:	e004      	b.n	800539c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005392:	bf00      	nop
 8005394:	e002      	b.n	800539c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005396:	bf00      	nop
 8005398:	e000      	b.n	800539c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800539a:	bf00      	nop
		}
	}

	return val;
 800539c:	697b      	ldr	r3, [r7, #20]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80053a6:	b590      	push	{r4, r7, lr}
 80053a8:	b089      	sub	sp, #36	; 0x24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80053b2:	2302      	movs	r3, #2
 80053b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	f240 8102 	bls.w	80055c2 <put_fat+0x21c>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	f080 80fc 	bcs.w	80055c2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	f000 80b6 	beq.w	8005540 <put_fat+0x19a>
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	f300 80fd 	bgt.w	80055d4 <put_fat+0x22e>
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d003      	beq.n	80053e6 <put_fat+0x40>
 80053de:	2b02      	cmp	r3, #2
 80053e0:	f000 8083 	beq.w	80054ea <put_fat+0x144>
 80053e4:	e0f6      	b.n	80055d4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	4413      	add	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	899b      	ldrh	r3, [r3, #12]
 80053fc:	4619      	mov	r1, r3
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	fbb3 f3f1 	udiv	r3, r3, r1
 8005404:	4413      	add	r3, r2
 8005406:	4619      	mov	r1, r3
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff fe3b 	bl	8005084 <move_window>
 800540e:	4603      	mov	r3, r0
 8005410:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f040 80d6 	bne.w	80055c6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	61ba      	str	r2, [r7, #24]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	8992      	ldrh	r2, [r2, #12]
 800542a:	fbb3 f0f2 	udiv	r0, r3, r2
 800542e:	fb02 f200 	mul.w	r2, r2, r0
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	440b      	add	r3, r1
 8005436:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00d      	beq.n	800545e <put_fat+0xb8>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	b25b      	sxtb	r3, r3
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	b25a      	sxtb	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	b25b      	sxtb	r3, r3
 8005456:	4313      	orrs	r3, r2
 8005458:	b25b      	sxtb	r3, r3
 800545a:	b2db      	uxtb	r3, r3
 800545c:	e001      	b.n	8005462 <put_fat+0xbc>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	899b      	ldrh	r3, [r3, #12]
 8005474:	4619      	mov	r1, r3
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	fbb3 f3f1 	udiv	r3, r3, r1
 800547c:	4413      	add	r3, r2
 800547e:	4619      	mov	r1, r3
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff fdff 	bl	8005084 <move_window>
 8005486:	4603      	mov	r3, r0
 8005488:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800548a:	7ffb      	ldrb	r3, [r7, #31]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f040 809c 	bne.w	80055ca <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	899b      	ldrh	r3, [r3, #12]
 800549c:	461a      	mov	r2, r3
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80054a4:	fb02 f200 	mul.w	r2, r2, r0
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	440b      	add	r3, r1
 80054ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <put_fat+0x11a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e00e      	b.n	80054de <put_fat+0x138>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	b25b      	sxtb	r3, r3
 80054c6:	f023 030f 	bic.w	r3, r3, #15
 80054ca:	b25a      	sxtb	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0a1b      	lsrs	r3, r3, #8
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	b25b      	sxtb	r3, r3
 80054d8:	4313      	orrs	r3, r2
 80054da:	b25b      	sxtb	r3, r3
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	70da      	strb	r2, [r3, #3]
			break;
 80054e8:	e074      	b.n	80055d4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	899b      	ldrh	r3, [r3, #12]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	4619      	mov	r1, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80054fe:	4413      	add	r3, r2
 8005500:	4619      	mov	r1, r3
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff fdbe 	bl	8005084 <move_window>
 8005508:	4603      	mov	r3, r0
 800550a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800550c:	7ffb      	ldrb	r3, [r7, #31]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d15d      	bne.n	80055ce <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	8992      	ldrh	r2, [r2, #12]
 8005520:	fbb3 f0f2 	udiv	r0, r3, r2
 8005524:	fb02 f200 	mul.w	r2, r2, r0
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	440b      	add	r3, r1
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	b292      	uxth	r2, r2
 8005530:	4611      	mov	r1, r2
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff fb31 	bl	8004b9a <st_word>
			fs->wflag = 1;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	70da      	strb	r2, [r3, #3]
			break;
 800553e:	e049      	b.n	80055d4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	899b      	ldrh	r3, [r3, #12]
 8005548:	089b      	lsrs	r3, r3, #2
 800554a:	b29b      	uxth	r3, r3
 800554c:	4619      	mov	r1, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	fbb3 f3f1 	udiv	r3, r3, r1
 8005554:	4413      	add	r3, r2
 8005556:	4619      	mov	r1, r3
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff fd93 	bl	8005084 <move_window>
 800555e:	4603      	mov	r3, r0
 8005560:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005562:	7ffb      	ldrb	r3, [r7, #31]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d134      	bne.n	80055d2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	8992      	ldrh	r2, [r2, #12]
 800557c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005580:	fb02 f200 	mul.w	r2, r2, r0
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	440b      	add	r3, r1
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff fae3 	bl	8004b54 <ld_dword>
 800558e:	4603      	mov	r3, r0
 8005590:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005594:	4323      	orrs	r3, r4
 8005596:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	8992      	ldrh	r2, [r2, #12]
 80055a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80055aa:	fb02 f200 	mul.w	r2, r2, r0
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	440b      	add	r3, r1
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff fb0b 	bl	8004bd0 <st_dword>
			fs->wflag = 1;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	70da      	strb	r2, [r3, #3]
			break;
 80055c0:	e008      	b.n	80055d4 <put_fat+0x22e>
		}
	}
 80055c2:	bf00      	nop
 80055c4:	e006      	b.n	80055d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80055c6:	bf00      	nop
 80055c8:	e004      	b.n	80055d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80055ca:	bf00      	nop
 80055cc:	e002      	b.n	80055d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80055d2:	bf00      	nop
	return res;
 80055d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3724      	adds	r7, #36	; 0x24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd90      	pop	{r4, r7, pc}

080055de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b088      	sub	sp, #32
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d904      	bls.n	8005604 <remove_chain+0x26>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d301      	bcc.n	8005608 <remove_chain+0x2a>
 8005604:	2302      	movs	r3, #2
 8005606:	e04b      	b.n	80056a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00c      	beq.n	8005628 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800560e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	69b8      	ldr	r0, [r7, #24]
 8005616:	f7ff fec6 	bl	80053a6 <put_fat>
 800561a:	4603      	mov	r3, r0
 800561c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800561e:	7ffb      	ldrb	r3, [r7, #31]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <remove_chain+0x4a>
 8005624:	7ffb      	ldrb	r3, [r7, #31]
 8005626:	e03b      	b.n	80056a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff fde7 	bl	80051fe <get_fat>
 8005630:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d031      	beq.n	800569c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <remove_chain+0x64>
 800563e:	2302      	movs	r3, #2
 8005640:	e02e      	b.n	80056a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005648:	d101      	bne.n	800564e <remove_chain+0x70>
 800564a:	2301      	movs	r3, #1
 800564c:	e028      	b.n	80056a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800564e:	2200      	movs	r2, #0
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	69b8      	ldr	r0, [r7, #24]
 8005654:	f7ff fea7 	bl	80053a6 <put_fat>
 8005658:	4603      	mov	r3, r0
 800565a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800565c:	7ffb      	ldrb	r3, [r7, #31]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <remove_chain+0x88>
 8005662:	7ffb      	ldrb	r3, [r7, #31]
 8005664:	e01c      	b.n	80056a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	3b02      	subs	r3, #2
 8005670:	429a      	cmp	r2, r3
 8005672:	d20b      	bcs.n	800568c <remove_chain+0xae>
			fs->free_clst++;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	791b      	ldrb	r3, [r3, #4]
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	b2da      	uxtb	r2, r3
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	429a      	cmp	r2, r3
 8005698:	d3c6      	bcc.n	8005628 <remove_chain+0x4a>
 800569a:	e000      	b.n	800569e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800569c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10d      	bne.n	80056da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <create_chain+0x2c>
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d31b      	bcc.n	800570c <create_chain+0x64>
 80056d4:	2301      	movs	r3, #1
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e018      	b.n	800570c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff fd8e 	bl	80051fe <get_fat>
 80056e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d801      	bhi.n	80056ee <create_chain+0x46>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e070      	b.n	80057d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f4:	d101      	bne.n	80056fa <create_chain+0x52>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	e06a      	b.n	80057d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	429a      	cmp	r2, r3
 8005702:	d201      	bcs.n	8005708 <create_chain+0x60>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	e063      	b.n	80057d0 <create_chain+0x128>
		scl = clst;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	3301      	adds	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	429a      	cmp	r2, r3
 800571e:	d307      	bcc.n	8005730 <create_chain+0x88>
				ncl = 2;
 8005720:	2302      	movs	r3, #2
 8005722:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	429a      	cmp	r2, r3
 800572a:	d901      	bls.n	8005730 <create_chain+0x88>
 800572c:	2300      	movs	r3, #0
 800572e:	e04f      	b.n	80057d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff fd63 	bl	80051fe <get_fat>
 8005738:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d003      	beq.n	800574e <create_chain+0xa6>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574c:	d101      	bne.n	8005752 <create_chain+0xaa>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	e03e      	b.n	80057d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	429a      	cmp	r2, r3
 8005758:	d1da      	bne.n	8005710 <create_chain+0x68>
 800575a:	2300      	movs	r3, #0
 800575c:	e038      	b.n	80057d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800575e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005764:	69f9      	ldr	r1, [r7, #28]
 8005766:	6938      	ldr	r0, [r7, #16]
 8005768:	f7ff fe1d 	bl	80053a6 <put_fat>
 800576c:	4603      	mov	r3, r0
 800576e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <create_chain+0xe2>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6938      	ldr	r0, [r7, #16]
 8005782:	f7ff fe10 	bl	80053a6 <put_fat>
 8005786:	4603      	mov	r3, r0
 8005788:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d116      	bne.n	80057be <create_chain+0x116>
		fs->last_clst = ncl;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	3b02      	subs	r3, #2
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d804      	bhi.n	80057ae <create_chain+0x106>
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	1e5a      	subs	r2, r3, #1
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	791b      	ldrb	r3, [r3, #4]
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	711a      	strb	r2, [r3, #4]
 80057bc:	e007      	b.n	80057ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d102      	bne.n	80057ca <create_chain+0x122>
 80057c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057c8:	e000      	b.n	80057cc <create_chain+0x124>
 80057ca:	2301      	movs	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80057ce:	69fb      	ldr	r3, [r7, #28]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3720      	adds	r7, #32
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	3304      	adds	r3, #4
 80057ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	899b      	ldrh	r3, [r3, #12]
 80057f4:	461a      	mov	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	8952      	ldrh	r2, [r2, #10]
 8005800:	fbb3 f3f2 	udiv	r3, r3, r2
 8005804:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1d1a      	adds	r2, r3, #4
 800580a:	613a      	str	r2, [r7, #16]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <clmt_clust+0x42>
 8005816:	2300      	movs	r3, #0
 8005818:	e010      	b.n	800583c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	d307      	bcc.n	8005832 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	3304      	adds	r3, #4
 800582e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005830:	e7e9      	b.n	8005806 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005832:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	4413      	add	r3, r2
}
 800583c:	4618      	mov	r0, r3
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800585e:	d204      	bcs.n	800586a <dir_sdi+0x22>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <dir_sdi+0x26>
		return FR_INT_ERR;
 800586a:	2302      	movs	r3, #2
 800586c:	e071      	b.n	8005952 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <dir_sdi+0x46>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d902      	bls.n	800588e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10c      	bne.n	80058ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	8912      	ldrh	r2, [r2, #8]
 800589c:	4293      	cmp	r3, r2
 800589e:	d301      	bcc.n	80058a4 <dir_sdi+0x5c>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e056      	b.n	8005952 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	61da      	str	r2, [r3, #28]
 80058ac:	e02d      	b.n	800590a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	895b      	ldrh	r3, [r3, #10]
 80058b2:	461a      	mov	r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	899b      	ldrh	r3, [r3, #12]
 80058b8:	fb03 f302 	mul.w	r3, r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80058be:	e019      	b.n	80058f4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6979      	ldr	r1, [r7, #20]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fc9a 	bl	80051fe <get_fat>
 80058ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d2:	d101      	bne.n	80058d8 <dir_sdi+0x90>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e03c      	b.n	8005952 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d904      	bls.n	80058e8 <dir_sdi+0xa0>
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d301      	bcc.n	80058ec <dir_sdi+0xa4>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e032      	b.n	8005952 <dir_sdi+0x10a>
			ofs -= csz;
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d2e1      	bcs.n	80058c0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80058fc:	6979      	ldr	r1, [r7, #20]
 80058fe:	6938      	ldr	r0, [r7, #16]
 8005900:	f7ff fc5e 	bl	80051c0 <clust2sect>
 8005904:	4602      	mov	r2, r0
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <dir_sdi+0xd4>
 8005918:	2302      	movs	r3, #2
 800591a:	e01a      	b.n	8005952 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	899b      	ldrh	r3, [r3, #12]
 8005924:	4619      	mov	r1, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	fbb3 f3f1 	udiv	r3, r3, r1
 800592c:	441a      	add	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	899b      	ldrh	r3, [r3, #12]
 800593c:	461a      	mov	r2, r3
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	fbb3 f0f2 	udiv	r0, r3, r2
 8005944:	fb02 f200 	mul.w	r2, r2, r0
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	18ca      	adds	r2, r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b086      	sub	sp, #24
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	3320      	adds	r3, #32
 8005970:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <dir_next+0x28>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005980:	d301      	bcc.n	8005986 <dir_next+0x2c>
 8005982:	2304      	movs	r3, #4
 8005984:	e0bb      	b.n	8005afe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	899b      	ldrh	r3, [r3, #12]
 800598a:	461a      	mov	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005992:	fb02 f201 	mul.w	r2, r2, r1
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	2b00      	cmp	r3, #0
 800599a:	f040 809d 	bne.w	8005ad8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10b      	bne.n	80059c8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	8912      	ldrh	r2, [r2, #8]
 80059b8:	4293      	cmp	r3, r2
 80059ba:	f0c0 808d 	bcc.w	8005ad8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	61da      	str	r2, [r3, #28]
 80059c4:	2304      	movs	r3, #4
 80059c6:	e09a      	b.n	8005afe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	899b      	ldrh	r3, [r3, #12]
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	8952      	ldrh	r2, [r2, #10]
 80059d8:	3a01      	subs	r2, #1
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d17b      	bne.n	8005ad8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7ff fc08 	bl	80051fe <get_fat>
 80059ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d801      	bhi.n	80059fa <dir_next+0xa0>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e081      	b.n	8005afe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a00:	d101      	bne.n	8005a06 <dir_next+0xac>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e07b      	b.n	8005afe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d359      	bcc.n	8005ac4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	61da      	str	r2, [r3, #28]
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	e06e      	b.n	8005afe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f7ff fe3d 	bl	80056a8 <create_chain>
 8005a2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <dir_next+0xe0>
 8005a36:	2307      	movs	r3, #7
 8005a38:	e061      	b.n	8005afe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <dir_next+0xea>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e05c      	b.n	8005afe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4a:	d101      	bne.n	8005a50 <dir_next+0xf6>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e056      	b.n	8005afe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff fad3 	bl	8004ffc <sync_window>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <dir_next+0x106>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e04e      	b.n	8005afe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	899b      	ldrh	r3, [r3, #12]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f7ff f8fc 	bl	8004c6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	6979      	ldr	r1, [r7, #20]
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7ff fba1 	bl	80051c0 <clust2sect>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	635a      	str	r2, [r3, #52]	; 0x34
 8005a84:	e012      	b.n	8005aac <dir_next+0x152>
						fs->wflag = 1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7ff fab5 	bl	8004ffc <sync_window>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <dir_next+0x142>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e030      	b.n	8005afe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	635a      	str	r2, [r3, #52]	; 0x34
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	895b      	ldrh	r3, [r3, #10]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d3e6      	bcc.n	8005a86 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005aca:	6979      	ldr	r1, [r7, #20]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7ff fb77 	bl	80051c0 <clust2sect>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	899b      	ldrh	r3, [r3, #12]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	fbb3 f0f2 	udiv	r0, r3, r2
 8005af0:	fb02 f200 	mul.w	r2, r2, r0
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	18ca      	adds	r2, r1, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005b16:	2100      	movs	r1, #0
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff fe95 	bl	8005848 <dir_sdi>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d12b      	bne.n	8005b80 <dir_alloc+0x7a>
		n = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	4619      	mov	r1, r3
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff faa6 	bl	8005084 <move_window>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11d      	bne.n	8005b7e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2be5      	cmp	r3, #229	; 0xe5
 8005b4a:	d004      	beq.n	8005b56 <dir_alloc+0x50>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d107      	bne.n	8005b66 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d102      	bne.n	8005b6a <dir_alloc+0x64>
 8005b64:	e00c      	b.n	8005b80 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fef4 	bl	800595a <dir_next>
 8005b72:	4603      	mov	r3, r0
 8005b74:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0d7      	beq.n	8005b2c <dir_alloc+0x26>
 8005b7c:	e000      	b.n	8005b80 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005b7e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d101      	bne.n	8005b8a <dir_alloc+0x84>
 8005b86:	2307      	movs	r3, #7
 8005b88:	75fb      	strb	r3, [r7, #23]
	return res;
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	331a      	adds	r3, #26
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe ffbe 	bl	8004b24 <ld_word>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d109      	bne.n	8005bc8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe ffb3 	bl	8004b24 <ld_word>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	331a      	adds	r3, #26
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	b292      	uxth	r2, r2
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe ffd6 	bl	8004b9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d109      	bne.n	8005c0a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f103 0214 	add.w	r2, r3, #20
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f7fe ffc8 	bl	8004b9a <st_word>
	}
}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005c14:	b590      	push	{r4, r7, lr}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	331a      	adds	r3, #26
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fe ff7e 	bl	8004b24 <ld_word>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <cmp_lfn+0x1e>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e059      	b.n	8005ce6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c48:	2301      	movs	r3, #1
 8005c4a:	81fb      	strh	r3, [r7, #14]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	e033      	b.n	8005cba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005c52:	4a27      	ldr	r2, [pc, #156]	; (8005cf0 <cmp_lfn+0xdc>)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4413      	add	r3, r2
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	4413      	add	r3, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe ff5f 	bl	8004b24 <ld_word>
 8005c66:	4603      	mov	r3, r0
 8005c68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005c6a:	89fb      	ldrh	r3, [r7, #14]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01a      	beq.n	8005ca6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2bfe      	cmp	r3, #254	; 0xfe
 8005c74:	d812      	bhi.n	8005c9c <cmp_lfn+0x88>
 8005c76:	89bb      	ldrh	r3, [r7, #12]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 fe37 	bl	80078ec <ff_wtoupper>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461c      	mov	r4, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	617a      	str	r2, [r7, #20]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 fe2b 	bl	80078ec <ff_wtoupper>
 8005c96:	4603      	mov	r3, r0
 8005c98:	429c      	cmp	r4, r3
 8005c9a:	d001      	beq.n	8005ca0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e022      	b.n	8005ce6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005ca0:	89bb      	ldrh	r3, [r7, #12]
 8005ca2:	81fb      	strh	r3, [r7, #14]
 8005ca4:	e006      	b.n	8005cb4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005ca6:	89bb      	ldrh	r3, [r7, #12]
 8005ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d001      	beq.n	8005cb4 <cmp_lfn+0xa0>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e018      	b.n	8005ce6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b0c      	cmp	r3, #12
 8005cbe:	d9c8      	bls.n	8005c52 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <cmp_lfn+0xd0>
 8005ccc:	89fb      	ldrh	r3, [r7, #14]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <cmp_lfn+0xd0>
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <cmp_lfn+0xd0>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005ce4:	2301      	movs	r3, #1
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd90      	pop	{r4, r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	0800907c 	.word	0x0800907c

08005cf4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	461a      	mov	r2, r3
 8005d02:	460b      	mov	r3, r1
 8005d04:	71fb      	strb	r3, [r7, #7]
 8005d06:	4613      	mov	r3, r2
 8005d08:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	330d      	adds	r3, #13
 8005d0e:	79ba      	ldrb	r2, [r7, #6]
 8005d10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	330b      	adds	r3, #11
 8005d16:	220f      	movs	r2, #15
 8005d18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	331a      	adds	r3, #26
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fe ff36 	bl	8004b9a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	1e5a      	subs	r2, r3, #1
 8005d32:	4613      	mov	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	82fb      	strh	r3, [r7, #22]
 8005d42:	2300      	movs	r3, #0
 8005d44:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005d46:	8afb      	ldrh	r3, [r7, #22]
 8005d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <put_lfn+0x6c>
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	61fa      	str	r2, [r7, #28]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005d60:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <put_lfn+0xcc>)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	4413      	add	r3, r2
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	8afa      	ldrh	r2, [r7, #22]
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe ff11 	bl	8004b9a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005d78:	8afb      	ldrh	r3, [r7, #22]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <put_lfn+0x90>
 8005d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d82:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	3301      	adds	r3, #1
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	d9da      	bls.n	8005d46 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005d90:	8afb      	ldrh	r3, [r7, #22]
 8005d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d006      	beq.n	8005da8 <put_lfn+0xb4>
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d103      	bne.n	8005db0 <put_lfn+0xbc>
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	79fa      	ldrb	r2, [r7, #7]
 8005db4:	701a      	strb	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	0800907c 	.word	0x0800907c

08005dc4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08c      	sub	sp, #48	; 0x30
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005dd2:	220b      	movs	r2, #11
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7fe ff26 	bl	8004c28 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b05      	cmp	r3, #5
 8005de0:	d929      	bls.n	8005e36 <gen_numname+0x72>
		sr = seq;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005de6:	e020      	b.n	8005e2a <gen_numname+0x66>
			wc = *lfn++;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	1c9a      	adds	r2, r3, #2
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005df2:	2300      	movs	r3, #0
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df6:	e015      	b.n	8005e24 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	005a      	lsls	r2, r3, #1
 8005dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	4413      	add	r3, r2
 8005e04:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005e06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <gen_numname+0x5a>
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <gen_numname+0x11c>)
 8005e1a:	4053      	eors	r3, r2
 8005e1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	3301      	adds	r3, #1
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	d9e6      	bls.n	8005df8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1da      	bne.n	8005de8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005e36:	2307      	movs	r3, #7
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	3330      	adds	r3, #48	; 0x30
 8005e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e4e:	2b39      	cmp	r3, #57	; 0x39
 8005e50:	d904      	bls.n	8005e5c <gen_numname+0x98>
 8005e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e56:	3307      	adds	r3, #7
 8005e58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	1e5a      	subs	r2, r3, #1
 8005e60:	62ba      	str	r2, [r7, #40]	; 0x28
 8005e62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005e66:	4413      	add	r3, r2
 8005e68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005e6c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1de      	bne.n	8005e3a <gen_numname+0x76>
	ns[i] = '~';
 8005e7c:	f107 0214 	add.w	r2, r7, #20
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	4413      	add	r3, r2
 8005e84:	227e      	movs	r2, #126	; 0x7e
 8005e86:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e88:	2300      	movs	r3, #0
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8c:	e002      	b.n	8005e94 <gen_numname+0xd0>
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	3301      	adds	r3, #1
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
 8005e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d205      	bcs.n	8005ea8 <gen_numname+0xe4>
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	4413      	add	r3, r2
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d1f2      	bne.n	8005e8e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	2b07      	cmp	r3, #7
 8005eac:	d808      	bhi.n	8005ec0 <gen_numname+0xfc>
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8005eb4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005eb8:	4413      	add	r3, r2
 8005eba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005ebe:	e000      	b.n	8005ec2 <gen_numname+0xfe>
 8005ec0:	2120      	movs	r1, #32
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	460a      	mov	r2, r1
 8005ece:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	2b07      	cmp	r3, #7
 8005ed4:	d9e8      	bls.n	8005ea8 <gen_numname+0xe4>
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	3730      	adds	r7, #48	; 0x30
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	00011021 	.word	0x00011021

08005ee4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005ef0:	230b      	movs	r3, #11
 8005ef2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	0852      	lsrs	r2, r2, #1
 8005efa:	01db      	lsls	r3, r3, #7
 8005efc:	4313      	orrs	r3, r2
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	6079      	str	r1, [r7, #4]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	4413      	add	r3, r2
 8005f0a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1ed      	bne.n	8005ef4 <sum_sfn+0x10>
	return sum;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b086      	sub	sp, #24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005f34:	2100      	movs	r1, #0
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fc86 	bl	8005848 <dir_sdi>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <dir_find+0x24>
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	e0a9      	b.n	800609e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f4a:	23ff      	movs	r3, #255	; 0xff
 8005f4c:	753b      	strb	r3, [r7, #20]
 8005f4e:	7d3b      	ldrb	r3, [r7, #20]
 8005f50:	757b      	strb	r3, [r7, #21]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6938      	ldr	r0, [r7, #16]
 8005f62:	f7ff f88f 	bl	8005084 <move_window>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8090 	bne.w	8006092 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005f7a:	7dbb      	ldrb	r3, [r7, #22]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <dir_find+0x60>
 8005f80:	2304      	movs	r3, #4
 8005f82:	75fb      	strb	r3, [r7, #23]
 8005f84:	e08a      	b.n	800609c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	330b      	adds	r3, #11
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f92:	73fb      	strb	r3, [r7, #15]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	7bfa      	ldrb	r2, [r7, #15]
 8005f98:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005f9a:	7dbb      	ldrb	r3, [r7, #22]
 8005f9c:	2be5      	cmp	r3, #229	; 0xe5
 8005f9e:	d007      	beq.n	8005fb0 <dir_find+0x8a>
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <dir_find+0x98>
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	2b0f      	cmp	r3, #15
 8005fae:	d006      	beq.n	8005fbe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005fb0:	23ff      	movs	r3, #255	; 0xff
 8005fb2:	757b      	strb	r3, [r7, #21]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
 8005fbc:	e05e      	b.n	800607c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b0f      	cmp	r3, #15
 8005fc2:	d136      	bne.n	8006032 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d154      	bne.n	800607c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005fd2:	7dbb      	ldrb	r3, [r7, #22]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00d      	beq.n	8005ff8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	7b5b      	ldrb	r3, [r3, #13]
 8005fe2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005fe4:	7dbb      	ldrb	r3, [r7, #22]
 8005fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fea:	75bb      	strb	r3, [r7, #22]
 8005fec:	7dbb      	ldrb	r3, [r7, #22]
 8005fee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005ff8:	7dba      	ldrb	r2, [r7, #22]
 8005ffa:	7d7b      	ldrb	r3, [r7, #21]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d115      	bne.n	800602c <dir_find+0x106>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	330d      	adds	r3, #13
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	7d3a      	ldrb	r2, [r7, #20]
 800600a:	429a      	cmp	r2, r3
 800600c:	d10e      	bne.n	800602c <dir_find+0x106>
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7ff fdfb 	bl	8005c14 <cmp_lfn>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <dir_find+0x106>
 8006024:	7d7b      	ldrb	r3, [r7, #21]
 8006026:	3b01      	subs	r3, #1
 8006028:	b2db      	uxtb	r3, r3
 800602a:	e000      	b.n	800602e <dir_find+0x108>
 800602c:	23ff      	movs	r3, #255	; 0xff
 800602e:	757b      	strb	r3, [r7, #21]
 8006030:	e024      	b.n	800607c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006032:	7d7b      	ldrb	r3, [r7, #21]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <dir_find+0x126>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff ff51 	bl	8005ee4 <sum_sfn>
 8006042:	4603      	mov	r3, r0
 8006044:	461a      	mov	r2, r3
 8006046:	7d3b      	ldrb	r3, [r7, #20]
 8006048:	4293      	cmp	r3, r2
 800604a:	d024      	beq.n	8006096 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <dir_find+0x14a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a18      	ldr	r0, [r3, #32]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3324      	adds	r3, #36	; 0x24
 8006062:	220b      	movs	r2, #11
 8006064:	4619      	mov	r1, r3
 8006066:	f7fe fe1b 	bl	8004ca0 <mem_cmp>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d014      	beq.n	800609a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006070:	23ff      	movs	r3, #255	; 0xff
 8006072:	757b      	strb	r3, [r7, #21]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800607c:	2100      	movs	r1, #0
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fc6b 	bl	800595a <dir_next>
 8006084:	4603      	mov	r3, r0
 8006086:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f43f af65 	beq.w	8005f5a <dir_find+0x34>
 8006090:	e004      	b.n	800609c <dir_find+0x176>
		if (res != FR_OK) break;
 8006092:	bf00      	nop
 8006094:	e002      	b.n	800609c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800609a:	bf00      	nop

	return res;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08c      	sub	sp, #48	; 0x30
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80060bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <dir_register+0x20>
 80060c4:	2306      	movs	r3, #6
 80060c6:	e0e0      	b.n	800628a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80060c8:	2300      	movs	r3, #0
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
 80060cc:	e002      	b.n	80060d4 <dir_register+0x2c>
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	3301      	adds	r3, #1
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f4      	bne.n	80060ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80060ea:	f107 030c 	add.w	r3, r7, #12
 80060ee:	220c      	movs	r2, #12
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fd99 	bl	8004c28 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d032      	beq.n	8006166 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2240      	movs	r2, #64	; 0x40
 8006104:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006108:	2301      	movs	r3, #1
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
 800610c:	e016      	b.n	800613c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	f107 010c 	add.w	r1, r7, #12
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	f7ff fe51 	bl	8005dc4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff feff 	bl	8005f26 <dir_find>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800612e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	3301      	adds	r3, #1
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	2b63      	cmp	r3, #99	; 0x63
 8006140:	d9e5      	bls.n	800610e <dir_register+0x66>
 8006142:	e000      	b.n	8006146 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006144:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	2b64      	cmp	r3, #100	; 0x64
 800614a:	d101      	bne.n	8006150 <dir_register+0xa8>
 800614c:	2307      	movs	r3, #7
 800614e:	e09c      	b.n	800628a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006154:	2b04      	cmp	r3, #4
 8006156:	d002      	beq.n	800615e <dir_register+0xb6>
 8006158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800615c:	e095      	b.n	800628a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800615e:	7dfa      	ldrb	r2, [r7, #23]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d007      	beq.n	8006180 <dir_register+0xd8>
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	330c      	adds	r3, #12
 8006174:	4a47      	ldr	r2, [pc, #284]	; (8006294 <dir_register+0x1ec>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	089b      	lsrs	r3, r3, #2
 800617c:	3301      	adds	r3, #1
 800617e:	e000      	b.n	8006182 <dir_register+0xda>
 8006180:	2301      	movs	r3, #1
 8006182:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006184:	6a39      	ldr	r1, [r7, #32]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fcbd 	bl	8005b06 <dir_alloc>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006196:	2b00      	cmp	r3, #0
 8006198:	d148      	bne.n	800622c <dir_register+0x184>
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	3b01      	subs	r3, #1
 800619e:	623b      	str	r3, [r7, #32]
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d042      	beq.n	800622c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	015b      	lsls	r3, r3, #5
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fb48 	bl	8005848 <dir_sdi>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80061be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d132      	bne.n	800622c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3324      	adds	r3, #36	; 0x24
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fe8a 	bl	8005ee4 <sum_sfn>
 80061d0:	4603      	mov	r3, r0
 80061d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	4619      	mov	r1, r3
 80061da:	69f8      	ldr	r0, [r7, #28]
 80061dc:	f7fe ff52 	bl	8005084 <move_window>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80061e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d11d      	bne.n	800622a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	6918      	ldr	r0, [r3, #16]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a19      	ldr	r1, [r3, #32]
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	7efb      	ldrb	r3, [r7, #27]
 80061fc:	f7ff fd7a 	bl	8005cf4 <put_lfn>
				fs->wflag = 1;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2201      	movs	r2, #1
 8006204:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006206:	2100      	movs	r1, #0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff fba6 	bl	800595a <dir_next>
 800620e:	4603      	mov	r3, r0
 8006210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006218:	2b00      	cmp	r3, #0
 800621a:	d107      	bne.n	800622c <dir_register+0x184>
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	3b01      	subs	r3, #1
 8006220:	623b      	str	r3, [r7, #32]
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1d5      	bne.n	80061d4 <dir_register+0x12c>
 8006228:	e000      	b.n	800622c <dir_register+0x184>
				if (res != FR_OK) break;
 800622a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800622c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006230:	2b00      	cmp	r3, #0
 8006232:	d128      	bne.n	8006286 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	4619      	mov	r1, r3
 800623a:	69f8      	ldr	r0, [r7, #28]
 800623c:	f7fe ff22 	bl	8005084 <move_window>
 8006240:	4603      	mov	r3, r0
 8006242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800624a:	2b00      	cmp	r3, #0
 800624c:	d11b      	bne.n	8006286 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	2220      	movs	r2, #32
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe fd07 	bl	8004c6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a18      	ldr	r0, [r3, #32]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3324      	adds	r3, #36	; 0x24
 8006264:	220b      	movs	r2, #11
 8006266:	4619      	mov	r1, r3
 8006268:	f7fe fcde 	bl	8004c28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	330c      	adds	r3, #12
 8006278:	f002 0218 	and.w	r2, r2, #24
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2201      	movs	r2, #1
 8006284:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800628a:	4618      	mov	r0, r3
 800628c:	3730      	adds	r7, #48	; 0x30
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	4ec4ec4f 	.word	0x4ec4ec4f

08006298 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	61ba      	str	r2, [r7, #24]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4413      	add	r3, r2
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80062c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062c8:	2b1f      	cmp	r3, #31
 80062ca:	d940      	bls.n	800634e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80062cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ce:	2b2f      	cmp	r3, #47	; 0x2f
 80062d0:	d006      	beq.n	80062e0 <create_name+0x48>
 80062d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062d4:	2b5c      	cmp	r3, #92	; 0x5c
 80062d6:	d110      	bne.n	80062fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80062d8:	e002      	b.n	80062e0 <create_name+0x48>
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	3301      	adds	r3, #1
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	4413      	add	r3, r2
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b2f      	cmp	r3, #47	; 0x2f
 80062ea:	d0f6      	beq.n	80062da <create_name+0x42>
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	4413      	add	r3, r2
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b5c      	cmp	r3, #92	; 0x5c
 80062f6:	d0f0      	beq.n	80062da <create_name+0x42>
			break;
 80062f8:	e02a      	b.n	8006350 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2bfe      	cmp	r3, #254	; 0xfe
 80062fe:	d901      	bls.n	8006304 <create_name+0x6c>
 8006300:	2306      	movs	r3, #6
 8006302:	e177      	b.n	80065f4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006306:	b2db      	uxtb	r3, r3
 8006308:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800630a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800630c:	2101      	movs	r1, #1
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fab0 	bl	8007874 <ff_convert>
 8006314:	4603      	mov	r3, r0
 8006316:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <create_name+0x8a>
 800631e:	2306      	movs	r3, #6
 8006320:	e168      	b.n	80065f4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006324:	2b7f      	cmp	r3, #127	; 0x7f
 8006326:	d809      	bhi.n	800633c <create_name+0xa4>
 8006328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800632a:	4619      	mov	r1, r3
 800632c:	48b3      	ldr	r0, [pc, #716]	; (80065fc <create_name+0x364>)
 800632e:	f7fe fcde 	bl	8004cee <chk_chr>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <create_name+0xa4>
 8006338:	2306      	movs	r3, #6
 800633a:	e15b      	b.n	80065f4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	617a      	str	r2, [r7, #20]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800634a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800634c:	e7b4      	b.n	80062b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800634e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	441a      	add	r2, r3
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800635a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800635c:	2b1f      	cmp	r3, #31
 800635e:	d801      	bhi.n	8006364 <create_name+0xcc>
 8006360:	2304      	movs	r3, #4
 8006362:	e000      	b.n	8006366 <create_name+0xce>
 8006364:	2300      	movs	r3, #0
 8006366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800636a:	e011      	b.n	8006390 <create_name+0xf8>
		w = lfn[di - 1];
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006372:	4413      	add	r3, r2
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800637e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006380:	2b20      	cmp	r3, #32
 8006382:	d002      	beq.n	800638a <create_name+0xf2>
 8006384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006386:	2b2e      	cmp	r3, #46	; 0x2e
 8006388:	d106      	bne.n	8006398 <create_name+0x100>
		di--;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	3b01      	subs	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1ea      	bne.n	800636c <create_name+0xd4>
 8006396:	e000      	b.n	800639a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006398:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	2200      	movs	r2, #0
 80063a4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <create_name+0x118>
 80063ac:	2306      	movs	r3, #6
 80063ae:	e121      	b.n	80065f4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3324      	adds	r3, #36	; 0x24
 80063b4:	220b      	movs	r2, #11
 80063b6:	2120      	movs	r1, #32
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fe fc56 	bl	8004c6a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80063be:	2300      	movs	r3, #0
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e002      	b.n	80063ca <create_name+0x132>
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	3301      	adds	r3, #1
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d0f5      	beq.n	80063c4 <create_name+0x12c>
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	2b2e      	cmp	r3, #46	; 0x2e
 80063e4:	d0ee      	beq.n	80063c4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <create_name+0x168>
 80063ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063f0:	f043 0303 	orr.w	r3, r3, #3
 80063f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80063f8:	e002      	b.n	8006400 <create_name+0x168>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d009      	beq.n	800641a <create_name+0x182>
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800640c:	4413      	add	r3, r2
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	2b2e      	cmp	r3, #46	; 0x2e
 8006418:	d1ef      	bne.n	80063fa <create_name+0x162>

	i = b = 0; ni = 8;
 800641a:	2300      	movs	r3, #0
 800641c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006420:	2300      	movs	r3, #0
 8006422:	623b      	str	r3, [r7, #32]
 8006424:	2308      	movs	r3, #8
 8006426:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	61ba      	str	r2, [r7, #24]
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 8090 	beq.w	8006560 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006442:	2b20      	cmp	r3, #32
 8006444:	d006      	beq.n	8006454 <create_name+0x1bc>
 8006446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006448:	2b2e      	cmp	r3, #46	; 0x2e
 800644a:	d10a      	bne.n	8006462 <create_name+0x1ca>
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	429a      	cmp	r2, r3
 8006452:	d006      	beq.n	8006462 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006458:	f043 0303 	orr.w	r3, r3, #3
 800645c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006460:	e07d      	b.n	800655e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	429a      	cmp	r2, r3
 8006468:	d203      	bcs.n	8006472 <create_name+0x1da>
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	429a      	cmp	r2, r3
 8006470:	d123      	bne.n	80064ba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	2b0b      	cmp	r3, #11
 8006476:	d106      	bne.n	8006486 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800647c:	f043 0303 	orr.w	r3, r3, #3
 8006480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006484:	e06f      	b.n	8006566 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	429a      	cmp	r2, r3
 800648c:	d005      	beq.n	800649a <create_name+0x202>
 800648e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006492:	f043 0303 	orr.w	r3, r3, #3
 8006496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d860      	bhi.n	8006564 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	2308      	movs	r3, #8
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	230b      	movs	r3, #11
 80064ac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80064ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80064b8:	e051      	b.n	800655e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80064ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064bc:	2b7f      	cmp	r3, #127	; 0x7f
 80064be:	d914      	bls.n	80064ea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80064c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 f9d5 	bl	8007874 <ff_convert>
 80064ca:	4603      	mov	r3, r0
 80064cc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80064ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <create_name+0x246>
 80064d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d6:	3b80      	subs	r3, #128	; 0x80
 80064d8:	4a49      	ldr	r2, [pc, #292]	; (8006600 <create_name+0x368>)
 80064da:	5cd3      	ldrb	r3, [r2, r3]
 80064dc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80064de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064e2:	f043 0302 	orr.w	r3, r3, #2
 80064e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80064ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <create_name+0x268>
 80064f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064f2:	4619      	mov	r1, r3
 80064f4:	4843      	ldr	r0, [pc, #268]	; (8006604 <create_name+0x36c>)
 80064f6:	f7fe fbfa 	bl	8004cee <chk_chr>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006500:	235f      	movs	r3, #95	; 0x5f
 8006502:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006508:	f043 0303 	orr.w	r3, r3, #3
 800650c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006510:	e01b      	b.n	800654a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d909      	bls.n	800652c <create_name+0x294>
 8006518:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800651a:	2b5a      	cmp	r3, #90	; 0x5a
 800651c:	d806      	bhi.n	800652c <create_name+0x294>
					b |= 2;
 800651e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006522:	f043 0302 	orr.w	r3, r3, #2
 8006526:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800652a:	e00e      	b.n	800654a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800652c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800652e:	2b60      	cmp	r3, #96	; 0x60
 8006530:	d90b      	bls.n	800654a <create_name+0x2b2>
 8006532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006534:	2b7a      	cmp	r3, #122	; 0x7a
 8006536:	d808      	bhi.n	800654a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006538:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006546:	3b20      	subs	r3, #32
 8006548:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	623a      	str	r2, [r7, #32]
 8006550:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006552:	b2d1      	uxtb	r1, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4413      	add	r3, r2
 8006558:	460a      	mov	r2, r1
 800655a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800655e:	e763      	b.n	8006428 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006560:	bf00      	nop
 8006562:	e000      	b.n	8006566 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8006564:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800656c:	2be5      	cmp	r3, #229	; 0xe5
 800656e:	d103      	bne.n	8006578 <create_name+0x2e0>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2205      	movs	r2, #5
 8006574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b08      	cmp	r3, #8
 800657c:	d104      	bne.n	8006588 <create_name+0x2f0>
 800657e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006588:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800658c:	f003 030c 	and.w	r3, r3, #12
 8006590:	2b0c      	cmp	r3, #12
 8006592:	d005      	beq.n	80065a0 <create_name+0x308>
 8006594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	2b03      	cmp	r3, #3
 800659e:	d105      	bne.n	80065ac <create_name+0x314>
 80065a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065a4:	f043 0302 	orr.w	r3, r3, #2
 80065a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80065ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d117      	bne.n	80065e8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80065b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d105      	bne.n	80065d0 <create_name+0x338>
 80065c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065c8:	f043 0310 	orr.w	r3, r3, #16
 80065cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80065d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065d4:	f003 030c 	and.w	r3, r3, #12
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d105      	bne.n	80065e8 <create_name+0x350>
 80065dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065e0:	f043 0308 	orr.w	r3, r3, #8
 80065e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80065ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80065f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3728      	adds	r7, #40	; 0x28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	08008f94 	.word	0x08008f94
 8006600:	08008ffc 	.word	0x08008ffc
 8006604:	08008fa0 	.word	0x08008fa0

08006608 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800661c:	e002      	b.n	8006624 <follow_path+0x1c>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b2f      	cmp	r3, #47	; 0x2f
 800662a:	d0f8      	beq.n	800661e <follow_path+0x16>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b5c      	cmp	r3, #92	; 0x5c
 8006632:	d0f4      	beq.n	800661e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2200      	movs	r2, #0
 8006638:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b1f      	cmp	r3, #31
 8006640:	d80a      	bhi.n	8006658 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2280      	movs	r2, #128	; 0x80
 8006646:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800664a:	2100      	movs	r1, #0
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff f8fb 	bl	8005848 <dir_sdi>
 8006652:	4603      	mov	r3, r0
 8006654:	75fb      	strb	r3, [r7, #23]
 8006656:	e048      	b.n	80066ea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006658:	463b      	mov	r3, r7
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff fe1b 	bl	8006298 <create_name>
 8006662:	4603      	mov	r3, r0
 8006664:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d139      	bne.n	80066e0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff fc5a 	bl	8005f26 <dir_find>
 8006672:	4603      	mov	r3, r0
 8006674:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800667c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	2b04      	cmp	r3, #4
 8006688:	d12c      	bne.n	80066e4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d127      	bne.n	80066e4 <follow_path+0xdc>
 8006694:	2305      	movs	r3, #5
 8006696:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006698:	e024      	b.n	80066e4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d121      	bne.n	80066e8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	799b      	ldrb	r3, [r3, #6]
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80066b0:	2305      	movs	r3, #5
 80066b2:	75fb      	strb	r3, [r7, #23]
 80066b4:	e019      	b.n	80066ea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	8992      	ldrh	r2, [r2, #12]
 80066c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80066c8:	fb02 f200 	mul.w	r2, r2, r0
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	440b      	add	r3, r1
 80066d0:	4619      	mov	r1, r3
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff fa5e 	bl	8005b94 <ld_clust>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066de:	e7bb      	b.n	8006658 <follow_path+0x50>
			if (res != FR_OK) break;
 80066e0:	bf00      	nop
 80066e2:	e002      	b.n	80066ea <follow_path+0xe2>
				break;
 80066e4:	bf00      	nop
 80066e6:	e000      	b.n	80066ea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066e8:	bf00      	nop
			}
		}
	}

	return res;
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006700:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d031      	beq.n	800676e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e002      	b.n	8006718 <get_ldnumber+0x24>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	3301      	adds	r3, #1
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b1f      	cmp	r3, #31
 800671e:	d903      	bls.n	8006728 <get_ldnumber+0x34>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b3a      	cmp	r3, #58	; 0x3a
 8006726:	d1f4      	bne.n	8006712 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b3a      	cmp	r3, #58	; 0x3a
 800672e:	d11c      	bne.n	800676a <get_ldnumber+0x76>
			tp = *path;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	60fa      	str	r2, [r7, #12]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	3b30      	subs	r3, #48	; 0x30
 8006740:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b09      	cmp	r3, #9
 8006746:	d80e      	bhi.n	8006766 <get_ldnumber+0x72>
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	429a      	cmp	r2, r3
 800674e:	d10a      	bne.n	8006766 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d107      	bne.n	8006766 <get_ldnumber+0x72>
					vol = (int)i;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	3301      	adds	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	e002      	b.n	8006770 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800676e:	693b      	ldr	r3, [r7, #16]
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	70da      	strb	r2, [r3, #3]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006792:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fe fc74 	bl	8005084 <move_window>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <check_fs+0x2a>
 80067a2:	2304      	movs	r3, #4
 80067a4:	e038      	b.n	8006818 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3338      	adds	r3, #56	; 0x38
 80067aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe f9b8 	bl	8004b24 <ld_word>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80067bc:	429a      	cmp	r2, r3
 80067be:	d001      	beq.n	80067c4 <check_fs+0x48>
 80067c0:	2303      	movs	r3, #3
 80067c2:	e029      	b.n	8006818 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067ca:	2be9      	cmp	r3, #233	; 0xe9
 80067cc:	d009      	beq.n	80067e2 <check_fs+0x66>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067d4:	2beb      	cmp	r3, #235	; 0xeb
 80067d6:	d11e      	bne.n	8006816 <check_fs+0x9a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067de:	2b90      	cmp	r3, #144	; 0x90
 80067e0:	d119      	bne.n	8006816 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3338      	adds	r3, #56	; 0x38
 80067e6:	3336      	adds	r3, #54	; 0x36
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe f9b3 	bl	8004b54 <ld_dword>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067f4:	4a0a      	ldr	r2, [pc, #40]	; (8006820 <check_fs+0xa4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d101      	bne.n	80067fe <check_fs+0x82>
 80067fa:	2300      	movs	r3, #0
 80067fc:	e00c      	b.n	8006818 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3338      	adds	r3, #56	; 0x38
 8006802:	3352      	adds	r3, #82	; 0x52
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe f9a5 	bl	8004b54 <ld_dword>
 800680a:	4603      	mov	r3, r0
 800680c:	4a05      	ldr	r2, [pc, #20]	; (8006824 <check_fs+0xa8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <check_fs+0x9a>
 8006812:	2300      	movs	r3, #0
 8006814:	e000      	b.n	8006818 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006816:	2302      	movs	r3, #2
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	00544146 	.word	0x00544146
 8006824:	33544146 	.word	0x33544146

08006828 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b096      	sub	sp, #88	; 0x58
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff ff59 	bl	80066f4 <get_ldnumber>
 8006842:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	2b00      	cmp	r3, #0
 8006848:	da01      	bge.n	800684e <find_volume+0x26>
 800684a:	230b      	movs	r3, #11
 800684c:	e268      	b.n	8006d20 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800684e:	4ab0      	ldr	r2, [pc, #704]	; (8006b10 <find_volume+0x2e8>)
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006856:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <find_volume+0x3a>
 800685e:	230c      	movs	r3, #12
 8006860:	e25e      	b.n	8006d20 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006866:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01a      	beq.n	80068ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe f8b3 	bl	80049e8 <disk_status>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006888:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10c      	bne.n	80068ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <find_volume+0x82>
 800689a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80068a6:	230a      	movs	r3, #10
 80068a8:	e23a      	b.n	8006d20 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80068aa:	2300      	movs	r3, #0
 80068ac:	e238      	b.n	8006d20 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80068b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fe f8ab 	bl	8004a1c <disk_initialize>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80068cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80068d8:	2303      	movs	r3, #3
 80068da:	e221      	b.n	8006d20 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d007      	beq.n	80068f2 <find_volume+0xca>
 80068e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80068ee:	230a      	movs	r3, #10
 80068f0:	e216      	b.n	8006d20 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	7858      	ldrb	r0, [r3, #1]
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	330c      	adds	r3, #12
 80068fa:	461a      	mov	r2, r3
 80068fc:	2102      	movs	r1, #2
 80068fe:	f7fe f8f3 	bl	8004ae8 <disk_ioctl>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <find_volume+0xe4>
 8006908:	2301      	movs	r3, #1
 800690a:	e209      	b.n	8006d20 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	899b      	ldrh	r3, [r3, #12]
 8006910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006914:	d80d      	bhi.n	8006932 <find_volume+0x10a>
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	899b      	ldrh	r3, [r3, #12]
 800691a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800691e:	d308      	bcc.n	8006932 <find_volume+0x10a>
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	899b      	ldrh	r3, [r3, #12]
 8006924:	461a      	mov	r2, r3
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	899b      	ldrh	r3, [r3, #12]
 800692a:	3b01      	subs	r3, #1
 800692c:	4013      	ands	r3, r2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <find_volume+0x10e>
 8006932:	2301      	movs	r3, #1
 8006934:	e1f4      	b.n	8006d20 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800693a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800693c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800693e:	f7ff ff1d 	bl	800677c <check_fs>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800694c:	2b02      	cmp	r3, #2
 800694e:	d14b      	bne.n	80069e8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006950:	2300      	movs	r3, #0
 8006952:	643b      	str	r3, [r7, #64]	; 0x40
 8006954:	e01f      	b.n	8006996 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800695c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006964:	4413      	add	r3, r2
 8006966:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	3304      	adds	r3, #4
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d006      	beq.n	8006980 <find_volume+0x158>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	3308      	adds	r3, #8
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe f8ec 	bl	8004b54 <ld_dword>
 800697c:	4602      	mov	r2, r0
 800697e:	e000      	b.n	8006982 <find_volume+0x15a>
 8006980:	2200      	movs	r2, #0
 8006982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800698a:	440b      	add	r3, r1
 800698c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006992:	3301      	adds	r3, #1
 8006994:	643b      	str	r3, [r7, #64]	; 0x40
 8006996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006998:	2b03      	cmp	r3, #3
 800699a:	d9dc      	bls.n	8006956 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800699c:	2300      	movs	r3, #0
 800699e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <find_volume+0x184>
 80069a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a8:	3b01      	subs	r3, #1
 80069aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80069ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80069b4:	4413      	add	r3, r2
 80069b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80069ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80069bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <find_volume+0x1a6>
 80069c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069c6:	f7ff fed9 	bl	800677c <check_fs>
 80069ca:	4603      	mov	r3, r0
 80069cc:	e000      	b.n	80069d0 <find_volume+0x1a8>
 80069ce:	2303      	movs	r3, #3
 80069d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80069d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d905      	bls.n	80069e8 <find_volume+0x1c0>
 80069dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069de:	3301      	adds	r3, #1
 80069e0:	643b      	str	r3, [r7, #64]	; 0x40
 80069e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d9e1      	bls.n	80069ac <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80069e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d101      	bne.n	80069f4 <find_volume+0x1cc>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e195      	b.n	8006d20 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80069f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d901      	bls.n	8006a00 <find_volume+0x1d8>
 80069fc:	230d      	movs	r3, #13
 80069fe:	e18f      	b.n	8006d20 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	3338      	adds	r3, #56	; 0x38
 8006a04:	330b      	adds	r3, #11
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe f88c 	bl	8004b24 <ld_word>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	899b      	ldrh	r3, [r3, #12]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d001      	beq.n	8006a1c <find_volume+0x1f4>
 8006a18:	230d      	movs	r3, #13
 8006a1a:	e181      	b.n	8006d20 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	3338      	adds	r3, #56	; 0x38
 8006a20:	3316      	adds	r3, #22
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe f87e 	bl	8004b24 <ld_word>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <find_volume+0x218>
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	3338      	adds	r3, #56	; 0x38
 8006a36:	3324      	adds	r3, #36	; 0x24
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe f88b 	bl	8004b54 <ld_dword>
 8006a3e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a44:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	789b      	ldrb	r3, [r3, #2]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d005      	beq.n	8006a64 <find_volume+0x23c>
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	789b      	ldrb	r3, [r3, #2]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d001      	beq.n	8006a64 <find_volume+0x23c>
 8006a60:	230d      	movs	r3, #13
 8006a62:	e15d      	b.n	8006d20 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	789b      	ldrb	r3, [r3, #2]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6c:	fb02 f303 	mul.w	r3, r2, r3
 8006a70:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	895b      	ldrh	r3, [r3, #10]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <find_volume+0x270>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	895b      	ldrh	r3, [r3, #10]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	895b      	ldrh	r3, [r3, #10]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <find_volume+0x274>
 8006a98:	230d      	movs	r3, #13
 8006a9a:	e141      	b.n	8006d20 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	3338      	adds	r3, #56	; 0x38
 8006aa0:	3311      	adds	r3, #17
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe f83e 	bl	8004b24 <ld_word>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	891b      	ldrh	r3, [r3, #8]
 8006ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab6:	8992      	ldrh	r2, [r2, #12]
 8006ab8:	0952      	lsrs	r2, r2, #5
 8006aba:	b292      	uxth	r2, r2
 8006abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ac0:	fb02 f201 	mul.w	r2, r2, r1
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <find_volume+0x2a8>
 8006acc:	230d      	movs	r3, #13
 8006ace:	e127      	b.n	8006d20 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	3338      	adds	r3, #56	; 0x38
 8006ad4:	3313      	adds	r3, #19
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe f824 	bl	8004b24 <ld_word>
 8006adc:	4603      	mov	r3, r0
 8006ade:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <find_volume+0x2cc>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	3338      	adds	r3, #56	; 0x38
 8006aea:	3320      	adds	r3, #32
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe f831 	bl	8004b54 <ld_dword>
 8006af2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	3338      	adds	r3, #56	; 0x38
 8006af8:	330e      	adds	r3, #14
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe f812 	bl	8004b24 <ld_word>
 8006b00:	4603      	mov	r3, r0
 8006b02:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006b04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <find_volume+0x2ec>
 8006b0a:	230d      	movs	r3, #13
 8006b0c:	e108      	b.n	8006d20 <find_volume+0x4f8>
 8006b0e:	bf00      	nop
 8006b10:	200005ac 	.word	0x200005ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006b14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	4413      	add	r3, r2
 8006b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b1c:	8911      	ldrh	r1, [r2, #8]
 8006b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b20:	8992      	ldrh	r2, [r2, #12]
 8006b22:	0952      	lsrs	r2, r2, #5
 8006b24:	b292      	uxth	r2, r2
 8006b26:	fbb1 f2f2 	udiv	r2, r1, r2
 8006b2a:	b292      	uxth	r2, r2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d201      	bcs.n	8006b3c <find_volume+0x314>
 8006b38:	230d      	movs	r3, #13
 8006b3a:	e0f1      	b.n	8006d20 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b44:	8952      	ldrh	r2, [r2, #10]
 8006b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <find_volume+0x32e>
 8006b52:	230d      	movs	r3, #13
 8006b54:	e0e4      	b.n	8006d20 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006b56:	2303      	movs	r3, #3
 8006b58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d802      	bhi.n	8006b6c <find_volume+0x344>
 8006b66:	2302      	movs	r3, #2
 8006b68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d802      	bhi.n	8006b7c <find_volume+0x354>
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	1c9a      	adds	r2, r3, #2
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b88:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006b8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8e:	441a      	add	r2, r3
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006b94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	441a      	add	r2, r3
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d11e      	bne.n	8006be4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	3338      	adds	r3, #56	; 0x38
 8006baa:	332a      	adds	r3, #42	; 0x2a
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fd ffb9 	bl	8004b24 <ld_word>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <find_volume+0x394>
 8006bb8:	230d      	movs	r3, #13
 8006bba:	e0b1      	b.n	8006d20 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	891b      	ldrh	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <find_volume+0x3a0>
 8006bc4:	230d      	movs	r3, #13
 8006bc6:	e0ab      	b.n	8006d20 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	3338      	adds	r3, #56	; 0x38
 8006bcc:	332c      	adds	r3, #44	; 0x2c
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fd ffc0 	bl	8004b54 <ld_dword>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	647b      	str	r3, [r7, #68]	; 0x44
 8006be2:	e01f      	b.n	8006c24 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	891b      	ldrh	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <find_volume+0x3c8>
 8006bec:	230d      	movs	r3, #13
 8006bee:	e097      	b.n	8006d20 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf6:	441a      	add	r2, r3
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d103      	bne.n	8006c0c <find_volume+0x3e4>
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	e00a      	b.n	8006c22 <find_volume+0x3fa>
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	4613      	mov	r3, r2
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	4413      	add	r3, r2
 8006c16:	085a      	lsrs	r2, r3, #1
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006c22:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	899b      	ldrh	r3, [r3, #12]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c30:	440b      	add	r3, r1
 8006c32:	3b01      	subs	r3, #1
 8006c34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c36:	8989      	ldrh	r1, [r1, #12]
 8006c38:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d201      	bcs.n	8006c44 <find_volume+0x41c>
 8006c40:	230d      	movs	r3, #13
 8006c42:	e06d      	b.n	8006d20 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c4a:	619a      	str	r2, [r3, #24]
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	699a      	ldr	r2, [r3, #24]
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	2280      	movs	r2, #128	; 0x80
 8006c58:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d149      	bne.n	8006cf6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	3338      	adds	r3, #56	; 0x38
 8006c66:	3330      	adds	r3, #48	; 0x30
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fd ff5b 	bl	8004b24 <ld_word>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d140      	bne.n	8006cf6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c76:	3301      	adds	r3, #1
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c7c:	f7fe fa02 	bl	8005084 <move_window>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d137      	bne.n	8006cf6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	2200      	movs	r2, #0
 8006c8a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	3338      	adds	r3, #56	; 0x38
 8006c90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fd ff45 	bl	8004b24 <ld_word>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d127      	bne.n	8006cf6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	3338      	adds	r3, #56	; 0x38
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fd ff52 	bl	8004b54 <ld_dword>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	4a1d      	ldr	r2, [pc, #116]	; (8006d28 <find_volume+0x500>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d11e      	bne.n	8006cf6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	3338      	adds	r3, #56	; 0x38
 8006cbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fd ff47 	bl	8004b54 <ld_dword>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4a18      	ldr	r2, [pc, #96]	; (8006d2c <find_volume+0x504>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d113      	bne.n	8006cf6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	3338      	adds	r3, #56	; 0x38
 8006cd2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fd ff3c 	bl	8004b54 <ld_dword>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	3338      	adds	r3, #56	; 0x38
 8006ce6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fd ff32 	bl	8004b54 <ld_dword>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006cfc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <find_volume+0x508>)
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <find_volume+0x508>)
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <find_volume+0x508>)
 8006d0c:	881a      	ldrh	r2, [r3, #0]
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <find_volume+0x50c>)
 8006d16:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006d18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d1a:	f7fe f94b 	bl	8004fb4 <clear_lock>
#endif
	return FR_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3758      	adds	r7, #88	; 0x58
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	41615252 	.word	0x41615252
 8006d2c:	61417272 	.word	0x61417272
 8006d30:	200005b0 	.word	0x200005b0
 8006d34:	200005d4 	.word	0x200005d4

08006d38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006d42:	2309      	movs	r3, #9
 8006d44:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01c      	beq.n	8006d86 <validate+0x4e>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d018      	beq.n	8006d86 <validate+0x4e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d013      	beq.n	8006d86 <validate+0x4e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	889a      	ldrh	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	88db      	ldrh	r3, [r3, #6]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d10c      	bne.n	8006d86 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fd fe38 	bl	80049e8 <disk_status>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <validate+0x4e>
			res = FR_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <validate+0x5a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	e000      	b.n	8006d94 <validate+0x5c>
 8006d92:	2300      	movs	r3, #0
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	6013      	str	r3, [r2, #0]
	return res;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006db6:	f107 0310 	add.w	r3, r7, #16
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff fc9a 	bl	80066f4 <get_ldnumber>
 8006dc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da01      	bge.n	8006dcc <f_mount+0x28>
 8006dc8:	230b      	movs	r3, #11
 8006dca:	e02b      	b.n	8006e24 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006dcc:	4a17      	ldr	r2, [pc, #92]	; (8006e2c <f_mount+0x88>)
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006ddc:	69b8      	ldr	r0, [r7, #24]
 8006dde:	f7fe f8e9 	bl	8004fb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2200      	movs	r2, #0
 8006de6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	490d      	ldr	r1, [pc, #52]	; (8006e2c <f_mount+0x88>)
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <f_mount+0x66>
 8006e04:	79fb      	ldrb	r3, [r7, #7]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d001      	beq.n	8006e0e <f_mount+0x6a>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e00a      	b.n	8006e24 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006e0e:	f107 010c 	add.w	r1, r7, #12
 8006e12:	f107 0308 	add.w	r3, r7, #8
 8006e16:	2200      	movs	r2, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff fd05 	bl	8006828 <find_volume>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	200005ac 	.word	0x200005ac

08006e30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b09a      	sub	sp, #104	; 0x68
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <f_open+0x18>
 8006e44:	2309      	movs	r3, #9
 8006e46:	e1bb      	b.n	80071c0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e4e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006e50:	79fa      	ldrb	r2, [r7, #7]
 8006e52:	f107 0114 	add.w	r1, r7, #20
 8006e56:	f107 0308 	add.w	r3, r7, #8
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff fce4 	bl	8006828 <find_volume>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006e66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 819f 	bne.w	80071ae <f_open+0x37e>
		dj.obj.fs = fs;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	f107 0318 	add.w	r3, r7, #24
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fbc3 	bl	8006608 <follow_path>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d11a      	bne.n	8006ec6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e94:	b25b      	sxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da03      	bge.n	8006ea2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006e9a:	2306      	movs	r3, #6
 8006e9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006ea0:	e011      	b.n	8006ec6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bf14      	ite	ne
 8006eac:	2301      	movne	r3, #1
 8006eae:	2300      	moveq	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f107 0318 	add.w	r3, r7, #24
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fd ff32 	bl	8004d24 <chk_lock>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	f003 031c 	and.w	r3, r3, #28
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d07f      	beq.n	8006fd0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006ed0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d017      	beq.n	8006f08 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006ed8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d10e      	bne.n	8006efe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ee0:	f7fd ff7c 	bl	8004ddc <enq_lock>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d006      	beq.n	8006ef8 <f_open+0xc8>
 8006eea:	f107 0318 	add.w	r3, r7, #24
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff f8da 	bl	80060a8 <dir_register>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	e000      	b.n	8006efa <f_open+0xca>
 8006ef8:	2312      	movs	r3, #18
 8006efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	f043 0308 	orr.w	r3, r3, #8
 8006f04:	71fb      	strb	r3, [r7, #7]
 8006f06:	e010      	b.n	8006f2a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f08:	7fbb      	ldrb	r3, [r7, #30]
 8006f0a:	f003 0311 	and.w	r3, r3, #17
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <f_open+0xea>
					res = FR_DENIED;
 8006f12:	2307      	movs	r3, #7
 8006f14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006f18:	e007      	b.n	8006f2a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <f_open+0xfa>
 8006f24:	2308      	movs	r3, #8
 8006f26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d168      	bne.n	8007004 <f_open+0x1d4>
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d063      	beq.n	8007004 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006f3c:	f7fd f816 	bl	8003f6c <get_fattime>
 8006f40:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	330e      	adds	r3, #14
 8006f46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fd fe41 	bl	8004bd0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	3316      	adds	r3, #22
 8006f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fd fe3b 	bl	8004bd0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	330b      	adds	r3, #11
 8006f5e:	2220      	movs	r2, #32
 8006f60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f66:	4611      	mov	r1, r2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe fe13 	bl	8005b94 <ld_clust>
 8006f6e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f74:	2200      	movs	r2, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fe2b 	bl	8005bd2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	331c      	adds	r3, #28
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fd fe24 	bl	8004bd0 <st_dword>
					fs->wflag = 1;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d037      	beq.n	8007004 <f_open+0x1d4>
						dw = fs->winsect;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f98:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006f9a:	f107 0318 	add.w	r3, r7, #24
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe fb1b 	bl	80055de <remove_chain>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006fae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d126      	bne.n	8007004 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe f862 	bl	8005084 <move_window>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fca:	3a01      	subs	r2, #1
 8006fcc:	615a      	str	r2, [r3, #20]
 8006fce:	e019      	b.n	8007004 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006fd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d115      	bne.n	8007004 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006fd8:	7fbb      	ldrb	r3, [r7, #30]
 8006fda:	f003 0310 	and.w	r3, r3, #16
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <f_open+0x1ba>
					res = FR_NO_FILE;
 8006fe2:	2304      	movs	r3, #4
 8006fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006fe8:	e00c      	b.n	8007004 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <f_open+0x1d4>
 8006ff4:	7fbb      	ldrb	r3, [r7, #30]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <f_open+0x1d4>
						res = FR_DENIED;
 8006ffe:	2307      	movs	r3, #7
 8007000:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007004:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007008:	2b00      	cmp	r3, #0
 800700a:	d128      	bne.n	800705e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800701c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	f023 0301 	bic.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	bf14      	ite	ne
 8007036:	2301      	movne	r3, #1
 8007038:	2300      	moveq	r3, #0
 800703a:	b2db      	uxtb	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	f107 0318 	add.w	r3, r7, #24
 8007042:	4611      	mov	r1, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f7fd feeb 	bl	8004e20 <inc_lock>
 800704a:	4602      	mov	r2, r0
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <f_open+0x22e>
 8007058:	2302      	movs	r3, #2
 800705a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800705e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007062:	2b00      	cmp	r3, #0
 8007064:	f040 80a3 	bne.w	80071ae <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800706c:	4611      	mov	r1, r2
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fd90 	bl	8005b94 <ld_clust>
 8007074:	4602      	mov	r2, r0
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	331c      	adds	r3, #28
 800707e:	4618      	mov	r0, r3
 8007080:	f7fd fd68 	bl	8004b54 <ld_dword>
 8007084:	4602      	mov	r2, r0
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	88da      	ldrh	r2, [r3, #6]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	79fa      	ldrb	r2, [r7, #7]
 80070a2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3330      	adds	r3, #48	; 0x30
 80070ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070be:	2100      	movs	r1, #0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fd fdd2 	bl	8004c6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d06e      	beq.n	80071ae <f_open+0x37e>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d06a      	beq.n	80071ae <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	895b      	ldrh	r3, [r3, #10]
 80070e4:	461a      	mov	r2, r3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	899b      	ldrh	r3, [r3, #12]
 80070ea:	fb03 f302 	mul.w	r3, r3, r2
 80070ee:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070fc:	e016      	b.n	800712c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe f87b 	bl	80051fe <get_fat>
 8007108:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800710a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800710c:	2b01      	cmp	r3, #1
 800710e:	d802      	bhi.n	8007116 <f_open+0x2e6>
 8007110:	2302      	movs	r3, #2
 8007112:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800711c:	d102      	bne.n	8007124 <f_open+0x2f4>
 800711e:	2301      	movs	r3, #1
 8007120:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800712c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <f_open+0x30c>
 8007134:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007138:	429a      	cmp	r2, r3
 800713a:	d8e0      	bhi.n	80070fe <f_open+0x2ce>
				}
				fp->clust = clst;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007140:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007142:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007146:	2b00      	cmp	r3, #0
 8007148:	d131      	bne.n	80071ae <f_open+0x37e>
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	899b      	ldrh	r3, [r3, #12]
 800714e:	461a      	mov	r2, r3
 8007150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007152:	fbb3 f1f2 	udiv	r1, r3, r2
 8007156:	fb02 f201 	mul.w	r2, r2, r1
 800715a:	1a9b      	subs	r3, r3, r2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d026      	beq.n	80071ae <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe f82b 	bl	80051c0 <clust2sect>
 800716a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800716c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <f_open+0x34a>
						res = FR_INT_ERR;
 8007172:	2302      	movs	r3, #2
 8007174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007178:	e019      	b.n	80071ae <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	899b      	ldrh	r3, [r3, #12]
 800717e:	461a      	mov	r2, r3
 8007180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007182:	fbb3 f2f2 	udiv	r2, r3, r2
 8007186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007188:	441a      	add	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	7858      	ldrb	r0, [r3, #1]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1a      	ldr	r2, [r3, #32]
 800719c:	2301      	movs	r3, #1
 800719e:	f7fd fc63 	bl	8004a68 <disk_read>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <f_open+0x37e>
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80071ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <f_open+0x38c>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80071bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3768      	adds	r7, #104	; 0x68
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08e      	sub	sp, #56	; 0x38
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f107 0214 	add.w	r2, r7, #20
 80071e6:	4611      	mov	r1, r2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff fda5 	bl	8006d38 <validate>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80071f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d107      	bne.n	800720c <f_read+0x44>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	7d5b      	ldrb	r3, [r3, #21]
 8007200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007204:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <f_read+0x4a>
 800720c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007210:	e135      	b.n	800747e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	7d1b      	ldrb	r3, [r3, #20]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <f_read+0x5a>
 800721e:	2307      	movs	r3, #7
 8007220:	e12d      	b.n	800747e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	429a      	cmp	r2, r3
 8007234:	f240 811e 	bls.w	8007474 <f_read+0x2ac>
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800723c:	e11a      	b.n	8007474 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	8992      	ldrh	r2, [r2, #12]
 8007246:	fbb3 f1f2 	udiv	r1, r3, r2
 800724a:	fb02 f201 	mul.w	r2, r2, r1
 800724e:	1a9b      	subs	r3, r3, r2
 8007250:	2b00      	cmp	r3, #0
 8007252:	f040 80d5 	bne.w	8007400 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	8992      	ldrh	r2, [r2, #12]
 800725e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	8952      	ldrh	r2, [r2, #10]
 8007266:	3a01      	subs	r2, #1
 8007268:	4013      	ands	r3, r2
 800726a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d12f      	bne.n	80072d2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d103      	bne.n	8007282 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	633b      	str	r3, [r7, #48]	; 0x30
 8007280:	e013      	b.n	80072aa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d007      	beq.n	800729a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	4619      	mov	r1, r3
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7fe faa1 	bl	80057d8 <clmt_clust>
 8007296:	6338      	str	r0, [r7, #48]	; 0x30
 8007298:	e007      	b.n	80072aa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f7fd ffab 	bl	80051fe <get_fat>
 80072a8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d804      	bhi.n	80072ba <f_read+0xf2>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2202      	movs	r2, #2
 80072b4:	755a      	strb	r2, [r3, #21]
 80072b6:	2302      	movs	r3, #2
 80072b8:	e0e1      	b.n	800747e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c0:	d104      	bne.n	80072cc <f_read+0x104>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	755a      	strb	r2, [r3, #21]
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0d8      	b.n	800747e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fd ff70 	bl	80051c0 <clust2sect>
 80072e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <f_read+0x12a>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2202      	movs	r2, #2
 80072ec:	755a      	strb	r2, [r3, #21]
 80072ee:	2302      	movs	r3, #2
 80072f0:	e0c5      	b.n	800747e <f_read+0x2b6>
			sect += csect;
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	899b      	ldrh	r3, [r3, #12]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	fbb3 f3f2 	udiv	r3, r3, r2
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	2b00      	cmp	r3, #0
 800730c:	d041      	beq.n	8007392 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	4413      	add	r3, r2
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	8952      	ldrh	r2, [r2, #10]
 8007318:	4293      	cmp	r3, r2
 800731a:	d905      	bls.n	8007328 <f_read+0x160>
					cc = fs->csize - csect;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	895b      	ldrh	r3, [r3, #10]
 8007320:	461a      	mov	r2, r3
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	7858      	ldrb	r0, [r3, #1]
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007332:	f7fd fb99 	bl	8004a68 <disk_read>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <f_read+0x17e>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	755a      	strb	r2, [r3, #21]
 8007342:	2301      	movs	r3, #1
 8007344:	e09b      	b.n	800747e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	7d1b      	ldrb	r3, [r3, #20]
 800734a:	b25b      	sxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	da18      	bge.n	8007382 <f_read+0x1ba>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735a:	429a      	cmp	r2, r3
 800735c:	d911      	bls.n	8007382 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a1a      	ldr	r2, [r3, #32]
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	8992      	ldrh	r2, [r2, #12]
 800736a:	fb02 f303 	mul.w	r3, r2, r3
 800736e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007370:	18d0      	adds	r0, r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	899b      	ldrh	r3, [r3, #12]
 800737c:	461a      	mov	r2, r3
 800737e:	f7fd fc53 	bl	8004c28 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	899b      	ldrh	r3, [r3, #12]
 8007386:	461a      	mov	r2, r3
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	fb02 f303 	mul.w	r3, r2, r3
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007390:	e05c      	b.n	800744c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	429a      	cmp	r2, r3
 800739a:	d02e      	beq.n	80073fa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7d1b      	ldrb	r3, [r3, #20]
 80073a0:	b25b      	sxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	da18      	bge.n	80073d8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	7858      	ldrb	r0, [r3, #1]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1a      	ldr	r2, [r3, #32]
 80073b4:	2301      	movs	r3, #1
 80073b6:	f7fd fb77 	bl	8004aa8 <disk_write>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d004      	beq.n	80073ca <f_read+0x202>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	755a      	strb	r2, [r3, #21]
 80073c6:	2301      	movs	r3, #1
 80073c8:	e059      	b.n	800747e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	7d1b      	ldrb	r3, [r3, #20]
 80073ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	7858      	ldrb	r0, [r3, #1]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073e2:	2301      	movs	r3, #1
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	f7fd fb3f 	bl	8004a68 <disk_read>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d004      	beq.n	80073fa <f_read+0x232>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	755a      	strb	r2, [r3, #21]
 80073f6:	2301      	movs	r3, #1
 80073f8:	e041      	b.n	800747e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	899b      	ldrh	r3, [r3, #12]
 8007404:	4618      	mov	r0, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	8992      	ldrh	r2, [r2, #12]
 800740e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007412:	fb02 f201 	mul.w	r2, r2, r1
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	1ac3      	subs	r3, r0, r3
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800741c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d901      	bls.n	8007428 <f_read+0x260>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	8992      	ldrh	r2, [r2, #12]
 8007436:	fbb3 f0f2 	udiv	r0, r3, r2
 800743a:	fb02 f200 	mul.w	r2, r2, r0
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	440b      	add	r3, r1
 8007442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007444:	4619      	mov	r1, r3
 8007446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007448:	f7fd fbee 	bl	8004c28 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800744c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	4413      	add	r3, r2
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	441a      	add	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	619a      	str	r2, [r3, #24]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	441a      	add	r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f47f aee1 	bne.w	800723e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3738      	adds	r7, #56	; 0x38
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b086      	sub	sp, #24
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f107 0208 	add.w	r2, r7, #8
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fc4e 	bl	8006d38 <validate>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d168      	bne.n	8007578 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	7d1b      	ldrb	r3, [r3, #20]
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d062      	beq.n	8007578 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	7d1b      	ldrb	r3, [r3, #20]
 80074b6:	b25b      	sxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da15      	bge.n	80074e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	7858      	ldrb	r0, [r3, #1]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	2301      	movs	r3, #1
 80074cc:	f7fd faec 	bl	8004aa8 <disk_write>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <f_sync+0x54>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e04f      	b.n	800757a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7d1b      	ldrb	r3, [r3, #20]
 80074de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80074e8:	f7fc fd40 	bl	8003f6c <get_fattime>
 80074ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	4619      	mov	r1, r3
 80074f6:	4610      	mov	r0, r2
 80074f8:	f7fd fdc4 	bl	8005084 <move_window>
 80074fc:	4603      	mov	r3, r0
 80074fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d138      	bne.n	8007578 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	330b      	adds	r3, #11
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	330b      	adds	r3, #11
 8007516:	f042 0220 	orr.w	r2, r2, #32
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	461a      	mov	r2, r3
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	f7fe fb52 	bl	8005bd2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f103 021c 	add.w	r2, r3, #28
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f7fd fb48 	bl	8004bd0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3316      	adds	r3, #22
 8007544:	6939      	ldr	r1, [r7, #16]
 8007546:	4618      	mov	r0, r3
 8007548:	f7fd fb42 	bl	8004bd0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3312      	adds	r3, #18
 8007550:	2100      	movs	r1, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f7fd fb21 	bl	8004b9a <st_word>
					fs->wflag = 1;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2201      	movs	r2, #1
 800755c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4618      	mov	r0, r3
 8007562:	f7fd fdbd 	bl	80050e0 <sync_fs>
 8007566:	4603      	mov	r3, r0
 8007568:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7d1b      	ldrb	r3, [r3, #20]
 800756e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007572:	b2da      	uxtb	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007578:	7dfb      	ldrb	r3, [r7, #23]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff ff7b 	bl	8007486 <f_sync>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d118      	bne.n	80075cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f107 0208 	add.w	r2, r7, #8
 80075a0:	4611      	mov	r1, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff fbc8 	bl	8006d38 <validate>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10c      	bne.n	80075cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fd fcc0 	bl	8004f3c <dec_lock>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b092      	sub	sp, #72	; 0x48
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80075e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80075e6:	f107 030c 	add.w	r3, r7, #12
 80075ea:	2200      	movs	r2, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff f91b 	bl	8006828 <find_volume>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80075f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8099 	bne.w	8007734 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	3b02      	subs	r3, #2
 8007612:	429a      	cmp	r2, r3
 8007614:	d804      	bhi.n	8007620 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	699a      	ldr	r2, [r3, #24]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	e089      	b.n	8007734 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d128      	bne.n	800767e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800762c:	2302      	movs	r3, #2
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007634:	f107 0314 	add.w	r3, r7, #20
 8007638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800763a:	4618      	mov	r0, r3
 800763c:	f7fd fddf 	bl	80051fe <get_fat>
 8007640:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007648:	d103      	bne.n	8007652 <f_getfree+0x7c>
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007650:	e063      	b.n	800771a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	2b01      	cmp	r3, #1
 8007656:	d103      	bne.n	8007660 <f_getfree+0x8a>
 8007658:	2302      	movs	r3, #2
 800765a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800765e:	e05c      	b.n	800771a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <f_getfree+0x96>
 8007666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007668:	3301      	adds	r3, #1
 800766a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800766c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766e:	3301      	adds	r3, #1
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007678:	429a      	cmp	r2, r3
 800767a:	d3db      	bcc.n	8007634 <f_getfree+0x5e>
 800767c:	e04d      	b.n	800771a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
 800768e:	2300      	movs	r3, #0
 8007690:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007694:	2b00      	cmp	r3, #0
 8007696:	d113      	bne.n	80076c0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	63ba      	str	r2, [r7, #56]	; 0x38
 80076a0:	4619      	mov	r1, r3
 80076a2:	f7fd fcef 	bl	8005084 <move_window>
 80076a6:	4603      	mov	r3, r0
 80076a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80076ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d131      	bne.n	8007718 <f_getfree+0x142>
							p = fs->win;
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	3338      	adds	r3, #56	; 0x38
 80076b8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	899b      	ldrh	r3, [r3, #12]
 80076be:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d10f      	bne.n	80076e8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80076c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ca:	f7fd fa2b 	bl	8004b24 <ld_word>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <f_getfree+0x104>
 80076d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d6:	3301      	adds	r3, #1
 80076d8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	3302      	adds	r3, #2
 80076de:	633b      	str	r3, [r7, #48]	; 0x30
 80076e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e2:	3b02      	subs	r3, #2
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
 80076e6:	e010      	b.n	800770a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80076e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ea:	f7fd fa33 	bl	8004b54 <ld_dword>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <f_getfree+0x128>
 80076f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fa:	3301      	adds	r3, #1
 80076fc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	3304      	adds	r3, #4
 8007702:	633b      	str	r3, [r7, #48]	; 0x30
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	3b04      	subs	r3, #4
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800770a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770c:	3b01      	subs	r3, #1
 800770e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1bd      	bne.n	8007692 <f_getfree+0xbc>
 8007716:	e000      	b.n	800771a <f_getfree+0x144>
							if (res != FR_OK) break;
 8007718:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800771e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007724:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	791a      	ldrb	r2, [r3, #4]
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007734:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007738:	4618      	mov	r0, r3
 800773a:	3748      	adds	r7, #72	; 0x48
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007754:	e01b      	b.n	800778e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007756:	f107 0310 	add.w	r3, r7, #16
 800775a:	f107 0114 	add.w	r1, r7, #20
 800775e:	2201      	movs	r2, #1
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff fd31 	bl	80071c8 <f_read>
		if (rc != 1) break;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d116      	bne.n	800779a <f_gets+0x5a>
		c = s[0];
 800776c:	7d3b      	ldrb	r3, [r7, #20]
 800776e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007770:	7dfb      	ldrb	r3, [r7, #23]
 8007772:	2b0d      	cmp	r3, #13
 8007774:	d100      	bne.n	8007778 <f_gets+0x38>
 8007776:	e00a      	b.n	800778e <f_gets+0x4e>
		*p++ = c;
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	61ba      	str	r2, [r7, #24]
 800777e:	7dfa      	ldrb	r2, [r7, #23]
 8007780:	701a      	strb	r2, [r3, #0]
		n++;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	3301      	adds	r3, #1
 8007786:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b0a      	cmp	r3, #10
 800778c:	d007      	beq.n	800779e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	3b01      	subs	r3, #1
 8007792:	69fa      	ldr	r2, [r7, #28]
 8007794:	429a      	cmp	r2, r3
 8007796:	dbde      	blt.n	8007756 <f_gets+0x16>
 8007798:	e002      	b.n	80077a0 <f_gets+0x60>
		if (rc != 1) break;
 800779a:	bf00      	nop
 800779c:	e000      	b.n	80077a0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800779e:	bf00      	nop
	}
	*p = 0;
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2200      	movs	r2, #0
 80077a4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <f_gets+0x70>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	e000      	b.n	80077b2 <f_gets+0x72>
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80077d2:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <FATFS_LinkDriverEx+0x94>)
 80077d4:	7a5b      	ldrb	r3, [r3, #9]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d131      	bne.n	8007840 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077dc:	4b1c      	ldr	r3, [pc, #112]	; (8007850 <FATFS_LinkDriverEx+0x94>)
 80077de:	7a5b      	ldrb	r3, [r3, #9]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <FATFS_LinkDriverEx+0x94>)
 80077e6:	2100      	movs	r1, #0
 80077e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80077ea:	4b19      	ldr	r3, [pc, #100]	; (8007850 <FATFS_LinkDriverEx+0x94>)
 80077ec:	7a5b      	ldrb	r3, [r3, #9]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	4a17      	ldr	r2, [pc, #92]	; (8007850 <FATFS_LinkDriverEx+0x94>)
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80077fa:	4b15      	ldr	r3, [pc, #84]	; (8007850 <FATFS_LinkDriverEx+0x94>)
 80077fc:	7a5b      	ldrb	r3, [r3, #9]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	4b13      	ldr	r3, [pc, #76]	; (8007850 <FATFS_LinkDriverEx+0x94>)
 8007804:	4413      	add	r3, r2
 8007806:	79fa      	ldrb	r2, [r7, #7]
 8007808:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800780a:	4b11      	ldr	r3, [pc, #68]	; (8007850 <FATFS_LinkDriverEx+0x94>)
 800780c:	7a5b      	ldrb	r3, [r3, #9]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	b2d1      	uxtb	r1, r2
 8007814:	4a0e      	ldr	r2, [pc, #56]	; (8007850 <FATFS_LinkDriverEx+0x94>)
 8007816:	7251      	strb	r1, [r2, #9]
 8007818:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800781a:	7dbb      	ldrb	r3, [r7, #22]
 800781c:	3330      	adds	r3, #48	; 0x30
 800781e:	b2da      	uxtb	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	3301      	adds	r3, #1
 8007828:	223a      	movs	r2, #58	; 0x3a
 800782a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	3302      	adds	r3, #2
 8007830:	222f      	movs	r2, #47	; 0x2f
 8007832:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	3303      	adds	r3, #3
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007840:	7dfb      	ldrb	r3, [r7, #23]
}
 8007842:	4618      	mov	r0, r3
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	200007d4 	.word	0x200007d4

08007854 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800785e:	2200      	movs	r2, #0
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff ffaa 	bl	80077bc <FATFS_LinkDriverEx>
 8007868:	4603      	mov	r3, r0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	2b7f      	cmp	r3, #127	; 0x7f
 8007884:	d802      	bhi.n	800788c <ff_convert+0x18>
		c = chr;
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	81fb      	strh	r3, [r7, #14]
 800788a:	e025      	b.n	80078d8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	2bff      	cmp	r3, #255	; 0xff
 8007896:	d805      	bhi.n	80078a4 <ff_convert+0x30>
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	3b80      	subs	r3, #128	; 0x80
 800789c:	4a12      	ldr	r2, [pc, #72]	; (80078e8 <ff_convert+0x74>)
 800789e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a2:	e000      	b.n	80078a6 <ff_convert+0x32>
 80078a4:	2300      	movs	r3, #0
 80078a6:	81fb      	strh	r3, [r7, #14]
 80078a8:	e016      	b.n	80078d8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80078aa:	2300      	movs	r3, #0
 80078ac:	81fb      	strh	r3, [r7, #14]
 80078ae:	e009      	b.n	80078c4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80078b0:	89fb      	ldrh	r3, [r7, #14]
 80078b2:	4a0d      	ldr	r2, [pc, #52]	; (80078e8 <ff_convert+0x74>)
 80078b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078b8:	88fa      	ldrh	r2, [r7, #6]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d006      	beq.n	80078cc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80078be:	89fb      	ldrh	r3, [r7, #14]
 80078c0:	3301      	adds	r3, #1
 80078c2:	81fb      	strh	r3, [r7, #14]
 80078c4:	89fb      	ldrh	r3, [r7, #14]
 80078c6:	2b7f      	cmp	r3, #127	; 0x7f
 80078c8:	d9f2      	bls.n	80078b0 <ff_convert+0x3c>
 80078ca:	e000      	b.n	80078ce <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80078cc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80078ce:	89fb      	ldrh	r3, [r7, #14]
 80078d0:	3380      	adds	r3, #128	; 0x80
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80078d8:	89fb      	ldrh	r3, [r7, #14]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	0800908c 	.word	0x0800908c

080078ec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fc:	d201      	bcs.n	8007902 <ff_wtoupper+0x16>
 80078fe:	4b3e      	ldr	r3, [pc, #248]	; (80079f8 <ff_wtoupper+0x10c>)
 8007900:	e000      	b.n	8007904 <ff_wtoupper+0x18>
 8007902:	4b3e      	ldr	r3, [pc, #248]	; (80079fc <ff_wtoupper+0x110>)
 8007904:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	1c9a      	adds	r2, r3, #2
 800790a:	617a      	str	r2, [r7, #20]
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007910:	8a7b      	ldrh	r3, [r7, #18]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d068      	beq.n	80079e8 <ff_wtoupper+0xfc>
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	8a7b      	ldrh	r3, [r7, #18]
 800791a:	429a      	cmp	r2, r3
 800791c:	d364      	bcc.n	80079e8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	1c9a      	adds	r2, r3, #2
 8007922:	617a      	str	r2, [r7, #20]
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	823b      	strh	r3, [r7, #16]
 8007928:	8a3b      	ldrh	r3, [r7, #16]
 800792a:	0a1b      	lsrs	r3, r3, #8
 800792c:	81fb      	strh	r3, [r7, #14]
 800792e:	8a3b      	ldrh	r3, [r7, #16]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	8a79      	ldrh	r1, [r7, #18]
 8007938:	8a3b      	ldrh	r3, [r7, #16]
 800793a:	440b      	add	r3, r1
 800793c:	429a      	cmp	r2, r3
 800793e:	da49      	bge.n	80079d4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007940:	89fb      	ldrh	r3, [r7, #14]
 8007942:	2b08      	cmp	r3, #8
 8007944:	d84f      	bhi.n	80079e6 <ff_wtoupper+0xfa>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <ff_wtoupper+0x60>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	08007971 	.word	0x08007971
 8007950:	08007983 	.word	0x08007983
 8007954:	08007999 	.word	0x08007999
 8007958:	080079a1 	.word	0x080079a1
 800795c:	080079a9 	.word	0x080079a9
 8007960:	080079b1 	.word	0x080079b1
 8007964:	080079b9 	.word	0x080079b9
 8007968:	080079c1 	.word	0x080079c1
 800796c:	080079c9 	.word	0x080079c9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007970:	88fa      	ldrh	r2, [r7, #6]
 8007972:	8a7b      	ldrh	r3, [r7, #18]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	005b      	lsls	r3, r3, #1
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	4413      	add	r3, r2
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	80fb      	strh	r3, [r7, #6]
 8007980:	e027      	b.n	80079d2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	8a7b      	ldrh	r3, [r7, #18]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	b29b      	uxth	r3, r3
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	b29b      	uxth	r3, r3
 8007990:	88fa      	ldrh	r2, [r7, #6]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	80fb      	strh	r3, [r7, #6]
 8007996:	e01c      	b.n	80079d2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007998:	88fb      	ldrh	r3, [r7, #6]
 800799a:	3b10      	subs	r3, #16
 800799c:	80fb      	strh	r3, [r7, #6]
 800799e:	e018      	b.n	80079d2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80079a0:	88fb      	ldrh	r3, [r7, #6]
 80079a2:	3b20      	subs	r3, #32
 80079a4:	80fb      	strh	r3, [r7, #6]
 80079a6:	e014      	b.n	80079d2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	3b30      	subs	r3, #48	; 0x30
 80079ac:	80fb      	strh	r3, [r7, #6]
 80079ae:	e010      	b.n	80079d2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80079b0:	88fb      	ldrh	r3, [r7, #6]
 80079b2:	3b1a      	subs	r3, #26
 80079b4:	80fb      	strh	r3, [r7, #6]
 80079b6:	e00c      	b.n	80079d2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80079b8:	88fb      	ldrh	r3, [r7, #6]
 80079ba:	3308      	adds	r3, #8
 80079bc:	80fb      	strh	r3, [r7, #6]
 80079be:	e008      	b.n	80079d2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	3b50      	subs	r3, #80	; 0x50
 80079c4:	80fb      	strh	r3, [r7, #6]
 80079c6:	e004      	b.n	80079d2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80079c8:	88fb      	ldrh	r3, [r7, #6]
 80079ca:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80079ce:	80fb      	strh	r3, [r7, #6]
 80079d0:	bf00      	nop
			}
			break;
 80079d2:	e008      	b.n	80079e6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80079d4:	89fb      	ldrh	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d195      	bne.n	8007906 <ff_wtoupper+0x1a>
 80079da:	8a3b      	ldrh	r3, [r7, #16]
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4413      	add	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80079e4:	e78f      	b.n	8007906 <ff_wtoupper+0x1a>
			break;
 80079e6:	bf00      	nop
	}

	return chr;
 80079e8:	88fb      	ldrh	r3, [r7, #6]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	0800918c 	.word	0x0800918c
 80079fc:	08009380 	.word	0x08009380

08007a00 <__libc_init_array>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	4d0d      	ldr	r5, [pc, #52]	; (8007a38 <__libc_init_array+0x38>)
 8007a04:	4c0d      	ldr	r4, [pc, #52]	; (8007a3c <__libc_init_array+0x3c>)
 8007a06:	1b64      	subs	r4, r4, r5
 8007a08:	10a4      	asrs	r4, r4, #2
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	42a6      	cmp	r6, r4
 8007a0e:	d109      	bne.n	8007a24 <__libc_init_array+0x24>
 8007a10:	4d0b      	ldr	r5, [pc, #44]	; (8007a40 <__libc_init_array+0x40>)
 8007a12:	4c0c      	ldr	r4, [pc, #48]	; (8007a44 <__libc_init_array+0x44>)
 8007a14:	f001 f9fc 	bl	8008e10 <_init>
 8007a18:	1b64      	subs	r4, r4, r5
 8007a1a:	10a4      	asrs	r4, r4, #2
 8007a1c:	2600      	movs	r6, #0
 8007a1e:	42a6      	cmp	r6, r4
 8007a20:	d105      	bne.n	8007a2e <__libc_init_array+0x2e>
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a28:	4798      	blx	r3
 8007a2a:	3601      	adds	r6, #1
 8007a2c:	e7ee      	b.n	8007a0c <__libc_init_array+0xc>
 8007a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a32:	4798      	blx	r3
 8007a34:	3601      	adds	r6, #1
 8007a36:	e7f2      	b.n	8007a1e <__libc_init_array+0x1e>
 8007a38:	080094d4 	.word	0x080094d4
 8007a3c:	080094d4 	.word	0x080094d4
 8007a40:	080094d4 	.word	0x080094d4
 8007a44:	080094d8 	.word	0x080094d8

08007a48 <memset>:
 8007a48:	4402      	add	r2, r0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <iprintf>:
 8007a58:	b40f      	push	{r0, r1, r2, r3}
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <iprintf+0x2c>)
 8007a5c:	b513      	push	{r0, r1, r4, lr}
 8007a5e:	681c      	ldr	r4, [r3, #0]
 8007a60:	b124      	cbz	r4, 8007a6c <iprintf+0x14>
 8007a62:	69a3      	ldr	r3, [r4, #24]
 8007a64:	b913      	cbnz	r3, 8007a6c <iprintf+0x14>
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 fa7e 	bl	8007f68 <__sinit>
 8007a6c:	ab05      	add	r3, sp, #20
 8007a6e:	9a04      	ldr	r2, [sp, #16]
 8007a70:	68a1      	ldr	r1, [r4, #8]
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 fdab 	bl	80085d0 <_vfiprintf_r>
 8007a7a:	b002      	add	sp, #8
 8007a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a80:	b004      	add	sp, #16
 8007a82:	4770      	bx	lr
 8007a84:	20000028 	.word	0x20000028

08007a88 <_puts_r>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	460e      	mov	r6, r1
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	b118      	cbz	r0, 8007a98 <_puts_r+0x10>
 8007a90:	6983      	ldr	r3, [r0, #24]
 8007a92:	b90b      	cbnz	r3, 8007a98 <_puts_r+0x10>
 8007a94:	f000 fa68 	bl	8007f68 <__sinit>
 8007a98:	69ab      	ldr	r3, [r5, #24]
 8007a9a:	68ac      	ldr	r4, [r5, #8]
 8007a9c:	b913      	cbnz	r3, 8007aa4 <_puts_r+0x1c>
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fa62 	bl	8007f68 <__sinit>
 8007aa4:	4b2c      	ldr	r3, [pc, #176]	; (8007b58 <_puts_r+0xd0>)
 8007aa6:	429c      	cmp	r4, r3
 8007aa8:	d120      	bne.n	8007aec <_puts_r+0x64>
 8007aaa:	686c      	ldr	r4, [r5, #4]
 8007aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aae:	07db      	lsls	r3, r3, #31
 8007ab0:	d405      	bmi.n	8007abe <_puts_r+0x36>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	0598      	lsls	r0, r3, #22
 8007ab6:	d402      	bmi.n	8007abe <_puts_r+0x36>
 8007ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aba:	f000 faf3 	bl	80080a4 <__retarget_lock_acquire_recursive>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	0719      	lsls	r1, r3, #28
 8007ac2:	d51d      	bpl.n	8007b00 <_puts_r+0x78>
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	b1db      	cbz	r3, 8007b00 <_puts_r+0x78>
 8007ac8:	3e01      	subs	r6, #1
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	60a3      	str	r3, [r4, #8]
 8007ad4:	bb39      	cbnz	r1, 8007b26 <_puts_r+0x9e>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da38      	bge.n	8007b4c <_puts_r+0xc4>
 8007ada:	4622      	mov	r2, r4
 8007adc:	210a      	movs	r1, #10
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f000 f868 	bl	8007bb4 <__swbuf_r>
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d011      	beq.n	8007b0c <_puts_r+0x84>
 8007ae8:	250a      	movs	r5, #10
 8007aea:	e011      	b.n	8007b10 <_puts_r+0x88>
 8007aec:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <_puts_r+0xd4>)
 8007aee:	429c      	cmp	r4, r3
 8007af0:	d101      	bne.n	8007af6 <_puts_r+0x6e>
 8007af2:	68ac      	ldr	r4, [r5, #8]
 8007af4:	e7da      	b.n	8007aac <_puts_r+0x24>
 8007af6:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <_puts_r+0xd8>)
 8007af8:	429c      	cmp	r4, r3
 8007afa:	bf08      	it	eq
 8007afc:	68ec      	ldreq	r4, [r5, #12]
 8007afe:	e7d5      	b.n	8007aac <_puts_r+0x24>
 8007b00:	4621      	mov	r1, r4
 8007b02:	4628      	mov	r0, r5
 8007b04:	f000 f8a8 	bl	8007c58 <__swsetup_r>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d0dd      	beq.n	8007ac8 <_puts_r+0x40>
 8007b0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b12:	07da      	lsls	r2, r3, #31
 8007b14:	d405      	bmi.n	8007b22 <_puts_r+0x9a>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	059b      	lsls	r3, r3, #22
 8007b1a:	d402      	bmi.n	8007b22 <_puts_r+0x9a>
 8007b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1e:	f000 fac2 	bl	80080a6 <__retarget_lock_release_recursive>
 8007b22:	4628      	mov	r0, r5
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da04      	bge.n	8007b34 <_puts_r+0xac>
 8007b2a:	69a2      	ldr	r2, [r4, #24]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	dc06      	bgt.n	8007b3e <_puts_r+0xb6>
 8007b30:	290a      	cmp	r1, #10
 8007b32:	d004      	beq.n	8007b3e <_puts_r+0xb6>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	6022      	str	r2, [r4, #0]
 8007b3a:	7019      	strb	r1, [r3, #0]
 8007b3c:	e7c5      	b.n	8007aca <_puts_r+0x42>
 8007b3e:	4622      	mov	r2, r4
 8007b40:	4628      	mov	r0, r5
 8007b42:	f000 f837 	bl	8007bb4 <__swbuf_r>
 8007b46:	3001      	adds	r0, #1
 8007b48:	d1bf      	bne.n	8007aca <_puts_r+0x42>
 8007b4a:	e7df      	b.n	8007b0c <_puts_r+0x84>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	250a      	movs	r5, #10
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	6022      	str	r2, [r4, #0]
 8007b54:	701d      	strb	r5, [r3, #0]
 8007b56:	e7db      	b.n	8007b10 <_puts_r+0x88>
 8007b58:	08009460 	.word	0x08009460
 8007b5c:	08009480 	.word	0x08009480
 8007b60:	08009440 	.word	0x08009440

08007b64 <puts>:
 8007b64:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <puts+0xc>)
 8007b66:	4601      	mov	r1, r0
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	f7ff bf8d 	b.w	8007a88 <_puts_r>
 8007b6e:	bf00      	nop
 8007b70:	20000028 	.word	0x20000028

08007b74 <siprintf>:
 8007b74:	b40e      	push	{r1, r2, r3}
 8007b76:	b500      	push	{lr}
 8007b78:	b09c      	sub	sp, #112	; 0x70
 8007b7a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b7c:	9002      	str	r0, [sp, #8]
 8007b7e:	9006      	str	r0, [sp, #24]
 8007b80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b84:	4809      	ldr	r0, [pc, #36]	; (8007bac <siprintf+0x38>)
 8007b86:	9107      	str	r1, [sp, #28]
 8007b88:	9104      	str	r1, [sp, #16]
 8007b8a:	4909      	ldr	r1, [pc, #36]	; (8007bb0 <siprintf+0x3c>)
 8007b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b90:	9105      	str	r1, [sp, #20]
 8007b92:	6800      	ldr	r0, [r0, #0]
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	a902      	add	r1, sp, #8
 8007b98:	f000 fbf0 	bl	800837c <_svfiprintf_r>
 8007b9c:	9b02      	ldr	r3, [sp, #8]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	701a      	strb	r2, [r3, #0]
 8007ba2:	b01c      	add	sp, #112	; 0x70
 8007ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ba8:	b003      	add	sp, #12
 8007baa:	4770      	bx	lr
 8007bac:	20000028 	.word	0x20000028
 8007bb0:	ffff0208 	.word	0xffff0208

08007bb4 <__swbuf_r>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	460e      	mov	r6, r1
 8007bb8:	4614      	mov	r4, r2
 8007bba:	4605      	mov	r5, r0
 8007bbc:	b118      	cbz	r0, 8007bc6 <__swbuf_r+0x12>
 8007bbe:	6983      	ldr	r3, [r0, #24]
 8007bc0:	b90b      	cbnz	r3, 8007bc6 <__swbuf_r+0x12>
 8007bc2:	f000 f9d1 	bl	8007f68 <__sinit>
 8007bc6:	4b21      	ldr	r3, [pc, #132]	; (8007c4c <__swbuf_r+0x98>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	d12b      	bne.n	8007c24 <__swbuf_r+0x70>
 8007bcc:	686c      	ldr	r4, [r5, #4]
 8007bce:	69a3      	ldr	r3, [r4, #24]
 8007bd0:	60a3      	str	r3, [r4, #8]
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	071a      	lsls	r2, r3, #28
 8007bd6:	d52f      	bpl.n	8007c38 <__swbuf_r+0x84>
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	b36b      	cbz	r3, 8007c38 <__swbuf_r+0x84>
 8007bdc:	6923      	ldr	r3, [r4, #16]
 8007bde:	6820      	ldr	r0, [r4, #0]
 8007be0:	1ac0      	subs	r0, r0, r3
 8007be2:	6963      	ldr	r3, [r4, #20]
 8007be4:	b2f6      	uxtb	r6, r6
 8007be6:	4283      	cmp	r3, r0
 8007be8:	4637      	mov	r7, r6
 8007bea:	dc04      	bgt.n	8007bf6 <__swbuf_r+0x42>
 8007bec:	4621      	mov	r1, r4
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 f926 	bl	8007e40 <_fflush_r>
 8007bf4:	bb30      	cbnz	r0, 8007c44 <__swbuf_r+0x90>
 8007bf6:	68a3      	ldr	r3, [r4, #8]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	60a3      	str	r3, [r4, #8]
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	701e      	strb	r6, [r3, #0]
 8007c04:	6963      	ldr	r3, [r4, #20]
 8007c06:	3001      	adds	r0, #1
 8007c08:	4283      	cmp	r3, r0
 8007c0a:	d004      	beq.n	8007c16 <__swbuf_r+0x62>
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	07db      	lsls	r3, r3, #31
 8007c10:	d506      	bpl.n	8007c20 <__swbuf_r+0x6c>
 8007c12:	2e0a      	cmp	r6, #10
 8007c14:	d104      	bne.n	8007c20 <__swbuf_r+0x6c>
 8007c16:	4621      	mov	r1, r4
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f000 f911 	bl	8007e40 <_fflush_r>
 8007c1e:	b988      	cbnz	r0, 8007c44 <__swbuf_r+0x90>
 8007c20:	4638      	mov	r0, r7
 8007c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c24:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <__swbuf_r+0x9c>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d101      	bne.n	8007c2e <__swbuf_r+0x7a>
 8007c2a:	68ac      	ldr	r4, [r5, #8]
 8007c2c:	e7cf      	b.n	8007bce <__swbuf_r+0x1a>
 8007c2e:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <__swbuf_r+0xa0>)
 8007c30:	429c      	cmp	r4, r3
 8007c32:	bf08      	it	eq
 8007c34:	68ec      	ldreq	r4, [r5, #12]
 8007c36:	e7ca      	b.n	8007bce <__swbuf_r+0x1a>
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f80c 	bl	8007c58 <__swsetup_r>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d0cb      	beq.n	8007bdc <__swbuf_r+0x28>
 8007c44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c48:	e7ea      	b.n	8007c20 <__swbuf_r+0x6c>
 8007c4a:	bf00      	nop
 8007c4c:	08009460 	.word	0x08009460
 8007c50:	08009480 	.word	0x08009480
 8007c54:	08009440 	.word	0x08009440

08007c58 <__swsetup_r>:
 8007c58:	4b32      	ldr	r3, [pc, #200]	; (8007d24 <__swsetup_r+0xcc>)
 8007c5a:	b570      	push	{r4, r5, r6, lr}
 8007c5c:	681d      	ldr	r5, [r3, #0]
 8007c5e:	4606      	mov	r6, r0
 8007c60:	460c      	mov	r4, r1
 8007c62:	b125      	cbz	r5, 8007c6e <__swsetup_r+0x16>
 8007c64:	69ab      	ldr	r3, [r5, #24]
 8007c66:	b913      	cbnz	r3, 8007c6e <__swsetup_r+0x16>
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 f97d 	bl	8007f68 <__sinit>
 8007c6e:	4b2e      	ldr	r3, [pc, #184]	; (8007d28 <__swsetup_r+0xd0>)
 8007c70:	429c      	cmp	r4, r3
 8007c72:	d10f      	bne.n	8007c94 <__swsetup_r+0x3c>
 8007c74:	686c      	ldr	r4, [r5, #4]
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c7c:	0719      	lsls	r1, r3, #28
 8007c7e:	d42c      	bmi.n	8007cda <__swsetup_r+0x82>
 8007c80:	06dd      	lsls	r5, r3, #27
 8007c82:	d411      	bmi.n	8007ca8 <__swsetup_r+0x50>
 8007c84:	2309      	movs	r3, #9
 8007c86:	6033      	str	r3, [r6, #0]
 8007c88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c92:	e03e      	b.n	8007d12 <__swsetup_r+0xba>
 8007c94:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <__swsetup_r+0xd4>)
 8007c96:	429c      	cmp	r4, r3
 8007c98:	d101      	bne.n	8007c9e <__swsetup_r+0x46>
 8007c9a:	68ac      	ldr	r4, [r5, #8]
 8007c9c:	e7eb      	b.n	8007c76 <__swsetup_r+0x1e>
 8007c9e:	4b24      	ldr	r3, [pc, #144]	; (8007d30 <__swsetup_r+0xd8>)
 8007ca0:	429c      	cmp	r4, r3
 8007ca2:	bf08      	it	eq
 8007ca4:	68ec      	ldreq	r4, [r5, #12]
 8007ca6:	e7e6      	b.n	8007c76 <__swsetup_r+0x1e>
 8007ca8:	0758      	lsls	r0, r3, #29
 8007caa:	d512      	bpl.n	8007cd2 <__swsetup_r+0x7a>
 8007cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cae:	b141      	cbz	r1, 8007cc2 <__swsetup_r+0x6a>
 8007cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	d002      	beq.n	8007cbe <__swsetup_r+0x66>
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f000 fa59 	bl	8008170 <_free_r>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6363      	str	r3, [r4, #52]	; 0x34
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cc8:	81a3      	strh	r3, [r4, #12]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	6063      	str	r3, [r4, #4]
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f043 0308 	orr.w	r3, r3, #8
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	b94b      	cbnz	r3, 8007cf2 <__swsetup_r+0x9a>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce8:	d003      	beq.n	8007cf2 <__swsetup_r+0x9a>
 8007cea:	4621      	mov	r1, r4
 8007cec:	4630      	mov	r0, r6
 8007cee:	f000 f9ff 	bl	80080f0 <__smakebuf_r>
 8007cf2:	89a0      	ldrh	r0, [r4, #12]
 8007cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cf8:	f010 0301 	ands.w	r3, r0, #1
 8007cfc:	d00a      	beq.n	8007d14 <__swsetup_r+0xbc>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60a3      	str	r3, [r4, #8]
 8007d02:	6963      	ldr	r3, [r4, #20]
 8007d04:	425b      	negs	r3, r3
 8007d06:	61a3      	str	r3, [r4, #24]
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	b943      	cbnz	r3, 8007d1e <__swsetup_r+0xc6>
 8007d0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d10:	d1ba      	bne.n	8007c88 <__swsetup_r+0x30>
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	0781      	lsls	r1, r0, #30
 8007d16:	bf58      	it	pl
 8007d18:	6963      	ldrpl	r3, [r4, #20]
 8007d1a:	60a3      	str	r3, [r4, #8]
 8007d1c:	e7f4      	b.n	8007d08 <__swsetup_r+0xb0>
 8007d1e:	2000      	movs	r0, #0
 8007d20:	e7f7      	b.n	8007d12 <__swsetup_r+0xba>
 8007d22:	bf00      	nop
 8007d24:	20000028 	.word	0x20000028
 8007d28:	08009460 	.word	0x08009460
 8007d2c:	08009480 	.word	0x08009480
 8007d30:	08009440 	.word	0x08009440

08007d34 <__sflush_r>:
 8007d34:	898a      	ldrh	r2, [r1, #12]
 8007d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	0710      	lsls	r0, r2, #28
 8007d3e:	460c      	mov	r4, r1
 8007d40:	d458      	bmi.n	8007df4 <__sflush_r+0xc0>
 8007d42:	684b      	ldr	r3, [r1, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc05      	bgt.n	8007d54 <__sflush_r+0x20>
 8007d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dc02      	bgt.n	8007d54 <__sflush_r+0x20>
 8007d4e:	2000      	movs	r0, #0
 8007d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d56:	2e00      	cmp	r6, #0
 8007d58:	d0f9      	beq.n	8007d4e <__sflush_r+0x1a>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d60:	682f      	ldr	r7, [r5, #0]
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	d032      	beq.n	8007dcc <__sflush_r+0x98>
 8007d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	075a      	lsls	r2, r3, #29
 8007d6c:	d505      	bpl.n	8007d7a <__sflush_r+0x46>
 8007d6e:	6863      	ldr	r3, [r4, #4]
 8007d70:	1ac0      	subs	r0, r0, r3
 8007d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d74:	b10b      	cbz	r3, 8007d7a <__sflush_r+0x46>
 8007d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d78:	1ac0      	subs	r0, r0, r3
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d80:	6a21      	ldr	r1, [r4, #32]
 8007d82:	4628      	mov	r0, r5
 8007d84:	47b0      	blx	r6
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	d106      	bne.n	8007d9a <__sflush_r+0x66>
 8007d8c:	6829      	ldr	r1, [r5, #0]
 8007d8e:	291d      	cmp	r1, #29
 8007d90:	d82c      	bhi.n	8007dec <__sflush_r+0xb8>
 8007d92:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <__sflush_r+0x108>)
 8007d94:	40ca      	lsrs	r2, r1
 8007d96:	07d6      	lsls	r6, r2, #31
 8007d98:	d528      	bpl.n	8007dec <__sflush_r+0xb8>
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	6062      	str	r2, [r4, #4]
 8007d9e:	04d9      	lsls	r1, r3, #19
 8007da0:	6922      	ldr	r2, [r4, #16]
 8007da2:	6022      	str	r2, [r4, #0]
 8007da4:	d504      	bpl.n	8007db0 <__sflush_r+0x7c>
 8007da6:	1c42      	adds	r2, r0, #1
 8007da8:	d101      	bne.n	8007dae <__sflush_r+0x7a>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	b903      	cbnz	r3, 8007db0 <__sflush_r+0x7c>
 8007dae:	6560      	str	r0, [r4, #84]	; 0x54
 8007db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007db2:	602f      	str	r7, [r5, #0]
 8007db4:	2900      	cmp	r1, #0
 8007db6:	d0ca      	beq.n	8007d4e <__sflush_r+0x1a>
 8007db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dbc:	4299      	cmp	r1, r3
 8007dbe:	d002      	beq.n	8007dc6 <__sflush_r+0x92>
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 f9d5 	bl	8008170 <_free_r>
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8007dca:	e7c1      	b.n	8007d50 <__sflush_r+0x1c>
 8007dcc:	6a21      	ldr	r1, [r4, #32]
 8007dce:	2301      	movs	r3, #1
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	47b0      	blx	r6
 8007dd4:	1c41      	adds	r1, r0, #1
 8007dd6:	d1c7      	bne.n	8007d68 <__sflush_r+0x34>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0c4      	beq.n	8007d68 <__sflush_r+0x34>
 8007dde:	2b1d      	cmp	r3, #29
 8007de0:	d001      	beq.n	8007de6 <__sflush_r+0xb2>
 8007de2:	2b16      	cmp	r3, #22
 8007de4:	d101      	bne.n	8007dea <__sflush_r+0xb6>
 8007de6:	602f      	str	r7, [r5, #0]
 8007de8:	e7b1      	b.n	8007d4e <__sflush_r+0x1a>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	e7ad      	b.n	8007d50 <__sflush_r+0x1c>
 8007df4:	690f      	ldr	r7, [r1, #16]
 8007df6:	2f00      	cmp	r7, #0
 8007df8:	d0a9      	beq.n	8007d4e <__sflush_r+0x1a>
 8007dfa:	0793      	lsls	r3, r2, #30
 8007dfc:	680e      	ldr	r6, [r1, #0]
 8007dfe:	bf08      	it	eq
 8007e00:	694b      	ldreq	r3, [r1, #20]
 8007e02:	600f      	str	r7, [r1, #0]
 8007e04:	bf18      	it	ne
 8007e06:	2300      	movne	r3, #0
 8007e08:	eba6 0807 	sub.w	r8, r6, r7
 8007e0c:	608b      	str	r3, [r1, #8]
 8007e0e:	f1b8 0f00 	cmp.w	r8, #0
 8007e12:	dd9c      	ble.n	8007d4e <__sflush_r+0x1a>
 8007e14:	6a21      	ldr	r1, [r4, #32]
 8007e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e18:	4643      	mov	r3, r8
 8007e1a:	463a      	mov	r2, r7
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b0      	blx	r6
 8007e20:	2800      	cmp	r0, #0
 8007e22:	dc06      	bgt.n	8007e32 <__sflush_r+0xfe>
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e30:	e78e      	b.n	8007d50 <__sflush_r+0x1c>
 8007e32:	4407      	add	r7, r0
 8007e34:	eba8 0800 	sub.w	r8, r8, r0
 8007e38:	e7e9      	b.n	8007e0e <__sflush_r+0xda>
 8007e3a:	bf00      	nop
 8007e3c:	20400001 	.word	0x20400001

08007e40 <_fflush_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	690b      	ldr	r3, [r1, #16]
 8007e44:	4605      	mov	r5, r0
 8007e46:	460c      	mov	r4, r1
 8007e48:	b913      	cbnz	r3, 8007e50 <_fflush_r+0x10>
 8007e4a:	2500      	movs	r5, #0
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	b118      	cbz	r0, 8007e5a <_fflush_r+0x1a>
 8007e52:	6983      	ldr	r3, [r0, #24]
 8007e54:	b90b      	cbnz	r3, 8007e5a <_fflush_r+0x1a>
 8007e56:	f000 f887 	bl	8007f68 <__sinit>
 8007e5a:	4b14      	ldr	r3, [pc, #80]	; (8007eac <_fflush_r+0x6c>)
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	d11b      	bne.n	8007e98 <_fflush_r+0x58>
 8007e60:	686c      	ldr	r4, [r5, #4]
 8007e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0ef      	beq.n	8007e4a <_fflush_r+0xa>
 8007e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e6c:	07d0      	lsls	r0, r2, #31
 8007e6e:	d404      	bmi.n	8007e7a <_fflush_r+0x3a>
 8007e70:	0599      	lsls	r1, r3, #22
 8007e72:	d402      	bmi.n	8007e7a <_fflush_r+0x3a>
 8007e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e76:	f000 f915 	bl	80080a4 <__retarget_lock_acquire_recursive>
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	f7ff ff59 	bl	8007d34 <__sflush_r>
 8007e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e84:	07da      	lsls	r2, r3, #31
 8007e86:	4605      	mov	r5, r0
 8007e88:	d4e0      	bmi.n	8007e4c <_fflush_r+0xc>
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	059b      	lsls	r3, r3, #22
 8007e8e:	d4dd      	bmi.n	8007e4c <_fflush_r+0xc>
 8007e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e92:	f000 f908 	bl	80080a6 <__retarget_lock_release_recursive>
 8007e96:	e7d9      	b.n	8007e4c <_fflush_r+0xc>
 8007e98:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <_fflush_r+0x70>)
 8007e9a:	429c      	cmp	r4, r3
 8007e9c:	d101      	bne.n	8007ea2 <_fflush_r+0x62>
 8007e9e:	68ac      	ldr	r4, [r5, #8]
 8007ea0:	e7df      	b.n	8007e62 <_fflush_r+0x22>
 8007ea2:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <_fflush_r+0x74>)
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	bf08      	it	eq
 8007ea8:	68ec      	ldreq	r4, [r5, #12]
 8007eaa:	e7da      	b.n	8007e62 <_fflush_r+0x22>
 8007eac:	08009460 	.word	0x08009460
 8007eb0:	08009480 	.word	0x08009480
 8007eb4:	08009440 	.word	0x08009440

08007eb8 <std>:
 8007eb8:	2300      	movs	r3, #0
 8007eba:	b510      	push	{r4, lr}
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8007ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ec6:	6083      	str	r3, [r0, #8]
 8007ec8:	8181      	strh	r1, [r0, #12]
 8007eca:	6643      	str	r3, [r0, #100]	; 0x64
 8007ecc:	81c2      	strh	r2, [r0, #14]
 8007ece:	6183      	str	r3, [r0, #24]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	2208      	movs	r2, #8
 8007ed4:	305c      	adds	r0, #92	; 0x5c
 8007ed6:	f7ff fdb7 	bl	8007a48 <memset>
 8007eda:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <std+0x38>)
 8007edc:	6263      	str	r3, [r4, #36]	; 0x24
 8007ede:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <std+0x3c>)
 8007ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <std+0x40>)
 8007ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <std+0x44>)
 8007ee8:	6224      	str	r4, [r4, #32]
 8007eea:	6323      	str	r3, [r4, #48]	; 0x30
 8007eec:	bd10      	pop	{r4, pc}
 8007eee:	bf00      	nop
 8007ef0:	08008b79 	.word	0x08008b79
 8007ef4:	08008b9b 	.word	0x08008b9b
 8007ef8:	08008bd3 	.word	0x08008bd3
 8007efc:	08008bf7 	.word	0x08008bf7

08007f00 <_cleanup_r>:
 8007f00:	4901      	ldr	r1, [pc, #4]	; (8007f08 <_cleanup_r+0x8>)
 8007f02:	f000 b8af 	b.w	8008064 <_fwalk_reent>
 8007f06:	bf00      	nop
 8007f08:	08007e41 	.word	0x08007e41

08007f0c <__sfmoreglue>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	1e4a      	subs	r2, r1, #1
 8007f10:	2568      	movs	r5, #104	; 0x68
 8007f12:	4355      	muls	r5, r2
 8007f14:	460e      	mov	r6, r1
 8007f16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f1a:	f000 f979 	bl	8008210 <_malloc_r>
 8007f1e:	4604      	mov	r4, r0
 8007f20:	b140      	cbz	r0, 8007f34 <__sfmoreglue+0x28>
 8007f22:	2100      	movs	r1, #0
 8007f24:	e9c0 1600 	strd	r1, r6, [r0]
 8007f28:	300c      	adds	r0, #12
 8007f2a:	60a0      	str	r0, [r4, #8]
 8007f2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f30:	f7ff fd8a 	bl	8007a48 <memset>
 8007f34:	4620      	mov	r0, r4
 8007f36:	bd70      	pop	{r4, r5, r6, pc}

08007f38 <__sfp_lock_acquire>:
 8007f38:	4801      	ldr	r0, [pc, #4]	; (8007f40 <__sfp_lock_acquire+0x8>)
 8007f3a:	f000 b8b3 	b.w	80080a4 <__retarget_lock_acquire_recursive>
 8007f3e:	bf00      	nop
 8007f40:	20004964 	.word	0x20004964

08007f44 <__sfp_lock_release>:
 8007f44:	4801      	ldr	r0, [pc, #4]	; (8007f4c <__sfp_lock_release+0x8>)
 8007f46:	f000 b8ae 	b.w	80080a6 <__retarget_lock_release_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	20004964 	.word	0x20004964

08007f50 <__sinit_lock_acquire>:
 8007f50:	4801      	ldr	r0, [pc, #4]	; (8007f58 <__sinit_lock_acquire+0x8>)
 8007f52:	f000 b8a7 	b.w	80080a4 <__retarget_lock_acquire_recursive>
 8007f56:	bf00      	nop
 8007f58:	2000495f 	.word	0x2000495f

08007f5c <__sinit_lock_release>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	; (8007f64 <__sinit_lock_release+0x8>)
 8007f5e:	f000 b8a2 	b.w	80080a6 <__retarget_lock_release_recursive>
 8007f62:	bf00      	nop
 8007f64:	2000495f 	.word	0x2000495f

08007f68 <__sinit>:
 8007f68:	b510      	push	{r4, lr}
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	f7ff fff0 	bl	8007f50 <__sinit_lock_acquire>
 8007f70:	69a3      	ldr	r3, [r4, #24]
 8007f72:	b11b      	cbz	r3, 8007f7c <__sinit+0x14>
 8007f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f78:	f7ff bff0 	b.w	8007f5c <__sinit_lock_release>
 8007f7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f80:	6523      	str	r3, [r4, #80]	; 0x50
 8007f82:	4b13      	ldr	r3, [pc, #76]	; (8007fd0 <__sinit+0x68>)
 8007f84:	4a13      	ldr	r2, [pc, #76]	; (8007fd4 <__sinit+0x6c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f8a:	42a3      	cmp	r3, r4
 8007f8c:	bf04      	itt	eq
 8007f8e:	2301      	moveq	r3, #1
 8007f90:	61a3      	streq	r3, [r4, #24]
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 f820 	bl	8007fd8 <__sfp>
 8007f98:	6060      	str	r0, [r4, #4]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f81c 	bl	8007fd8 <__sfp>
 8007fa0:	60a0      	str	r0, [r4, #8]
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 f818 	bl	8007fd8 <__sfp>
 8007fa8:	2200      	movs	r2, #0
 8007faa:	60e0      	str	r0, [r4, #12]
 8007fac:	2104      	movs	r1, #4
 8007fae:	6860      	ldr	r0, [r4, #4]
 8007fb0:	f7ff ff82 	bl	8007eb8 <std>
 8007fb4:	68a0      	ldr	r0, [r4, #8]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	2109      	movs	r1, #9
 8007fba:	f7ff ff7d 	bl	8007eb8 <std>
 8007fbe:	68e0      	ldr	r0, [r4, #12]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	2112      	movs	r1, #18
 8007fc4:	f7ff ff78 	bl	8007eb8 <std>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	61a3      	str	r3, [r4, #24]
 8007fcc:	e7d2      	b.n	8007f74 <__sinit+0xc>
 8007fce:	bf00      	nop
 8007fd0:	0800943c 	.word	0x0800943c
 8007fd4:	08007f01 	.word	0x08007f01

08007fd8 <__sfp>:
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fda:	4607      	mov	r7, r0
 8007fdc:	f7ff ffac 	bl	8007f38 <__sfp_lock_acquire>
 8007fe0:	4b1e      	ldr	r3, [pc, #120]	; (800805c <__sfp+0x84>)
 8007fe2:	681e      	ldr	r6, [r3, #0]
 8007fe4:	69b3      	ldr	r3, [r6, #24]
 8007fe6:	b913      	cbnz	r3, 8007fee <__sfp+0x16>
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7ff ffbd 	bl	8007f68 <__sinit>
 8007fee:	3648      	adds	r6, #72	; 0x48
 8007ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	d503      	bpl.n	8008000 <__sfp+0x28>
 8007ff8:	6833      	ldr	r3, [r6, #0]
 8007ffa:	b30b      	cbz	r3, 8008040 <__sfp+0x68>
 8007ffc:	6836      	ldr	r6, [r6, #0]
 8007ffe:	e7f7      	b.n	8007ff0 <__sfp+0x18>
 8008000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008004:	b9d5      	cbnz	r5, 800803c <__sfp+0x64>
 8008006:	4b16      	ldr	r3, [pc, #88]	; (8008060 <__sfp+0x88>)
 8008008:	60e3      	str	r3, [r4, #12]
 800800a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800800e:	6665      	str	r5, [r4, #100]	; 0x64
 8008010:	f000 f847 	bl	80080a2 <__retarget_lock_init_recursive>
 8008014:	f7ff ff96 	bl	8007f44 <__sfp_lock_release>
 8008018:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800801c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008020:	6025      	str	r5, [r4, #0]
 8008022:	61a5      	str	r5, [r4, #24]
 8008024:	2208      	movs	r2, #8
 8008026:	4629      	mov	r1, r5
 8008028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800802c:	f7ff fd0c 	bl	8007a48 <memset>
 8008030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008038:	4620      	mov	r0, r4
 800803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800803c:	3468      	adds	r4, #104	; 0x68
 800803e:	e7d9      	b.n	8007ff4 <__sfp+0x1c>
 8008040:	2104      	movs	r1, #4
 8008042:	4638      	mov	r0, r7
 8008044:	f7ff ff62 	bl	8007f0c <__sfmoreglue>
 8008048:	4604      	mov	r4, r0
 800804a:	6030      	str	r0, [r6, #0]
 800804c:	2800      	cmp	r0, #0
 800804e:	d1d5      	bne.n	8007ffc <__sfp+0x24>
 8008050:	f7ff ff78 	bl	8007f44 <__sfp_lock_release>
 8008054:	230c      	movs	r3, #12
 8008056:	603b      	str	r3, [r7, #0]
 8008058:	e7ee      	b.n	8008038 <__sfp+0x60>
 800805a:	bf00      	nop
 800805c:	0800943c 	.word	0x0800943c
 8008060:	ffff0001 	.word	0xffff0001

08008064 <_fwalk_reent>:
 8008064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008068:	4606      	mov	r6, r0
 800806a:	4688      	mov	r8, r1
 800806c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008070:	2700      	movs	r7, #0
 8008072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008076:	f1b9 0901 	subs.w	r9, r9, #1
 800807a:	d505      	bpl.n	8008088 <_fwalk_reent+0x24>
 800807c:	6824      	ldr	r4, [r4, #0]
 800807e:	2c00      	cmp	r4, #0
 8008080:	d1f7      	bne.n	8008072 <_fwalk_reent+0xe>
 8008082:	4638      	mov	r0, r7
 8008084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008088:	89ab      	ldrh	r3, [r5, #12]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d907      	bls.n	800809e <_fwalk_reent+0x3a>
 800808e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008092:	3301      	adds	r3, #1
 8008094:	d003      	beq.n	800809e <_fwalk_reent+0x3a>
 8008096:	4629      	mov	r1, r5
 8008098:	4630      	mov	r0, r6
 800809a:	47c0      	blx	r8
 800809c:	4307      	orrs	r7, r0
 800809e:	3568      	adds	r5, #104	; 0x68
 80080a0:	e7e9      	b.n	8008076 <_fwalk_reent+0x12>

080080a2 <__retarget_lock_init_recursive>:
 80080a2:	4770      	bx	lr

080080a4 <__retarget_lock_acquire_recursive>:
 80080a4:	4770      	bx	lr

080080a6 <__retarget_lock_release_recursive>:
 80080a6:	4770      	bx	lr

080080a8 <__swhatbuf_r>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	460e      	mov	r6, r1
 80080ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b0:	2900      	cmp	r1, #0
 80080b2:	b096      	sub	sp, #88	; 0x58
 80080b4:	4614      	mov	r4, r2
 80080b6:	461d      	mov	r5, r3
 80080b8:	da07      	bge.n	80080ca <__swhatbuf_r+0x22>
 80080ba:	2300      	movs	r3, #0
 80080bc:	602b      	str	r3, [r5, #0]
 80080be:	89b3      	ldrh	r3, [r6, #12]
 80080c0:	061a      	lsls	r2, r3, #24
 80080c2:	d410      	bmi.n	80080e6 <__swhatbuf_r+0x3e>
 80080c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c8:	e00e      	b.n	80080e8 <__swhatbuf_r+0x40>
 80080ca:	466a      	mov	r2, sp
 80080cc:	f000 fdba 	bl	8008c44 <_fstat_r>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	dbf2      	blt.n	80080ba <__swhatbuf_r+0x12>
 80080d4:	9a01      	ldr	r2, [sp, #4]
 80080d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080de:	425a      	negs	r2, r3
 80080e0:	415a      	adcs	r2, r3
 80080e2:	602a      	str	r2, [r5, #0]
 80080e4:	e7ee      	b.n	80080c4 <__swhatbuf_r+0x1c>
 80080e6:	2340      	movs	r3, #64	; 0x40
 80080e8:	2000      	movs	r0, #0
 80080ea:	6023      	str	r3, [r4, #0]
 80080ec:	b016      	add	sp, #88	; 0x58
 80080ee:	bd70      	pop	{r4, r5, r6, pc}

080080f0 <__smakebuf_r>:
 80080f0:	898b      	ldrh	r3, [r1, #12]
 80080f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080f4:	079d      	lsls	r5, r3, #30
 80080f6:	4606      	mov	r6, r0
 80080f8:	460c      	mov	r4, r1
 80080fa:	d507      	bpl.n	800810c <__smakebuf_r+0x1c>
 80080fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	6123      	str	r3, [r4, #16]
 8008104:	2301      	movs	r3, #1
 8008106:	6163      	str	r3, [r4, #20]
 8008108:	b002      	add	sp, #8
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	ab01      	add	r3, sp, #4
 800810e:	466a      	mov	r2, sp
 8008110:	f7ff ffca 	bl	80080a8 <__swhatbuf_r>
 8008114:	9900      	ldr	r1, [sp, #0]
 8008116:	4605      	mov	r5, r0
 8008118:	4630      	mov	r0, r6
 800811a:	f000 f879 	bl	8008210 <_malloc_r>
 800811e:	b948      	cbnz	r0, 8008134 <__smakebuf_r+0x44>
 8008120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008124:	059a      	lsls	r2, r3, #22
 8008126:	d4ef      	bmi.n	8008108 <__smakebuf_r+0x18>
 8008128:	f023 0303 	bic.w	r3, r3, #3
 800812c:	f043 0302 	orr.w	r3, r3, #2
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	e7e3      	b.n	80080fc <__smakebuf_r+0xc>
 8008134:	4b0d      	ldr	r3, [pc, #52]	; (800816c <__smakebuf_r+0x7c>)
 8008136:	62b3      	str	r3, [r6, #40]	; 0x28
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	6020      	str	r0, [r4, #0]
 800813c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	9b00      	ldr	r3, [sp, #0]
 8008144:	6163      	str	r3, [r4, #20]
 8008146:	9b01      	ldr	r3, [sp, #4]
 8008148:	6120      	str	r0, [r4, #16]
 800814a:	b15b      	cbz	r3, 8008164 <__smakebuf_r+0x74>
 800814c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008150:	4630      	mov	r0, r6
 8008152:	f000 fd89 	bl	8008c68 <_isatty_r>
 8008156:	b128      	cbz	r0, 8008164 <__smakebuf_r+0x74>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	f023 0303 	bic.w	r3, r3, #3
 800815e:	f043 0301 	orr.w	r3, r3, #1
 8008162:	81a3      	strh	r3, [r4, #12]
 8008164:	89a0      	ldrh	r0, [r4, #12]
 8008166:	4305      	orrs	r5, r0
 8008168:	81a5      	strh	r5, [r4, #12]
 800816a:	e7cd      	b.n	8008108 <__smakebuf_r+0x18>
 800816c:	08007f01 	.word	0x08007f01

08008170 <_free_r>:
 8008170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008172:	2900      	cmp	r1, #0
 8008174:	d048      	beq.n	8008208 <_free_r+0x98>
 8008176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800817a:	9001      	str	r0, [sp, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	f1a1 0404 	sub.w	r4, r1, #4
 8008182:	bfb8      	it	lt
 8008184:	18e4      	addlt	r4, r4, r3
 8008186:	f000 fdb9 	bl	8008cfc <__malloc_lock>
 800818a:	4a20      	ldr	r2, [pc, #128]	; (800820c <_free_r+0x9c>)
 800818c:	9801      	ldr	r0, [sp, #4]
 800818e:	6813      	ldr	r3, [r2, #0]
 8008190:	4615      	mov	r5, r2
 8008192:	b933      	cbnz	r3, 80081a2 <_free_r+0x32>
 8008194:	6063      	str	r3, [r4, #4]
 8008196:	6014      	str	r4, [r2, #0]
 8008198:	b003      	add	sp, #12
 800819a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800819e:	f000 bdb3 	b.w	8008d08 <__malloc_unlock>
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	d90b      	bls.n	80081be <_free_r+0x4e>
 80081a6:	6821      	ldr	r1, [r4, #0]
 80081a8:	1862      	adds	r2, r4, r1
 80081aa:	4293      	cmp	r3, r2
 80081ac:	bf04      	itt	eq
 80081ae:	681a      	ldreq	r2, [r3, #0]
 80081b0:	685b      	ldreq	r3, [r3, #4]
 80081b2:	6063      	str	r3, [r4, #4]
 80081b4:	bf04      	itt	eq
 80081b6:	1852      	addeq	r2, r2, r1
 80081b8:	6022      	streq	r2, [r4, #0]
 80081ba:	602c      	str	r4, [r5, #0]
 80081bc:	e7ec      	b.n	8008198 <_free_r+0x28>
 80081be:	461a      	mov	r2, r3
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	b10b      	cbz	r3, 80081c8 <_free_r+0x58>
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	d9fa      	bls.n	80081be <_free_r+0x4e>
 80081c8:	6811      	ldr	r1, [r2, #0]
 80081ca:	1855      	adds	r5, r2, r1
 80081cc:	42a5      	cmp	r5, r4
 80081ce:	d10b      	bne.n	80081e8 <_free_r+0x78>
 80081d0:	6824      	ldr	r4, [r4, #0]
 80081d2:	4421      	add	r1, r4
 80081d4:	1854      	adds	r4, r2, r1
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	6011      	str	r1, [r2, #0]
 80081da:	d1dd      	bne.n	8008198 <_free_r+0x28>
 80081dc:	681c      	ldr	r4, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	6053      	str	r3, [r2, #4]
 80081e2:	4421      	add	r1, r4
 80081e4:	6011      	str	r1, [r2, #0]
 80081e6:	e7d7      	b.n	8008198 <_free_r+0x28>
 80081e8:	d902      	bls.n	80081f0 <_free_r+0x80>
 80081ea:	230c      	movs	r3, #12
 80081ec:	6003      	str	r3, [r0, #0]
 80081ee:	e7d3      	b.n	8008198 <_free_r+0x28>
 80081f0:	6825      	ldr	r5, [r4, #0]
 80081f2:	1961      	adds	r1, r4, r5
 80081f4:	428b      	cmp	r3, r1
 80081f6:	bf04      	itt	eq
 80081f8:	6819      	ldreq	r1, [r3, #0]
 80081fa:	685b      	ldreq	r3, [r3, #4]
 80081fc:	6063      	str	r3, [r4, #4]
 80081fe:	bf04      	itt	eq
 8008200:	1949      	addeq	r1, r1, r5
 8008202:	6021      	streq	r1, [r4, #0]
 8008204:	6054      	str	r4, [r2, #4]
 8008206:	e7c7      	b.n	8008198 <_free_r+0x28>
 8008208:	b003      	add	sp, #12
 800820a:	bd30      	pop	{r4, r5, pc}
 800820c:	200007e0 	.word	0x200007e0

08008210 <_malloc_r>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	1ccd      	adds	r5, r1, #3
 8008214:	f025 0503 	bic.w	r5, r5, #3
 8008218:	3508      	adds	r5, #8
 800821a:	2d0c      	cmp	r5, #12
 800821c:	bf38      	it	cc
 800821e:	250c      	movcc	r5, #12
 8008220:	2d00      	cmp	r5, #0
 8008222:	4606      	mov	r6, r0
 8008224:	db01      	blt.n	800822a <_malloc_r+0x1a>
 8008226:	42a9      	cmp	r1, r5
 8008228:	d903      	bls.n	8008232 <_malloc_r+0x22>
 800822a:	230c      	movs	r3, #12
 800822c:	6033      	str	r3, [r6, #0]
 800822e:	2000      	movs	r0, #0
 8008230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008232:	f000 fd63 	bl	8008cfc <__malloc_lock>
 8008236:	4921      	ldr	r1, [pc, #132]	; (80082bc <_malloc_r+0xac>)
 8008238:	680a      	ldr	r2, [r1, #0]
 800823a:	4614      	mov	r4, r2
 800823c:	b99c      	cbnz	r4, 8008266 <_malloc_r+0x56>
 800823e:	4f20      	ldr	r7, [pc, #128]	; (80082c0 <_malloc_r+0xb0>)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	b923      	cbnz	r3, 800824e <_malloc_r+0x3e>
 8008244:	4621      	mov	r1, r4
 8008246:	4630      	mov	r0, r6
 8008248:	f000 fc86 	bl	8008b58 <_sbrk_r>
 800824c:	6038      	str	r0, [r7, #0]
 800824e:	4629      	mov	r1, r5
 8008250:	4630      	mov	r0, r6
 8008252:	f000 fc81 	bl	8008b58 <_sbrk_r>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	d123      	bne.n	80082a2 <_malloc_r+0x92>
 800825a:	230c      	movs	r3, #12
 800825c:	6033      	str	r3, [r6, #0]
 800825e:	4630      	mov	r0, r6
 8008260:	f000 fd52 	bl	8008d08 <__malloc_unlock>
 8008264:	e7e3      	b.n	800822e <_malloc_r+0x1e>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	1b5b      	subs	r3, r3, r5
 800826a:	d417      	bmi.n	800829c <_malloc_r+0x8c>
 800826c:	2b0b      	cmp	r3, #11
 800826e:	d903      	bls.n	8008278 <_malloc_r+0x68>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	441c      	add	r4, r3
 8008274:	6025      	str	r5, [r4, #0]
 8008276:	e004      	b.n	8008282 <_malloc_r+0x72>
 8008278:	6863      	ldr	r3, [r4, #4]
 800827a:	42a2      	cmp	r2, r4
 800827c:	bf0c      	ite	eq
 800827e:	600b      	streq	r3, [r1, #0]
 8008280:	6053      	strne	r3, [r2, #4]
 8008282:	4630      	mov	r0, r6
 8008284:	f000 fd40 	bl	8008d08 <__malloc_unlock>
 8008288:	f104 000b 	add.w	r0, r4, #11
 800828c:	1d23      	adds	r3, r4, #4
 800828e:	f020 0007 	bic.w	r0, r0, #7
 8008292:	1ac2      	subs	r2, r0, r3
 8008294:	d0cc      	beq.n	8008230 <_malloc_r+0x20>
 8008296:	1a1b      	subs	r3, r3, r0
 8008298:	50a3      	str	r3, [r4, r2]
 800829a:	e7c9      	b.n	8008230 <_malloc_r+0x20>
 800829c:	4622      	mov	r2, r4
 800829e:	6864      	ldr	r4, [r4, #4]
 80082a0:	e7cc      	b.n	800823c <_malloc_r+0x2c>
 80082a2:	1cc4      	adds	r4, r0, #3
 80082a4:	f024 0403 	bic.w	r4, r4, #3
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	d0e3      	beq.n	8008274 <_malloc_r+0x64>
 80082ac:	1a21      	subs	r1, r4, r0
 80082ae:	4630      	mov	r0, r6
 80082b0:	f000 fc52 	bl	8008b58 <_sbrk_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	d1dd      	bne.n	8008274 <_malloc_r+0x64>
 80082b8:	e7cf      	b.n	800825a <_malloc_r+0x4a>
 80082ba:	bf00      	nop
 80082bc:	200007e0 	.word	0x200007e0
 80082c0:	200007e4 	.word	0x200007e4

080082c4 <__ssputs_r>:
 80082c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	688e      	ldr	r6, [r1, #8]
 80082ca:	429e      	cmp	r6, r3
 80082cc:	4682      	mov	sl, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	4690      	mov	r8, r2
 80082d2:	461f      	mov	r7, r3
 80082d4:	d838      	bhi.n	8008348 <__ssputs_r+0x84>
 80082d6:	898a      	ldrh	r2, [r1, #12]
 80082d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082dc:	d032      	beq.n	8008344 <__ssputs_r+0x80>
 80082de:	6825      	ldr	r5, [r4, #0]
 80082e0:	6909      	ldr	r1, [r1, #16]
 80082e2:	eba5 0901 	sub.w	r9, r5, r1
 80082e6:	6965      	ldr	r5, [r4, #20]
 80082e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082f0:	3301      	adds	r3, #1
 80082f2:	444b      	add	r3, r9
 80082f4:	106d      	asrs	r5, r5, #1
 80082f6:	429d      	cmp	r5, r3
 80082f8:	bf38      	it	cc
 80082fa:	461d      	movcc	r5, r3
 80082fc:	0553      	lsls	r3, r2, #21
 80082fe:	d531      	bpl.n	8008364 <__ssputs_r+0xa0>
 8008300:	4629      	mov	r1, r5
 8008302:	f7ff ff85 	bl	8008210 <_malloc_r>
 8008306:	4606      	mov	r6, r0
 8008308:	b950      	cbnz	r0, 8008320 <__ssputs_r+0x5c>
 800830a:	230c      	movs	r3, #12
 800830c:	f8ca 3000 	str.w	r3, [sl]
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008320:	6921      	ldr	r1, [r4, #16]
 8008322:	464a      	mov	r2, r9
 8008324:	f000 fcc2 	bl	8008cac <memcpy>
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800832e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008332:	81a3      	strh	r3, [r4, #12]
 8008334:	6126      	str	r6, [r4, #16]
 8008336:	6165      	str	r5, [r4, #20]
 8008338:	444e      	add	r6, r9
 800833a:	eba5 0509 	sub.w	r5, r5, r9
 800833e:	6026      	str	r6, [r4, #0]
 8008340:	60a5      	str	r5, [r4, #8]
 8008342:	463e      	mov	r6, r7
 8008344:	42be      	cmp	r6, r7
 8008346:	d900      	bls.n	800834a <__ssputs_r+0x86>
 8008348:	463e      	mov	r6, r7
 800834a:	4632      	mov	r2, r6
 800834c:	6820      	ldr	r0, [r4, #0]
 800834e:	4641      	mov	r1, r8
 8008350:	f000 fcba 	bl	8008cc8 <memmove>
 8008354:	68a3      	ldr	r3, [r4, #8]
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	1b9b      	subs	r3, r3, r6
 800835a:	4432      	add	r2, r6
 800835c:	60a3      	str	r3, [r4, #8]
 800835e:	6022      	str	r2, [r4, #0]
 8008360:	2000      	movs	r0, #0
 8008362:	e7db      	b.n	800831c <__ssputs_r+0x58>
 8008364:	462a      	mov	r2, r5
 8008366:	f000 fcd5 	bl	8008d14 <_realloc_r>
 800836a:	4606      	mov	r6, r0
 800836c:	2800      	cmp	r0, #0
 800836e:	d1e1      	bne.n	8008334 <__ssputs_r+0x70>
 8008370:	6921      	ldr	r1, [r4, #16]
 8008372:	4650      	mov	r0, sl
 8008374:	f7ff fefc 	bl	8008170 <_free_r>
 8008378:	e7c7      	b.n	800830a <__ssputs_r+0x46>
	...

0800837c <_svfiprintf_r>:
 800837c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008380:	4698      	mov	r8, r3
 8008382:	898b      	ldrh	r3, [r1, #12]
 8008384:	061b      	lsls	r3, r3, #24
 8008386:	b09d      	sub	sp, #116	; 0x74
 8008388:	4607      	mov	r7, r0
 800838a:	460d      	mov	r5, r1
 800838c:	4614      	mov	r4, r2
 800838e:	d50e      	bpl.n	80083ae <_svfiprintf_r+0x32>
 8008390:	690b      	ldr	r3, [r1, #16]
 8008392:	b963      	cbnz	r3, 80083ae <_svfiprintf_r+0x32>
 8008394:	2140      	movs	r1, #64	; 0x40
 8008396:	f7ff ff3b 	bl	8008210 <_malloc_r>
 800839a:	6028      	str	r0, [r5, #0]
 800839c:	6128      	str	r0, [r5, #16]
 800839e:	b920      	cbnz	r0, 80083aa <_svfiprintf_r+0x2e>
 80083a0:	230c      	movs	r3, #12
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083a8:	e0d1      	b.n	800854e <_svfiprintf_r+0x1d2>
 80083aa:	2340      	movs	r3, #64	; 0x40
 80083ac:	616b      	str	r3, [r5, #20]
 80083ae:	2300      	movs	r3, #0
 80083b0:	9309      	str	r3, [sp, #36]	; 0x24
 80083b2:	2320      	movs	r3, #32
 80083b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083bc:	2330      	movs	r3, #48	; 0x30
 80083be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008568 <_svfiprintf_r+0x1ec>
 80083c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083c6:	f04f 0901 	mov.w	r9, #1
 80083ca:	4623      	mov	r3, r4
 80083cc:	469a      	mov	sl, r3
 80083ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083d2:	b10a      	cbz	r2, 80083d8 <_svfiprintf_r+0x5c>
 80083d4:	2a25      	cmp	r2, #37	; 0x25
 80083d6:	d1f9      	bne.n	80083cc <_svfiprintf_r+0x50>
 80083d8:	ebba 0b04 	subs.w	fp, sl, r4
 80083dc:	d00b      	beq.n	80083f6 <_svfiprintf_r+0x7a>
 80083de:	465b      	mov	r3, fp
 80083e0:	4622      	mov	r2, r4
 80083e2:	4629      	mov	r1, r5
 80083e4:	4638      	mov	r0, r7
 80083e6:	f7ff ff6d 	bl	80082c4 <__ssputs_r>
 80083ea:	3001      	adds	r0, #1
 80083ec:	f000 80aa 	beq.w	8008544 <_svfiprintf_r+0x1c8>
 80083f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f2:	445a      	add	r2, fp
 80083f4:	9209      	str	r2, [sp, #36]	; 0x24
 80083f6:	f89a 3000 	ldrb.w	r3, [sl]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 80a2 	beq.w	8008544 <_svfiprintf_r+0x1c8>
 8008400:	2300      	movs	r3, #0
 8008402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800840a:	f10a 0a01 	add.w	sl, sl, #1
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	9307      	str	r3, [sp, #28]
 8008412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008416:	931a      	str	r3, [sp, #104]	; 0x68
 8008418:	4654      	mov	r4, sl
 800841a:	2205      	movs	r2, #5
 800841c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008420:	4851      	ldr	r0, [pc, #324]	; (8008568 <_svfiprintf_r+0x1ec>)
 8008422:	f7f7 ff5d 	bl	80002e0 <memchr>
 8008426:	9a04      	ldr	r2, [sp, #16]
 8008428:	b9d8      	cbnz	r0, 8008462 <_svfiprintf_r+0xe6>
 800842a:	06d0      	lsls	r0, r2, #27
 800842c:	bf44      	itt	mi
 800842e:	2320      	movmi	r3, #32
 8008430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008434:	0711      	lsls	r1, r2, #28
 8008436:	bf44      	itt	mi
 8008438:	232b      	movmi	r3, #43	; 0x2b
 800843a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800843e:	f89a 3000 	ldrb.w	r3, [sl]
 8008442:	2b2a      	cmp	r3, #42	; 0x2a
 8008444:	d015      	beq.n	8008472 <_svfiprintf_r+0xf6>
 8008446:	9a07      	ldr	r2, [sp, #28]
 8008448:	4654      	mov	r4, sl
 800844a:	2000      	movs	r0, #0
 800844c:	f04f 0c0a 	mov.w	ip, #10
 8008450:	4621      	mov	r1, r4
 8008452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008456:	3b30      	subs	r3, #48	; 0x30
 8008458:	2b09      	cmp	r3, #9
 800845a:	d94e      	bls.n	80084fa <_svfiprintf_r+0x17e>
 800845c:	b1b0      	cbz	r0, 800848c <_svfiprintf_r+0x110>
 800845e:	9207      	str	r2, [sp, #28]
 8008460:	e014      	b.n	800848c <_svfiprintf_r+0x110>
 8008462:	eba0 0308 	sub.w	r3, r0, r8
 8008466:	fa09 f303 	lsl.w	r3, r9, r3
 800846a:	4313      	orrs	r3, r2
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	46a2      	mov	sl, r4
 8008470:	e7d2      	b.n	8008418 <_svfiprintf_r+0x9c>
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	1d19      	adds	r1, r3, #4
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	9103      	str	r1, [sp, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	bfbb      	ittet	lt
 800847e:	425b      	neglt	r3, r3
 8008480:	f042 0202 	orrlt.w	r2, r2, #2
 8008484:	9307      	strge	r3, [sp, #28]
 8008486:	9307      	strlt	r3, [sp, #28]
 8008488:	bfb8      	it	lt
 800848a:	9204      	strlt	r2, [sp, #16]
 800848c:	7823      	ldrb	r3, [r4, #0]
 800848e:	2b2e      	cmp	r3, #46	; 0x2e
 8008490:	d10c      	bne.n	80084ac <_svfiprintf_r+0x130>
 8008492:	7863      	ldrb	r3, [r4, #1]
 8008494:	2b2a      	cmp	r3, #42	; 0x2a
 8008496:	d135      	bne.n	8008504 <_svfiprintf_r+0x188>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	9203      	str	r2, [sp, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bfb8      	it	lt
 80084a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084a8:	3402      	adds	r4, #2
 80084aa:	9305      	str	r3, [sp, #20]
 80084ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008578 <_svfiprintf_r+0x1fc>
 80084b0:	7821      	ldrb	r1, [r4, #0]
 80084b2:	2203      	movs	r2, #3
 80084b4:	4650      	mov	r0, sl
 80084b6:	f7f7 ff13 	bl	80002e0 <memchr>
 80084ba:	b140      	cbz	r0, 80084ce <_svfiprintf_r+0x152>
 80084bc:	2340      	movs	r3, #64	; 0x40
 80084be:	eba0 000a 	sub.w	r0, r0, sl
 80084c2:	fa03 f000 	lsl.w	r0, r3, r0
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	4303      	orrs	r3, r0
 80084ca:	3401      	adds	r4, #1
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d2:	4826      	ldr	r0, [pc, #152]	; (800856c <_svfiprintf_r+0x1f0>)
 80084d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084d8:	2206      	movs	r2, #6
 80084da:	f7f7 ff01 	bl	80002e0 <memchr>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d038      	beq.n	8008554 <_svfiprintf_r+0x1d8>
 80084e2:	4b23      	ldr	r3, [pc, #140]	; (8008570 <_svfiprintf_r+0x1f4>)
 80084e4:	bb1b      	cbnz	r3, 800852e <_svfiprintf_r+0x1b2>
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	3307      	adds	r3, #7
 80084ea:	f023 0307 	bic.w	r3, r3, #7
 80084ee:	3308      	adds	r3, #8
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f4:	4433      	add	r3, r6
 80084f6:	9309      	str	r3, [sp, #36]	; 0x24
 80084f8:	e767      	b.n	80083ca <_svfiprintf_r+0x4e>
 80084fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80084fe:	460c      	mov	r4, r1
 8008500:	2001      	movs	r0, #1
 8008502:	e7a5      	b.n	8008450 <_svfiprintf_r+0xd4>
 8008504:	2300      	movs	r3, #0
 8008506:	3401      	adds	r4, #1
 8008508:	9305      	str	r3, [sp, #20]
 800850a:	4619      	mov	r1, r3
 800850c:	f04f 0c0a 	mov.w	ip, #10
 8008510:	4620      	mov	r0, r4
 8008512:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008516:	3a30      	subs	r2, #48	; 0x30
 8008518:	2a09      	cmp	r2, #9
 800851a:	d903      	bls.n	8008524 <_svfiprintf_r+0x1a8>
 800851c:	2b00      	cmp	r3, #0
 800851e:	d0c5      	beq.n	80084ac <_svfiprintf_r+0x130>
 8008520:	9105      	str	r1, [sp, #20]
 8008522:	e7c3      	b.n	80084ac <_svfiprintf_r+0x130>
 8008524:	fb0c 2101 	mla	r1, ip, r1, r2
 8008528:	4604      	mov	r4, r0
 800852a:	2301      	movs	r3, #1
 800852c:	e7f0      	b.n	8008510 <_svfiprintf_r+0x194>
 800852e:	ab03      	add	r3, sp, #12
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	462a      	mov	r2, r5
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <_svfiprintf_r+0x1f8>)
 8008536:	a904      	add	r1, sp, #16
 8008538:	4638      	mov	r0, r7
 800853a:	f3af 8000 	nop.w
 800853e:	1c42      	adds	r2, r0, #1
 8008540:	4606      	mov	r6, r0
 8008542:	d1d6      	bne.n	80084f2 <_svfiprintf_r+0x176>
 8008544:	89ab      	ldrh	r3, [r5, #12]
 8008546:	065b      	lsls	r3, r3, #25
 8008548:	f53f af2c 	bmi.w	80083a4 <_svfiprintf_r+0x28>
 800854c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800854e:	b01d      	add	sp, #116	; 0x74
 8008550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008554:	ab03      	add	r3, sp, #12
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	462a      	mov	r2, r5
 800855a:	4b06      	ldr	r3, [pc, #24]	; (8008574 <_svfiprintf_r+0x1f8>)
 800855c:	a904      	add	r1, sp, #16
 800855e:	4638      	mov	r0, r7
 8008560:	f000 f9d4 	bl	800890c <_printf_i>
 8008564:	e7eb      	b.n	800853e <_svfiprintf_r+0x1c2>
 8008566:	bf00      	nop
 8008568:	080094a0 	.word	0x080094a0
 800856c:	080094aa 	.word	0x080094aa
 8008570:	00000000 	.word	0x00000000
 8008574:	080082c5 	.word	0x080082c5
 8008578:	080094a6 	.word	0x080094a6

0800857c <__sfputc_r>:
 800857c:	6893      	ldr	r3, [r2, #8]
 800857e:	3b01      	subs	r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	b410      	push	{r4}
 8008584:	6093      	str	r3, [r2, #8]
 8008586:	da08      	bge.n	800859a <__sfputc_r+0x1e>
 8008588:	6994      	ldr	r4, [r2, #24]
 800858a:	42a3      	cmp	r3, r4
 800858c:	db01      	blt.n	8008592 <__sfputc_r+0x16>
 800858e:	290a      	cmp	r1, #10
 8008590:	d103      	bne.n	800859a <__sfputc_r+0x1e>
 8008592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008596:	f7ff bb0d 	b.w	8007bb4 <__swbuf_r>
 800859a:	6813      	ldr	r3, [r2, #0]
 800859c:	1c58      	adds	r0, r3, #1
 800859e:	6010      	str	r0, [r2, #0]
 80085a0:	7019      	strb	r1, [r3, #0]
 80085a2:	4608      	mov	r0, r1
 80085a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <__sfputs_r>:
 80085aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ac:	4606      	mov	r6, r0
 80085ae:	460f      	mov	r7, r1
 80085b0:	4614      	mov	r4, r2
 80085b2:	18d5      	adds	r5, r2, r3
 80085b4:	42ac      	cmp	r4, r5
 80085b6:	d101      	bne.n	80085bc <__sfputs_r+0x12>
 80085b8:	2000      	movs	r0, #0
 80085ba:	e007      	b.n	80085cc <__sfputs_r+0x22>
 80085bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c0:	463a      	mov	r2, r7
 80085c2:	4630      	mov	r0, r6
 80085c4:	f7ff ffda 	bl	800857c <__sfputc_r>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d1f3      	bne.n	80085b4 <__sfputs_r+0xa>
 80085cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085d0 <_vfiprintf_r>:
 80085d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	460d      	mov	r5, r1
 80085d6:	b09d      	sub	sp, #116	; 0x74
 80085d8:	4614      	mov	r4, r2
 80085da:	4698      	mov	r8, r3
 80085dc:	4606      	mov	r6, r0
 80085de:	b118      	cbz	r0, 80085e8 <_vfiprintf_r+0x18>
 80085e0:	6983      	ldr	r3, [r0, #24]
 80085e2:	b90b      	cbnz	r3, 80085e8 <_vfiprintf_r+0x18>
 80085e4:	f7ff fcc0 	bl	8007f68 <__sinit>
 80085e8:	4b89      	ldr	r3, [pc, #548]	; (8008810 <_vfiprintf_r+0x240>)
 80085ea:	429d      	cmp	r5, r3
 80085ec:	d11b      	bne.n	8008626 <_vfiprintf_r+0x56>
 80085ee:	6875      	ldr	r5, [r6, #4]
 80085f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085f2:	07d9      	lsls	r1, r3, #31
 80085f4:	d405      	bmi.n	8008602 <_vfiprintf_r+0x32>
 80085f6:	89ab      	ldrh	r3, [r5, #12]
 80085f8:	059a      	lsls	r2, r3, #22
 80085fa:	d402      	bmi.n	8008602 <_vfiprintf_r+0x32>
 80085fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fe:	f7ff fd51 	bl	80080a4 <__retarget_lock_acquire_recursive>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	071b      	lsls	r3, r3, #28
 8008606:	d501      	bpl.n	800860c <_vfiprintf_r+0x3c>
 8008608:	692b      	ldr	r3, [r5, #16]
 800860a:	b9eb      	cbnz	r3, 8008648 <_vfiprintf_r+0x78>
 800860c:	4629      	mov	r1, r5
 800860e:	4630      	mov	r0, r6
 8008610:	f7ff fb22 	bl	8007c58 <__swsetup_r>
 8008614:	b1c0      	cbz	r0, 8008648 <_vfiprintf_r+0x78>
 8008616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008618:	07dc      	lsls	r4, r3, #31
 800861a:	d50e      	bpl.n	800863a <_vfiprintf_r+0x6a>
 800861c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008620:	b01d      	add	sp, #116	; 0x74
 8008622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008626:	4b7b      	ldr	r3, [pc, #492]	; (8008814 <_vfiprintf_r+0x244>)
 8008628:	429d      	cmp	r5, r3
 800862a:	d101      	bne.n	8008630 <_vfiprintf_r+0x60>
 800862c:	68b5      	ldr	r5, [r6, #8]
 800862e:	e7df      	b.n	80085f0 <_vfiprintf_r+0x20>
 8008630:	4b79      	ldr	r3, [pc, #484]	; (8008818 <_vfiprintf_r+0x248>)
 8008632:	429d      	cmp	r5, r3
 8008634:	bf08      	it	eq
 8008636:	68f5      	ldreq	r5, [r6, #12]
 8008638:	e7da      	b.n	80085f0 <_vfiprintf_r+0x20>
 800863a:	89ab      	ldrh	r3, [r5, #12]
 800863c:	0598      	lsls	r0, r3, #22
 800863e:	d4ed      	bmi.n	800861c <_vfiprintf_r+0x4c>
 8008640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008642:	f7ff fd30 	bl	80080a6 <__retarget_lock_release_recursive>
 8008646:	e7e9      	b.n	800861c <_vfiprintf_r+0x4c>
 8008648:	2300      	movs	r3, #0
 800864a:	9309      	str	r3, [sp, #36]	; 0x24
 800864c:	2320      	movs	r3, #32
 800864e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008652:	f8cd 800c 	str.w	r8, [sp, #12]
 8008656:	2330      	movs	r3, #48	; 0x30
 8008658:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800881c <_vfiprintf_r+0x24c>
 800865c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008660:	f04f 0901 	mov.w	r9, #1
 8008664:	4623      	mov	r3, r4
 8008666:	469a      	mov	sl, r3
 8008668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800866c:	b10a      	cbz	r2, 8008672 <_vfiprintf_r+0xa2>
 800866e:	2a25      	cmp	r2, #37	; 0x25
 8008670:	d1f9      	bne.n	8008666 <_vfiprintf_r+0x96>
 8008672:	ebba 0b04 	subs.w	fp, sl, r4
 8008676:	d00b      	beq.n	8008690 <_vfiprintf_r+0xc0>
 8008678:	465b      	mov	r3, fp
 800867a:	4622      	mov	r2, r4
 800867c:	4629      	mov	r1, r5
 800867e:	4630      	mov	r0, r6
 8008680:	f7ff ff93 	bl	80085aa <__sfputs_r>
 8008684:	3001      	adds	r0, #1
 8008686:	f000 80aa 	beq.w	80087de <_vfiprintf_r+0x20e>
 800868a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868c:	445a      	add	r2, fp
 800868e:	9209      	str	r2, [sp, #36]	; 0x24
 8008690:	f89a 3000 	ldrb.w	r3, [sl]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 80a2 	beq.w	80087de <_vfiprintf_r+0x20e>
 800869a:	2300      	movs	r3, #0
 800869c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086a4:	f10a 0a01 	add.w	sl, sl, #1
 80086a8:	9304      	str	r3, [sp, #16]
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086b0:	931a      	str	r3, [sp, #104]	; 0x68
 80086b2:	4654      	mov	r4, sl
 80086b4:	2205      	movs	r2, #5
 80086b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ba:	4858      	ldr	r0, [pc, #352]	; (800881c <_vfiprintf_r+0x24c>)
 80086bc:	f7f7 fe10 	bl	80002e0 <memchr>
 80086c0:	9a04      	ldr	r2, [sp, #16]
 80086c2:	b9d8      	cbnz	r0, 80086fc <_vfiprintf_r+0x12c>
 80086c4:	06d1      	lsls	r1, r2, #27
 80086c6:	bf44      	itt	mi
 80086c8:	2320      	movmi	r3, #32
 80086ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ce:	0713      	lsls	r3, r2, #28
 80086d0:	bf44      	itt	mi
 80086d2:	232b      	movmi	r3, #43	; 0x2b
 80086d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d8:	f89a 3000 	ldrb.w	r3, [sl]
 80086dc:	2b2a      	cmp	r3, #42	; 0x2a
 80086de:	d015      	beq.n	800870c <_vfiprintf_r+0x13c>
 80086e0:	9a07      	ldr	r2, [sp, #28]
 80086e2:	4654      	mov	r4, sl
 80086e4:	2000      	movs	r0, #0
 80086e6:	f04f 0c0a 	mov.w	ip, #10
 80086ea:	4621      	mov	r1, r4
 80086ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086f0:	3b30      	subs	r3, #48	; 0x30
 80086f2:	2b09      	cmp	r3, #9
 80086f4:	d94e      	bls.n	8008794 <_vfiprintf_r+0x1c4>
 80086f6:	b1b0      	cbz	r0, 8008726 <_vfiprintf_r+0x156>
 80086f8:	9207      	str	r2, [sp, #28]
 80086fa:	e014      	b.n	8008726 <_vfiprintf_r+0x156>
 80086fc:	eba0 0308 	sub.w	r3, r0, r8
 8008700:	fa09 f303 	lsl.w	r3, r9, r3
 8008704:	4313      	orrs	r3, r2
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	46a2      	mov	sl, r4
 800870a:	e7d2      	b.n	80086b2 <_vfiprintf_r+0xe2>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	1d19      	adds	r1, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	9103      	str	r1, [sp, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfbb      	ittet	lt
 8008718:	425b      	neglt	r3, r3
 800871a:	f042 0202 	orrlt.w	r2, r2, #2
 800871e:	9307      	strge	r3, [sp, #28]
 8008720:	9307      	strlt	r3, [sp, #28]
 8008722:	bfb8      	it	lt
 8008724:	9204      	strlt	r2, [sp, #16]
 8008726:	7823      	ldrb	r3, [r4, #0]
 8008728:	2b2e      	cmp	r3, #46	; 0x2e
 800872a:	d10c      	bne.n	8008746 <_vfiprintf_r+0x176>
 800872c:	7863      	ldrb	r3, [r4, #1]
 800872e:	2b2a      	cmp	r3, #42	; 0x2a
 8008730:	d135      	bne.n	800879e <_vfiprintf_r+0x1ce>
 8008732:	9b03      	ldr	r3, [sp, #12]
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	9203      	str	r2, [sp, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	bfb8      	it	lt
 800873e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008742:	3402      	adds	r4, #2
 8008744:	9305      	str	r3, [sp, #20]
 8008746:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800882c <_vfiprintf_r+0x25c>
 800874a:	7821      	ldrb	r1, [r4, #0]
 800874c:	2203      	movs	r2, #3
 800874e:	4650      	mov	r0, sl
 8008750:	f7f7 fdc6 	bl	80002e0 <memchr>
 8008754:	b140      	cbz	r0, 8008768 <_vfiprintf_r+0x198>
 8008756:	2340      	movs	r3, #64	; 0x40
 8008758:	eba0 000a 	sub.w	r0, r0, sl
 800875c:	fa03 f000 	lsl.w	r0, r3, r0
 8008760:	9b04      	ldr	r3, [sp, #16]
 8008762:	4303      	orrs	r3, r0
 8008764:	3401      	adds	r4, #1
 8008766:	9304      	str	r3, [sp, #16]
 8008768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876c:	482c      	ldr	r0, [pc, #176]	; (8008820 <_vfiprintf_r+0x250>)
 800876e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008772:	2206      	movs	r2, #6
 8008774:	f7f7 fdb4 	bl	80002e0 <memchr>
 8008778:	2800      	cmp	r0, #0
 800877a:	d03f      	beq.n	80087fc <_vfiprintf_r+0x22c>
 800877c:	4b29      	ldr	r3, [pc, #164]	; (8008824 <_vfiprintf_r+0x254>)
 800877e:	bb1b      	cbnz	r3, 80087c8 <_vfiprintf_r+0x1f8>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	3307      	adds	r3, #7
 8008784:	f023 0307 	bic.w	r3, r3, #7
 8008788:	3308      	adds	r3, #8
 800878a:	9303      	str	r3, [sp, #12]
 800878c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878e:	443b      	add	r3, r7
 8008790:	9309      	str	r3, [sp, #36]	; 0x24
 8008792:	e767      	b.n	8008664 <_vfiprintf_r+0x94>
 8008794:	fb0c 3202 	mla	r2, ip, r2, r3
 8008798:	460c      	mov	r4, r1
 800879a:	2001      	movs	r0, #1
 800879c:	e7a5      	b.n	80086ea <_vfiprintf_r+0x11a>
 800879e:	2300      	movs	r3, #0
 80087a0:	3401      	adds	r4, #1
 80087a2:	9305      	str	r3, [sp, #20]
 80087a4:	4619      	mov	r1, r3
 80087a6:	f04f 0c0a 	mov.w	ip, #10
 80087aa:	4620      	mov	r0, r4
 80087ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087b0:	3a30      	subs	r2, #48	; 0x30
 80087b2:	2a09      	cmp	r2, #9
 80087b4:	d903      	bls.n	80087be <_vfiprintf_r+0x1ee>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0c5      	beq.n	8008746 <_vfiprintf_r+0x176>
 80087ba:	9105      	str	r1, [sp, #20]
 80087bc:	e7c3      	b.n	8008746 <_vfiprintf_r+0x176>
 80087be:	fb0c 2101 	mla	r1, ip, r1, r2
 80087c2:	4604      	mov	r4, r0
 80087c4:	2301      	movs	r3, #1
 80087c6:	e7f0      	b.n	80087aa <_vfiprintf_r+0x1da>
 80087c8:	ab03      	add	r3, sp, #12
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	462a      	mov	r2, r5
 80087ce:	4b16      	ldr	r3, [pc, #88]	; (8008828 <_vfiprintf_r+0x258>)
 80087d0:	a904      	add	r1, sp, #16
 80087d2:	4630      	mov	r0, r6
 80087d4:	f3af 8000 	nop.w
 80087d8:	4607      	mov	r7, r0
 80087da:	1c78      	adds	r0, r7, #1
 80087dc:	d1d6      	bne.n	800878c <_vfiprintf_r+0x1bc>
 80087de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087e0:	07d9      	lsls	r1, r3, #31
 80087e2:	d405      	bmi.n	80087f0 <_vfiprintf_r+0x220>
 80087e4:	89ab      	ldrh	r3, [r5, #12]
 80087e6:	059a      	lsls	r2, r3, #22
 80087e8:	d402      	bmi.n	80087f0 <_vfiprintf_r+0x220>
 80087ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ec:	f7ff fc5b 	bl	80080a6 <__retarget_lock_release_recursive>
 80087f0:	89ab      	ldrh	r3, [r5, #12]
 80087f2:	065b      	lsls	r3, r3, #25
 80087f4:	f53f af12 	bmi.w	800861c <_vfiprintf_r+0x4c>
 80087f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087fa:	e711      	b.n	8008620 <_vfiprintf_r+0x50>
 80087fc:	ab03      	add	r3, sp, #12
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	462a      	mov	r2, r5
 8008802:	4b09      	ldr	r3, [pc, #36]	; (8008828 <_vfiprintf_r+0x258>)
 8008804:	a904      	add	r1, sp, #16
 8008806:	4630      	mov	r0, r6
 8008808:	f000 f880 	bl	800890c <_printf_i>
 800880c:	e7e4      	b.n	80087d8 <_vfiprintf_r+0x208>
 800880e:	bf00      	nop
 8008810:	08009460 	.word	0x08009460
 8008814:	08009480 	.word	0x08009480
 8008818:	08009440 	.word	0x08009440
 800881c:	080094a0 	.word	0x080094a0
 8008820:	080094aa 	.word	0x080094aa
 8008824:	00000000 	.word	0x00000000
 8008828:	080085ab 	.word	0x080085ab
 800882c:	080094a6 	.word	0x080094a6

08008830 <_printf_common>:
 8008830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008834:	4616      	mov	r6, r2
 8008836:	4699      	mov	r9, r3
 8008838:	688a      	ldr	r2, [r1, #8]
 800883a:	690b      	ldr	r3, [r1, #16]
 800883c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008840:	4293      	cmp	r3, r2
 8008842:	bfb8      	it	lt
 8008844:	4613      	movlt	r3, r2
 8008846:	6033      	str	r3, [r6, #0]
 8008848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800884c:	4607      	mov	r7, r0
 800884e:	460c      	mov	r4, r1
 8008850:	b10a      	cbz	r2, 8008856 <_printf_common+0x26>
 8008852:	3301      	adds	r3, #1
 8008854:	6033      	str	r3, [r6, #0]
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	0699      	lsls	r1, r3, #26
 800885a:	bf42      	ittt	mi
 800885c:	6833      	ldrmi	r3, [r6, #0]
 800885e:	3302      	addmi	r3, #2
 8008860:	6033      	strmi	r3, [r6, #0]
 8008862:	6825      	ldr	r5, [r4, #0]
 8008864:	f015 0506 	ands.w	r5, r5, #6
 8008868:	d106      	bne.n	8008878 <_printf_common+0x48>
 800886a:	f104 0a19 	add.w	sl, r4, #25
 800886e:	68e3      	ldr	r3, [r4, #12]
 8008870:	6832      	ldr	r2, [r6, #0]
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	42ab      	cmp	r3, r5
 8008876:	dc26      	bgt.n	80088c6 <_printf_common+0x96>
 8008878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800887c:	1e13      	subs	r3, r2, #0
 800887e:	6822      	ldr	r2, [r4, #0]
 8008880:	bf18      	it	ne
 8008882:	2301      	movne	r3, #1
 8008884:	0692      	lsls	r2, r2, #26
 8008886:	d42b      	bmi.n	80088e0 <_printf_common+0xb0>
 8008888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800888c:	4649      	mov	r1, r9
 800888e:	4638      	mov	r0, r7
 8008890:	47c0      	blx	r8
 8008892:	3001      	adds	r0, #1
 8008894:	d01e      	beq.n	80088d4 <_printf_common+0xa4>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	68e5      	ldr	r5, [r4, #12]
 800889a:	6832      	ldr	r2, [r6, #0]
 800889c:	f003 0306 	and.w	r3, r3, #6
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	bf08      	it	eq
 80088a4:	1aad      	subeq	r5, r5, r2
 80088a6:	68a3      	ldr	r3, [r4, #8]
 80088a8:	6922      	ldr	r2, [r4, #16]
 80088aa:	bf0c      	ite	eq
 80088ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088b0:	2500      	movne	r5, #0
 80088b2:	4293      	cmp	r3, r2
 80088b4:	bfc4      	itt	gt
 80088b6:	1a9b      	subgt	r3, r3, r2
 80088b8:	18ed      	addgt	r5, r5, r3
 80088ba:	2600      	movs	r6, #0
 80088bc:	341a      	adds	r4, #26
 80088be:	42b5      	cmp	r5, r6
 80088c0:	d11a      	bne.n	80088f8 <_printf_common+0xc8>
 80088c2:	2000      	movs	r0, #0
 80088c4:	e008      	b.n	80088d8 <_printf_common+0xa8>
 80088c6:	2301      	movs	r3, #1
 80088c8:	4652      	mov	r2, sl
 80088ca:	4649      	mov	r1, r9
 80088cc:	4638      	mov	r0, r7
 80088ce:	47c0      	blx	r8
 80088d0:	3001      	adds	r0, #1
 80088d2:	d103      	bne.n	80088dc <_printf_common+0xac>
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088dc:	3501      	adds	r5, #1
 80088de:	e7c6      	b.n	800886e <_printf_common+0x3e>
 80088e0:	18e1      	adds	r1, r4, r3
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	2030      	movs	r0, #48	; 0x30
 80088e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ea:	4422      	add	r2, r4
 80088ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088f4:	3302      	adds	r3, #2
 80088f6:	e7c7      	b.n	8008888 <_printf_common+0x58>
 80088f8:	2301      	movs	r3, #1
 80088fa:	4622      	mov	r2, r4
 80088fc:	4649      	mov	r1, r9
 80088fe:	4638      	mov	r0, r7
 8008900:	47c0      	blx	r8
 8008902:	3001      	adds	r0, #1
 8008904:	d0e6      	beq.n	80088d4 <_printf_common+0xa4>
 8008906:	3601      	adds	r6, #1
 8008908:	e7d9      	b.n	80088be <_printf_common+0x8e>
	...

0800890c <_printf_i>:
 800890c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008910:	460c      	mov	r4, r1
 8008912:	4691      	mov	r9, r2
 8008914:	7e27      	ldrb	r7, [r4, #24]
 8008916:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008918:	2f78      	cmp	r7, #120	; 0x78
 800891a:	4680      	mov	r8, r0
 800891c:	469a      	mov	sl, r3
 800891e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008922:	d807      	bhi.n	8008934 <_printf_i+0x28>
 8008924:	2f62      	cmp	r7, #98	; 0x62
 8008926:	d80a      	bhi.n	800893e <_printf_i+0x32>
 8008928:	2f00      	cmp	r7, #0
 800892a:	f000 80d8 	beq.w	8008ade <_printf_i+0x1d2>
 800892e:	2f58      	cmp	r7, #88	; 0x58
 8008930:	f000 80a3 	beq.w	8008a7a <_printf_i+0x16e>
 8008934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800893c:	e03a      	b.n	80089b4 <_printf_i+0xa8>
 800893e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008942:	2b15      	cmp	r3, #21
 8008944:	d8f6      	bhi.n	8008934 <_printf_i+0x28>
 8008946:	a001      	add	r0, pc, #4	; (adr r0, 800894c <_printf_i+0x40>)
 8008948:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800894c:	080089a5 	.word	0x080089a5
 8008950:	080089b9 	.word	0x080089b9
 8008954:	08008935 	.word	0x08008935
 8008958:	08008935 	.word	0x08008935
 800895c:	08008935 	.word	0x08008935
 8008960:	08008935 	.word	0x08008935
 8008964:	080089b9 	.word	0x080089b9
 8008968:	08008935 	.word	0x08008935
 800896c:	08008935 	.word	0x08008935
 8008970:	08008935 	.word	0x08008935
 8008974:	08008935 	.word	0x08008935
 8008978:	08008ac5 	.word	0x08008ac5
 800897c:	080089e9 	.word	0x080089e9
 8008980:	08008aa7 	.word	0x08008aa7
 8008984:	08008935 	.word	0x08008935
 8008988:	08008935 	.word	0x08008935
 800898c:	08008ae7 	.word	0x08008ae7
 8008990:	08008935 	.word	0x08008935
 8008994:	080089e9 	.word	0x080089e9
 8008998:	08008935 	.word	0x08008935
 800899c:	08008935 	.word	0x08008935
 80089a0:	08008aaf 	.word	0x08008aaf
 80089a4:	680b      	ldr	r3, [r1, #0]
 80089a6:	1d1a      	adds	r2, r3, #4
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	600a      	str	r2, [r1, #0]
 80089ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089b4:	2301      	movs	r3, #1
 80089b6:	e0a3      	b.n	8008b00 <_printf_i+0x1f4>
 80089b8:	6825      	ldr	r5, [r4, #0]
 80089ba:	6808      	ldr	r0, [r1, #0]
 80089bc:	062e      	lsls	r6, r5, #24
 80089be:	f100 0304 	add.w	r3, r0, #4
 80089c2:	d50a      	bpl.n	80089da <_printf_i+0xce>
 80089c4:	6805      	ldr	r5, [r0, #0]
 80089c6:	600b      	str	r3, [r1, #0]
 80089c8:	2d00      	cmp	r5, #0
 80089ca:	da03      	bge.n	80089d4 <_printf_i+0xc8>
 80089cc:	232d      	movs	r3, #45	; 0x2d
 80089ce:	426d      	negs	r5, r5
 80089d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d4:	485e      	ldr	r0, [pc, #376]	; (8008b50 <_printf_i+0x244>)
 80089d6:	230a      	movs	r3, #10
 80089d8:	e019      	b.n	8008a0e <_printf_i+0x102>
 80089da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089de:	6805      	ldr	r5, [r0, #0]
 80089e0:	600b      	str	r3, [r1, #0]
 80089e2:	bf18      	it	ne
 80089e4:	b22d      	sxthne	r5, r5
 80089e6:	e7ef      	b.n	80089c8 <_printf_i+0xbc>
 80089e8:	680b      	ldr	r3, [r1, #0]
 80089ea:	6825      	ldr	r5, [r4, #0]
 80089ec:	1d18      	adds	r0, r3, #4
 80089ee:	6008      	str	r0, [r1, #0]
 80089f0:	0628      	lsls	r0, r5, #24
 80089f2:	d501      	bpl.n	80089f8 <_printf_i+0xec>
 80089f4:	681d      	ldr	r5, [r3, #0]
 80089f6:	e002      	b.n	80089fe <_printf_i+0xf2>
 80089f8:	0669      	lsls	r1, r5, #25
 80089fa:	d5fb      	bpl.n	80089f4 <_printf_i+0xe8>
 80089fc:	881d      	ldrh	r5, [r3, #0]
 80089fe:	4854      	ldr	r0, [pc, #336]	; (8008b50 <_printf_i+0x244>)
 8008a00:	2f6f      	cmp	r7, #111	; 0x6f
 8008a02:	bf0c      	ite	eq
 8008a04:	2308      	moveq	r3, #8
 8008a06:	230a      	movne	r3, #10
 8008a08:	2100      	movs	r1, #0
 8008a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a0e:	6866      	ldr	r6, [r4, #4]
 8008a10:	60a6      	str	r6, [r4, #8]
 8008a12:	2e00      	cmp	r6, #0
 8008a14:	bfa2      	ittt	ge
 8008a16:	6821      	ldrge	r1, [r4, #0]
 8008a18:	f021 0104 	bicge.w	r1, r1, #4
 8008a1c:	6021      	strge	r1, [r4, #0]
 8008a1e:	b90d      	cbnz	r5, 8008a24 <_printf_i+0x118>
 8008a20:	2e00      	cmp	r6, #0
 8008a22:	d04d      	beq.n	8008ac0 <_printf_i+0x1b4>
 8008a24:	4616      	mov	r6, r2
 8008a26:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a2a:	fb03 5711 	mls	r7, r3, r1, r5
 8008a2e:	5dc7      	ldrb	r7, [r0, r7]
 8008a30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a34:	462f      	mov	r7, r5
 8008a36:	42bb      	cmp	r3, r7
 8008a38:	460d      	mov	r5, r1
 8008a3a:	d9f4      	bls.n	8008a26 <_printf_i+0x11a>
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d10b      	bne.n	8008a58 <_printf_i+0x14c>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	07df      	lsls	r7, r3, #31
 8008a44:	d508      	bpl.n	8008a58 <_printf_i+0x14c>
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	6861      	ldr	r1, [r4, #4]
 8008a4a:	4299      	cmp	r1, r3
 8008a4c:	bfde      	ittt	le
 8008a4e:	2330      	movle	r3, #48	; 0x30
 8008a50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a54:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008a58:	1b92      	subs	r2, r2, r6
 8008a5a:	6122      	str	r2, [r4, #16]
 8008a5c:	f8cd a000 	str.w	sl, [sp]
 8008a60:	464b      	mov	r3, r9
 8008a62:	aa03      	add	r2, sp, #12
 8008a64:	4621      	mov	r1, r4
 8008a66:	4640      	mov	r0, r8
 8008a68:	f7ff fee2 	bl	8008830 <_printf_common>
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d14c      	bne.n	8008b0a <_printf_i+0x1fe>
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a74:	b004      	add	sp, #16
 8008a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7a:	4835      	ldr	r0, [pc, #212]	; (8008b50 <_printf_i+0x244>)
 8008a7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	680e      	ldr	r6, [r1, #0]
 8008a84:	061f      	lsls	r7, r3, #24
 8008a86:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a8a:	600e      	str	r6, [r1, #0]
 8008a8c:	d514      	bpl.n	8008ab8 <_printf_i+0x1ac>
 8008a8e:	07d9      	lsls	r1, r3, #31
 8008a90:	bf44      	itt	mi
 8008a92:	f043 0320 	orrmi.w	r3, r3, #32
 8008a96:	6023      	strmi	r3, [r4, #0]
 8008a98:	b91d      	cbnz	r5, 8008aa2 <_printf_i+0x196>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	f023 0320 	bic.w	r3, r3, #32
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	2310      	movs	r3, #16
 8008aa4:	e7b0      	b.n	8008a08 <_printf_i+0xfc>
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	f043 0320 	orr.w	r3, r3, #32
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	2378      	movs	r3, #120	; 0x78
 8008ab0:	4828      	ldr	r0, [pc, #160]	; (8008b54 <_printf_i+0x248>)
 8008ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ab6:	e7e3      	b.n	8008a80 <_printf_i+0x174>
 8008ab8:	065e      	lsls	r6, r3, #25
 8008aba:	bf48      	it	mi
 8008abc:	b2ad      	uxthmi	r5, r5
 8008abe:	e7e6      	b.n	8008a8e <_printf_i+0x182>
 8008ac0:	4616      	mov	r6, r2
 8008ac2:	e7bb      	b.n	8008a3c <_printf_i+0x130>
 8008ac4:	680b      	ldr	r3, [r1, #0]
 8008ac6:	6826      	ldr	r6, [r4, #0]
 8008ac8:	6960      	ldr	r0, [r4, #20]
 8008aca:	1d1d      	adds	r5, r3, #4
 8008acc:	600d      	str	r5, [r1, #0]
 8008ace:	0635      	lsls	r5, r6, #24
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	d501      	bpl.n	8008ad8 <_printf_i+0x1cc>
 8008ad4:	6018      	str	r0, [r3, #0]
 8008ad6:	e002      	b.n	8008ade <_printf_i+0x1d2>
 8008ad8:	0671      	lsls	r1, r6, #25
 8008ada:	d5fb      	bpl.n	8008ad4 <_printf_i+0x1c8>
 8008adc:	8018      	strh	r0, [r3, #0]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6123      	str	r3, [r4, #16]
 8008ae2:	4616      	mov	r6, r2
 8008ae4:	e7ba      	b.n	8008a5c <_printf_i+0x150>
 8008ae6:	680b      	ldr	r3, [r1, #0]
 8008ae8:	1d1a      	adds	r2, r3, #4
 8008aea:	600a      	str	r2, [r1, #0]
 8008aec:	681e      	ldr	r6, [r3, #0]
 8008aee:	6862      	ldr	r2, [r4, #4]
 8008af0:	2100      	movs	r1, #0
 8008af2:	4630      	mov	r0, r6
 8008af4:	f7f7 fbf4 	bl	80002e0 <memchr>
 8008af8:	b108      	cbz	r0, 8008afe <_printf_i+0x1f2>
 8008afa:	1b80      	subs	r0, r0, r6
 8008afc:	6060      	str	r0, [r4, #4]
 8008afe:	6863      	ldr	r3, [r4, #4]
 8008b00:	6123      	str	r3, [r4, #16]
 8008b02:	2300      	movs	r3, #0
 8008b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b08:	e7a8      	b.n	8008a5c <_printf_i+0x150>
 8008b0a:	6923      	ldr	r3, [r4, #16]
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	4649      	mov	r1, r9
 8008b10:	4640      	mov	r0, r8
 8008b12:	47d0      	blx	sl
 8008b14:	3001      	adds	r0, #1
 8008b16:	d0ab      	beq.n	8008a70 <_printf_i+0x164>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	079b      	lsls	r3, r3, #30
 8008b1c:	d413      	bmi.n	8008b46 <_printf_i+0x23a>
 8008b1e:	68e0      	ldr	r0, [r4, #12]
 8008b20:	9b03      	ldr	r3, [sp, #12]
 8008b22:	4298      	cmp	r0, r3
 8008b24:	bfb8      	it	lt
 8008b26:	4618      	movlt	r0, r3
 8008b28:	e7a4      	b.n	8008a74 <_printf_i+0x168>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4632      	mov	r2, r6
 8008b2e:	4649      	mov	r1, r9
 8008b30:	4640      	mov	r0, r8
 8008b32:	47d0      	blx	sl
 8008b34:	3001      	adds	r0, #1
 8008b36:	d09b      	beq.n	8008a70 <_printf_i+0x164>
 8008b38:	3501      	adds	r5, #1
 8008b3a:	68e3      	ldr	r3, [r4, #12]
 8008b3c:	9903      	ldr	r1, [sp, #12]
 8008b3e:	1a5b      	subs	r3, r3, r1
 8008b40:	42ab      	cmp	r3, r5
 8008b42:	dcf2      	bgt.n	8008b2a <_printf_i+0x21e>
 8008b44:	e7eb      	b.n	8008b1e <_printf_i+0x212>
 8008b46:	2500      	movs	r5, #0
 8008b48:	f104 0619 	add.w	r6, r4, #25
 8008b4c:	e7f5      	b.n	8008b3a <_printf_i+0x22e>
 8008b4e:	bf00      	nop
 8008b50:	080094b1 	.word	0x080094b1
 8008b54:	080094c2 	.word	0x080094c2

08008b58 <_sbrk_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d06      	ldr	r5, [pc, #24]	; (8008b74 <_sbrk_r+0x1c>)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4604      	mov	r4, r0
 8008b60:	4608      	mov	r0, r1
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	f000 f93e 	bl	8008de4 <_sbrk>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d102      	bne.n	8008b72 <_sbrk_r+0x1a>
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	b103      	cbz	r3, 8008b72 <_sbrk_r+0x1a>
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	20004968 	.word	0x20004968

08008b78 <__sread>:
 8008b78:	b510      	push	{r4, lr}
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b80:	f000 f8ee 	bl	8008d60 <_read_r>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	bfab      	itete	ge
 8008b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b8c:	181b      	addge	r3, r3, r0
 8008b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b92:	bfac      	ite	ge
 8008b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b96:	81a3      	strhlt	r3, [r4, #12]
 8008b98:	bd10      	pop	{r4, pc}

08008b9a <__swrite>:
 8008b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9e:	461f      	mov	r7, r3
 8008ba0:	898b      	ldrh	r3, [r1, #12]
 8008ba2:	05db      	lsls	r3, r3, #23
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	4616      	mov	r6, r2
 8008baa:	d505      	bpl.n	8008bb8 <__swrite+0x1e>
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f000 f868 	bl	8008c88 <_lseek_r>
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bc2:	81a3      	strh	r3, [r4, #12]
 8008bc4:	4632      	mov	r2, r6
 8008bc6:	463b      	mov	r3, r7
 8008bc8:	4628      	mov	r0, r5
 8008bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bce:	f000 b817 	b.w	8008c00 <_write_r>

08008bd2 <__sseek>:
 8008bd2:	b510      	push	{r4, lr}
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bda:	f000 f855 	bl	8008c88 <_lseek_r>
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	bf15      	itete	ne
 8008be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bee:	81a3      	strheq	r3, [r4, #12]
 8008bf0:	bf18      	it	ne
 8008bf2:	81a3      	strhne	r3, [r4, #12]
 8008bf4:	bd10      	pop	{r4, pc}

08008bf6 <__sclose>:
 8008bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfa:	f000 b813 	b.w	8008c24 <_close_r>
	...

08008c00 <_write_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d07      	ldr	r5, [pc, #28]	; (8008c20 <_write_r+0x20>)
 8008c04:	4604      	mov	r4, r0
 8008c06:	4608      	mov	r0, r1
 8008c08:	4611      	mov	r1, r2
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	602a      	str	r2, [r5, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f000 f8f6 	bl	8008e00 <_write>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_write_r+0x1e>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_write_r+0x1e>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	20004968 	.word	0x20004968

08008c24 <_close_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d06      	ldr	r5, [pc, #24]	; (8008c40 <_close_r+0x1c>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	f000 f8b0 	bl	8008d94 <_close>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_close_r+0x1a>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_close_r+0x1a>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	20004968 	.word	0x20004968

08008c44 <_fstat_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d07      	ldr	r5, [pc, #28]	; (8008c64 <_fstat_r+0x20>)
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	4611      	mov	r1, r2
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	f000 f8a7 	bl	8008da4 <_fstat>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d102      	bne.n	8008c60 <_fstat_r+0x1c>
 8008c5a:	682b      	ldr	r3, [r5, #0]
 8008c5c:	b103      	cbz	r3, 8008c60 <_fstat_r+0x1c>
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	bd38      	pop	{r3, r4, r5, pc}
 8008c62:	bf00      	nop
 8008c64:	20004968 	.word	0x20004968

08008c68 <_isatty_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d06      	ldr	r5, [pc, #24]	; (8008c84 <_isatty_r+0x1c>)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	f000 f89e 	bl	8008db4 <_isatty>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_isatty_r+0x1a>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_isatty_r+0x1a>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20004968 	.word	0x20004968

08008c88 <_lseek_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4d07      	ldr	r5, [pc, #28]	; (8008ca8 <_lseek_r+0x20>)
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	4608      	mov	r0, r1
 8008c90:	4611      	mov	r1, r2
 8008c92:	2200      	movs	r2, #0
 8008c94:	602a      	str	r2, [r5, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f000 f894 	bl	8008dc4 <_lseek>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d102      	bne.n	8008ca6 <_lseek_r+0x1e>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b103      	cbz	r3, 8008ca6 <_lseek_r+0x1e>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	20004968 	.word	0x20004968

08008cac <memcpy>:
 8008cac:	440a      	add	r2, r1
 8008cae:	4291      	cmp	r1, r2
 8008cb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008cb4:	d100      	bne.n	8008cb8 <memcpy+0xc>
 8008cb6:	4770      	bx	lr
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cc2:	4291      	cmp	r1, r2
 8008cc4:	d1f9      	bne.n	8008cba <memcpy+0xe>
 8008cc6:	bd10      	pop	{r4, pc}

08008cc8 <memmove>:
 8008cc8:	4288      	cmp	r0, r1
 8008cca:	b510      	push	{r4, lr}
 8008ccc:	eb01 0402 	add.w	r4, r1, r2
 8008cd0:	d902      	bls.n	8008cd8 <memmove+0x10>
 8008cd2:	4284      	cmp	r4, r0
 8008cd4:	4623      	mov	r3, r4
 8008cd6:	d807      	bhi.n	8008ce8 <memmove+0x20>
 8008cd8:	1e43      	subs	r3, r0, #1
 8008cda:	42a1      	cmp	r1, r4
 8008cdc:	d008      	beq.n	8008cf0 <memmove+0x28>
 8008cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ce6:	e7f8      	b.n	8008cda <memmove+0x12>
 8008ce8:	4402      	add	r2, r0
 8008cea:	4601      	mov	r1, r0
 8008cec:	428a      	cmp	r2, r1
 8008cee:	d100      	bne.n	8008cf2 <memmove+0x2a>
 8008cf0:	bd10      	pop	{r4, pc}
 8008cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cfa:	e7f7      	b.n	8008cec <memmove+0x24>

08008cfc <__malloc_lock>:
 8008cfc:	4801      	ldr	r0, [pc, #4]	; (8008d04 <__malloc_lock+0x8>)
 8008cfe:	f7ff b9d1 	b.w	80080a4 <__retarget_lock_acquire_recursive>
 8008d02:	bf00      	nop
 8008d04:	20004960 	.word	0x20004960

08008d08 <__malloc_unlock>:
 8008d08:	4801      	ldr	r0, [pc, #4]	; (8008d10 <__malloc_unlock+0x8>)
 8008d0a:	f7ff b9cc 	b.w	80080a6 <__retarget_lock_release_recursive>
 8008d0e:	bf00      	nop
 8008d10:	20004960 	.word	0x20004960

08008d14 <_realloc_r>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	4607      	mov	r7, r0
 8008d18:	4614      	mov	r4, r2
 8008d1a:	460e      	mov	r6, r1
 8008d1c:	b921      	cbnz	r1, 8008d28 <_realloc_r+0x14>
 8008d1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d22:	4611      	mov	r1, r2
 8008d24:	f7ff ba74 	b.w	8008210 <_malloc_r>
 8008d28:	b922      	cbnz	r2, 8008d34 <_realloc_r+0x20>
 8008d2a:	f7ff fa21 	bl	8008170 <_free_r>
 8008d2e:	4625      	mov	r5, r4
 8008d30:	4628      	mov	r0, r5
 8008d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d34:	f000 f826 	bl	8008d84 <_malloc_usable_size_r>
 8008d38:	42a0      	cmp	r0, r4
 8008d3a:	d20f      	bcs.n	8008d5c <_realloc_r+0x48>
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f7ff fa66 	bl	8008210 <_malloc_r>
 8008d44:	4605      	mov	r5, r0
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d0f2      	beq.n	8008d30 <_realloc_r+0x1c>
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	f7ff ffad 	bl	8008cac <memcpy>
 8008d52:	4631      	mov	r1, r6
 8008d54:	4638      	mov	r0, r7
 8008d56:	f7ff fa0b 	bl	8008170 <_free_r>
 8008d5a:	e7e9      	b.n	8008d30 <_realloc_r+0x1c>
 8008d5c:	4635      	mov	r5, r6
 8008d5e:	e7e7      	b.n	8008d30 <_realloc_r+0x1c>

08008d60 <_read_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4d07      	ldr	r5, [pc, #28]	; (8008d80 <_read_r+0x20>)
 8008d64:	4604      	mov	r4, r0
 8008d66:	4608      	mov	r0, r1
 8008d68:	4611      	mov	r1, r2
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	602a      	str	r2, [r5, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f000 f830 	bl	8008dd4 <_read>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_read_r+0x1e>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_read_r+0x1e>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	20004968 	.word	0x20004968

08008d84 <_malloc_usable_size_r>:
 8008d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d88:	1f18      	subs	r0, r3, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	bfbc      	itt	lt
 8008d8e:	580b      	ldrlt	r3, [r1, r0]
 8008d90:	18c0      	addlt	r0, r0, r3
 8008d92:	4770      	bx	lr

08008d94 <_close>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <_close+0xc>)
 8008d96:	2258      	movs	r2, #88	; 0x58
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d9e:	4770      	bx	lr
 8008da0:	20004968 	.word	0x20004968

08008da4 <_fstat>:
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <_fstat+0xc>)
 8008da6:	2258      	movs	r2, #88	; 0x58
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dae:	4770      	bx	lr
 8008db0:	20004968 	.word	0x20004968

08008db4 <_isatty>:
 8008db4:	4b02      	ldr	r3, [pc, #8]	; (8008dc0 <_isatty+0xc>)
 8008db6:	2258      	movs	r2, #88	; 0x58
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	2000      	movs	r0, #0
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	20004968 	.word	0x20004968

08008dc4 <_lseek>:
 8008dc4:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <_lseek+0xc>)
 8008dc6:	2258      	movs	r2, #88	; 0x58
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dce:	4770      	bx	lr
 8008dd0:	20004968 	.word	0x20004968

08008dd4 <_read>:
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <_read+0xc>)
 8008dd6:	2258      	movs	r2, #88	; 0x58
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dde:	4770      	bx	lr
 8008de0:	20004968 	.word	0x20004968

08008de4 <_sbrk>:
 8008de4:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <_sbrk+0x14>)
 8008de6:	6819      	ldr	r1, [r3, #0]
 8008de8:	4602      	mov	r2, r0
 8008dea:	b909      	cbnz	r1, 8008df0 <_sbrk+0xc>
 8008dec:	4903      	ldr	r1, [pc, #12]	; (8008dfc <_sbrk+0x18>)
 8008dee:	6019      	str	r1, [r3, #0]
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	4402      	add	r2, r0
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	4770      	bx	lr
 8008df8:	200007e8 	.word	0x200007e8
 8008dfc:	20004970 	.word	0x20004970

08008e00 <_write>:
 8008e00:	4b02      	ldr	r3, [pc, #8]	; (8008e0c <_write+0xc>)
 8008e02:	2258      	movs	r2, #88	; 0x58
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e0a:	4770      	bx	lr
 8008e0c:	20004968 	.word	0x20004968

08008e10 <_init>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr

08008e1c <_fini>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr
