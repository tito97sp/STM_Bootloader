
MyFirstBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008590  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008ea4  08008ea4  00018ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008ea8  08008ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08008eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000010d8  2000008c  08008f38  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001164  08008f38  00021164  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f3ab  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003c57  00000000  00000000  0003f465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000db8  00000000  00000000  000430c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c50  00000000  00000000  00043e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000383d6  00000000  00000000  00044ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000148a4  00000000  00000000  0007ce9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00156425  00000000  00000000  00091742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001e7b67  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003dd0  00000000  00000000  001e7bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2000008c 	.word	0x2000008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008818 	.word	0x08008818

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000090 	.word	0x20000090
 80002dc:	08008818 	.word	0x08008818

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <bl_fatsd>:
#include <stdarg.h> //for va_list var arg functions
#include <crc32.h>
const char image_name[] = "firmware_v1.bin";

void bl_fatsd(unsigned timeout)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	//bl_type = NONE; // The type of the bootloader, whether loading from USB or USART, will be determined by on what port the bootloader recevies its first valid command.
	//volatile uint32_t  bl_state = 0; // Must see correct command sequence to erase and reboot (commit first word)
	uint32_t  address = 0; 	//board_info.fw_size; /* force erase before upload will work */
 8000388:	2300      	movs	r3, #0
 800038a:	61fb      	str	r3, [r7, #28]
	uint32_t  first_word = 0xffffffff;
 800038c:	f04f 33ff 	mov.w	r3, #4294967295
 8000390:	617b      	str	r3, [r7, #20]
	// led_off(LED_ACTIVITY);

	// open firmware binary from sd card.
	//Open the file system

	HAL_Delay(1000);
 8000392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000396:	f000 feeb 	bl	8001170 <HAL_Delay>

	fres = f_mount(&FatFs, "", 1); //1=mount now
 800039a:	2201      	movs	r2, #1
 800039c:	4938      	ldr	r1, [pc, #224]	; (8000480 <bl_fatsd+0x100>)
 800039e:	4839      	ldr	r0, [pc, #228]	; (8000484 <bl_fatsd+0x104>)
 80003a0:	f006 fd2e 	bl	8006e00 <f_mount>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <bl_fatsd+0x108>)
 80003aa:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <bl_fatsd+0x108>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d003      	beq.n	80003bc <bl_fatsd+0x3c>
	{
		printf("f_mount error \r\n");
 80003b4:	4835      	ldr	r0, [pc, #212]	; (800048c <bl_fatsd+0x10c>)
 80003b6:	f007 fae9 	bl	800798c <puts>
		return;
 80003ba:	e05e      	b.n	800047a <bl_fatsd+0xfa>
	//Locate and check for loadable firmware. (iterate over images to find the latest and make checks).
	const image_hdr_t *image_hdr;

	//iterate over files.
	IMAGE_STATUS ires;
	ires = image_check(image_name, image_hdr);
 80003bc:	6939      	ldr	r1, [r7, #16]
 80003be:	4834      	ldr	r0, [pc, #208]	; (8000490 <bl_fatsd+0x110>)
 80003c0:	f000 f874 	bl	80004ac <image_check>
 80003c4:	4603      	mov	r3, r0
 80003c6:	73fb      	strb	r3, [r7, #15]
	if(ires != IMA_OK)
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d154      	bne.n	8000478 <bl_fatsd+0xf8>
	{
		return;
	}

	printf("New valid image found in SD. Uploading firmware...\r\n");
 80003ce:	4831      	ldr	r0, [pc, #196]	; (8000494 <bl_fatsd+0x114>)
 80003d0:	f007 fadc 	bl	800798c <puts>




	printf("Uploading image");
 80003d4:	4830      	ldr	r0, [pc, #192]	; (8000498 <bl_fatsd+0x118>)
 80003d6:	f007 fa53 	bl	8007880 <iprintf>
//		//if (flash_func_read_word(address) != 0xffffffff) {
//		//	goto cmd_fail;
//		//}
//	}

	address = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	61fb      	str	r3, [r7, #28]
	uint8_t EndOfFIle = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	73bb      	strb	r3, [r7, #14]
	while(!EndOfFIle)
 80003e2:	e033      	b.n	800044c <bl_fatsd+0xcc>
	{
		uint8_t readBytes = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	733b      	strb	r3, [r7, #12]

		// read maximum number of bytes from file.
		FRESULT rres = f_read(&fil, &flash_buffer.c[0], sizeof(flash_buffer.c)/sizeof(flash_buffer.c[0]), (UINT*)&readBytes);
 80003e8:	f107 030c 	add.w	r3, r7, #12
 80003ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003f0:	492a      	ldr	r1, [pc, #168]	; (800049c <bl_fatsd+0x11c>)
 80003f2:	482b      	ldr	r0, [pc, #172]	; (80004a0 <bl_fatsd+0x120>)
 80003f4:	f006 ff08 	bl	8007208 <f_read>
 80003f8:	4603      	mov	r3, r0
 80003fa:	737b      	strb	r3, [r7, #13]
		if(rres != FR_OK) {
 80003fc:	7b7b      	ldrb	r3, [r7, #13]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d003      	beq.n	800040a <bl_fatsd+0x8a>
			printf("Read string from 'test.txt' contents:\r\n");
 8000402:	4828      	ldr	r0, [pc, #160]	; (80004a4 <bl_fatsd+0x124>)
 8000404:	f007 fac2 	bl	800798c <puts>
 8000408:	e005      	b.n	8000416 <bl_fatsd+0x96>
		} else {
			printf("f_gets error (%i)\r\n", fres);
 800040a:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <bl_fatsd+0x108>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	4619      	mov	r1, r3
 8000410:	4825      	ldr	r0, [pc, #148]	; (80004a8 <bl_fatsd+0x128>)
 8000412:	f007 fa35 	bl	8007880 <iprintf>
		{
			//goto cmd_bad;
		}

		// sanity-checks
		for(uint8_t i = 0; i < readBytes; i++)
 8000416:	2300      	movs	r3, #0
 8000418:	76fb      	strb	r3, [r7, #27]
 800041a:	e002      	b.n	8000422 <bl_fatsd+0xa2>
 800041c:	7efb      	ldrb	r3, [r7, #27]
 800041e:	3301      	adds	r3, #1
 8000420:	76fb      	strb	r3, [r7, #27]
 8000422:	7b3b      	ldrb	r3, [r7, #12]
 8000424:	7efa      	ldrb	r2, [r7, #27]
 8000426:	429a      	cmp	r2, r3
 8000428:	d3f8      	bcc.n	800041c <bl_fatsd+0x9c>
			//first_word = flash_buffer.c[0];
			// replace first word with bits we can overwrite later
			//flash_buffer.c[0] = 0xffffffff;
		}

		readBytes /= 4;
 800042a:	7b3b      	ldrb	r3, [r7, #12]
 800042c:	089b      	lsrs	r3, r3, #2
 800042e:	b2db      	uxtb	r3, r3
 8000430:	733b      	strb	r3, [r7, #12]

		for (uint8_t i = 0; i < readBytes; i++)
 8000432:	2300      	movs	r3, #0
 8000434:	76bb      	strb	r3, [r7, #26]
 8000436:	e005      	b.n	8000444 <bl_fatsd+0xc4>
			// do immediate read-back verify
			//if (flash_func_read_word(address) != flash_buffer.c[i*4]) {
			//	goto cmd_fail;
			//}

			address += 4;
 8000438:	69fb      	ldr	r3, [r7, #28]
 800043a:	3304      	adds	r3, #4
 800043c:	61fb      	str	r3, [r7, #28]
		for (uint8_t i = 0; i < readBytes; i++)
 800043e:	7ebb      	ldrb	r3, [r7, #26]
 8000440:	3301      	adds	r3, #1
 8000442:	76bb      	strb	r3, [r7, #26]
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	7eba      	ldrb	r2, [r7, #26]
 8000448:	429a      	cmp	r2, r3
 800044a:	d3f5      	bcc.n	8000438 <bl_fatsd+0xb8>
	while(!EndOfFIle)
 800044c:	7bbb      	ldrb	r3, [r7, #14]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0c8      	beq.n	80003e4 <bl_fatsd+0x64>
			//cout_word(sum);
		}


	//Close file
	f_close(&fil);
 8000452:	4813      	ldr	r0, [pc, #76]	; (80004a0 <bl_fatsd+0x120>)
 8000454:	f007 f895 	bl	8007582 <f_close>

	//Unmount the drive
	f_mount(NULL, "", 0);
 8000458:	2200      	movs	r2, #0
 800045a:	4909      	ldr	r1, [pc, #36]	; (8000480 <bl_fatsd+0x100>)
 800045c:	2000      	movs	r0, #0
 800045e:	f006 fccf 	bl	8006e00 <f_mount>
	//	if (first_word != 0xffffffff && (bl_state & STATE_ALLOWS_REBOOT) != STATE_ALLOWS_REBOOT) {
	//		goto cmd_bad;
	//	}

	// program the deferred first word
	if (first_word != 0xffffffff) {
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000468:	d002      	beq.n	8000470 <bl_fatsd+0xf0>
		//if (flash_func_read_word(0) != first_word) {
		//	goto cmd_fail;
		//}

		// revert in case the flash was bad...
		first_word = 0xffffffff;
 800046a:	f04f 33ff 	mov.w	r3, #4294967295
 800046e:	617b      	str	r3, [r7, #20]
	}


	// start image
	image_start(image_hdr);
 8000470:	6938      	ldr	r0, [r7, #16]
 8000472:	f000 fbab 	bl	8000bcc <image_start>
 8000476:	e000      	b.n	800047a <bl_fatsd+0xfa>
		return;
 8000478:	bf00      	nop
//cmd_fail:
		// send a 'command failed' response but don't kill the timeout - could be garbage
		//failure_response();
		//continue;

}
 800047a:	3720      	adds	r7, #32
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	08008830 	.word	0x08008830
 8000484:	200007ec 	.word	0x200007ec
 8000488:	20000a20 	.word	0x20000a20
 800048c:	08008834 	.word	0x08008834
 8000490:	080089ac 	.word	0x080089ac
 8000494:	08008844 	.word	0x08008844
 8000498:	08008878 	.word	0x08008878
 800049c:	200000a8 	.word	0x200000a8
 80004a0:	20000a24 	.word	0x20000a24
 80004a4:	08008888 	.word	0x08008888
 80004a8:	080088b0 	.word	0x080088b0

080004ac <image_check>:



IMAGE_STATUS image_check(const char *image_path,  image_hdr_t *image_hdr_ptr)
{
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	6018      	str	r0, [r3, #0]
 80004b8:	463b      	mov	r3, r7
 80004ba:	6019      	str	r1, [r3, #0]
	//read image_hdr_t
	uint8_t readBytes = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t ima_hdr_buff[sizeof(image_hdr_t)];

	IMAGE_STATUS istat = IMA_OK;
 80004c2:	2300      	movs	r3, #0
 80004c4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	FRESULT fres;

	//open the file.
	fres = f_open(&fil, "firmware_app.bin", FA_READ);
 80004c8:	2201      	movs	r2, #1
 80004ca:	496c      	ldr	r1, [pc, #432]	; (800067c <image_check+0x1d0>)
 80004cc:	486c      	ldr	r0, [pc, #432]	; (8000680 <image_check+0x1d4>)
 80004ce:	f006 fcdd 	bl	8006e8c <f_open>
 80004d2:	4603      	mov	r3, r0
 80004d4:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
	if (fres != FR_OK) {
 80004d8:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d002      	beq.n	80004e6 <image_check+0x3a>
		istat =  IMA_NOT_FOUND;
 80004e0:	2302      	movs	r3, #2
 80004e2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	}

	// read maximum number of bytes from file.
	fres = f_read(&fil, &ima_hdr_buff, sizeof(image_hdr_t), (UINT*)&readBytes);
 80004e6:	f207 230f 	addw	r3, r7, #527	; 0x20f
 80004ea:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 80004ee:	2235      	movs	r2, #53	; 0x35
 80004f0:	4863      	ldr	r0, [pc, #396]	; (8000680 <image_check+0x1d4>)
 80004f2:	f006 fe89 	bl	8007208 <f_read>
 80004f6:	4603      	mov	r3, r0
 80004f8:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
	if(fres != FR_OK) {
 80004fc:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <image_check+0x5e>
		istat = IMA_ERROR;
 8000504:	2301      	movs	r3, #1
 8000506:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	}

	// EOF reached?
	if(sizeof(image_hdr_t) > readBytes)
 800050a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800050e:	2b34      	cmp	r3, #52	; 0x34
 8000510:	d802      	bhi.n	8000518 <image_check+0x6c>
	{
		istat = IMA_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	}

	// cast image_hdr
	const image_hdr_t *hdr = NULL;
 8000518:	2300      	movs	r3, #0
 800051a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	hdr = (const image_hdr_t *)&ima_hdr_buff[0];
 800051e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000522:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	// Check header.
	if(istat == IMA_OK){
 8000526:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800052a:	2b00      	cmp	r3, #0
 800052c:	d141      	bne.n	80005b2 <image_check+0x106>
		// perform image checks (crc, minimal version, data_size, vector_addr)
		if (hdr && hdr->image_magic == IMAGE_MAGIC
 800052e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000532:	2b00      	cmp	r3, #0
 8000534:	d037      	beq.n	80005a6 <image_check+0xfa>
 8000536:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	b29b      	uxth	r3, r3
 800053e:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 8000542:	4293      	cmp	r3, r2
 8000544:	d12f      	bne.n	80005a6 <image_check+0xfa>
				&& hdr->crc != 0
 8000546:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d02a      	beq.n	80005a6 <image_check+0xfa>
				&& hdr->data_size != 0
 8000550:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d025      	beq.n	80005a6 <image_check+0xfa>
				&& hdr->vector_addr != 0)
 800055a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800055e:	f8d3 3023 	ldr.w	r3, [r3, #35]	; 0x23
 8000562:	2b00      	cmp	r3, #0
 8000564:	d01f      	beq.n	80005a6 <image_check+0xfa>
		{
			*image_hdr_ptr = *hdr;
 8000566:	463b      	mov	r3, r7
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800056e:	4610      	mov	r0, r2
 8000570:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000574:	4602      	mov	r2, r0
 8000576:	4619      	mov	r1, r3
 8000578:	f8d1 c000 	ldr.w	ip, [r1]
 800057c:	684e      	ldr	r6, [r1, #4]
 800057e:	688d      	ldr	r5, [r1, #8]
 8000580:	68c9      	ldr	r1, [r1, #12]
 8000582:	f8c2 c000 	str.w	ip, [r2]
 8000586:	6056      	str	r6, [r2, #4]
 8000588:	6095      	str	r5, [r2, #8]
 800058a:	60d1      	str	r1, [r2, #12]
 800058c:	3310      	adds	r3, #16
 800058e:	3010      	adds	r0, #16
 8000590:	42a3      	cmp	r3, r4
 8000592:	d1ef      	bne.n	8000574 <image_check+0xc8>
 8000594:	4602      	mov	r2, r0
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	6011      	str	r1, [r2, #0]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	7113      	strb	r3, [r2, #4]
			istat = IMA_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
 80005a4:	e005      	b.n	80005b2 <image_check+0x106>
		}
		else
		{
			image_hdr_ptr = NULL;
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
			istat = IMA_INVALID;
 80005ac:	2303      	movs	r3, #3
 80005ae:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		}
	}

	if(istat == IMA_OK)
 80005b2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d155      	bne.n	8000666 <image_check+0x1ba>
		uint8_t byte[512-52];
		//uint32_t unused_hdr_length = image_hdr_ptr->vector_addr - sizeof(image_hdr_t);
		//for (uint32_t p = 0; p < unused_hdr_length+1; p++)
		//{
			//uint8_t byte;
			fres = f_read(&fil, &byte, sizeof(byte), (UINT*)&readBytes);
 80005ba:	f207 230f 	addw	r3, r7, #527	; 0x20f
 80005be:	f107 0108 	add.w	r1, r7, #8
 80005c2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80005c6:	482e      	ldr	r0, [pc, #184]	; (8000680 <image_check+0x1d4>)
 80005c8:	f006 fe1e 	bl	8007208 <f_read>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
		//}

		// compute CRC of the programmed area
		uint32_t sum = ~0U;
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		uint32_t app_length = image_hdr_ptr->data_size - image_hdr_ptr->vector_addr;
 80005da:	463b      	mov	r3, r7
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	463b      	mov	r3, r7
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f8d3 3023 	ldr.w	r3, [r3, #35]	; 0x23
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
		for (uint32_t p = 0; p < app_length; p += 4)
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80005f4:	e020      	b.n	8000638 <image_check+0x18c>
		{
			// get data from external
			uint32_t bytes;
			fres = f_read(&fil, &bytes, sizeof(bytes), (UINT*)&readBytes);
 80005f6:	f207 230f 	addw	r3, r7, #527	; 0x20f
 80005fa:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 80005fe:	2204      	movs	r2, #4
 8000600:	481f      	ldr	r0, [pc, #124]	; (8000680 <image_check+0x1d4>)
 8000602:	f006 fe01 	bl	8007208 <f_read>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
			if(fres != FR_OK) {
 800060c:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 8000610:	2b00      	cmp	r3, #0
 8000612:	d002      	beq.n	800061a <image_check+0x16e>
				istat = IMA_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
			}

			sum = crc32((uint8_t *)&bytes, sizeof(bytes), sum);
 800061a:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800061e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8000622:	2104      	movs	r1, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f82f 	bl	8000688 <crc32>
 800062a:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
		for (uint32_t p = 0; p < app_length; p += 4)
 800062e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000632:	3304      	adds	r3, #4
 8000634:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000638:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800063c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000640:	429a      	cmp	r2, r3
 8000642:	d3d8      	bcc.n	80005f6 <image_check+0x14a>
		}
		sum = sum ^ ~0U;
 8000644:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000648:	43db      	mvns	r3, r3
 800064a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

		if(hdr->crc != sum)
 800064e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8000658:	429a      	cmp	r2, r3
 800065a:	d004      	beq.n	8000666 <image_check+0x1ba>
		{
		   printf("Error. Image binary corruption");
 800065c:	4809      	ldr	r0, [pc, #36]	; (8000684 <image_check+0x1d8>)
 800065e:	f007 f90f 	bl	8007880 <iprintf>
		   return 0;
 8000662:	2300      	movs	r3, #0
 8000664:	e004      	b.n	8000670 <image_check+0x1c4>
		}
	}

	// close file
	f_close(&fil);
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <image_check+0x1d4>)
 8000668:	f006 ff8b 	bl	8007582 <f_close>

	return istat;
 800066c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
}
 8000670:	4618      	mov	r0, r3
 8000672:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000676:	46bd      	mov	sp, r7
 8000678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067a:	bf00      	nop
 800067c:	080088c4 	.word	0x080088c4
 8000680:	20000a24 	.word	0x20000a24
 8000684:	080088d8 	.word	0x080088d8

08000688 <crc32>:
 */

#include <crc32.h>

uint32_t crc32(const uint8_t *src, uint8_t len, uint32_t state)
{
 8000688:	b480      	push	{r7}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	460b      	mov	r3, r1
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	72fb      	strb	r3, [r7, #11]
	static uint32_t crctab[256];

	/* check whether we have generated the CRC table yet */
	/* this is much smaller than a static table */
	if (crctab[1] == 0) {
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <crc32+0xa4>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d126      	bne.n	80006ec <crc32+0x64>
		for (unsigned i = 0; i < 256; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	e020      	b.n	80006e6 <crc32+0x5e>
		{
			uint32_t c = i;
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	61bb      	str	r3, [r7, #24]

			for (unsigned j = 0; j < 8; j++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	e010      	b.n	80006d0 <crc32+0x48>
			{
				if (c & 1)
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d005      	beq.n	80006c4 <crc32+0x3c>
				{
					c = 0xedb88320U ^ (c >> 1);
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	085a      	lsrs	r2, r3, #1
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <crc32+0xa8>)
 80006be:	4053      	eors	r3, r2
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	e002      	b.n	80006ca <crc32+0x42>
				}
				else
				{
					c = c >> 1;
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	085b      	lsrs	r3, r3, #1
 80006c8:	61bb      	str	r3, [r7, #24]
			for (unsigned j = 0; j < 8; j++)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	d9eb      	bls.n	80006ae <crc32+0x26>
				}
			}

			crctab[i] = c;
 80006d6:	4915      	ldr	r1, [pc, #84]	; (800072c <crc32+0xa4>)
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	69ba      	ldr	r2, [r7, #24]
 80006dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (unsigned i = 0; i < 256; i++)
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	3301      	adds	r3, #1
 80006e4:	61fb      	str	r3, [r7, #28]
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	2bff      	cmp	r3, #255	; 0xff
 80006ea:	d9db      	bls.n	80006a4 <crc32+0x1c>
		}
	}

	for (unsigned i = 0; i < len; i++) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	e011      	b.n	8000716 <crc32+0x8e>
		state = crctab[(state ^ src[i]) & 0xff] ^ (state >> 8);
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4053      	eors	r3, r2
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <crc32+0xa4>)
 8000704:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	4053      	eors	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
	for (unsigned i = 0; i < len; i++) {
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	3301      	adds	r3, #1
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	7afb      	ldrb	r3, [r7, #11]
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	429a      	cmp	r2, r3
 800071c:	d3e9      	bcc.n	80006f2 <crc32+0x6a>
	}

	return state;
 800071e:	687b      	ldr	r3, [r7, #4]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3724      	adds	r7, #36	; 0x24
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	200001a8 	.word	0x200001a8
 8000730:	edb88320 	.word	0xedb88320

08000734 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000738:	f3bf 8f4f 	dsb	sy
}
 800073c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <__NVIC_SystemReset+0x24>)
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000746:	4904      	ldr	r1, [pc, #16]	; (8000758 <__NVIC_SystemReset+0x24>)
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <__NVIC_SystemReset+0x28>)
 800074a:	4313      	orrs	r3, r2
 800074c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800074e:	f3bf 8f4f 	dsb	sy
}
 8000752:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <__NVIC_SystemReset+0x20>
 8000758:	e000ed00 	.word	0xe000ed00
 800075c:	05fa0004 	.word	0x05fa0004

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fc71 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f853 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f913 	bl	8000998 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000772:	f003 fcd1 	bl	8004118 <MX_FATFS_Init>
  MX_SPI4_Init();
 8000776:	f000 f8b9 	bl	80008ec <MX_SPI4_Init>

    /* USER CODE BEGIN 3 */
	  // Check firmware updates.
	  //bootloader(timeout);
	#if SD_INTERFACE
	bl_fatsd(1000);
 800077a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077e:	f7ff fdff 	bl	8000380 <bl_fatsd>
	#endif

	  // Check image.
	  image_hdr_t *image_hdr = (image_hdr_t *) &(__app_start__);
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <main+0xa4>)
 8000784:	617b      	str	r3, [r7, #20]
	  uint32_t crc = image_hdr->crc;
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	613b      	str	r3, [r7, #16]

	  //pass all the flash memory addresses. //Start address is 0x08020000 (for this controller)
	  // TODO: Pass the starting flash address as parameter.
	  uint32_t flash_prog_start_add = 0x08020000 + 0x200; 		//512 is image_hdr memory space.
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <main+0xa8>)
 800078e:	60fb      	str	r3, [r7, #12]

	  // compute CRC of the programmed area
	  uint32_t sum = ~0U;
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	61fb      	str	r3, [r7, #28]
	  for (uint32_t p = 0; p < image_hdr->data_size; p += 4)
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e01a      	b.n	80007d2 <main+0x72>
	  {
		  uint32_t bytes;
		  uint32_t address = flash_prog_start_add + p;
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	4413      	add	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]

		  if(address & 3)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	f003 0303 	and.w	r3, r3, #3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d004      	beq.n	80007b8 <main+0x58>
		  {
			  printf("Error. Bad memory access.");
 80007ae:	4817      	ldr	r0, [pc, #92]	; (800080c <main+0xac>)
 80007b0:	f007 f866 	bl	8007880 <iprintf>
			  return 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	e021      	b.n	80007fc <main+0x9c>
		  }

		  //get data from flash
		  bytes = *(uint32_t *) address;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	607b      	str	r3, [r7, #4]

		  sum = crc32((uint8_t *)&bytes, sizeof(bytes), sum);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	69fa      	ldr	r2, [r7, #28]
 80007c2:	2104      	movs	r1, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5f 	bl	8000688 <crc32>
 80007ca:	61f8      	str	r0, [r7, #28]
	  for (uint32_t p = 0; p < image_hdr->data_size; p += 4)
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	3304      	adds	r3, #4
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d3df      	bcc.n	800079c <main+0x3c>
	  }
	  sum = sum ^ ~0U;
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	43db      	mvns	r3, r3
 80007e0:	61fb      	str	r3, [r7, #28]

	  if(crc != sum)
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d004      	beq.n	80007f4 <main+0x94>
	  {
	    printf("Error. Flash memory data corruption");
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <main+0xb0>)
 80007ec:	f007 f848 	bl	8007880 <iprintf>
	    return 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	e003      	b.n	80007fc <main+0x9c>
	  }

	  // Launch image.
	  image_start(image_hdr);
 80007f4:	6978      	ldr	r0, [r7, #20]
 80007f6:	f000 f9e9 	bl	8000bcc <image_start>
  {
 80007fa:	e7be      	b.n	800077a <main+0x1a>

  }
  /* USER CODE END 3 */
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08020000 	.word	0x08020000
 8000808:	08020200 	.word	0x08020200
 800080c:	080088f8 	.word	0x080088f8
 8000810:	08008914 	.word	0x08008914

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	; 0x70
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	224c      	movs	r2, #76	; 0x4c
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 f824 	bl	8007870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2220      	movs	r2, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f007 f81e 	bl	8007870 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 ff79 	bl	800172c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <SystemClock_Config+0xd0>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <SystemClock_Config+0xd0>)
 8000844:	f023 0301 	bic.w	r3, r3, #1
 8000848:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <SystemClock_Config+0xd0>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xd4>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <SystemClock_Config+0xd4>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <SystemClock_Config+0xd4>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000870:	bf00      	nop
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <SystemClock_Config+0xd4>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800087a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087e:	d1f8      	bne.n	8000872 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000884:	2301      	movs	r3, #1
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800088c:	2300      	movs	r3, #0
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	4618      	mov	r0, r3
 8000896:	f000 ff83 	bl	80017a0 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008a0:	f000 f9cc 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	233f      	movs	r3, #63	; 0x3f
 80008a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b8:	2340      	movs	r3, #64	; 0x40
 80008ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2101      	movs	r1, #1
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fb78 	bl	8001fc0 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008d6:	f000 f9b1 	bl	8000c3c <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3770      	adds	r7, #112	; 0x70
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	58000400 	.word	0x58000400
 80008e8:	58024800 	.word	0x58024800

080008ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_SPI4_Init+0xa4>)
 80008f2:	4a28      	ldr	r2, [pc, #160]	; (8000994 <MX_SPI4_Init+0xa8>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_SPI4_Init+0xa4>)
 80008f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000906:	2207      	movs	r2, #7
 8000908:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_SPI4_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000918:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800091c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000920:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000924:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_SPI4_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_SPI4_Init+0xa4>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_SPI4_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_SPI4_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000960:	2200      	movs	r2, #0
 8000962:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000966:	2200      	movs	r2, #0
 8000968:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI4_Init+0xa4>)
 800096c:	2200      	movs	r2, #0
 800096e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000972:	2200      	movs	r2, #0
 8000974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI4_Init+0xa4>)
 8000978:	2200      	movs	r2, #0
 800097a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_SPI4_Init+0xa4>)
 800097e:	f002 fef3 	bl	8003768 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000988:	f000 f958 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000c54 	.word	0x20000c54
 8000994:	40013400 	.word	0x40013400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b7f      	ldr	r3, [pc, #508]	; (8000bac <MX_GPIO_Init+0x214>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a7d      	ldr	r2, [pc, #500]	; (8000bac <MX_GPIO_Init+0x214>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b7b      	ldr	r3, [pc, #492]	; (8000bac <MX_GPIO_Init+0x214>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	61bb      	str	r3, [r7, #24]
 80009ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b77      	ldr	r3, [pc, #476]	; (8000bac <MX_GPIO_Init+0x214>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a76      	ldr	r2, [pc, #472]	; (8000bac <MX_GPIO_Init+0x214>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b73      	ldr	r3, [pc, #460]	; (8000bac <MX_GPIO_Init+0x214>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	4b70      	ldr	r3, [pc, #448]	; (8000bac <MX_GPIO_Init+0x214>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a6e      	ldr	r2, [pc, #440]	; (8000bac <MX_GPIO_Init+0x214>)
 80009f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b6c      	ldr	r3, [pc, #432]	; (8000bac <MX_GPIO_Init+0x214>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b68      	ldr	r3, [pc, #416]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	4a67      	ldr	r2, [pc, #412]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a18:	4b64      	ldr	r3, [pc, #400]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b61      	ldr	r3, [pc, #388]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	4a5f      	ldr	r2, [pc, #380]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a36:	4b5d      	ldr	r3, [pc, #372]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a44:	4b59      	ldr	r3, [pc, #356]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a58      	ldr	r2, [pc, #352]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b55      	ldr	r3, [pc, #340]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a62:	4b52      	ldr	r3, [pc, #328]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	4a50      	ldr	r2, [pc, #320]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a72:	4b4e      	ldr	r3, [pc, #312]	; (8000bac <MX_GPIO_Init+0x214>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	484a      	ldr	r0, [pc, #296]	; (8000bb0 <MX_GPIO_Init+0x218>)
 8000a86:	f000 fe37 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	4849      	ldr	r0, [pc, #292]	; (8000bb4 <MX_GPIO_Init+0x21c>)
 8000a90:	f000 fe32 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a94:	2310      	movs	r3, #16
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4841      	ldr	r0, [pc, #260]	; (8000bb0 <MX_GPIO_Init+0x218>)
 8000aac:	f000 fc74 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab6:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <MX_GPIO_Init+0x220>)
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	483d      	ldr	r0, [pc, #244]	; (8000bbc <MX_GPIO_Init+0x224>)
 8000ac6:	f000 fc67 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aca:	2332      	movs	r3, #50	; 0x32
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ada:	230b      	movs	r3, #11
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4835      	ldr	r0, [pc, #212]	; (8000bbc <MX_GPIO_Init+0x224>)
 8000ae6:	f000 fc57 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 8000aea:	2386      	movs	r3, #134	; 0x86
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afa:	230b      	movs	r3, #11
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	482e      	ldr	r0, [pc, #184]	; (8000bc0 <MX_GPIO_Init+0x228>)
 8000b06:	f000 fc47 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4827      	ldr	r0, [pc, #156]	; (8000bc4 <MX_GPIO_Init+0x22c>)
 8000b28:	f000 fc36 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <MX_GPIO_Init+0x230>)
 8000b4a:	f000 fc25 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b4e:	2340      	movs	r3, #64	; 0x40
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <MX_GPIO_Init+0x21c>)
 8000b66:	f000 fc17 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_GPIO_Init+0x21c>)
 8000b7e:	f000 fc0b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b94:	230b      	movs	r3, #11
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_GPIO_Init+0x21c>)
 8000ba0:	f000 fbfa 	bl	8001398 <HAL_GPIO_Init>

}
 8000ba4:	bf00      	nop
 8000ba6:	3730      	adds	r7, #48	; 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	58021000 	.word	0x58021000
 8000bb4:	58021800 	.word	0x58021800
 8000bb8:	11110000 	.word	0x11110000
 8000bbc:	58020800 	.word	0x58020800
 8000bc0:	58020000 	.word	0x58020000
 8000bc4:	58020400 	.word	0x58020400
 8000bc8:	58020c00 	.word	0x58020c00

08000bcc <image_start>:

/* USER CODE BEGIN 4 */
void image_start(const image_hdr_t *image_hdr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	uint32_t jumpAddr;
	ptrF Jump_To_Application;

	// check if available image in Flash.
	uint32_t vector_add_offset = (uint32_t)image_hdr + (uint32_t)image_hdr->vector_addr;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 2023 	ldr.w	r2, [r3, #35]	; 0x23
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	617b      	str	r3, [r7, #20]

	if(((*(uint32_t*) vector_add_offset) & 0x2FFE0000) == 0x20020000)		//0x20020000 &
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <image_start+0x60>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <image_start+0x64>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d115      	bne.n	8000c1a <image_start+0x4e>
	{
		// loaded image info.
		printf("Image start... \r\n");
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <image_start+0x68>)
 8000bf0:	f006 fecc 	bl	800798c <puts>
		HAL_Delay(100);
 8000bf4:	2064      	movs	r0, #100	; 0x64
 8000bf6:	f000 fabb 	bl	8001170 <HAL_Delay>

		//Jump to firmware.
		jumpAddr = *(uint32_t*)(vector_add_offset + 4);
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	613b      	str	r3, [r7, #16]
		Jump_To_Application = (ptrF)jumpAddr;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	60fb      	str	r3, [r7, #12]

		//Initialize firmware stack pointer.
		__set_MSP(*(uint32_t*)vector_add_offset);
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	f383 8808 	msr	MSP, r3
}
 8000c12:	bf00      	nop
		Jump_To_Application();
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4798      	blx	r3
		while(1)
		{
			NVIC_SystemReset();
		}
	}
}
 8000c18:	e004      	b.n	8000c24 <image_start+0x58>
		printf("No firmware loaded \r\n");
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <image_start+0x6c>)
 8000c1c:	f006 feb6 	bl	800798c <puts>
			NVIC_SystemReset();
 8000c20:	f7ff fd88 	bl	8000734 <__NVIC_SystemReset>
}
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2ffe0000 	.word	0x2ffe0000
 8000c30:	20020000 	.word	0x20020000
 8000c34:	08008938 	.word	0x08008938
 8000c38:	0800894c 	.word	0x0800894c

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_MspInit+0x30>)
 8000c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c54:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x30>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x30>)
 8000c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	58024400 	.word	0x58024400

08000c7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0b8      	sub	sp, #224	; 0xe0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	22bc      	movs	r2, #188	; 0xbc
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 fde7 	bl	8007870 <memset>
  if(hspi->Instance==SPI4)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <HAL_SPI_MspInit+0xbc>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d141      	bne.n	8000d30 <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fcb0 	bl	8002620 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000cc6:	f7ff ffb9 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_SPI_MspInit+0xc0>)
 8000ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <HAL_SPI_MspInit+0xc0>)
 8000cd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_SPI_MspInit+0xc0>)
 8000cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_SPI_MspInit+0xc0>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <HAL_SPI_MspInit+0xc0>)
 8000cf0:	f043 0310 	orr.w	r3, r3, #16
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_SPI_MspInit+0xc0>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_SPI_MspInit+0xc4>)
 8000d2c:	f000 fb34 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	37e0      	adds	r7, #224	; 0xe0
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013400 	.word	0x40013400
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58021000 	.word	0x58021000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f9ce 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e00a      	b.n	8000dc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000daa:	f3af 8000 	nop.w
 8000dae:	4601      	mov	r1, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf0      	blt.n	8000daa <_read+0x12>
	}

return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e009      	b.n	8000df8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbf1      	blt.n	8000de4 <_write+0x12>
	}
	return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_close>:

int _close(int file)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	return -1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e32:	605a      	str	r2, [r3, #4]
	return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_isatty>:

int _isatty(int file)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <_sbrk+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <_sbrk+0x60>)
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <_sbrk+0x64>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <_sbrk+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d207      	bcs.n	8000eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea4:	f006 fcba 	bl	800781c <__errno>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	220c      	movs	r2, #12
 8000eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	e009      	b.n	8000ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <_sbrk+0x64>)
 8000ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20020000 	.word	0x20020000
 8000ed4:	00000400 	.word	0x00000400
 8000ed8:	200005a8 	.word	0x200005a8
 8000edc:	20001168 	.word	0x20001168

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <SystemInit+0xec>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a38      	ldr	r2, [pc, #224]	; (8000fcc <SystemInit+0xec>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ef4:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <SystemInit+0xf0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 030f 	and.w	r3, r3, #15
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	d807      	bhi.n	8000f10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f00:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <SystemInit+0xf0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f023 030f 	bic.w	r3, r3, #15
 8000f08:	4a31      	ldr	r2, [pc, #196]	; (8000fd0 <SystemInit+0xf0>)
 8000f0a:	f043 0307 	orr.w	r3, r3, #7
 8000f0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <SystemInit+0xf4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <SystemInit+0xf4>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <SystemInit+0xf4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <SystemInit+0xf4>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	492b      	ldr	r1, [pc, #172]	; (8000fd4 <SystemInit+0xf4>)
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <SystemInit+0xf8>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <SystemInit+0xf0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <SystemInit+0xf0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 030f 	bic.w	r3, r3, #15
 8000f42:	4a23      	ldr	r2, [pc, #140]	; (8000fd0 <SystemInit+0xf0>)
 8000f44:	f043 0307 	orr.w	r3, r3, #7
 8000f48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <SystemInit+0xf4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <SystemInit+0xf4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <SystemInit+0xf4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <SystemInit+0xf4>)
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <SystemInit+0xfc>)
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <SystemInit+0xf4>)
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <SystemInit+0x100>)
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <SystemInit+0xf4>)
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <SystemInit+0x104>)
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <SystemInit+0xf4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <SystemInit+0xf4>)
 8000f76:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <SystemInit+0x104>)
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <SystemInit+0xf4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <SystemInit+0xf4>)
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <SystemInit+0x104>)
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <SystemInit+0xf4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <SystemInit+0xf4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <SystemInit+0xf4>)
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <SystemInit+0xf4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <SystemInit+0x108>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <SystemInit+0x10c>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000faa:	d202      	bcs.n	8000fb2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <SystemInit+0x110>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <SystemInit+0x114>)
 8000fb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fb8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SystemInit+0xec>)
 8000fbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	52002000 	.word	0x52002000
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fdc:	02020200 	.word	0x02020200
 8000fe0:	01ff0000 	.word	0x01ff0000
 8000fe4:	01010280 	.word	0x01010280
 8000fe8:	5c001000 	.word	0x5c001000
 8000fec:	ffff0000 	.word	0xffff0000
 8000ff0:	51008108 	.word	0x51008108
 8000ff4:	52004000 	.word	0x52004000

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ffc:	f7ff ff70 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	; (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001026:	f006 fbff 	bl	8007828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff fb99 	bl	8000760 <main>
  bx  lr
 800102e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800103c:	08008eac 	.word	0x08008eac
  ldr r2, =_sbss
 8001040:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001044:	20001164 	.word	0x20001164

08001048 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC3_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f96e 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001058:	f001 f968 	bl	800232c <HAL_RCC_GetSysClockFreq>
 800105c:	4602      	mov	r2, r0
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_Init+0x68>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	4913      	ldr	r1, [pc, #76]	; (80010b8 <HAL_Init+0x6c>)
 800106a:	5ccb      	ldrb	r3, [r1, r3]
 800106c:	f003 031f 	and.w	r3, r3, #31
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_Init+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_Init+0x6c>)
 8001080:	5cd3      	ldrb	r3, [r2, r3]
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_Init+0x70>)
 800108e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <HAL_Init+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001096:	2000      	movs	r0, #0
 8001098:	f000 f814 	bl	80010c4 <HAL_InitTick>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e002      	b.n	80010ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010a6:	f7ff fdcf 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58024400 	.word	0x58024400
 80010b8:	080089bc 	.word	0x080089bc
 80010bc:	20000004 	.word	0x20000004
 80010c0:	20000000 	.word	0x20000000

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e021      	b.n	800111c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_InitTick+0x64>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_InitTick+0x60>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f945 	bl	800137e <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f91d 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x68>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000000c 	.word	0x2000000c
 8001128:	20000000 	.word	0x20000000
 800112c:	20000008 	.word	0x20000008

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2000000c 	.word	0x2000000c
 8001154:	20000cdc 	.word	0x20000cdc

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000cdc 	.word	0x20000cdc

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000000c 	.word	0x2000000c

080011b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetREVID+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0c1b      	lsrs	r3, r3, #16
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	5c001000 	.word	0x5c001000

080011d0 <__NVIC_SetPriorityGrouping>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <__NVIC_SetPriorityGrouping+0x40>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x40>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00
 8001214:	05fa0000 	.word	0x05fa0000

08001218 <__NVIC_GetPriorityGrouping>:
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_SetPriority>:
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff47 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff5e 	bl	8001218 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff90 	bl	8001288 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5f 	bl	8001234 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffb2 	bl	80012f0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013a6:	4b89      	ldr	r3, [pc, #548]	; (80015cc <HAL_GPIO_Init+0x234>)
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013aa:	e194      	b.n	80016d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8186 	beq.w	80016d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d00b      	beq.n	80013e4 <HAL_GPIO_Init+0x4c>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d007      	beq.n	80013e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d8:	2b11      	cmp	r3, #17
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b12      	cmp	r3, #18
 80013e2:	d130      	bne.n	8001446 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800141a:	2201      	movs	r2, #1
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	f003 0201 	and.w	r2, r3, #1
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0xee>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b12      	cmp	r3, #18
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	69b9      	ldr	r1, [r7, #24]
 80014ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0203 	and.w	r2, r3, #3
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80e0 	beq.w	80016d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <HAL_GPIO_Init+0x238>)
 8001512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001516:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <HAL_GPIO_Init+0x238>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <HAL_GPIO_Init+0x238>)
 8001522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a29      	ldr	r2, [pc, #164]	; (80015d4 <HAL_GPIO_Init+0x23c>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <HAL_GPIO_Init+0x240>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d052      	beq.n	8001600 <HAL_GPIO_Init+0x268>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <HAL_GPIO_Init+0x244>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d031      	beq.n	80015c6 <HAL_GPIO_Init+0x22e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <HAL_GPIO_Init+0x248>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d02b      	beq.n	80015c2 <HAL_GPIO_Init+0x22a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_GPIO_Init+0x24c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d025      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_GPIO_Init+0x250>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01f      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <HAL_GPIO_Init+0x254>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <HAL_GPIO_Init+0x258>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_GPIO_Init+0x25c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_GPIO_Init+0x260>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_GPIO_Init+0x264>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x20e>
 80015a2:	2309      	movs	r3, #9
 80015a4:	e02d      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015a6:	230a      	movs	r3, #10
 80015a8:	e02b      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015aa:	2308      	movs	r3, #8
 80015ac:	e029      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015ae:	2307      	movs	r3, #7
 80015b0:	e027      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015b2:	2306      	movs	r3, #6
 80015b4:	e025      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015b6:	2305      	movs	r3, #5
 80015b8:	e023      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e021      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015be:	2303      	movs	r3, #3
 80015c0:	e01f      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e01d      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e01b      	b.n	8001602 <HAL_GPIO_Init+0x26a>
 80015ca:	bf00      	nop
 80015cc:	58000080 	.word	0x58000080
 80015d0:	58024400 	.word	0x58024400
 80015d4:	58000400 	.word	0x58000400
 80015d8:	58020000 	.word	0x58020000
 80015dc:	58020400 	.word	0x58020400
 80015e0:	58020800 	.word	0x58020800
 80015e4:	58020c00 	.word	0x58020c00
 80015e8:	58021000 	.word	0x58021000
 80015ec:	58021400 	.word	0x58021400
 80015f0:	58021800 	.word	0x58021800
 80015f4:	58021c00 	.word	0x58021c00
 80015f8:	58022000 	.word	0x58022000
 80015fc:	58022400 	.word	0x58022400
 8001600:	2300      	movs	r3, #0
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	f002 0203 	and.w	r2, r2, #3
 8001608:	0092      	lsls	r2, r2, #2
 800160a:	4093      	lsls	r3, r2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001612:	4938      	ldr	r1, [pc, #224]	; (80016f4 <HAL_GPIO_Init+0x35c>)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800169a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	3301      	adds	r3, #1
 80016d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f ae63 	bne.w	80013ac <HAL_GPIO_Init+0x14>
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3724      	adds	r7, #36	; 0x24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	58000400 	.word	0x58000400

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001714:	e003      	b.n	800171e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	041a      	lsls	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	619a      	str	r2, [r3, #24]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_PWREx_ConfigSupply+0x70>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b04      	cmp	r3, #4
 800173e:	d00a      	beq.n	8001756 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_PWREx_ConfigSupply+0x70>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	429a      	cmp	r2, r3
 800174c:	d001      	beq.n	8001752 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e01f      	b.n	8001792 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e01d      	b.n	8001792 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_PWREx_ConfigSupply+0x70>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f023 0207 	bic.w	r2, r3, #7
 800175e:	490f      	ldr	r1, [pc, #60]	; (800179c <HAL_PWREx_ConfigSupply+0x70>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4313      	orrs	r3, r2
 8001764:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001766:	f7ff fcf7 	bl	8001158 <HAL_GetTick>
 800176a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800176c:	e009      	b.n	8001782 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800176e:	f7ff fcf3 	bl	8001158 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800177c:	d901      	bls.n	8001782 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e007      	b.n	8001792 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_PWREx_ConfigSupply+0x70>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800178e:	d1ee      	bne.n	800176e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	58024800 	.word	0x58024800

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e3ff      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c0:	4b99      	ldr	r3, [pc, #612]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017ca:	4b97      	ldr	r3, [pc, #604]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d007      	beq.n	80017e6 <HAL_RCC_OscConfig+0x46>
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	2b18      	cmp	r3, #24
 80017da:	d110      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d10b      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	4b90      	ldr	r3, [pc, #576]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d06c      	beq.n	80018cc <HAL_RCC_OscConfig+0x12c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d168      	bne.n	80018cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e3d9      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x76>
 8001808:	4b87      	ldr	r3, [pc, #540]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a86      	ldr	r2, [pc, #536]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b82      	ldr	r3, [pc, #520]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a81      	ldr	r2, [pc, #516]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7e      	ldr	r2, [pc, #504]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xbc>
 8001842:	4b79      	ldr	r3, [pc, #484]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a78      	ldr	r2, [pc, #480]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a75      	ldr	r2, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 800185c:	4b72      	ldr	r3, [pc, #456]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a71      	ldr	r2, [pc, #452]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fc6c 	bl	8001158 <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fc68 	bl	8001158 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e38d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001896:	4b64      	ldr	r3, [pc, #400]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe4>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fc58 	bl	8001158 <HAL_GetTick>
 80018a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fc54 	bl	8001158 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e379      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018be:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x10c>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80ae 	beq.w	8001a38 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018dc:	4b52      	ldr	r3, [pc, #328]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_RCC_OscConfig+0x162>
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2b18      	cmp	r3, #24
 80018f6:	d13a      	bne.n	800196e <HAL_RCC_OscConfig+0x1ce>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d135      	bne.n	800196e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001902:	4b49      	ldr	r3, [pc, #292]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x17a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e34b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	f7ff fc4d 	bl	80011b8 <HAL_GetREVID>
 800191e:	4603      	mov	r3, r0
 8001920:	f241 0203 	movw	r2, #4099	; 0x1003
 8001924:	4293      	cmp	r3, r2
 8001926:	d817      	bhi.n	8001958 <HAL_RCC_OscConfig+0x1b8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2b40      	cmp	r3, #64	; 0x40
 800192e:	d108      	bne.n	8001942 <HAL_RCC_OscConfig+0x1a2>
 8001930:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001938:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800193a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001940:	e07a      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	031b      	lsls	r3, r3, #12
 8001950:	4935      	ldr	r1, [pc, #212]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001956:	e06f      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	4930      	ldr	r1, [pc, #192]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196c:	e064      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d045      	beq.n	8001a02 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0219 	bic.w	r2, r3, #25
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	4929      	ldr	r1, [pc, #164]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fbe6 	bl	8001158 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001990:	f7ff fbe2 	bl	8001158 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e307      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ae:	f7ff fc03 	bl	80011b8 <HAL_GetREVID>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d817      	bhi.n	80019ec <HAL_RCC_OscConfig+0x24c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b40      	cmp	r3, #64	; 0x40
 80019c2:	d108      	bne.n	80019d6 <HAL_RCC_OscConfig+0x236>
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d2:	6053      	str	r3, [r2, #4]
 80019d4:	e030      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	031b      	lsls	r3, r3, #12
 80019e4:	4910      	ldr	r1, [pc, #64]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
 80019ea:	e025      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	490b      	ldr	r1, [pc, #44]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
 8001a00:	e01a      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fba3 	bl	8001158 <HAL_GetTick>
 8001a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff fb9f 	bl	8001158 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d903      	bls.n	8001a2c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e2c4      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
 8001a28:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a2c:	4ba4      	ldr	r3, [pc, #656]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ee      	bne.n	8001a16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80a9 	beq.w	8001b98 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4b9e      	ldr	r3, [pc, #632]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a50:	4b9b      	ldr	r3, [pc, #620]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d007      	beq.n	8001a6c <HAL_RCC_OscConfig+0x2cc>
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b18      	cmp	r3, #24
 8001a60:	d13a      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x338>
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d135      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a6c:	4b94      	ldr	r3, [pc, #592]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_OscConfig+0x2e4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b80      	cmp	r3, #128	; 0x80
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e296      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a84:	f7ff fb98 	bl	80011b8 <HAL_GetREVID>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d817      	bhi.n	8001ac2 <HAL_RCC_OscConfig+0x322>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	d108      	bne.n	8001aac <HAL_RCC_OscConfig+0x30c>
 8001a9a:	4b89      	ldr	r3, [pc, #548]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001aa2:	4a87      	ldr	r2, [pc, #540]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001aa8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aaa:	e075      	b.n	8001b98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aac:	4b84      	ldr	r3, [pc, #528]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	069b      	lsls	r3, r3, #26
 8001aba:	4981      	ldr	r1, [pc, #516]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ac0:	e06a      	b.n	8001b98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ac2:	4b7f      	ldr	r3, [pc, #508]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	061b      	lsls	r3, r3, #24
 8001ad0:	497b      	ldr	r1, [pc, #492]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ad6:	e05f      	b.n	8001b98 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d042      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ae0:	4b77      	ldr	r3, [pc, #476]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a76      	ldr	r2, [pc, #472]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fb34 	bl	8001158 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001af4:	f7ff fb30 	bl	8001158 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e255      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b06:	4b6e      	ldr	r3, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b12:	f7ff fb51 	bl	80011b8 <HAL_GetREVID>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d817      	bhi.n	8001b50 <HAL_RCC_OscConfig+0x3b0>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d108      	bne.n	8001b3a <HAL_RCC_OscConfig+0x39a>
 8001b28:	4b65      	ldr	r3, [pc, #404]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b30:	4a63      	ldr	r2, [pc, #396]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b36:	6053      	str	r3, [r2, #4]
 8001b38:	e02e      	b.n	8001b98 <HAL_RCC_OscConfig+0x3f8>
 8001b3a:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	069b      	lsls	r3, r3, #26
 8001b48:	495d      	ldr	r1, [pc, #372]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
 8001b4e:	e023      	b.n	8001b98 <HAL_RCC_OscConfig+0x3f8>
 8001b50:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	4958      	ldr	r1, [pc, #352]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
 8001b64:	e018      	b.n	8001b98 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b66:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a55      	ldr	r2, [pc, #340]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff faf1 	bl	8001158 <HAL_GetTick>
 8001b76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b7a:	f7ff faed 	bl	8001158 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e212      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b8c:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d036      	beq.n	8001c12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d019      	beq.n	8001be0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb0:	4a43      	ldr	r2, [pc, #268]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff face 	bl	8001158 <HAL_GetTick>
 8001bbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff faca 	bl	8001158 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1ef      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x420>
 8001bde:	e018      	b.n	8001c12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	4a36      	ldr	r2, [pc, #216]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff fab4 	bl	8001158 <HAL_GetTick>
 8001bf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fab0 	bl	8001158 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1d5      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d036      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d019      	beq.n	8001c5a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c32:	f7ff fa91 	bl	8001158 <HAL_GetTick>
 8001c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c3a:	f7ff fa8d 	bl	8001158 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e1b2      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x49a>
 8001c58:	e018      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fa77 	bl	8001158 <HAL_GetTick>
 8001c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c6e:	f7ff fa73 	bl	8001158 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e198      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_RCC_OscConfig+0x520>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 8085 	beq.w	8001da4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_OscConfig+0x524>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_RCC_OscConfig+0x524>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ca6:	f7ff fa57 	bl	8001158 <HAL_GetTick>
 8001caa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cac:	e00c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cae:	f7ff fa53 	bl	8001158 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b64      	cmp	r3, #100	; 0x64
 8001cba:	d905      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e178      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cc8:	4b96      	ldr	r3, [pc, #600]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ec      	beq.n	8001cae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x54a>
 8001cdc:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a91      	ldr	r2, [pc, #580]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	e02d      	b.n	8001d46 <HAL_RCC_OscConfig+0x5a6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x56c>
 8001cf2:	4b8d      	ldr	r3, [pc, #564]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	4a8c      	ldr	r2, [pc, #560]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfe:	4b8a      	ldr	r3, [pc, #552]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a89      	ldr	r2, [pc, #548]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	e01c      	b.n	8001d46 <HAL_RCC_OscConfig+0x5a6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x58e>
 8001d14:	4b84      	ldr	r3, [pc, #528]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a83      	ldr	r2, [pc, #524]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	4b81      	ldr	r3, [pc, #516]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a80      	ldr	r2, [pc, #512]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x5a6>
 8001d2e:	4b7e      	ldr	r3, [pc, #504]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a7d      	ldr	r2, [pc, #500]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3a:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a7a      	ldr	r2, [pc, #488]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d015      	beq.n	8001d7a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fa03 	bl	8001158 <HAL_GetTick>
 8001d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff f9ff 	bl	8001158 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e122      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d6c:	4b6e      	ldr	r3, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ee      	beq.n	8001d56 <HAL_RCC_OscConfig+0x5b6>
 8001d78:	e014      	b.n	8001da4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f9ed 	bl	8001158 <HAL_GetTick>
 8001d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff f9e9 	bl	8001158 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e10c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d98:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ee      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8101 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dae:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001db6:	2b18      	cmp	r3, #24
 8001db8:	f000 80bc 	beq.w	8001f34 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	f040 8095 	bne.w	8001ef0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f9c1 	bl	8001158 <HAL_GetTick>
 8001dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff f9bd 	bl	8001158 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0e2      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dec:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_RCC_OscConfig+0x78c>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	4946      	ldr	r1, [pc, #280]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	628b      	str	r3, [r1, #40]	; 0x28
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	3b01      	subs	r3, #1
 8001e22:	025b      	lsls	r3, r3, #9
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	041b      	lsls	r3, r3, #16
 8001e30:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e42:	4939      	ldr	r1, [pc, #228]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e48:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	4a36      	ldr	r2, [pc, #216]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e54:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_RCC_OscConfig+0x790>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	4931      	ldr	r1, [pc, #196]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e68:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f023 020c 	bic.w	r2, r3, #12
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	492c      	ldr	r1, [pc, #176]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f023 0202 	bic.w	r2, r3, #2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4928      	ldr	r1, [pc, #160]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ea4:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f946 	bl	8001158 <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f942 	bl	8001158 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e067      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x730>
 8001eee:	e05f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f92c 	bl	8001158 <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff f928 	bl	8001158 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e04d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x764>
 8001f22:	e045      	b.n	8001fb0 <HAL_RCC_OscConfig+0x810>
 8001f24:	58024800 	.word	0x58024800
 8001f28:	58024400 	.word	0x58024400
 8001f2c:	fffffc0c 	.word	0xfffffc0c
 8001f30:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x81c>)
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_RCC_OscConfig+0x81c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d031      	beq.n	8001fac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f003 0203 	and.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d12a      	bne.n	8001fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d122      	bne.n	8001fac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d11a      	bne.n	8001fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	0a5b      	lsrs	r3, r3, #9
 8001f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d111      	bne.n	8001fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d108      	bne.n	8001fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	0e1b      	lsrs	r3, r3, #24
 8001f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3730      	adds	r7, #48	; 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	58024400 	.word	0x58024400

08001fc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e19c      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b8a      	ldr	r3, [pc, #552]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b87      	ldr	r3, [pc, #540]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 020f 	bic.w	r2, r3, #15
 8001fea:	4985      	ldr	r1, [pc, #532]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b83      	ldr	r3, [pc, #524]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e184      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d010      	beq.n	8002032 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	4b7b      	ldr	r3, [pc, #492]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800201c:	429a      	cmp	r2, r3
 800201e:	d908      	bls.n	8002032 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002020:	4b78      	ldr	r3, [pc, #480]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	4975      	ldr	r1, [pc, #468]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800202e:	4313      	orrs	r3, r2
 8002030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	4b70      	ldr	r3, [pc, #448]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800204a:	429a      	cmp	r2, r3
 800204c:	d908      	bls.n	8002060 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800204e:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	496a      	ldr	r1, [pc, #424]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800205c:	4313      	orrs	r3, r2
 800205e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002078:	429a      	cmp	r2, r3
 800207a:	d908      	bls.n	800208e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800207c:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	495e      	ldr	r1, [pc, #376]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800208a:	4313      	orrs	r3, r2
 800208c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d010      	beq.n	80020bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69da      	ldr	r2, [r3, #28]
 800209e:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d908      	bls.n	80020bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020aa:	4b56      	ldr	r3, [pc, #344]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4953      	ldr	r1, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d010      	beq.n	80020ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d908      	bls.n	80020ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f023 020f 	bic.w	r2, r3, #15
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4947      	ldr	r1, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d055      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4940      	ldr	r1, [pc, #256]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002104:	4313      	orrs	r3, r2
 8002106:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d107      	bne.n	8002120 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d121      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0f6      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d107      	bne.n	8002138 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d115      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0ea      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0de      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d6      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002160:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f023 0207 	bic.w	r2, r3, #7
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4925      	ldr	r1, [pc, #148]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 800216e:	4313      	orrs	r3, r2
 8002170:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7fe fff1 	bl	8001158 <HAL_GetTick>
 8002176:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002178:	e00a      	b.n	8002190 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217a:	f7fe ffed 	bl	8001158 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0be      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	429a      	cmp	r2, r3
 80021a0:	d1eb      	bne.n	800217a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d208      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f023 020f 	bic.w	r2, r3, #15
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d214      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 020f 	bic.w	r2, r3, #15
 80021e6:	4906      	ldr	r1, [pc, #24]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <HAL_RCC_ClockConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e086      	b.n	800230e <HAL_RCC_ClockConfig+0x34e>
 8002200:	52002000 	.word	0x52002000
 8002204:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d010      	beq.n	8002236 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002220:	429a      	cmp	r2, r3
 8002222:	d208      	bcs.n	8002236 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002224:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	4939      	ldr	r1, [pc, #228]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002232:	4313      	orrs	r3, r2
 8002234:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800224e:	429a      	cmp	r2, r3
 8002250:	d208      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	492e      	ldr	r1, [pc, #184]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002260:	4313      	orrs	r3, r2
 8002262:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d010      	beq.n	8002292 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800227c:	429a      	cmp	r2, r3
 800227e:	d208      	bcs.n	8002292 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4922      	ldr	r1, [pc, #136]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 800228e:	4313      	orrs	r3, r2
 8002290:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d010      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d208      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4917      	ldr	r1, [pc, #92]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022c0:	f000 f834 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	4912      	ldr	r1, [pc, #72]	; (800231c <HAL_RCC_ClockConfig+0x35c>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_RCC_ClockConfig+0x358>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_RCC_ClockConfig+0x35c>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_RCC_ClockConfig+0x360>)
 80022f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x364>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_RCC_ClockConfig+0x368>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fede 	bl	80010c4 <HAL_InitTick>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	58024400 	.word	0x58024400
 800231c:	080089bc 	.word	0x080089bc
 8002320:	20000004 	.word	0x20000004
 8002324:	20000000 	.word	0x20000000
 8002328:	20000008 	.word	0x20000008

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002332:	4bb3      	ldr	r3, [pc, #716]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800233a:	2b18      	cmp	r3, #24
 800233c:	f200 8155 	bhi.w	80025ea <HAL_RCC_GetSysClockFreq+0x2be>
 8002340:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	080023ad 	.word	0x080023ad
 800234c:	080025eb 	.word	0x080025eb
 8002350:	080025eb 	.word	0x080025eb
 8002354:	080025eb 	.word	0x080025eb
 8002358:	080025eb 	.word	0x080025eb
 800235c:	080025eb 	.word	0x080025eb
 8002360:	080025eb 	.word	0x080025eb
 8002364:	080025eb 	.word	0x080025eb
 8002368:	080023d3 	.word	0x080023d3
 800236c:	080025eb 	.word	0x080025eb
 8002370:	080025eb 	.word	0x080025eb
 8002374:	080025eb 	.word	0x080025eb
 8002378:	080025eb 	.word	0x080025eb
 800237c:	080025eb 	.word	0x080025eb
 8002380:	080025eb 	.word	0x080025eb
 8002384:	080025eb 	.word	0x080025eb
 8002388:	080023d9 	.word	0x080023d9
 800238c:	080025eb 	.word	0x080025eb
 8002390:	080025eb 	.word	0x080025eb
 8002394:	080025eb 	.word	0x080025eb
 8002398:	080025eb 	.word	0x080025eb
 800239c:	080025eb 	.word	0x080025eb
 80023a0:	080025eb 	.word	0x080025eb
 80023a4:	080025eb 	.word	0x080025eb
 80023a8:	080023df 	.word	0x080023df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023ac:	4b94      	ldr	r3, [pc, #592]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023b8:	4b91      	ldr	r3, [pc, #580]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	4a90      	ldr	r2, [pc, #576]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023ca:	e111      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023cc:	4b8d      	ldr	r3, [pc, #564]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023ce:	61bb      	str	r3, [r7, #24]
    break;
 80023d0:	e10e      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023d2:	4b8d      	ldr	r3, [pc, #564]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023d4:	61bb      	str	r3, [r7, #24]
    break;
 80023d6:	e10b      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023d8:	4b8c      	ldr	r3, [pc, #560]	; (800260c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023da:	61bb      	str	r3, [r7, #24]
    break;
 80023dc:	e108      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023de:	4b88      	ldr	r3, [pc, #544]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023e8:	4b85      	ldr	r3, [pc, #532]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023f4:	4b82      	ldr	r3, [pc, #520]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023fe:	4b80      	ldr	r3, [pc, #512]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002416:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80e1 	beq.w	80025e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b02      	cmp	r3, #2
 8002426:	f000 8083 	beq.w	8002530 <HAL_RCC_GetSysClockFreq+0x204>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b02      	cmp	r3, #2
 800242e:	f200 80a1 	bhi.w	8002574 <HAL_RCC_GetSysClockFreq+0x248>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x114>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d056      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800243e:	e099      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002440:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02d      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800244c:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	4a6b      	ldr	r2, [pc, #428]	; (8002604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002476:	4b62      	ldr	r3, [pc, #392]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002486:	ed97 6a02 	vldr	s12, [r7, #8]
 800248a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800248e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800249a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024a6:	e087      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002614 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ba:	4b51      	ldr	r3, [pc, #324]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024ea:	e065      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024fe:	4b40      	ldr	r3, [pc, #256]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800250e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002512:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800251a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800251e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800252e:	e043      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800261c <HAL_RCC_GetSysClockFreq+0x2f0>
 800253e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002552:	ed97 6a02 	vldr	s12, [r7, #8]
 8002556:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800255a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800255e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002572:	e021      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002618 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002596:	ed97 6a02 	vldr	s12, [r7, #8]
 800259a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800259e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	0a5b      	lsrs	r3, r3, #9
 80025be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c2:	3301      	adds	r3, #1
 80025c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80025d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025dc:	ee17 3a90 	vmov	r3, s15
 80025e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    break;
 80025e8:	e002      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025ec:	61bb      	str	r3, [r7, #24]
    break;
 80025ee:	bf00      	nop
  }

  return sysclockfreq;
 80025f0:	69bb      	ldr	r3, [r7, #24]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	58024400 	.word	0x58024400
 8002604:	03d09000 	.word	0x03d09000
 8002608:	003d0900 	.word	0x003d0900
 800260c:	017d7840 	.word	0x017d7840
 8002610:	46000000 	.word	0x46000000
 8002614:	4c742400 	.word	0x4c742400
 8002618:	4a742400 	.word	0x4a742400
 800261c:	4bbebc20 	.word	0x4bbebc20

08002620 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002628:	2300      	movs	r3, #0
 800262a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800262c:	2300      	movs	r3, #0
 800262e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d03f      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002644:	d02a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002646:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800264a:	d824      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800264c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002650:	d018      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002656:	d81e      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800265c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002660:	d007      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002662:	e018      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002664:	4bab      	ldr	r3, [pc, #684]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	4aaa      	ldr	r2, [pc, #680]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800266a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002670:	e015      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	2102      	movs	r1, #2
 8002678:	4618      	mov	r0, r3
 800267a:	f000 ff11 	bl	80034a0 <RCCEx_PLL2_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002682:	e00c      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3324      	adds	r3, #36	; 0x24
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f000 ffba 	bl	8003604 <RCCEx_PLL3_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002694:	e003      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
      break;
 800269a:	e000      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800269c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026a4:	4b9b      	ldr	r3, [pc, #620]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b0:	4998      	ldr	r1, [pc, #608]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	650b      	str	r3, [r1, #80]	; 0x50
 80026b6:	e001      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d03d      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d826      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026ed 	.word	0x080026ed
 80026dc:	080026fb 	.word	0x080026fb
 80026e0:	0800270d 	.word	0x0800270d
 80026e4:	08002725 	.word	0x08002725
 80026e8:	08002725 	.word	0x08002725
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ec:	4b89      	ldr	r3, [pc, #548]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	4a88      	ldr	r2, [pc, #544]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026f8:	e015      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fecd 	bl	80034a0 <RCCEx_PLL2_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800270a:	e00c      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3324      	adds	r3, #36	; 0x24
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f000 ff76 	bl	8003604 <RCCEx_PLL3_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800271c:	e003      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
      break;
 8002722:	e000      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800272c:	4b79      	ldr	r3, [pc, #484]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800272e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002730:	f023 0207 	bic.w	r2, r3, #7
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	4976      	ldr	r1, [pc, #472]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	650b      	str	r3, [r1, #80]	; 0x50
 800273e:	e001      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274c:	2b00      	cmp	r3, #0
 800274e:	d042      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002758:	d02b      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800275a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275e:	d825      	bhi.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002760:	2bc0      	cmp	r3, #192	; 0xc0
 8002762:	d028      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002764:	2bc0      	cmp	r3, #192	; 0xc0
 8002766:	d821      	bhi.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002768:	2b80      	cmp	r3, #128	; 0x80
 800276a:	d016      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800276c:	2b80      	cmp	r3, #128	; 0x80
 800276e:	d81d      	bhi.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d007      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002778:	e018      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800277a:	4b66      	ldr	r3, [pc, #408]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	4a65      	ldr	r2, [pc, #404]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002786:	e017      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fe86 	bl	80034a0 <RCCEx_PLL2_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002798:	e00e      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3324      	adds	r3, #36	; 0x24
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 ff2f 	bl	8003604 <RCCEx_PLL3_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027aa:	e005      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
      break;
 80027b0:	e002      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80027b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027be:	4b55      	ldr	r3, [pc, #340]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4952      	ldr	r1, [pc, #328]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	650b      	str	r3, [r1, #80]	; 0x50
 80027d0:	e001      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d049      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027ec:	d030      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80027ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027f2:	d82a      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80027f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027f8:	d02c      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80027fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027fe:	d824      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002804:	d018      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280a:	d81e      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002810:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002814:	d007      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002816:	e018      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002818:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	4a3d      	ldr	r2, [pc, #244]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800281e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002824:	e017      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fe37 	bl	80034a0 <RCCEx_PLL2_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002836:	e00e      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3324      	adds	r3, #36	; 0x24
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fee0 	bl	8003604 <RCCEx_PLL3_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002848:	e005      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002850:	bf00      	nop
 8002852:	e000      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800286a:	492a      	ldr	r1, [pc, #168]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	658b      	str	r3, [r1, #88]	; 0x58
 8002870:	e001      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287e:	2b00      	cmp	r3, #0
 8002880:	d04c      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800288c:	d030      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800288e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002892:	d82a      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002894:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002898:	d02c      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800289a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800289e:	d824      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028a4:	d018      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80028a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028aa:	d81e      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b4:	d007      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80028b6:	e018      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028c4:	e017      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fde7 	bl	80034a0 <RCCEx_PLL2_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028d6:	e00e      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3324      	adds	r3, #36	; 0x24
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fe90 	bl	8003604 <RCCEx_PLL3_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028e8:	e005      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
      break;
 80028ee:	e002      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80028f0:	bf00      	nop
 80028f2:	e000      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80028f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800290a:	4902      	ldr	r1, [pc, #8]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	658b      	str	r3, [r1, #88]	; 0x58
 8002910:	e004      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002912:	bf00      	nop
 8002914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d032      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	2b30      	cmp	r3, #48	; 0x30
 800292e:	d01c      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002930:	2b30      	cmp	r3, #48	; 0x30
 8002932:	d817      	bhi.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002934:	2b20      	cmp	r3, #32
 8002936:	d00c      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002938:	2b20      	cmp	r3, #32
 800293a:	d813      	bhi.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d016      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002940:	2b10      	cmp	r3, #16
 8002942:	d10f      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002944:	4baf      	ldr	r3, [pc, #700]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	4aae      	ldr	r2, [pc, #696]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800294a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002950:	e00e      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3304      	adds	r3, #4
 8002956:	2102      	movs	r1, #2
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fda1 	bl	80034a0 <RCCEx_PLL2_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002962:	e005      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	75fb      	strb	r3, [r7, #23]
      break;
 8002968:	e002      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800296e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002976:	4ba3      	ldr	r3, [pc, #652]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	49a0      	ldr	r1, [pc, #640]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002988:	e001      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d047      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a2:	d030      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80029a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a8:	d82a      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80029aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029ae:	d02c      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80029b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029b4:	d824      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80029b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ba:	d018      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80029bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c0:	d81e      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ca:	d007      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80029cc:	e018      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ce:	4b8d      	ldr	r3, [pc, #564]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	4a8c      	ldr	r2, [pc, #560]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029da:	e017      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fd5c 	bl	80034a0 <RCCEx_PLL2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029ec:	e00e      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3324      	adds	r3, #36	; 0x24
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fe05 	bl	8003604 <RCCEx_PLL3_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75fb      	strb	r3, [r7, #23]
      break;
 8002a04:	e002      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a12:	4b7c      	ldr	r3, [pc, #496]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	4979      	ldr	r1, [pc, #484]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	650b      	str	r3, [r1, #80]	; 0x50
 8002a24:	e001      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d049      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a3e:	d02e      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a44:	d828      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002a46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a4a:	d02a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002a4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a50:	d822      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002a52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a56:	d026      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002a58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a5c:	d81c      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a62:	d010      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a68:	d816      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d01d      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a72:	d111      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd10 	bl	80034a0 <RCCEx_PLL2_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a84:	e012      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3324      	adds	r3, #36	; 0x24
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fdb9 	bl	8003604 <RCCEx_PLL3_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a96:	e009      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9c:	e006      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e004      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e002      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ab2:	4b54      	ldr	r3, [pc, #336]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abe:	4951      	ldr	r1, [pc, #324]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	650b      	str	r3, [r1, #80]	; 0x50
 8002ac4:	e001      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d04b      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae0:	d02e      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae6:	d828      	bhi.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aec:	d02a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af2:	d822      	bhi.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002af4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002af8:	d026      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002afa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002afe:	d81c      	bhi.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b04:	d010      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b0a:	d816      	bhi.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01d      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b14:	d111      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fcbf 	bl	80034a0 <RCCEx_PLL2_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b26:	e012      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3324      	adds	r3, #36	; 0x24
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fd68 	bl	8003604 <RCCEx_PLL3_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b38:	e009      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b3e:	e006      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002b40:	bf00      	nop
 8002b42:	e004      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002b44:	bf00      	nop
 8002b46:	e002      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002b48:	bf00      	nop
 8002b4a:	e000      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b62:	4928      	ldr	r1, [pc, #160]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	658b      	str	r3, [r1, #88]	; 0x58
 8002b68:	e001      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02f      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b82:	d00e      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b88:	d814      	bhi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b92:	d10f      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ba0:	e00c      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fc79 	bl	80034a0 <RCCEx_PLL2_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bb2:	e003      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bb8:	e000      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002bba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bce:	490d      	ldr	r1, [pc, #52]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	650b      	str	r3, [r1, #80]	; 0x50
 8002bd4:	e001      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d033      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d81c      	bhi.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c2f 	.word	0x08002c2f
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c17 	.word	0x08002c17
 8002c00:	08002c2f 	.word	0x08002c2f
 8002c04:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c08:	4bb8      	ldr	r3, [pc, #736]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	4ab7      	ldr	r2, [pc, #732]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c14:	e00c      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fc3f 	bl	80034a0 <RCCEx_PLL2_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c26:	e003      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c2c:	e000      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c36:	4bad      	ldr	r3, [pc, #692]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	49aa      	ldr	r1, [pc, #680]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c48:	e001      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 8086 	beq.w	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c5c:	4ba4      	ldr	r3, [pc, #656]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4aa3      	ldr	r2, [pc, #652]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c68:	f7fe fa76 	bl	8001158 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c6e:	e009      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c70:	f7fe fa72 	bl	8001158 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d902      	bls.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	75fb      	strb	r3, [r7, #23]
        break;
 8002c82:	e005      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c84:	4b9a      	ldr	r3, [pc, #616]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ef      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d166      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c96:	4b95      	ldr	r3, [pc, #596]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ca0:	4053      	eors	r3, r2
 8002ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d013      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002caa:	4b90      	ldr	r3, [pc, #576]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cb4:	4b8d      	ldr	r3, [pc, #564]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a8c      	ldr	r2, [pc, #560]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc0:	4b8a      	ldr	r3, [pc, #552]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4a89      	ldr	r2, [pc, #548]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ccc:	4a87      	ldr	r2, [pc, #540]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cdc:	d115      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fa3b 	bl	8001158 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fa37 	bl	8001158 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d902      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	75fb      	strb	r3, [r7, #23]
            break;
 8002cfc:	e005      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cfe:	4b7b      	ldr	r3, [pc, #492]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0ed      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d126      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002d20:	4b72      	ldr	r3, [pc, #456]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d2e:	0919      	lsrs	r1, r3, #4
 8002d30:	4b70      	ldr	r3, [pc, #448]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002d32:	400b      	ands	r3, r1
 8002d34:	496d      	ldr	r1, [pc, #436]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	610b      	str	r3, [r1, #16]
 8002d3a:	e005      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002d3c:	4b6b      	ldr	r3, [pc, #428]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	4a6a      	ldr	r2, [pc, #424]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d46:	6113      	str	r3, [r2, #16]
 8002d48:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	4965      	ldr	r1, [pc, #404]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	670b      	str	r3, [r1, #112]	; 0x70
 8002d5c:	e004      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
 8002d60:	75bb      	strb	r3, [r7, #22]
 8002d62:	e001      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d07e      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d78:	2b28      	cmp	r3, #40	; 0x28
 8002d7a:	d867      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002d7c:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002e53 	.word	0x08002e53
 8002d88:	08002e4d 	.word	0x08002e4d
 8002d8c:	08002e4d 	.word	0x08002e4d
 8002d90:	08002e4d 	.word	0x08002e4d
 8002d94:	08002e4d 	.word	0x08002e4d
 8002d98:	08002e4d 	.word	0x08002e4d
 8002d9c:	08002e4d 	.word	0x08002e4d
 8002da0:	08002e4d 	.word	0x08002e4d
 8002da4:	08002e29 	.word	0x08002e29
 8002da8:	08002e4d 	.word	0x08002e4d
 8002dac:	08002e4d 	.word	0x08002e4d
 8002db0:	08002e4d 	.word	0x08002e4d
 8002db4:	08002e4d 	.word	0x08002e4d
 8002db8:	08002e4d 	.word	0x08002e4d
 8002dbc:	08002e4d 	.word	0x08002e4d
 8002dc0:	08002e4d 	.word	0x08002e4d
 8002dc4:	08002e3b 	.word	0x08002e3b
 8002dc8:	08002e4d 	.word	0x08002e4d
 8002dcc:	08002e4d 	.word	0x08002e4d
 8002dd0:	08002e4d 	.word	0x08002e4d
 8002dd4:	08002e4d 	.word	0x08002e4d
 8002dd8:	08002e4d 	.word	0x08002e4d
 8002ddc:	08002e4d 	.word	0x08002e4d
 8002de0:	08002e4d 	.word	0x08002e4d
 8002de4:	08002e53 	.word	0x08002e53
 8002de8:	08002e4d 	.word	0x08002e4d
 8002dec:	08002e4d 	.word	0x08002e4d
 8002df0:	08002e4d 	.word	0x08002e4d
 8002df4:	08002e4d 	.word	0x08002e4d
 8002df8:	08002e4d 	.word	0x08002e4d
 8002dfc:	08002e4d 	.word	0x08002e4d
 8002e00:	08002e4d 	.word	0x08002e4d
 8002e04:	08002e53 	.word	0x08002e53
 8002e08:	08002e4d 	.word	0x08002e4d
 8002e0c:	08002e4d 	.word	0x08002e4d
 8002e10:	08002e4d 	.word	0x08002e4d
 8002e14:	08002e4d 	.word	0x08002e4d
 8002e18:	08002e4d 	.word	0x08002e4d
 8002e1c:	08002e4d 	.word	0x08002e4d
 8002e20:	08002e4d 	.word	0x08002e4d
 8002e24:	08002e53 	.word	0x08002e53
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fb36 	bl	80034a0 <RCCEx_PLL2_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e38:	e00c      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3324      	adds	r3, #36	; 0x24
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fbdf 	bl	8003604 <RCCEx_PLL3_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e4a:	e003      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e50:	e000      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e66:	4921      	ldr	r1, [pc, #132]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	654b      	str	r3, [r1, #84]	; 0x54
 8002e6c:	e001      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d03e      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d820      	bhi.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8002e86:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002ecf 	.word	0x08002ecf
 8002e90:	08002ea5 	.word	0x08002ea5
 8002e94:	08002eb7 	.word	0x08002eb7
 8002e98:	08002ecf 	.word	0x08002ecf
 8002e9c:	08002ecf 	.word	0x08002ecf
 8002ea0:	08002ecf 	.word	0x08002ecf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 faf8 	bl	80034a0 <RCCEx_PLL2_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002eb4:	e00c      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3324      	adds	r3, #36	; 0x24
 8002eba:	2101      	movs	r1, #1
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fba1 	bl	8003604 <RCCEx_PLL3_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ec6:	e003      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	75fb      	strb	r3, [r7, #23]
      break;
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8002ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d110      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f023 0207 	bic.w	r2, r3, #7
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee2:	4902      	ldr	r1, [pc, #8]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	654b      	str	r3, [r1, #84]	; 0x54
 8002ee8:	e008      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8002eea:	bf00      	nop
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	58024800 	.word	0x58024800
 8002ef4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d039      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d820      	bhi.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8002f12:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08002f5b 	.word	0x08002f5b
 8002f1c:	08002f31 	.word	0x08002f31
 8002f20:	08002f43 	.word	0x08002f43
 8002f24:	08002f5b 	.word	0x08002f5b
 8002f28:	08002f5b 	.word	0x08002f5b
 8002f2c:	08002f5b 	.word	0x08002f5b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fab2 	bl	80034a0 <RCCEx_PLL2_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f40:	e00c      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3324      	adds	r3, #36	; 0x24
 8002f46:	2101      	movs	r1, #1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fb5b 	bl	8003604 <RCCEx_PLL3_Config>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f52:	e003      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	75fb      	strb	r3, [r7, #23]
      break;
 8002f58:	e000      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8002f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f62:	4bb7      	ldr	r3, [pc, #732]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	49b3      	ldr	r1, [pc, #716]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	658b      	str	r3, [r1, #88]	; 0x58
 8002f76:	e001      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d04b      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f92:	d02e      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8002f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f98:	d828      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9e:	d02a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d822      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002fa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002faa:	d026      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002fac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fb0:	d81c      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb6:	d010      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fbc:	d816      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01d      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fc6:	d111      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fa66 	bl	80034a0 <RCCEx_PLL2_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fd8:	e012      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3324      	adds	r3, #36	; 0x24
 8002fde:	2102      	movs	r1, #2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fb0f 	bl	8003604 <RCCEx_PLL3_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fea:	e009      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff0:	e006      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e004      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e002      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003006:	4b8e      	ldr	r3, [pc, #568]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003014:	498a      	ldr	r1, [pc, #552]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003016:	4313      	orrs	r3, r2
 8003018:	654b      	str	r3, [r1, #84]	; 0x54
 800301a:	e001      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d04b      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003032:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003036:	d02e      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003038:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800303c:	d828      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003042:	d02a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003048:	d822      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800304a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800304e:	d026      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003050:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003054:	d81c      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305a:	d010      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800305c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003060:	d816      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01d      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306a:	d111      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa14 	bl	80034a0 <RCCEx_PLL2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800307c:	e012      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3324      	adds	r3, #36	; 0x24
 8003082:	2102      	movs	r1, #2
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fabd 	bl	8003604 <RCCEx_PLL3_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800308e:	e009      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
      break;
 8003094:	e006      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003096:	bf00      	nop
 8003098:	e004      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800309a:	bf00      	nop
 800309c:	e002      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800309e:	bf00      	nop
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80030a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030aa:	4b65      	ldr	r3, [pc, #404]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b8:	4961      	ldr	r1, [pc, #388]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	658b      	str	r3, [r1, #88]	; 0x58
 80030be:	e001      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d04b      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030da:	d02e      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80030dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030e0:	d828      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80030e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e6:	d02a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80030e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ec:	d822      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80030ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030f2:	d026      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80030f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030f8:	d81c      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80030fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fe:	d010      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003104:	d816      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01d      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310e:	d111      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f9c2 	bl	80034a0 <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003120:	e012      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3324      	adds	r3, #36	; 0x24
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fa6b 	bl	8003604 <RCCEx_PLL3_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003132:	e009      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
      break;
 8003138:	e006      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800313a:	bf00      	nop
 800313c:	e004      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800313e:	bf00      	nop
 8003140:	e002      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800314e:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800315e:	4313      	orrs	r3, r2
 8003160:	658b      	str	r3, [r1, #88]	; 0x58
 8003162:	e001      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317e:	d10a      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3324      	adds	r3, #36	; 0x24
 8003184:	2102      	movs	r1, #2
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fa3c 	bl	8003604 <RCCEx_PLL3_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003196:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a4:	4926      	ldr	r1, [pc, #152]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c0:	d10a      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3324      	adds	r3, #36	; 0x24
 80031c6:	2102      	movs	r1, #2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fa1b 	bl	8003604 <RCCEx_PLL3_Config>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e6:	4916      	ldr	r1, [pc, #88]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d036      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003202:	d01f      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003208:	d817      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003212:	d009      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003214:	e011      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f93f 	bl	80034a0 <RCCEx_PLL2_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003226:	e00e      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3324      	adds	r3, #36	; 0x24
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f9e8 	bl	8003604 <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003238:	e005      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003240:	58024400 	.word	0x58024400
      break;
 8003244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800324c:	4b93      	ldr	r3, [pc, #588]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800325a:	4990      	ldr	r1, [pc, #576]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800325c:	4313      	orrs	r3, r2
 800325e:	658b      	str	r3, [r1, #88]	; 0x58
 8003260:	e001      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d033      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003278:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800327c:	d01c      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800327e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003282:	d816      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003288:	d003      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800328a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800328e:	d007      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003290:	e00f      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003292:	4b82      	ldr	r3, [pc, #520]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	4a81      	ldr	r2, [pc, #516]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800329e:	e00c      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3324      	adds	r3, #36	; 0x24
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f9ac 	bl	8003604 <RCCEx_PLL3_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032b0:	e003      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
      break;
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80032b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032c0:	4b76      	ldr	r3, [pc, #472]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ce:	4973      	ldr	r1, [pc, #460]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	654b      	str	r3, [r1, #84]	; 0x54
 80032d4:	e001      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
 80032d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d029      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80032ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f2:	d007      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80032f4:	e00f      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f6:	4b69      	ldr	r3, [pc, #420]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	4a68      	ldr	r2, [pc, #416]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003300:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003302:	e00b      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f8c8 	bl	80034a0 <RCCEx_PLL2_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003314:	e002      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
      break;
 800331a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003322:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003326:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	495b      	ldr	r1, [pc, #364]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003334:	e001      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3324      	adds	r3, #36	; 0x24
 800334a:	2102      	movs	r1, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f959 	bl	8003604 <RCCEx_PLL3_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d030      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003370:	d017      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003376:	d811      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337c:	d013      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800337e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003382:	d80b      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d010      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d106      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	4a42      	ldr	r2, [pc, #264]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003398:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800339a:	e007      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
      break;
 80033a0:	e004      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80033a2:	bf00      	nop
 80033a4:	e002      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80033aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033b2:	4b3a      	ldr	r3, [pc, #232]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033be:	4937      	ldr	r1, [pc, #220]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	654b      	str	r3, [r1, #84]	; 0x54
 80033c4:	e001      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033d6:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	492e      	ldr	r1, [pc, #184]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033f4:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003402:	4926      	ldr	r1, [pc, #152]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003418:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003420:	491e      	ldr	r1, [pc, #120]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003432:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	4a19      	ldr	r2, [pc, #100]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800343c:	6113      	str	r3, [r2, #16]
 800343e:	4b17      	ldr	r3, [pc, #92]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003448:	4914      	ldr	r1, [pc, #80]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	da08      	bge.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003462:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003464:	4313      	orrs	r3, r2
 8003466:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d009      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	4906      	ldr	r1, [pc, #24]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003484:	4313      	orrs	r3, r2
 8003486:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003488:	7dbb      	ldrb	r3, [r7, #22]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	58024400 	.word	0x58024400

080034a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034ae:	4b53      	ldr	r3, [pc, #332]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d101      	bne.n	80034be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e099      	b.n	80035f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80034be:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80034c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ca:	f7fd fe45 	bl	8001158 <HAL_GetTick>
 80034ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80034d2:	f7fd fe41 	bl	8001158 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e086      	b.n	80035f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80034e4:	4b45      	ldr	r3, [pc, #276]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80034f0:	4b42      	ldr	r3, [pc, #264]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	031b      	lsls	r3, r3, #12
 80034fe:	493f      	ldr	r1, [pc, #252]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	628b      	str	r3, [r1, #40]	; 0x28
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	3b01      	subs	r3, #1
 800350a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	3b01      	subs	r3, #1
 8003514:	025b      	lsls	r3, r3, #9
 8003516:	b29b      	uxth	r3, r3
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	3b01      	subs	r3, #1
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	3b01      	subs	r3, #1
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003534:	4931      	ldr	r1, [pc, #196]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800353a:	4b30      	ldr	r3, [pc, #192]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	492d      	ldr	r1, [pc, #180]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f023 0220 	bic.w	r2, r3, #32
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	4928      	ldr	r1, [pc, #160]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	4a26      	ldr	r2, [pc, #152]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 8003564:	f023 0310 	bic.w	r3, r3, #16
 8003568:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 800356c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <RCCEx_PLL2_Config+0x160>)
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	69d2      	ldr	r2, [r2, #28]
 8003576:	00d2      	lsls	r2, r2, #3
 8003578:	4920      	ldr	r1, [pc, #128]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800357e:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 8003584:	f043 0310 	orr.w	r3, r3, #16
 8003588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d106      	bne.n	800359e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 8003596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800359a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800359c:	e00f      	b.n	80035be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d106      	bne.n	80035b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80035aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035b0:	e005      	b.n	80035be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	4a11      	ldr	r2, [pc, #68]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80035b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80035c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ca:	f7fd fdc5 	bl	8001158 <HAL_GetTick>
 80035ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035d0:	e008      	b.n	80035e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80035d2:	f7fd fdc1 	bl	8001158 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e006      	b.n	80035f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <RCCEx_PLL2_Config+0x15c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	58024400 	.word	0x58024400
 8003600:	ffff0007 	.word	0xffff0007

08003604 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003612:	4b53      	ldr	r3, [pc, #332]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b03      	cmp	r3, #3
 800361c:	d101      	bne.n	8003622 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e099      	b.n	8003756 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003622:	4b4f      	ldr	r3, [pc, #316]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a4e      	ldr	r2, [pc, #312]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 8003628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362e:	f7fd fd93 	bl	8001158 <HAL_GetTick>
 8003632:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003634:	e008      	b.n	8003648 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003636:	f7fd fd8f 	bl	8001158 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e086      	b.n	8003756 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003648:	4b45      	ldr	r3, [pc, #276]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003654:	4b42      	ldr	r3, [pc, #264]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	051b      	lsls	r3, r3, #20
 8003662:	493f      	ldr	r1, [pc, #252]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 8003664:	4313      	orrs	r3, r2
 8003666:	628b      	str	r3, [r1, #40]	; 0x28
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	3b01      	subs	r3, #1
 800366e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	3b01      	subs	r3, #1
 8003678:	025b      	lsls	r3, r3, #9
 800367a:	b29b      	uxth	r3, r3
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	3b01      	subs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	3b01      	subs	r3, #1
 8003692:	061b      	lsls	r3, r3, #24
 8003694:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003698:	4931      	ldr	r1, [pc, #196]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800369e:	4b30      	ldr	r3, [pc, #192]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	492d      	ldr	r1, [pc, #180]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	4928      	ldr	r1, [pc, #160]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80036c2:	4b27      	ldr	r3, [pc, #156]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	4a26      	ldr	r2, [pc, #152]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <RCCEx_PLL3_Config+0x160>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	69d2      	ldr	r2, [r2, #28]
 80036da:	00d2      	lsls	r2, r2, #3
 80036dc:	4920      	ldr	r1, [pc, #128]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80036e2:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	4a1e      	ldr	r2, [pc, #120]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	4a19      	ldr	r2, [pc, #100]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 80036fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003700:	e00f      	b.n	8003722 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 800370e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003712:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003714:	e005      	b.n	8003722 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	4a11      	ldr	r2, [pc, #68]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 800371c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003720:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372e:	f7fd fd13 	bl	8001158 <HAL_GetTick>
 8003732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003734:	e008      	b.n	8003748 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003736:	f7fd fd0f 	bl	8001158 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e006      	b.n	8003756 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <RCCEx_PLL3_Config+0x15c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	58024400 	.word	0x58024400
 8003764:	ffff0007 	.word	0xffff0007

08003768 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0eb      	b.n	8003956 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a75      	ldr	r2, [pc, #468]	; (8003960 <HAL_SPI_Init+0x1f8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00f      	beq.n	80037ae <HAL_SPI_Init+0x46>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a74      	ldr	r2, [pc, #464]	; (8003964 <HAL_SPI_Init+0x1fc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00a      	beq.n	80037ae <HAL_SPI_Init+0x46>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a72      	ldr	r2, [pc, #456]	; (8003968 <HAL_SPI_Init+0x200>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d005      	beq.n	80037ae <HAL_SPI_Init+0x46>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	d901      	bls.n	80037ae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e0d3      	b.n	8003956 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fc96 	bl	80040e0 <SPI_GetPacketSize>
 80037b4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a69      	ldr	r2, [pc, #420]	; (8003960 <HAL_SPI_Init+0x1f8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00c      	beq.n	80037da <HAL_SPI_Init+0x72>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a67      	ldr	r2, [pc, #412]	; (8003964 <HAL_SPI_Init+0x1fc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d007      	beq.n	80037da <HAL_SPI_Init+0x72>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a66      	ldr	r2, [pc, #408]	; (8003968 <HAL_SPI_Init+0x200>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d002      	beq.n	80037da <HAL_SPI_Init+0x72>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d811      	bhi.n	80037fe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80037de:	4a60      	ldr	r2, [pc, #384]	; (8003960 <HAL_SPI_Init+0x1f8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5e      	ldr	r2, [pc, #376]	; (8003964 <HAL_SPI_Init+0x1fc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_SPI_Init+0x90>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5d      	ldr	r2, [pc, #372]	; (8003968 <HAL_SPI_Init+0x200>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d104      	bne.n	8003802 <HAL_SPI_Init+0x9a>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	d901      	bls.n	8003802 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e0a9      	b.n	8003956 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd fa30 	bl	8000c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800383c:	d119      	bne.n	8003872 <HAL_SPI_Init+0x10a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003846:	d103      	bne.n	8003850 <HAL_SPI_Init+0xe8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10c      	bne.n	8003872 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003860:	d107      	bne.n	8003872 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	431a      	orrs	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	ea42 0103 	orr.w	r1, r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d2:	ea42 0103 	orr.w	r1, r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d113      	bne.n	8003912 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003910:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40013000 	.word	0x40013000
 8003964:	40003800 	.word	0x40003800
 8003968:	40003c00 	.word	0x40003c00

0800396c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	; 0x38
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3320      	adds	r3, #32
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3330      	adds	r3, #48	; 0x30
 800398e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_SPI_TransmitReceive+0x32>
 800399a:	2302      	movs	r3, #2
 800399c:	e2ce      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x5d0>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039a6:	f7fd fbd7 	bl	8001158 <HAL_GetTick>
 80039aa:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80039ac:	887b      	ldrh	r3, [r7, #2]
 80039ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80039ba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039c2:	7efb      	ldrb	r3, [r7, #27]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d014      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x86>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ce:	d106      	bne.n	80039de <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <HAL_SPI_TransmitReceive+0x72>
 80039d8:	7efb      	ldrb	r3, [r7, #27]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d009      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80039de:	2302      	movs	r3, #2
 80039e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80039ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039f0:	e2a4      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0x98>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0x98>
 80039fe:	887b      	ldrh	r3, [r7, #2]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003a12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a16:	e291      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d003      	beq.n	8003a2c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2205      	movs	r2, #5
 8003a28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	887a      	ldrh	r2, [r7, #2]
 8003a3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	887a      	ldrh	r2, [r7, #2]
 8003a54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4b9f      	ldr	r3, [pc, #636]	; (8003cf0 <HAL_SPI_TransmitReceive+0x384>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	8879      	ldrh	r1, [r7, #2]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a98:	d107      	bne.n	8003aaa <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	d970      	bls.n	8003b94 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003ab2:	e068      	b.n	8003b86 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d11a      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x18c>
 8003ac2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d017      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	1d1a      	adds	r2, r3, #4
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003af6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	f248 0308 	movw	r3, #32776	; 0x8008
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01a      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x1d2>
 8003b08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b18:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b3e:	f7fd fb0b 	bl	8001158 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d803      	bhi.n	8003b56 <HAL_SPI_TransmitReceive+0x1ea>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d102      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x1f0>
 8003b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d114      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f9f1 	bl	8003f44 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e1da      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003b86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d193      	bne.n	8003ab4 <HAL_SPI_TransmitReceive+0x148>
 8003b8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d190      	bne.n	8003ab4 <HAL_SPI_TransmitReceive+0x148>
 8003b92:	e1ac      	b.n	8003eee <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b07      	cmp	r3, #7
 8003b9a:	f240 81a0 	bls.w	8003ede <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003b9e:	e0a9      	b.n	8003cf4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d139      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x2b6>
 8003bae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d036      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d91c      	bls.n	8003bf4 <HAL_SPI_TransmitReceive+0x288>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d018      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b02      	subs	r3, #2
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003bf2:	e016      	b.n	8003c22 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	1c9a      	adds	r2, r3, #2
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003c20:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d03a      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0x33a>
 8003c30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d037      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d018      	beq.n	8003c76 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c4e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c54:	1d1a      	adds	r2, r3, #4
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b02      	subs	r3, #2
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003c74:	e017      	b.n	8003ca6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7a:	6a3a      	ldr	r2, [r7, #32]
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	b292      	uxth	r2, r2
 8003c80:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c86:	1c9a      	adds	r2, r3, #2
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003ca4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca6:	f7fd fa57 	bl	8001158 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d803      	bhi.n	8003cbe <HAL_SPI_TransmitReceive+0x352>
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d102      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x358>
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d117      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f93d 	bl	8003f44 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e126      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x5d0>
 8003cee:	bf00      	nop
 8003cf0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003cf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f47f af52 	bne.w	8003ba0 <HAL_SPI_TransmitReceive+0x234>
 8003cfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f47f af4e 	bne.w	8003ba0 <HAL_SPI_TransmitReceive+0x234>
 8003d04:	e0f3      	b.n	8003eee <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d15a      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x45e>
 8003d14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d057      	beq.n	8003dca <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003d1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d91c      	bls.n	8003d5a <HAL_SPI_TransmitReceive+0x3ee>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d918      	bls.n	8003d5a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	1d1a      	adds	r2, r3, #4
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b04      	subs	r3, #4
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003d56:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003d58:	e037      	b.n	8003dca <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003d5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d91b      	bls.n	8003d98 <HAL_SPI_TransmitReceive+0x42c>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d017      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	881a      	ldrh	r2, [r3, #0]
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b02      	subs	r3, #2
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003d94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003d96:	e018      	b.n	8003dca <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3320      	adds	r3, #32
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003dc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d05e      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x52a>
 8003dd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d05b      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d018      	beq.n	8003e1e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003df6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfc:	1d1a      	adds	r2, r3, #4
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003e1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003e1c:	e03b      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2c:	d918      	bls.n	8003e60 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	8812      	ldrh	r2, [r2, #0]
 8003e36:	b292      	uxth	r2, r2
 8003e38:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3e:	1c9a      	adds	r2, r3, #2
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b02      	subs	r3, #2
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003e5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003e5e:	e01a      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003e94:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e96:	f7fd f95f 	bl	8001158 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d803      	bhi.n	8003eae <HAL_SPI_TransmitReceive+0x542>
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d102      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x548>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d114      	bne.n	8003ede <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f845 	bl	8003f44 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e02e      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003ede:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f47f af10 	bne.w	8003d06 <HAL_SPI_TransmitReceive+0x39a>
 8003ee6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f47f af0c 	bne.w	8003d06 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2108      	movs	r1, #8
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f8c3 	bl	8004084 <SPI_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f815 	bl	8003f44 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e001      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8003f38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3730      	adds	r7, #48	; 0x30
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0208 	orr.w	r2, r2, #8
 8003f62:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0210 	orr.w	r2, r2, #16
 8003f72:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6919      	ldr	r1, [r3, #16]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b3c      	ldr	r3, [pc, #240]	; (8004080 <SPI_CloseTransfer+0x13c>)
 8003f90:	400b      	ands	r3, r1
 8003f92:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003fa2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d014      	beq.n	8003fda <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00f      	beq.n	8003fda <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0220 	orr.w	r2, r2, #32
 8003fd8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d014      	beq.n	8004010 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00f      	beq.n	8004010 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800400e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00f      	beq.n	800403a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004020:	f043 0201 	orr.w	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004038:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00f      	beq.n	8004064 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404a:	f043 0208 	orr.w	r2, r3, #8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004062:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	fffffc90 	.word	0xfffffc90

08004084 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004094:	e010      	b.n	80040b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004096:	f7fd f85f 	bl	8001158 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d803      	bhi.n	80040ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d102      	bne.n	80040b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e00f      	b.n	80040d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d0df      	beq.n	8004096 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3307      	adds	r3, #7
 80040fe:	08db      	lsrs	r3, r3, #3
 8004100:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	fb02 f303 	mul.w	r3, r2, r3
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <MX_FATFS_Init+0x18>)
 800411e:	4805      	ldr	r0, [pc, #20]	; (8004134 <MX_FATFS_Init+0x1c>)
 8004120:	f003 faa6 	bl	8007670 <FATFS_LinkDriver>
 8004124:	4603      	mov	r3, r0
 8004126:	461a      	mov	r2, r3
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <MX_FATFS_Init+0x20>)
 800412a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000ce0 	.word	0x20000ce0
 8004134:	20000010 	.word	0x20000010
 8004138:	20000ce4 	.word	0x20000ce4

0800413c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004140:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f9d9 	bl	8004510 <USER_SPI_initialize>
 800415e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fab7 	bl	80046e8 <USER_SPI_status>
 800417a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4603      	mov	r3, r0
 8004192:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004194:	7bf8      	ldrb	r0, [r7, #15]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	f000 faba 	bl	8004714 <USER_SPI_read>
 80041a0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4603      	mov	r3, r0
 80041b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
     return USER_SPI_write(pdrv, buff, sector, count);
 80041ba:	7bf8      	ldrb	r0, [r7, #15]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	f000 fb0d 	bl	80047e0 <USER_SPI_write>
 80041c6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	603a      	str	r2, [r7, #0]
 80041da:	71fb      	strb	r3, [r7, #7]
 80041dc:	460b      	mov	r3, r1
 80041de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80041e0:	79b9      	ldrb	r1, [r7, #6]
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fb76 	bl	80048d8 <USER_SPI_ioctl>
 80041ec:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004200:	f7fc ffaa 	bl	8001158 <HAL_GetTick>
 8004204:	4603      	mov	r3, r0
 8004206:	4a04      	ldr	r2, [pc, #16]	; (8004218 <SPI_Timer_On+0x20>)
 8004208:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800420a:	4a04      	ldr	r2, [pc, #16]	; (800421c <SPI_Timer_On+0x24>)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6013      	str	r3, [r2, #0]
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	2000114c 	.word	0x2000114c
 800421c:	20001150 	.word	0x20001150

08004220 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004224:	f7fc ff98 	bl	8001158 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <SPI_Timer_Status+0x24>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <SPI_Timer_Status+0x28>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	bf34      	ite	cc
 8004238:	2301      	movcc	r3, #1
 800423a:	2300      	movcs	r3, #0
 800423c:	b2db      	uxtb	r3, r3
}
 800423e:	4618      	mov	r0, r3
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	2000114c 	.word	0x2000114c
 8004248:	20001150 	.word	0x20001150

0800424c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af02      	add	r7, sp, #8
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004256:	f107 020f 	add.w	r2, r7, #15
 800425a:	1df9      	adds	r1, r7, #7
 800425c:	2332      	movs	r3, #50	; 0x32
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	2301      	movs	r3, #1
 8004262:	4804      	ldr	r0, [pc, #16]	; (8004274 <xchg_spi+0x28>)
 8004264:	f7ff fb82 	bl	800396c <HAL_SPI_TransmitReceive>
    return rxDat;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000c54 	.word	0x20000c54

08004278 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e00a      	b.n	800429e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	18d4      	adds	r4, r2, r3
 800428e:	20ff      	movs	r0, #255	; 0xff
 8004290:	f7ff ffdc 	bl	800424c <xchg_spi>
 8004294:	4603      	mov	r3, r0
 8004296:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d3f0      	bcc.n	8004288 <rcvr_spi_multi+0x10>
	}
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd90      	pop	{r4, r7, pc}

080042b0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e009      	b.n	80042d4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ffbf 	bl	800424c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3301      	adds	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d3f1      	bcc.n	80042c0 <xmit_spi_multi+0x10>
	}
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80042ee:	f7fc ff33 	bl	8001158 <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80042f8:	20ff      	movs	r0, #255	; 0xff
 80042fa:	f7ff ffa7 	bl	800424c <xchg_spi>
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	2bff      	cmp	r3, #255	; 0xff
 8004306:	d007      	beq.n	8004318 <wait_ready+0x32>
 8004308:	f7fc ff26 	bl	8001158 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	429a      	cmp	r2, r3
 8004316:	d8ef      	bhi.n	80042f8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2bff      	cmp	r3, #255	; 0xff
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004330:	2201      	movs	r2, #1
 8004332:	2110      	movs	r1, #16
 8004334:	4803      	ldr	r0, [pc, #12]	; (8004344 <despiselect+0x18>)
 8004336:	f7fd f9df 	bl	80016f8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800433a:	20ff      	movs	r0, #255	; 0xff
 800433c:	f7ff ff86 	bl	800424c <xchg_spi>

}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}
 8004344:	58021000 	.word	0x58021000

08004348 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800434c:	2200      	movs	r2, #0
 800434e:	2110      	movs	r1, #16
 8004350:	4809      	ldr	r0, [pc, #36]	; (8004378 <spiselect+0x30>)
 8004352:	f7fd f9d1 	bl	80016f8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004356:	20ff      	movs	r0, #255	; 0xff
 8004358:	f7ff ff78 	bl	800424c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800435c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004360:	f7ff ffc1 	bl	80042e6 <wait_ready>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <spiselect+0x26>
 800436a:	2301      	movs	r3, #1
 800436c:	e002      	b.n	8004374 <spiselect+0x2c>

	despiselect();
 800436e:	f7ff ffdd 	bl	800432c <despiselect>
	return 0;	/* Timeout */
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	58021000 	.word	0x58021000

0800437c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004386:	20c8      	movs	r0, #200	; 0xc8
 8004388:	f7ff ff36 	bl	80041f8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800438c:	20ff      	movs	r0, #255	; 0xff
 800438e:	f7ff ff5d 	bl	800424c <xchg_spi>
 8004392:	4603      	mov	r3, r0
 8004394:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2bff      	cmp	r3, #255	; 0xff
 800439a:	d104      	bne.n	80043a6 <rcvr_datablock+0x2a>
 800439c:	f7ff ff40 	bl	8004220 <SPI_Timer_Status>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f2      	bne.n	800438c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	2bfe      	cmp	r3, #254	; 0xfe
 80043aa:	d001      	beq.n	80043b0 <rcvr_datablock+0x34>
 80043ac:	2300      	movs	r3, #0
 80043ae:	e00a      	b.n	80043c6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ff60 	bl	8004278 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80043b8:	20ff      	movs	r0, #255	; 0xff
 80043ba:	f7ff ff47 	bl	800424c <xchg_spi>
 80043be:	20ff      	movs	r0, #255	; 0xff
 80043c0:	f7ff ff44 	bl	800424c <xchg_spi>

	return 1;						/* Function succeeded */
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80043da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043de:	f7ff ff82 	bl	80042e6 <wait_ready>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <xmit_datablock+0x1e>
 80043e8:	2300      	movs	r3, #0
 80043ea:	e01e      	b.n	800442a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff ff2c 	bl	800424c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	2bfd      	cmp	r3, #253	; 0xfd
 80043f8:	d016      	beq.n	8004428 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80043fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff ff56 	bl	80042b0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004404:	20ff      	movs	r0, #255	; 0xff
 8004406:	f7ff ff21 	bl	800424c <xchg_spi>
 800440a:	20ff      	movs	r0, #255	; 0xff
 800440c:	f7ff ff1e 	bl	800424c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004410:	20ff      	movs	r0, #255	; 0xff
 8004412:	f7ff ff1b 	bl	800424c <xchg_spi>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2b05      	cmp	r3, #5
 8004422:	d001      	beq.n	8004428 <xmit_datablock+0x5a>
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <xmit_datablock+0x5c>
	}
	return 1;
 8004428:	2301      	movs	r3, #1
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	4603      	mov	r3, r0
 800443a:	6039      	str	r1, [r7, #0]
 800443c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004442:	2b00      	cmp	r3, #0
 8004444:	da0e      	bge.n	8004464 <send_cmd+0x32>
		cmd &= 0x7F;
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800444e:	2100      	movs	r1, #0
 8004450:	2037      	movs	r0, #55	; 0x37
 8004452:	f7ff ffee 	bl	8004432 <send_cmd>
 8004456:	4603      	mov	r3, r0
 8004458:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800445a:	7bbb      	ldrb	r3, [r7, #14]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d901      	bls.n	8004464 <send_cmd+0x32>
 8004460:	7bbb      	ldrb	r3, [r7, #14]
 8004462:	e051      	b.n	8004508 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	2b0c      	cmp	r3, #12
 8004468:	d008      	beq.n	800447c <send_cmd+0x4a>
		despiselect();
 800446a:	f7ff ff5f 	bl	800432c <despiselect>
		if (!spiselect()) return 0xFF;
 800446e:	f7ff ff6b 	bl	8004348 <spiselect>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <send_cmd+0x4a>
 8004478:	23ff      	movs	r3, #255	; 0xff
 800447a:	e045      	b.n	8004508 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fee1 	bl	800424c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	0e1b      	lsrs	r3, r3, #24
 800448e:	b2db      	uxtb	r3, r3
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fedb 	bl	800424c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	0c1b      	lsrs	r3, r3, #16
 800449a:	b2db      	uxtb	r3, r3
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fed5 	bl	800424c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fecf 	bl	800424c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff feca 	bl	800424c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <send_cmd+0x94>
 80044c2:	2395      	movs	r3, #149	; 0x95
 80044c4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d101      	bne.n	80044d0 <send_cmd+0x9e>
 80044cc:	2387      	movs	r3, #135	; 0x87
 80044ce:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff feba 	bl	800424c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d102      	bne.n	80044e4 <send_cmd+0xb2>
 80044de:	20ff      	movs	r0, #255	; 0xff
 80044e0:	f7ff feb4 	bl	800424c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80044e4:	230a      	movs	r3, #10
 80044e6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80044e8:	20ff      	movs	r0, #255	; 0xff
 80044ea:	f7ff feaf 	bl	800424c <xchg_spi>
 80044ee:	4603      	mov	r3, r0
 80044f0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80044f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	da05      	bge.n	8004506 <send_cmd+0xd4>
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8004506:	7bbb      	ldrb	r3, [r7, #14]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <USER_SPI_initialize+0x14>
 8004520:	2301      	movs	r3, #1
 8004522:	e0d6      	b.n	80046d2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */
 8004524:	4b6d      	ldr	r3, [pc, #436]	; (80046dc <USER_SPI_initialize+0x1cc>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <USER_SPI_initialize+0x2a>
 8004532:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <USER_SPI_initialize+0x1cc>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e0cb      	b.n	80046d2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800453a:	4b69      	ldr	r3, [pc, #420]	; (80046e0 <USER_SPI_initialize+0x1d0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004544:	4b66      	ldr	r3, [pc, #408]	; (80046e0 <USER_SPI_initialize+0x1d0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800454c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800454e:	230a      	movs	r3, #10
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	e005      	b.n	8004560 <USER_SPI_initialize+0x50>
 8004554:	20ff      	movs	r0, #255	; 0xff
 8004556:	f7ff fe79 	bl	800424c <xchg_spi>
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	3b01      	subs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f6      	bne.n	8004554 <USER_SPI_initialize+0x44>

	ty = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800456a:	2100      	movs	r1, #0
 800456c:	2000      	movs	r0, #0
 800456e:	f7ff ff60 	bl	8004432 <send_cmd>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	f040 808b 	bne.w	8004690 <USER_SPI_initialize+0x180>
		SPI_Timer_On(2000);					/* Initialization timeout = 1 sec */
 800457a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800457e:	f7ff fe3b 	bl	80041f8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004582:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004586:	2008      	movs	r0, #8
 8004588:	f7ff ff53 	bl	8004432 <send_cmd>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d151      	bne.n	8004636 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) {
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e00d      	b.n	80045b4 <USER_SPI_initialize+0xa4>
				ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004598:	7bfc      	ldrb	r4, [r7, #15]
 800459a:	20ff      	movs	r0, #255	; 0xff
 800459c:	f7ff fe56 	bl	800424c <xchg_spi>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	f107 0310 	add.w	r3, r7, #16
 80045a8:	4423      	add	r3, r4
 80045aa:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++) {
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	3301      	adds	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d9ee      	bls.n	8004598 <USER_SPI_initialize+0x88>
			}
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* Is the card supports vcc of 2.7-3.6V? */
 80045ba:	7abb      	ldrb	r3, [r7, #10]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d167      	bne.n	8004690 <USER_SPI_initialize+0x180>
 80045c0:	7afb      	ldrb	r3, [r7, #11]
 80045c2:	2baa      	cmp	r3, #170	; 0xaa
 80045c4:	d164      	bne.n	8004690 <USER_SPI_initialize+0x180>
			{
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80045c6:	bf00      	nop
 80045c8:	f7ff fe2a 	bl	8004220 <SPI_Timer_Status>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <USER_SPI_initialize+0xd2>
 80045d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045d6:	20a9      	movs	r0, #169	; 0xa9
 80045d8:	f7ff ff2b 	bl	8004432 <send_cmd>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f2      	bne.n	80045c8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80045e2:	f7ff fe1d 	bl	8004220 <SPI_Timer_Status>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d051      	beq.n	8004690 <USER_SPI_initialize+0x180>
 80045ec:	2100      	movs	r1, #0
 80045ee:	203a      	movs	r0, #58	; 0x3a
 80045f0:	f7ff ff1f 	bl	8004432 <send_cmd>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d14a      	bne.n	8004690 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
 80045fe:	e00d      	b.n	800461c <USER_SPI_initialize+0x10c>
					{
						ocr[n] = xchg_spi(0xFF);
 8004600:	7bfc      	ldrb	r4, [r7, #15]
 8004602:	20ff      	movs	r0, #255	; 0xff
 8004604:	f7ff fe22 	bl	800424c <xchg_spi>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	f107 0310 	add.w	r3, r7, #16
 8004610:	4423      	add	r3, r4
 8004612:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	3301      	adds	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b03      	cmp	r3, #3
 8004620:	d9ee      	bls.n	8004600 <USER_SPI_initialize+0xf0>
					}
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004622:	7a3b      	ldrb	r3, [r7, #8]
 8004624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <USER_SPI_initialize+0x120>
 800462c:	230c      	movs	r3, #12
 800462e:	e000      	b.n	8004632 <USER_SPI_initialize+0x122>
 8004630:	2304      	movs	r3, #4
 8004632:	737b      	strb	r3, [r7, #13]
 8004634:	e02c      	b.n	8004690 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004636:	2100      	movs	r1, #0
 8004638:	20a9      	movs	r0, #169	; 0xa9
 800463a:	f7ff fefa 	bl	8004432 <send_cmd>
 800463e:	4603      	mov	r3, r0
 8004640:	2b01      	cmp	r3, #1
 8004642:	d804      	bhi.n	800464e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004644:	2302      	movs	r3, #2
 8004646:	737b      	strb	r3, [r7, #13]
 8004648:	23a9      	movs	r3, #169	; 0xa9
 800464a:	73bb      	strb	r3, [r7, #14]
 800464c:	e003      	b.n	8004656 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800464e:	2301      	movs	r3, #1
 8004650:	737b      	strb	r3, [r7, #13]
 8004652:	2301      	movs	r3, #1
 8004654:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004656:	bf00      	nop
 8004658:	f7ff fde2 	bl	8004220 <SPI_Timer_Status>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <USER_SPI_initialize+0x162>
 8004662:	7bbb      	ldrb	r3, [r7, #14]
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fee3 	bl	8004432 <send_cmd>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f2      	bne.n	8004658 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004672:	f7ff fdd5 	bl	8004220 <SPI_Timer_Status>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <USER_SPI_initialize+0x17c>
 800467c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004680:	2010      	movs	r0, #16
 8004682:	f7ff fed6 	bl	8004432 <send_cmd>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <USER_SPI_initialize+0x180>
				ty = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004690:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <USER_SPI_initialize+0x1d4>)
 8004692:	7b7b      	ldrb	r3, [r7, #13]
 8004694:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004696:	f7ff fe49 	bl	800432c <despiselect>

	if (ty) {			/* OK */
 800469a:	7b7b      	ldrb	r3, [r7, #13]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d012      	beq.n	80046c6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <USER_SPI_initialize+0x1d0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <USER_SPI_initialize+0x1d0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046b2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <USER_SPI_initialize+0x1cc>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <USER_SPI_initialize+0x1cc>)
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e002      	b.n	80046cc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80046c6:	4b05      	ldr	r3, [pc, #20]	; (80046dc <USER_SPI_initialize+0x1cc>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <USER_SPI_initialize+0x1cc>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b2db      	uxtb	r3, r3
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd90      	pop	{r4, r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000024 	.word	0x20000024
 80046e0:	20000c54 	.word	0x20000c54
 80046e4:	200005ac 	.word	0x200005ac

080046e8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <USER_SPI_status+0x14>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e002      	b.n	8004702 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <USER_SPI_status+0x28>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	b2db      	uxtb	r3, r3
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000024 	.word	0x20000024

08004714 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d102      	bne.n	8004730 <USER_SPI_read+0x1c>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <USER_SPI_read+0x20>
 8004730:	2304      	movs	r3, #4
 8004732:	e04d      	b.n	80047d0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004734:	4b28      	ldr	r3, [pc, #160]	; (80047d8 <USER_SPI_read+0xc4>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <USER_SPI_read+0x32>
 8004742:	2303      	movs	r3, #3
 8004744:	e044      	b.n	80047d0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004746:	4b25      	ldr	r3, [pc, #148]	; (80047dc <USER_SPI_read+0xc8>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <USER_SPI_read+0x44>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	025b      	lsls	r3, r3, #9
 8004756:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d111      	bne.n	8004782 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	2011      	movs	r0, #17
 8004762:	f7ff fe66 	bl	8004432 <send_cmd>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d129      	bne.n	80047c0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800476c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004770:	68b8      	ldr	r0, [r7, #8]
 8004772:	f7ff fe03 	bl	800437c <rcvr_datablock>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d021      	beq.n	80047c0 <USER_SPI_read+0xac>
			count = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	e01e      	b.n	80047c0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	2012      	movs	r0, #18
 8004786:	f7ff fe54 	bl	8004432 <send_cmd>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d117      	bne.n	80047c0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004794:	68b8      	ldr	r0, [r7, #8]
 8004796:	f7ff fdf1 	bl	800437c <rcvr_datablock>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <USER_SPI_read+0xa2>
				buff += 512;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80047a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ed      	bne.n	8004790 <USER_SPI_read+0x7c>
 80047b4:	e000      	b.n	80047b8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80047b6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80047b8:	2100      	movs	r1, #0
 80047ba:	200c      	movs	r0, #12
 80047bc:	f7ff fe39 	bl	8004432 <send_cmd>
		}
	}
	despiselect();
 80047c0:	f7ff fdb4 	bl	800432c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000024 	.word	0x20000024
 80047dc:	200005ac 	.word	0x200005ac

080047e0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4603      	mov	r3, r0
 80047ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <USER_SPI_write+0x1c>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <USER_SPI_write+0x20>
 80047fc:	2304      	movs	r3, #4
 80047fe:	e063      	b.n	80048c8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004800:	4b33      	ldr	r3, [pc, #204]	; (80048d0 <USER_SPI_write+0xf0>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <USER_SPI_write+0x32>
 800480e:	2303      	movs	r3, #3
 8004810:	e05a      	b.n	80048c8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004812:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <USER_SPI_write+0xf0>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <USER_SPI_write+0x44>
 8004820:	2302      	movs	r3, #2
 8004822:	e051      	b.n	80048c8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <USER_SPI_write+0xf4>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <USER_SPI_write+0x56>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	025b      	lsls	r3, r3, #9
 8004834:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d110      	bne.n	800485e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	2018      	movs	r0, #24
 8004840:	f7ff fdf7 	bl	8004432 <send_cmd>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d136      	bne.n	80048b8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800484a:	21fe      	movs	r1, #254	; 0xfe
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	f7ff fdbe 	bl	80043ce <xmit_datablock>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02f      	beq.n	80048b8 <USER_SPI_write+0xd8>
			count = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	e02c      	b.n	80048b8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800485e:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <USER_SPI_write+0xf4>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	f003 0306 	and.w	r3, r3, #6
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <USER_SPI_write+0x92>
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	2097      	movs	r0, #151	; 0x97
 800486e:	f7ff fde0 	bl	8004432 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	2019      	movs	r0, #25
 8004876:	f7ff fddc 	bl	8004432 <send_cmd>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d11b      	bne.n	80048b8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004880:	21fc      	movs	r1, #252	; 0xfc
 8004882:	68b8      	ldr	r0, [r7, #8]
 8004884:	f7ff fda3 	bl	80043ce <xmit_datablock>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <USER_SPI_write+0xc4>
				buff += 512;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004894:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1ee      	bne.n	8004880 <USER_SPI_write+0xa0>
 80048a2:	e000      	b.n	80048a6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80048a4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80048a6:	21fd      	movs	r1, #253	; 0xfd
 80048a8:	2000      	movs	r0, #0
 80048aa:	f7ff fd90 	bl	80043ce <xmit_datablock>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <USER_SPI_write+0xd8>
 80048b4:	2301      	movs	r3, #1
 80048b6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80048b8:	f7ff fd38 	bl	800432c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000024 	.word	0x20000024
 80048d4:	200005ac 	.word	0x200005ac

080048d8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08c      	sub	sp, #48	; 0x30
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	603a      	str	r2, [r7, #0]
 80048e2:	71fb      	strb	r3, [r7, #7]
 80048e4:	460b      	mov	r3, r1
 80048e6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <USER_SPI_ioctl+0x1a>
 80048ee:	2304      	movs	r3, #4
 80048f0:	e15c      	b.n	8004bac <USER_SPI_ioctl+0x2d4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80048f2:	4bb0      	ldr	r3, [pc, #704]	; (8004bb4 <USER_SPI_ioctl+0x2dc>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <USER_SPI_ioctl+0x2c>
 8004900:	2303      	movs	r3, #3
 8004902:	e153      	b.n	8004bac <USER_SPI_ioctl+0x2d4>

	res = RES_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800490a:	79bb      	ldrb	r3, [r7, #6]
 800490c:	2b04      	cmp	r3, #4
 800490e:	f200 8136 	bhi.w	8004b7e <USER_SPI_ioctl+0x2a6>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <USER_SPI_ioctl+0x40>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	0800492d 	.word	0x0800492d
 800491c:	08004941 	.word	0x08004941
 8004920:	08004b87 	.word	0x08004b87
 8004924:	080049ed 	.word	0x080049ed
 8004928:	08004ae3 	.word	0x08004ae3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800492c:	f7ff fd0c 	bl	8004348 <spiselect>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8129 	beq.w	8004b8a <USER_SPI_ioctl+0x2b2>
 8004938:	2300      	movs	r3, #0
 800493a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800493e:	e124      	b.n	8004b8a <USER_SPI_ioctl+0x2b2>

		break;


	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004940:	2100      	movs	r1, #0
 8004942:	2009      	movs	r0, #9
 8004944:	f7ff fd75 	bl	8004432 <send_cmd>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	f040 811f 	bne.w	8004b8e <USER_SPI_ioctl+0x2b6>
 8004950:	f107 030c 	add.w	r3, r7, #12
 8004954:	2110      	movs	r1, #16
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fd10 	bl	800437c <rcvr_datablock>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8115 	beq.w	8004b8e <USER_SPI_ioctl+0x2b6>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004964:	7b3b      	ldrb	r3, [r7, #12]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d111      	bne.n	8004992 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800496e:	7d7b      	ldrb	r3, [r7, #21]
 8004970:	461a      	mov	r2, r3
 8004972:	7d3b      	ldrb	r3, [r7, #20]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	4413      	add	r3, r2
 8004978:	461a      	mov	r2, r3
 800497a:	7cfb      	ldrb	r3, [r7, #19]
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004982:	4413      	add	r3, r2
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	029a      	lsls	r2, r3, #10
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e028      	b.n	80049e4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004992:	7c7b      	ldrb	r3, [r7, #17]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	b2da      	uxtb	r2, r3
 800499a:	7dbb      	ldrb	r3, [r7, #22]
 800499c:	09db      	lsrs	r3, r3, #7
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	7d7b      	ldrb	r3, [r7, #21]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f003 0306 	and.w	r3, r3, #6
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	3302      	adds	r3, #2
 80049b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80049ba:	7d3b      	ldrb	r3, [r7, #20]
 80049bc:	099b      	lsrs	r3, r3, #6
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	7cfb      	ldrb	r3, [r7, #19]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	7cbb      	ldrb	r3, [r7, #18]
 80049ca:	029b      	lsls	r3, r3, #10
 80049cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049d0:	4413      	add	r3, r2
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80049d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049da:	3b09      	subs	r3, #9
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	409a      	lsls	r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80049ea:	e0d0      	b.n	8004b8e <USER_SPI_ioctl+0x2b6>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80049ec:	4b72      	ldr	r3, [pc, #456]	; (8004bb8 <USER_SPI_ioctl+0x2e0>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d031      	beq.n	8004a5c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80049f8:	2100      	movs	r1, #0
 80049fa:	208d      	movs	r0, #141	; 0x8d
 80049fc:	f7ff fd19 	bl	8004432 <send_cmd>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f040 80c5 	bne.w	8004b92 <USER_SPI_ioctl+0x2ba>
				xchg_spi(0xFF);
 8004a08:	20ff      	movs	r0, #255	; 0xff
 8004a0a:	f7ff fc1f 	bl	800424c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004a0e:	f107 030c 	add.w	r3, r7, #12
 8004a12:	2110      	movs	r1, #16
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff fcb1 	bl	800437c <rcvr_datablock>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80b8 	beq.w	8004b92 <USER_SPI_ioctl+0x2ba>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004a22:	2330      	movs	r3, #48	; 0x30
 8004a24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004a28:	e007      	b.n	8004a3a <USER_SPI_ioctl+0x162>
 8004a2a:	20ff      	movs	r0, #255	; 0xff
 8004a2c:	f7ff fc0e 	bl	800424c <xchg_spi>
 8004a30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a34:	3b01      	subs	r3, #1
 8004a36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004a3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f3      	bne.n	8004a2a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004a42:	7dbb      	ldrb	r3, [r7, #22]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2310      	movs	r3, #16
 8004a4c:	fa03 f202 	lsl.w	r2, r3, r2
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004a5a:	e09a      	b.n	8004b92 <USER_SPI_ioctl+0x2ba>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2009      	movs	r0, #9
 8004a60:	f7ff fce7 	bl	8004432 <send_cmd>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f040 8093 	bne.w	8004b92 <USER_SPI_ioctl+0x2ba>
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	2110      	movs	r1, #16
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fc82 	bl	800437c <rcvr_datablock>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8089 	beq.w	8004b92 <USER_SPI_ioctl+0x2ba>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004a80:	4b4d      	ldr	r3, [pc, #308]	; (8004bb8 <USER_SPI_ioctl+0x2e0>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d012      	beq.n	8004ab2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004a8c:	7dbb      	ldrb	r3, [r7, #22]
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004a94:	7dfa      	ldrb	r2, [r7, #23]
 8004a96:	09d2      	lsrs	r2, r2, #7
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	7e7b      	ldrb	r3, [r7, #25]
 8004aa0:	099b      	lsrs	r3, r3, #6
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e013      	b.n	8004ada <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004ab2:	7dbb      	ldrb	r3, [r7, #22]
 8004ab4:	109b      	asrs	r3, r3, #2
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	3301      	adds	r3, #1
 8004abe:	7dfa      	ldrb	r2, [r7, #23]
 8004ac0:	00d2      	lsls	r2, r2, #3
 8004ac2:	f002 0218 	and.w	r2, r2, #24
 8004ac6:	7df9      	ldrb	r1, [r7, #23]
 8004ac8:	0949      	lsrs	r1, r1, #5
 8004aca:	b2c9      	uxtb	r1, r1
 8004acc:	440a      	add	r2, r1
 8004ace:	3201      	adds	r2, #1
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004ae0:	e057      	b.n	8004b92 <USER_SPI_ioctl+0x2ba>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004ae2:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <USER_SPI_ioctl+0x2e0>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d053      	beq.n	8004b96 <USER_SPI_ioctl+0x2be>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004aee:	f107 020c 	add.w	r2, r7, #12
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	210b      	movs	r1, #11
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff feee 	bl	80048d8 <USER_SPI_ioctl>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d14b      	bne.n	8004b9a <USER_SPI_ioctl+0x2c2>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004b02:	7b3b      	ldrb	r3, [r7, #12]
 8004b04:	099b      	lsrs	r3, r3, #6
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <USER_SPI_ioctl+0x23e>
 8004b0c:	7dbb      	ldrb	r3, [r7, #22]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d043      	beq.n	8004b9e <USER_SPI_ioctl+0x2c6>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <USER_SPI_ioctl+0x2e0>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d105      	bne.n	8004b3e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	025b      	lsls	r3, r3, #9
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	025b      	lsls	r3, r3, #9
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b40:	2020      	movs	r0, #32
 8004b42:	f7ff fc76 	bl	8004432 <send_cmd>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d12a      	bne.n	8004ba2 <USER_SPI_ioctl+0x2ca>
 8004b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b4e:	2021      	movs	r0, #33	; 0x21
 8004b50:	f7ff fc6f 	bl	8004432 <send_cmd>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d123      	bne.n	8004ba2 <USER_SPI_ioctl+0x2ca>
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	2026      	movs	r0, #38	; 0x26
 8004b5e:	f7ff fc68 	bl	8004432 <send_cmd>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11c      	bne.n	8004ba2 <USER_SPI_ioctl+0x2ca>
 8004b68:	f247 5030 	movw	r0, #30000	; 0x7530
 8004b6c:	f7ff fbbb 	bl	80042e6 <wait_ready>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d015      	beq.n	8004ba2 <USER_SPI_ioctl+0x2ca>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004b7c:	e011      	b.n	8004ba2 <USER_SPI_ioctl+0x2ca>

	default:
		res = RES_PARERR;
 8004b7e:	2304      	movs	r3, #4
 8004b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b84:	e00e      	b.n	8004ba4 <USER_SPI_ioctl+0x2cc>
		break;
 8004b86:	bf00      	nop
 8004b88:	e00c      	b.n	8004ba4 <USER_SPI_ioctl+0x2cc>
		break;
 8004b8a:	bf00      	nop
 8004b8c:	e00a      	b.n	8004ba4 <USER_SPI_ioctl+0x2cc>
		break;
 8004b8e:	bf00      	nop
 8004b90:	e008      	b.n	8004ba4 <USER_SPI_ioctl+0x2cc>
		break;
 8004b92:	bf00      	nop
 8004b94:	e006      	b.n	8004ba4 <USER_SPI_ioctl+0x2cc>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004b96:	bf00      	nop
 8004b98:	e004      	b.n	8004ba4 <USER_SPI_ioctl+0x2cc>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <USER_SPI_ioctl+0x2cc>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <USER_SPI_ioctl+0x2cc>
		break;
 8004ba2:	bf00      	nop
	}

	despiselect();
 8004ba4:	f7ff fbc2 	bl	800432c <despiselect>

	return res;
 8004ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3730      	adds	r7, #48	; 0x30
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000024 	.word	0x20000024
 8004bb8:	200005ac 	.word	0x200005ac

08004bbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	4a08      	ldr	r2, [pc, #32]	; (8004bec <disk_status+0x30>)
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	79fa      	ldrb	r2, [r7, #7]
 8004bd4:	4905      	ldr	r1, [pc, #20]	; (8004bec <disk_status+0x30>)
 8004bd6:	440a      	add	r2, r1
 8004bd8:	7a12      	ldrb	r2, [r2, #8]
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4798      	blx	r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	200007d8 	.word	0x200007d8

08004bf0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	4a0d      	ldr	r2, [pc, #52]	; (8004c38 <disk_initialize+0x48>)
 8004c02:	5cd3      	ldrb	r3, [r2, r3]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d111      	bne.n	8004c2c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	4a0b      	ldr	r2, [pc, #44]	; (8004c38 <disk_initialize+0x48>)
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	4a09      	ldr	r2, [pc, #36]	; (8004c38 <disk_initialize+0x48>)
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	79fa      	ldrb	r2, [r7, #7]
 8004c1e:	4906      	ldr	r1, [pc, #24]	; (8004c38 <disk_initialize+0x48>)
 8004c20:	440a      	add	r2, r1
 8004c22:	7a12      	ldrb	r2, [r2, #8]
 8004c24:	4610      	mov	r0, r2
 8004c26:	4798      	blx	r3
 8004c28:	4603      	mov	r3, r0
 8004c2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	200007d8 	.word	0x200007d8

08004c3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <disk_read+0x3c>)
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	689c      	ldr	r4, [r3, #8]
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <disk_read+0x3c>)
 8004c5c:	4413      	add	r3, r2
 8004c5e:	7a18      	ldrb	r0, [r3, #8]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	47a0      	blx	r4
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd90      	pop	{r4, r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200007d8 	.word	0x200007d8

08004c7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4603      	mov	r3, r0
 8004c8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <disk_write+0x3c>)
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	68dc      	ldr	r4, [r3, #12]
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	4a07      	ldr	r2, [pc, #28]	; (8004cb8 <disk_write+0x3c>)
 8004c9c:	4413      	add	r3, r2
 8004c9e:	7a18      	ldrb	r0, [r3, #8]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	47a0      	blx	r4
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd90      	pop	{r4, r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200007d8 	.word	0x200007d8

08004cbc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	603a      	str	r2, [r7, #0]
 8004cc6:	71fb      	strb	r3, [r7, #7]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <disk_ioctl+0x38>)
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	79fa      	ldrb	r2, [r7, #7]
 8004cda:	4906      	ldr	r1, [pc, #24]	; (8004cf4 <disk_ioctl+0x38>)
 8004cdc:	440a      	add	r2, r1
 8004cde:	7a10      	ldrb	r0, [r2, #8]
 8004ce0:	79b9      	ldrb	r1, [r7, #6]
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	4798      	blx	r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	73fb      	strb	r3, [r7, #15]
  return res;
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	200007d8 	.word	0x200007d8

08004cf8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3301      	adds	r3, #1
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004d08:	89fb      	ldrh	r3, [r7, #14]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	b21a      	sxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b21b      	sxth	r3, r3
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b21b      	sxth	r3, r3
 8004d18:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004d1a:	89fb      	ldrh	r3, [r7, #14]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3303      	adds	r3, #3
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	3202      	adds	r2, #2
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	3201      	adds	r2, #1
 8004d4e:	7812      	ldrb	r2, [r2, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	7812      	ldrb	r2, [r2, #0]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004d60:	68fb      	ldr	r3, [r7, #12]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	460b      	mov	r3, r1
 8004d78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	887a      	ldrh	r2, [r7, #2]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	0a1b      	lsrs	r3, r3, #8
 8004d8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	0a1b      	lsrs	r3, r3, #8
 8004de2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	1c53      	adds	r3, r2, #1
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	1c59      	adds	r1, r3, #1
 8004e20:	6179      	str	r1, [r7, #20]
 8004e22:	7812      	ldrb	r2, [r2, #0]
 8004e24:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f1      	bne.n	8004e16 <mem_cpy+0x1a>
	}
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004e3e:	b480      	push	{r7}
 8004e40:	b087      	sub	sp, #28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	617a      	str	r2, [r7, #20]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	607b      	str	r3, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f3      	bne.n	8004e4e <mem_set+0x10>
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	; 0x24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	61fa      	str	r2, [r7, #28]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	61ba      	str	r2, [r7, #24]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	1acb      	subs	r3, r1, r3
 8004ea0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <mem_cmp+0x40>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0eb      	beq.n	8004e8c <mem_cmp+0x18>

	return r;
 8004eb4:	697b      	ldr	r3, [r7, #20]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3724      	adds	r7, #36	; 0x24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ecc:	e002      	b.n	8004ed4 <chk_chr+0x12>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <chk_chr+0x26>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d1f2      	bne.n	8004ece <chk_chr+0xc>
	return *str;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	781b      	ldrb	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	e029      	b.n	8004f60 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004f0c:	4a27      	ldr	r2, [pc, #156]	; (8004fac <chk_lock+0xb4>)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	4413      	add	r3, r2
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01d      	beq.n	8004f56 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f1a:	4a24      	ldr	r2, [pc, #144]	; (8004fac <chk_lock+0xb4>)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	4413      	add	r3, r2
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d116      	bne.n	8004f5a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004f2c:	4a1f      	ldr	r2, [pc, #124]	; (8004fac <chk_lock+0xb4>)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d10c      	bne.n	8004f5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004f40:	4a1a      	ldr	r2, [pc, #104]	; (8004fac <chk_lock+0xb4>)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	4413      	add	r3, r2
 8004f48:	3308      	adds	r3, #8
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d102      	bne.n	8004f5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004f54:	e007      	b.n	8004f66 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004f56:	2301      	movs	r3, #1
 8004f58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d9d2      	bls.n	8004f0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d109      	bne.n	8004f80 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <chk_lock+0x80>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d101      	bne.n	8004f7c <chk_lock+0x84>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e010      	b.n	8004f9e <chk_lock+0xa6>
 8004f7c:	2312      	movs	r3, #18
 8004f7e:	e00e      	b.n	8004f9e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <chk_lock+0xa0>
 8004f86:	4a09      	ldr	r2, [pc, #36]	; (8004fac <chk_lock+0xb4>)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	4413      	add	r3, r2
 8004f8e:	330c      	adds	r3, #12
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f96:	d101      	bne.n	8004f9c <chk_lock+0xa4>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	e000      	b.n	8004f9e <chk_lock+0xa6>
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	200005b8 	.word	0x200005b8

08004fb0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	607b      	str	r3, [r7, #4]
 8004fba:	e002      	b.n	8004fc2 <enq_lock+0x12>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d806      	bhi.n	8004fd6 <enq_lock+0x26>
 8004fc8:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <enq_lock+0x40>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	4413      	add	r3, r2
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f2      	bne.n	8004fbc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	200005b8 	.word	0x200005b8

08004ff4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	e01f      	b.n	8005044 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005004:	4a41      	ldr	r2, [pc, #260]	; (800510c <inc_lock+0x118>)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	4413      	add	r3, r2
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d113      	bne.n	800503e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005016:	4a3d      	ldr	r2, [pc, #244]	; (800510c <inc_lock+0x118>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	4413      	add	r3, r2
 800501e:	3304      	adds	r3, #4
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005026:	429a      	cmp	r2, r3
 8005028:	d109      	bne.n	800503e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800502a:	4a38      	ldr	r2, [pc, #224]	; (800510c <inc_lock+0x118>)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	4413      	add	r3, r2
 8005032:	3308      	adds	r3, #8
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800503a:	429a      	cmp	r2, r3
 800503c:	d006      	beq.n	800504c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d9dc      	bls.n	8005004 <inc_lock+0x10>
 800504a:	e000      	b.n	800504e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800504c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d132      	bne.n	80050ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e002      	b.n	8005060 <inc_lock+0x6c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d806      	bhi.n	8005074 <inc_lock+0x80>
 8005066:	4a29      	ldr	r2, [pc, #164]	; (800510c <inc_lock+0x118>)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	4413      	add	r3, r2
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f2      	bne.n	800505a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d101      	bne.n	800507e <inc_lock+0x8a>
 800507a:	2300      	movs	r3, #0
 800507c:	e040      	b.n	8005100 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4922      	ldr	r1, [pc, #136]	; (800510c <inc_lock+0x118>)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	440b      	add	r3, r1
 800508a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	491e      	ldr	r1, [pc, #120]	; (800510c <inc_lock+0x118>)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	440b      	add	r3, r1
 8005098:	3304      	adds	r3, #4
 800509a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	491a      	ldr	r1, [pc, #104]	; (800510c <inc_lock+0x118>)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	440b      	add	r3, r1
 80050a8:	3308      	adds	r3, #8
 80050aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80050ac:	4a17      	ldr	r2, [pc, #92]	; (800510c <inc_lock+0x118>)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	4413      	add	r3, r2
 80050b4:	330c      	adds	r3, #12
 80050b6:	2200      	movs	r2, #0
 80050b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <inc_lock+0xe0>
 80050c0:	4a12      	ldr	r2, [pc, #72]	; (800510c <inc_lock+0x118>)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	4413      	add	r3, r2
 80050c8:	330c      	adds	r3, #12
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <inc_lock+0xe0>
 80050d0:	2300      	movs	r3, #0
 80050d2:	e015      	b.n	8005100 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d108      	bne.n	80050ec <inc_lock+0xf8>
 80050da:	4a0c      	ldr	r2, [pc, #48]	; (800510c <inc_lock+0x118>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	4413      	add	r3, r2
 80050e2:	330c      	adds	r3, #12
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	3301      	adds	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	e001      	b.n	80050f0 <inc_lock+0xfc>
 80050ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050f0:	4906      	ldr	r1, [pc, #24]	; (800510c <inc_lock+0x118>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	440b      	add	r3, r1
 80050f8:	330c      	adds	r3, #12
 80050fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3301      	adds	r3, #1
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	200005b8 	.word	0x200005b8

08005110 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3b01      	subs	r3, #1
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d825      	bhi.n	8005170 <dec_lock+0x60>
		n = Files[i].ctr;
 8005124:	4a17      	ldr	r2, [pc, #92]	; (8005184 <dec_lock+0x74>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	4413      	add	r3, r2
 800512c:	330c      	adds	r3, #12
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005132:	89fb      	ldrh	r3, [r7, #14]
 8005134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005138:	d101      	bne.n	800513e <dec_lock+0x2e>
 800513a:	2300      	movs	r3, #0
 800513c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800513e:	89fb      	ldrh	r3, [r7, #14]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <dec_lock+0x3a>
 8005144:	89fb      	ldrh	r3, [r7, #14]
 8005146:	3b01      	subs	r3, #1
 8005148:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800514a:	4a0e      	ldr	r2, [pc, #56]	; (8005184 <dec_lock+0x74>)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	4413      	add	r3, r2
 8005152:	330c      	adds	r3, #12
 8005154:	89fa      	ldrh	r2, [r7, #14]
 8005156:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005158:	89fb      	ldrh	r3, [r7, #14]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <dec_lock+0x5a>
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <dec_lock+0x74>)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	4413      	add	r3, r2
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	737b      	strb	r3, [r7, #13]
 800516e:	e001      	b.n	8005174 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005170:	2302      	movs	r3, #2
 8005172:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005174:	7b7b      	ldrb	r3, [r7, #13]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	200005b8 	.word	0x200005b8

08005188 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e010      	b.n	80051b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005196:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <clear_lock+0x44>)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	4413      	add	r3, r2
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d105      	bne.n	80051b2 <clear_lock+0x2a>
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <clear_lock+0x44>)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	4413      	add	r3, r2
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3301      	adds	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d9eb      	bls.n	8005196 <clear_lock+0xe>
	}
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	200005b8 	.word	0x200005b8

080051d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	78db      	ldrb	r3, [r3, #3]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d034      	beq.n	800524e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	7858      	ldrb	r0, [r3, #1]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80051f4:	2301      	movs	r3, #1
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	f7ff fd40 	bl	8004c7c <disk_write>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005202:	2301      	movs	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
 8005206:	e022      	b.n	800524e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	429a      	cmp	r2, r3
 800521c:	d217      	bcs.n	800524e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	789b      	ldrb	r3, [r3, #2]
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	e010      	b.n	8005248 <sync_window+0x78>
					wsect += fs->fsize;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4413      	add	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	7858      	ldrb	r0, [r3, #1]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800523a:	2301      	movs	r3, #1
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	f7ff fd1d 	bl	8004c7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3b01      	subs	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d8eb      	bhi.n	8005226 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d01b      	beq.n	80052a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ffad 	bl	80051d0 <sync_window>
 8005276:	4603      	mov	r3, r0
 8005278:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d113      	bne.n	80052a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7858      	ldrb	r0, [r3, #1]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800528a:	2301      	movs	r3, #1
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	f7ff fcd5 	bl	8004c3c <disk_read>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005298:	f04f 33ff 	mov.w	r3, #4294967295
 800529c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ff87 	bl	80051d0 <sync_window>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d158      	bne.n	800537e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d148      	bne.n	8005366 <sync_fs+0xb2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	791b      	ldrb	r3, [r3, #4]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d144      	bne.n	8005366 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3334      	adds	r3, #52	; 0x34
 80052e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fda9 	bl	8004e3e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3334      	adds	r3, #52	; 0x34
 80052f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80052f4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fd38 	bl	8004d6e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3334      	adds	r3, #52	; 0x34
 8005302:	4921      	ldr	r1, [pc, #132]	; (8005388 <sync_fs+0xd4>)
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fd4d 	bl	8004da4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3334      	adds	r3, #52	; 0x34
 800530e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005312:	491e      	ldr	r1, [pc, #120]	; (800538c <sync_fs+0xd8>)
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff fd45 	bl	8004da4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3334      	adds	r3, #52	; 0x34
 800531e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f7ff fd3b 	bl	8004da4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3334      	adds	r3, #52	; 0x34
 8005332:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f7ff fd31 	bl	8004da4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	7858      	ldrb	r0, [r3, #1]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800535a:	2301      	movs	r3, #1
 800535c:	f7ff fc8e 	bl	8004c7c <disk_write>
			fs->fsi_flag = 0;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	785b      	ldrb	r3, [r3, #1]
 800536a:	2200      	movs	r2, #0
 800536c:	2100      	movs	r1, #0
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fca4 	bl	8004cbc <disk_ioctl>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <sync_fs+0xca>
 800537a:	2301      	movs	r3, #1
 800537c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	41615252 	.word	0x41615252
 800538c:	61417272 	.word	0x61417272

08005390 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	3b02      	subs	r3, #2
 800539e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	3b02      	subs	r3, #2
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d301      	bcc.n	80053b0 <clust2sect+0x20>
 80053ac:	2300      	movs	r3, #0
 80053ae:	e008      	b.n	80053c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	895b      	ldrh	r3, [r3, #10]
 80053b4:	461a      	mov	r2, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	fb03 f202 	mul.w	r2, r3, r2
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4413      	add	r3, r2
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d904      	bls.n	80053ee <get_fat+0x20>
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d302      	bcc.n	80053f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80053ee:	2301      	movs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e08f      	b.n	8005514 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80053f4:	f04f 33ff 	mov.w	r3, #4294967295
 80053f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d062      	beq.n	80054c8 <get_fat+0xfa>
 8005402:	2b03      	cmp	r3, #3
 8005404:	dc7c      	bgt.n	8005500 <get_fat+0x132>
 8005406:	2b01      	cmp	r3, #1
 8005408:	d002      	beq.n	8005410 <get_fat+0x42>
 800540a:	2b02      	cmp	r3, #2
 800540c:	d042      	beq.n	8005494 <get_fat+0xc6>
 800540e:	e077      	b.n	8005500 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	0a5b      	lsrs	r3, r3, #9
 8005426:	4413      	add	r3, r2
 8005428:	4619      	mov	r1, r3
 800542a:	6938      	ldr	r0, [r7, #16]
 800542c:	f7ff ff14 	bl	8005258 <move_window>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d167      	bne.n	8005506 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	60fa      	str	r2, [r7, #12]
 800543c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005448:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	0a5b      	lsrs	r3, r3, #9
 8005452:	4413      	add	r3, r2
 8005454:	4619      	mov	r1, r3
 8005456:	6938      	ldr	r0, [r7, #16]
 8005458:	f7ff fefe 	bl	8005258 <move_window>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d153      	bne.n	800550a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	461a      	mov	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4313      	orrs	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <get_fat+0xbc>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	e002      	b.n	8005490 <get_fat+0xc2>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005490:	617b      	str	r3, [r7, #20]
			break;
 8005492:	e03f      	b.n	8005514 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	0a1b      	lsrs	r3, r3, #8
 800549c:	4413      	add	r3, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	6938      	ldr	r0, [r7, #16]
 80054a2:	f7ff fed9 	bl	8005258 <move_window>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d130      	bne.n	800550e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80054ba:	4413      	add	r3, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff fc1b 	bl	8004cf8 <ld_word>
 80054c2:	4603      	mov	r3, r0
 80054c4:	617b      	str	r3, [r7, #20]
			break;
 80054c6:	e025      	b.n	8005514 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	09db      	lsrs	r3, r3, #7
 80054d0:	4413      	add	r3, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	6938      	ldr	r0, [r7, #16]
 80054d6:	f7ff febf 	bl	8005258 <move_window>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d118      	bne.n	8005512 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80054ee:	4413      	add	r3, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fc19 	bl	8004d28 <ld_dword>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054fc:	617b      	str	r3, [r7, #20]
			break;
 80054fe:	e009      	b.n	8005514 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005500:	2301      	movs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e006      	b.n	8005514 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005506:	bf00      	nop
 8005508:	e004      	b.n	8005514 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005512:	bf00      	nop
		}
	}

	return val;
 8005514:	697b      	ldr	r3, [r7, #20]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800551e:	b590      	push	{r4, r7, lr}
 8005520:	b089      	sub	sp, #36	; 0x24
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800552a:	2302      	movs	r3, #2
 800552c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b01      	cmp	r3, #1
 8005532:	f240 80d2 	bls.w	80056da <put_fat+0x1bc>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	429a      	cmp	r2, r3
 800553e:	f080 80cc 	bcs.w	80056da <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b03      	cmp	r3, #3
 8005548:	f000 8096 	beq.w	8005678 <put_fat+0x15a>
 800554c:	2b03      	cmp	r3, #3
 800554e:	f300 80cd 	bgt.w	80056ec <put_fat+0x1ce>
 8005552:	2b01      	cmp	r3, #1
 8005554:	d002      	beq.n	800555c <put_fat+0x3e>
 8005556:	2b02      	cmp	r3, #2
 8005558:	d06e      	beq.n	8005638 <put_fat+0x11a>
 800555a:	e0c7      	b.n	80056ec <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	085b      	lsrs	r3, r3, #1
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	4413      	add	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	0a5b      	lsrs	r3, r3, #9
 8005572:	4413      	add	r3, r2
 8005574:	4619      	mov	r1, r3
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff fe6e 	bl	8005258 <move_window>
 800557c:	4603      	mov	r3, r0
 800557e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005580:	7ffb      	ldrb	r3, [r7, #31]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 80ab 	bne.w	80056de <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	1c59      	adds	r1, r3, #1
 8005592:	61b9      	str	r1, [r7, #24]
 8005594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005598:	4413      	add	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <put_fat+0xa4>
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b25b      	sxtb	r3, r3
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	b25a      	sxtb	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	4313      	orrs	r3, r2
 80055bc:	b25b      	sxtb	r3, r3
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	e001      	b.n	80055c6 <put_fat+0xa8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	0a5b      	lsrs	r3, r3, #9
 80055d8:	4413      	add	r3, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff fe3b 	bl	8005258 <move_window>
 80055e2:	4603      	mov	r3, r0
 80055e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055e6:	7ffb      	ldrb	r3, [r7, #31]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d17a      	bne.n	80056e2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f8:	4413      	add	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <put_fat+0xf0>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e00e      	b.n	800562c <put_fat+0x10e>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	b25b      	sxtb	r3, r3
 8005614:	f023 030f 	bic.w	r3, r3, #15
 8005618:	b25a      	sxtb	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	b25b      	sxtb	r3, r3
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	b25b      	sxtb	r3, r3
 8005626:	4313      	orrs	r3, r2
 8005628:	b25b      	sxtb	r3, r3
 800562a:	b2db      	uxtb	r3, r3
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	70da      	strb	r2, [r3, #3]
			break;
 8005636:	e059      	b.n	80056ec <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	4413      	add	r3, r2
 8005642:	4619      	mov	r1, r3
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff fe07 	bl	8005258 <move_window>
 800564a:	4603      	mov	r3, r0
 800564c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800564e:	7ffb      	ldrb	r3, [r7, #31]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d148      	bne.n	80056e6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005662:	4413      	add	r3, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	b292      	uxth	r2, r2
 8005668:	4611      	mov	r1, r2
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fb7f 	bl	8004d6e <st_word>
			fs->wflag = 1;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	70da      	strb	r2, [r3, #3]
			break;
 8005676:	e039      	b.n	80056ec <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	09db      	lsrs	r3, r3, #7
 8005680:	4413      	add	r3, r2
 8005682:	4619      	mov	r1, r3
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fde7 	bl	8005258 <move_window>
 800568a:	4603      	mov	r3, r0
 800568c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800568e:	7ffb      	ldrb	r3, [r7, #31]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d12a      	bne.n	80056ea <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80056a8:	4413      	add	r3, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fb3c 	bl	8004d28 <ld_dword>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80056b6:	4323      	orrs	r3, r4
 80056b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80056c8:	4413      	add	r3, r2
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fb69 	bl	8004da4 <st_dword>
			fs->wflag = 1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	70da      	strb	r2, [r3, #3]
			break;
 80056d8:	e008      	b.n	80056ec <put_fat+0x1ce>
		}
	}
 80056da:	bf00      	nop
 80056dc:	e006      	b.n	80056ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80056de:	bf00      	nop
 80056e0:	e004      	b.n	80056ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80056ea:	bf00      	nop
	return res;
 80056ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd90      	pop	{r4, r7, pc}

080056f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b088      	sub	sp, #32
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d904      	bls.n	800571c <remove_chain+0x26>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	429a      	cmp	r2, r3
 800571a:	d301      	bcc.n	8005720 <remove_chain+0x2a>
 800571c:	2302      	movs	r3, #2
 800571e:	e04b      	b.n	80057b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	69b8      	ldr	r0, [r7, #24]
 800572e:	f7ff fef6 	bl	800551e <put_fat>
 8005732:	4603      	mov	r3, r0
 8005734:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005736:	7ffb      	ldrb	r3, [r7, #31]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <remove_chain+0x4a>
 800573c:	7ffb      	ldrb	r3, [r7, #31]
 800573e:	e03b      	b.n	80057b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff fe43 	bl	80053ce <get_fat>
 8005748:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d031      	beq.n	80057b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <remove_chain+0x64>
 8005756:	2302      	movs	r3, #2
 8005758:	e02e      	b.n	80057b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d101      	bne.n	8005766 <remove_chain+0x70>
 8005762:	2301      	movs	r3, #1
 8005764:	e028      	b.n	80057b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005766:	2200      	movs	r2, #0
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	69b8      	ldr	r0, [r7, #24]
 800576c:	f7ff fed7 	bl	800551e <put_fat>
 8005770:	4603      	mov	r3, r0
 8005772:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005774:	7ffb      	ldrb	r3, [r7, #31]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <remove_chain+0x88>
 800577a:	7ffb      	ldrb	r3, [r7, #31]
 800577c:	e01c      	b.n	80057b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	3b02      	subs	r3, #2
 8005788:	429a      	cmp	r2, r3
 800578a:	d20b      	bcs.n	80057a4 <remove_chain+0xae>
			fs->free_clst++;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	791b      	ldrb	r3, [r3, #4]
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3c6      	bcc.n	8005740 <remove_chain+0x4a>
 80057b2:	e000      	b.n	80057b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80057b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <create_chain+0x2c>
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d31b      	bcc.n	8005824 <create_chain+0x64>
 80057ec:	2301      	movs	r3, #1
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e018      	b.n	8005824 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80057f2:	6839      	ldr	r1, [r7, #0]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff fdea 	bl	80053ce <get_fat>
 80057fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d801      	bhi.n	8005806 <create_chain+0x46>
 8005802:	2301      	movs	r3, #1
 8005804:	e070      	b.n	80058e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d101      	bne.n	8005812 <create_chain+0x52>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	e06a      	b.n	80058e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	429a      	cmp	r2, r3
 800581a:	d201      	bcs.n	8005820 <create_chain+0x60>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	e063      	b.n	80058e8 <create_chain+0x128>
		scl = clst;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	3301      	adds	r3, #1
 800582c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	429a      	cmp	r2, r3
 8005836:	d307      	bcc.n	8005848 <create_chain+0x88>
				ncl = 2;
 8005838:	2302      	movs	r3, #2
 800583a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	429a      	cmp	r2, r3
 8005842:	d901      	bls.n	8005848 <create_chain+0x88>
 8005844:	2300      	movs	r3, #0
 8005846:	e04f      	b.n	80058e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005848:	69f9      	ldr	r1, [r7, #28]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fdbf 	bl	80053ce <get_fat>
 8005850:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00e      	beq.n	8005876 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d003      	beq.n	8005866 <create_chain+0xa6>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005864:	d101      	bne.n	800586a <create_chain+0xaa>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	e03e      	b.n	80058e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	429a      	cmp	r2, r3
 8005870:	d1da      	bne.n	8005828 <create_chain+0x68>
 8005872:	2300      	movs	r3, #0
 8005874:	e038      	b.n	80058e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005876:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	69f9      	ldr	r1, [r7, #28]
 800587e:	6938      	ldr	r0, [r7, #16]
 8005880:	f7ff fe4d 	bl	800551e <put_fat>
 8005884:	4603      	mov	r3, r0
 8005886:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <create_chain+0xe2>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d006      	beq.n	80058a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6938      	ldr	r0, [r7, #16]
 800589a:	f7ff fe40 	bl	800551e <put_fat>
 800589e:	4603      	mov	r3, r0
 80058a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d116      	bne.n	80058d6 <create_chain+0x116>
		fs->last_clst = ncl;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	3b02      	subs	r3, #2
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d804      	bhi.n	80058c6 <create_chain+0x106>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	1e5a      	subs	r2, r3, #1
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	791b      	ldrb	r3, [r3, #4]
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	711a      	strb	r2, [r3, #4]
 80058d4:	e007      	b.n	80058e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d102      	bne.n	80058e2 <create_chain+0x122>
 80058dc:	f04f 33ff 	mov.w	r3, #4294967295
 80058e0:	e000      	b.n	80058e4 <create_chain+0x124>
 80058e2:	2301      	movs	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80058e6:	69fb      	ldr	r3, [r7, #28]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	3304      	adds	r3, #4
 8005906:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	0a5b      	lsrs	r3, r3, #9
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	8952      	ldrh	r2, [r2, #10]
 8005910:	fbb3 f3f2 	udiv	r3, r3, r2
 8005914:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1d1a      	adds	r2, r3, #4
 800591a:	613a      	str	r2, [r7, #16]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <clmt_clust+0x3a>
 8005926:	2300      	movs	r3, #0
 8005928:	e010      	b.n	800594c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d307      	bcc.n	8005942 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	3304      	adds	r3, #4
 800593e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005940:	e7e9      	b.n	8005916 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005942:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	4413      	add	r3, r2
}
 800594c:	4618      	mov	r0, r3
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800596e:	d204      	bcs.n	800597a <dir_sdi+0x22>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f003 031f 	and.w	r3, r3, #31
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <dir_sdi+0x26>
		return FR_INT_ERR;
 800597a:	2302      	movs	r3, #2
 800597c:	e063      	b.n	8005a46 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <dir_sdi+0x46>
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d902      	bls.n	800599e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10c      	bne.n	80059be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	8912      	ldrh	r2, [r2, #8]
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d301      	bcc.n	80059b4 <dir_sdi+0x5c>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e048      	b.n	8005a46 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	61da      	str	r2, [r3, #28]
 80059bc:	e029      	b.n	8005a12 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	895b      	ldrh	r3, [r3, #10]
 80059c2:	025b      	lsls	r3, r3, #9
 80059c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80059c6:	e019      	b.n	80059fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6979      	ldr	r1, [r7, #20]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fcfe 	bl	80053ce <get_fat>
 80059d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d101      	bne.n	80059e0 <dir_sdi+0x88>
 80059dc:	2301      	movs	r3, #1
 80059de:	e032      	b.n	8005a46 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d904      	bls.n	80059f0 <dir_sdi+0x98>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d301      	bcc.n	80059f4 <dir_sdi+0x9c>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e028      	b.n	8005a46 <dir_sdi+0xee>
			ofs -= csz;
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d2e1      	bcs.n	80059c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005a04:	6979      	ldr	r1, [r7, #20]
 8005a06:	6938      	ldr	r0, [r7, #16]
 8005a08:	f7ff fcc2 	bl	8005390 <clust2sect>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <dir_sdi+0xcc>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e010      	b.n	8005a46 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	0a5b      	lsrs	r3, r3, #9
 8005a2c:	441a      	add	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	441a      	add	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b086      	sub	sp, #24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	3320      	adds	r3, #32
 8005a64:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <dir_next+0x28>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a74:	d301      	bcc.n	8005a7a <dir_next+0x2c>
 8005a76:	2304      	movs	r3, #4
 8005a78:	e0aa      	b.n	8005bd0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f040 8098 	bne.w	8005bb6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	8912      	ldrh	r2, [r2, #8]
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	f0c0 8088 	bcc.w	8005bb6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	61da      	str	r2, [r3, #28]
 8005aac:	2304      	movs	r3, #4
 8005aae:	e08f      	b.n	8005bd0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	0a5b      	lsrs	r3, r3, #9
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	8952      	ldrh	r2, [r2, #10]
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d17a      	bne.n	8005bb6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f7ff fc80 	bl	80053ce <get_fat>
 8005ace:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d801      	bhi.n	8005ada <dir_next+0x8c>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e07a      	b.n	8005bd0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d101      	bne.n	8005ae6 <dir_next+0x98>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e074      	b.n	8005bd0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d358      	bcc.n	8005ba2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	61da      	str	r2, [r3, #28]
 8005afc:	2304      	movs	r3, #4
 8005afe:	e067      	b.n	8005bd0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f7ff fe59 	bl	80057c0 <create_chain>
 8005b0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <dir_next+0xcc>
 8005b16:	2307      	movs	r3, #7
 8005b18:	e05a      	b.n	8005bd0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <dir_next+0xd6>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e055      	b.n	8005bd0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d101      	bne.n	8005b30 <dir_next+0xe2>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e04f      	b.n	8005bd0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff fb4d 	bl	80051d0 <sync_window>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <dir_next+0xf2>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e047      	b.n	8005bd0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3334      	adds	r3, #52	; 0x34
 8005b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff f977 	bl	8004e3e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	6979      	ldr	r1, [r7, #20]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fc1a 	bl	8005390 <clust2sect>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
 8005b62:	e012      	b.n	8005b8a <dir_next+0x13c>
						fs->wflag = 1;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff fb30 	bl	80051d0 <sync_window>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <dir_next+0x12c>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e02a      	b.n	8005bd0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	631a      	str	r2, [r3, #48]	; 0x30
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	895b      	ldrh	r3, [r3, #10]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d3e6      	bcc.n	8005b64 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad2      	subs	r2, r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005ba8:	6979      	ldr	r1, [r7, #20]
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f7ff fbf0 	bl	8005390 <clust2sect>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc8:	441a      	add	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005be8:	2100      	movs	r1, #0
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff feb4 	bl	8005958 <dir_sdi>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d12b      	bne.n	8005c52 <dir_alloc+0x7a>
		n = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	4619      	mov	r1, r3
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff fb27 	bl	8005258 <move_window>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11d      	bne.n	8005c50 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2be5      	cmp	r3, #229	; 0xe5
 8005c1c:	d004      	beq.n	8005c28 <dir_alloc+0x50>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d102      	bne.n	8005c3c <dir_alloc+0x64>
 8005c36:	e00c      	b.n	8005c52 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff ff05 	bl	8005a4e <dir_next>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0d7      	beq.n	8005bfe <dir_alloc+0x26>
 8005c4e:	e000      	b.n	8005c52 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005c50:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d101      	bne.n	8005c5c <dir_alloc+0x84>
 8005c58:	2307      	movs	r3, #7
 8005c5a:	75fb      	strb	r3, [r7, #23]
	return res;
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	331a      	adds	r3, #26
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff f83f 	bl	8004cf8 <ld_word>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d109      	bne.n	8005c9a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff f834 	bl	8004cf8 <ld_word>
 8005c90:	4603      	mov	r3, r0
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	331a      	adds	r3, #26
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	b292      	uxth	r2, r2
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff f857 	bl	8004d6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d109      	bne.n	8005cdc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f103 0214 	add.w	r2, r3, #20
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	0c1b      	lsrs	r3, r3, #16
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f7ff f849 	bl	8004d6e <st_word>
	}
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005ce4:	b590      	push	{r4, r7, lr}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	331a      	adds	r3, #26
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff f800 	bl	8004cf8 <ld_word>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <cmp_lfn+0x1e>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e059      	b.n	8005db6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d0a:	1e5a      	subs	r2, r3, #1
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005d18:	2301      	movs	r3, #1
 8005d1a:	81fb      	strh	r3, [r7, #14]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	e033      	b.n	8005d8a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005d22:	4a27      	ldr	r2, [pc, #156]	; (8005dc0 <cmp_lfn+0xdc>)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4413      	add	r3, r2
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	4413      	add	r3, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fe ffe1 	bl	8004cf8 <ld_word>
 8005d36:	4603      	mov	r3, r0
 8005d38:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005d3a:	89fb      	ldrh	r3, [r7, #14]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01a      	beq.n	8005d76 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2bfe      	cmp	r3, #254	; 0xfe
 8005d44:	d812      	bhi.n	8005d6c <cmp_lfn+0x88>
 8005d46:	89bb      	ldrh	r3, [r7, #12]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 fcdd 	bl	8007708 <ff_wtoupper>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	461c      	mov	r4, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	617a      	str	r2, [r7, #20]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 fcd1 	bl	8007708 <ff_wtoupper>
 8005d66:	4603      	mov	r3, r0
 8005d68:	429c      	cmp	r4, r3
 8005d6a:	d001      	beq.n	8005d70 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e022      	b.n	8005db6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005d70:	89bb      	ldrh	r3, [r7, #12]
 8005d72:	81fb      	strh	r3, [r7, #14]
 8005d74:	e006      	b.n	8005d84 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005d76:	89bb      	ldrh	r3, [r7, #12]
 8005d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d001      	beq.n	8005d84 <cmp_lfn+0xa0>
 8005d80:	2300      	movs	r3, #0
 8005d82:	e018      	b.n	8005db6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	3301      	adds	r3, #1
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	d9c8      	bls.n	8005d22 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <cmp_lfn+0xd0>
 8005d9c:	89fb      	ldrh	r3, [r7, #14]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <cmp_lfn+0xd0>
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <cmp_lfn+0xd0>
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005db4:	2301      	movs	r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd90      	pop	{r4, r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	08008a4c 	.word	0x08008a4c

08005dc4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4611      	mov	r1, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	71fb      	strb	r3, [r7, #7]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	330d      	adds	r3, #13
 8005dde:	79ba      	ldrb	r2, [r7, #6]
 8005de0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	330b      	adds	r3, #11
 8005de6:	220f      	movs	r2, #15
 8005de8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	330c      	adds	r3, #12
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	331a      	adds	r3, #26
 8005df6:	2100      	movs	r1, #0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe ffb8 	bl	8004d6e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	1e5a      	subs	r2, r3, #1
 8005e02:	4613      	mov	r3, r2
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	82fb      	strh	r3, [r7, #22]
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005e16:	8afb      	ldrh	r3, [r7, #22]
 8005e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d007      	beq.n	8005e30 <put_lfn+0x6c>
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	61fa      	str	r2, [r7, #28]
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005e30:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <put_lfn+0xcc>)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	8afa      	ldrh	r2, [r7, #22]
 8005e40:	4611      	mov	r1, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe ff93 	bl	8004d6e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005e48:	8afb      	ldrh	r3, [r7, #22]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <put_lfn+0x90>
 8005e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e52:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	3301      	adds	r3, #1
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	2b0c      	cmp	r3, #12
 8005e5e:	d9da      	bls.n	8005e16 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005e60:	8afb      	ldrh	r3, [r7, #22]
 8005e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d006      	beq.n	8005e78 <put_lfn+0xb4>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d103      	bne.n	8005e80 <put_lfn+0xbc>
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e7e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	79fa      	ldrb	r2, [r7, #7]
 8005e84:	701a      	strb	r2, [r3, #0]
}
 8005e86:	bf00      	nop
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	08008a4c 	.word	0x08008a4c

08005e94 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08c      	sub	sp, #48	; 0x30
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005ea2:	220b      	movs	r2, #11
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7fe ffa8 	bl	8004dfc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d929      	bls.n	8005f06 <gen_numname+0x72>
		sr = seq;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005eb6:	e020      	b.n	8005efa <gen_numname+0x66>
			wc = *lfn++;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	1c9a      	adds	r2, r3, #2
 8005ebc:	607a      	str	r2, [r7, #4]
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec6:	e015      	b.n	8005ef4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005a      	lsls	r2, r3, #1
 8005ecc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	4413      	add	r3, r2
 8005ed4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005ed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <gen_numname+0x5a>
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <gen_numname+0x11c>)
 8005eea:	4053      	eors	r3, r2
 8005eec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	2b0f      	cmp	r3, #15
 8005ef8:	d9e6      	bls.n	8005ec8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1da      	bne.n	8005eb8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005f06:	2307      	movs	r3, #7
 8005f08:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	3330      	adds	r3, #48	; 0x30
 8005f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f1e:	2b39      	cmp	r3, #57	; 0x39
 8005f20:	d904      	bls.n	8005f2c <gen_numname+0x98>
 8005f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f26:	3307      	adds	r3, #7
 8005f28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	1e5a      	subs	r2, r3, #1
 8005f30:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005f36:	4413      	add	r3, r2
 8005f38:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005f3c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	091b      	lsrs	r3, r3, #4
 8005f44:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1de      	bne.n	8005f0a <gen_numname+0x76>
	ns[i] = '~';
 8005f4c:	f107 0214 	add.w	r2, r7, #20
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	4413      	add	r3, r2
 8005f54:	227e      	movs	r2, #126	; 0x7e
 8005f56:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005f58:	2300      	movs	r3, #0
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5c:	e002      	b.n	8005f64 <gen_numname+0xd0>
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	3301      	adds	r3, #1
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
 8005f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d205      	bcs.n	8005f78 <gen_numname+0xe4>
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	4413      	add	r3, r2
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d1f2      	bne.n	8005f5e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	2b07      	cmp	r3, #7
 8005f7c:	d808      	bhi.n	8005f90 <gen_numname+0xfc>
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005f88:	4413      	add	r3, r2
 8005f8a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005f8e:	e000      	b.n	8005f92 <gen_numname+0xfe>
 8005f90:	2120      	movs	r1, #32
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	627a      	str	r2, [r7, #36]	; 0x24
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	460a      	mov	r2, r1
 8005f9e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	2b07      	cmp	r3, #7
 8005fa4:	d9e8      	bls.n	8005f78 <gen_numname+0xe4>
}
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
 8005faa:	3730      	adds	r7, #48	; 0x30
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	00011021 	.word	0x00011021

08005fb4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005fc0:	230b      	movs	r3, #11
 8005fc2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	0852      	lsrs	r2, r2, #1
 8005fca:	01db      	lsls	r3, r3, #7
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	1c59      	adds	r1, r3, #1
 8005fd4:	6079      	str	r1, [r7, #4]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	4413      	add	r3, r2
 8005fda:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ed      	bne.n	8005fc4 <sum_sfn+0x10>
	return sum;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006004:	2100      	movs	r1, #0
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff fca6 	bl	8005958 <dir_sdi>
 800600c:	4603      	mov	r3, r0
 800600e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006010:	7dfb      	ldrb	r3, [r7, #23]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <dir_find+0x24>
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	e0a9      	b.n	800616e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800601a:	23ff      	movs	r3, #255	; 0xff
 800601c:	753b      	strb	r3, [r7, #20]
 800601e:	7d3b      	ldrb	r3, [r7, #20]
 8006020:	757b      	strb	r3, [r7, #21]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f04f 32ff 	mov.w	r2, #4294967295
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	4619      	mov	r1, r3
 8006030:	6938      	ldr	r0, [r7, #16]
 8006032:	f7ff f911 	bl	8005258 <move_window>
 8006036:	4603      	mov	r3, r0
 8006038:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800603a:	7dfb      	ldrb	r3, [r7, #23]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 8090 	bne.w	8006162 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800604a:	7dbb      	ldrb	r3, [r7, #22]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <dir_find+0x60>
 8006050:	2304      	movs	r3, #4
 8006052:	75fb      	strb	r3, [r7, #23]
 8006054:	e08a      	b.n	800616c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	330b      	adds	r3, #11
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006062:	73fb      	strb	r3, [r7, #15]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	7bfa      	ldrb	r2, [r7, #15]
 8006068:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800606a:	7dbb      	ldrb	r3, [r7, #22]
 800606c:	2be5      	cmp	r3, #229	; 0xe5
 800606e:	d007      	beq.n	8006080 <dir_find+0x8a>
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <dir_find+0x98>
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b0f      	cmp	r3, #15
 800607e:	d006      	beq.n	800608e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006080:	23ff      	movs	r3, #255	; 0xff
 8006082:	757b      	strb	r3, [r7, #21]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f04f 32ff 	mov.w	r2, #4294967295
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
 800608c:	e05e      	b.n	800614c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b0f      	cmp	r3, #15
 8006092:	d136      	bne.n	8006102 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800609a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d154      	bne.n	800614c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80060a2:	7dbb      	ldrb	r3, [r7, #22]
 80060a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00d      	beq.n	80060c8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	7b5b      	ldrb	r3, [r3, #13]
 80060b2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80060b4:	7dbb      	ldrb	r3, [r7, #22]
 80060b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ba:	75bb      	strb	r3, [r7, #22]
 80060bc:	7dbb      	ldrb	r3, [r7, #22]
 80060be:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695a      	ldr	r2, [r3, #20]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80060c8:	7dba      	ldrb	r2, [r7, #22]
 80060ca:	7d7b      	ldrb	r3, [r7, #21]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d115      	bne.n	80060fc <dir_find+0x106>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	330d      	adds	r3, #13
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	7d3a      	ldrb	r2, [r7, #20]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d10e      	bne.n	80060fc <dir_find+0x106>
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7ff fdfb 	bl	8005ce4 <cmp_lfn>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <dir_find+0x106>
 80060f4:	7d7b      	ldrb	r3, [r7, #21]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	e000      	b.n	80060fe <dir_find+0x108>
 80060fc:	23ff      	movs	r3, #255	; 0xff
 80060fe:	757b      	strb	r3, [r7, #21]
 8006100:	e024      	b.n	800614c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006102:	7d7b      	ldrb	r3, [r7, #21]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <dir_find+0x126>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff51 	bl	8005fb4 <sum_sfn>
 8006112:	4603      	mov	r3, r0
 8006114:	461a      	mov	r2, r3
 8006116:	7d3b      	ldrb	r3, [r7, #20]
 8006118:	4293      	cmp	r3, r2
 800611a:	d024      	beq.n	8006166 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <dir_find+0x14a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a18      	ldr	r0, [r3, #32]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3324      	adds	r3, #36	; 0x24
 8006132:	220b      	movs	r2, #11
 8006134:	4619      	mov	r1, r3
 8006136:	f7fe fe9d 	bl	8004e74 <mem_cmp>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d014      	beq.n	800616a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006140:	23ff      	movs	r3, #255	; 0xff
 8006142:	757b      	strb	r3, [r7, #21]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f04f 32ff 	mov.w	r2, #4294967295
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800614c:	2100      	movs	r1, #0
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fc7d 	bl	8005a4e <dir_next>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f43f af65 	beq.w	800602a <dir_find+0x34>
 8006160:	e004      	b.n	800616c <dir_find+0x176>
		if (res != FR_OK) break;
 8006162:	bf00      	nop
 8006164:	e002      	b.n	800616c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006166:	bf00      	nop
 8006168:	e000      	b.n	800616c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800616a:	bf00      	nop

	return res;
 800616c:	7dfb      	ldrb	r3, [r7, #23]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800618c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <dir_register+0x20>
 8006194:	2306      	movs	r3, #6
 8006196:	e0e0      	b.n	800635a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006198:	2300      	movs	r3, #0
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
 800619c:	e002      	b.n	80061a4 <dir_register+0x2c>
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	3301      	adds	r3, #1
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f4      	bne.n	800619e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80061ba:	f107 030c 	add.w	r3, r7, #12
 80061be:	220c      	movs	r2, #12
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fe1b 	bl	8004dfc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d032      	beq.n	8006236 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2240      	movs	r2, #64	; 0x40
 80061d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80061d8:	2301      	movs	r3, #1
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
 80061dc:	e016      	b.n	800620c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	f107 010c 	add.w	r1, r7, #12
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	f7ff fe51 	bl	8005e94 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff feff 	bl	8005ff6 <dir_find>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80061fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	3301      	adds	r3, #1
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	2b63      	cmp	r3, #99	; 0x63
 8006210:	d9e5      	bls.n	80061de <dir_register+0x66>
 8006212:	e000      	b.n	8006216 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006214:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	2b64      	cmp	r3, #100	; 0x64
 800621a:	d101      	bne.n	8006220 <dir_register+0xa8>
 800621c:	2307      	movs	r3, #7
 800621e:	e09c      	b.n	800635a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006224:	2b04      	cmp	r3, #4
 8006226:	d002      	beq.n	800622e <dir_register+0xb6>
 8006228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800622c:	e095      	b.n	800635a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800622e:	7dfa      	ldrb	r2, [r7, #23]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <dir_register+0xd8>
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	330c      	adds	r3, #12
 8006244:	4a47      	ldr	r2, [pc, #284]	; (8006364 <dir_register+0x1ec>)
 8006246:	fba2 2303 	umull	r2, r3, r2, r3
 800624a:	089b      	lsrs	r3, r3, #2
 800624c:	3301      	adds	r3, #1
 800624e:	e000      	b.n	8006252 <dir_register+0xda>
 8006250:	2301      	movs	r3, #1
 8006252:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006254:	6a39      	ldr	r1, [r7, #32]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff fcbe 	bl	8005bd8 <dir_alloc>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006266:	2b00      	cmp	r3, #0
 8006268:	d148      	bne.n	80062fc <dir_register+0x184>
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	3b01      	subs	r3, #1
 800626e:	623b      	str	r3, [r7, #32]
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d042      	beq.n	80062fc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	015b      	lsls	r3, r3, #5
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff fb68 	bl	8005958 <dir_sdi>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800628e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006292:	2b00      	cmp	r3, #0
 8006294:	d132      	bne.n	80062fc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3324      	adds	r3, #36	; 0x24
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fe8a 	bl	8005fb4 <sum_sfn>
 80062a0:	4603      	mov	r3, r0
 80062a2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	4619      	mov	r1, r3
 80062aa:	69f8      	ldr	r0, [r7, #28]
 80062ac:	f7fe ffd4 	bl	8005258 <move_window>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80062b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d11d      	bne.n	80062fa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	68d8      	ldr	r0, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a19      	ldr	r1, [r3, #32]
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	7efb      	ldrb	r3, [r7, #27]
 80062cc:	f7ff fd7a 	bl	8005dc4 <put_lfn>
				fs->wflag = 1;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2201      	movs	r2, #1
 80062d4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80062d6:	2100      	movs	r1, #0
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff fbb8 	bl	8005a4e <dir_next>
 80062de:	4603      	mov	r3, r0
 80062e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80062e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <dir_register+0x184>
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1d5      	bne.n	80062a4 <dir_register+0x12c>
 80062f8:	e000      	b.n	80062fc <dir_register+0x184>
				if (res != FR_OK) break;
 80062fa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80062fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006300:	2b00      	cmp	r3, #0
 8006302:	d128      	bne.n	8006356 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	4619      	mov	r1, r3
 800630a:	69f8      	ldr	r0, [r7, #28]
 800630c:	f7fe ffa4 	bl	8005258 <move_window>
 8006310:	4603      	mov	r3, r0
 8006312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800631a:	2b00      	cmp	r3, #0
 800631c:	d11b      	bne.n	8006356 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	2220      	movs	r2, #32
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fd89 	bl	8004e3e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a18      	ldr	r0, [r3, #32]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3324      	adds	r3, #36	; 0x24
 8006334:	220b      	movs	r2, #11
 8006336:	4619      	mov	r1, r3
 8006338:	f7fe fd60 	bl	8004dfc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	330c      	adds	r3, #12
 8006348:	f002 0218 	and.w	r2, r2, #24
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2201      	movs	r2, #1
 8006354:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800635a:	4618      	mov	r0, r3
 800635c:	3730      	adds	r7, #48	; 0x30
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	4ec4ec4f 	.word	0x4ec4ec4f

08006368 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	61ba      	str	r2, [r7, #24]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4413      	add	r3, r2
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006398:	2b1f      	cmp	r3, #31
 800639a:	d940      	bls.n	800641e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800639c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800639e:	2b2f      	cmp	r3, #47	; 0x2f
 80063a0:	d006      	beq.n	80063b0 <create_name+0x48>
 80063a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063a4:	2b5c      	cmp	r3, #92	; 0x5c
 80063a6:	d110      	bne.n	80063ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80063a8:	e002      	b.n	80063b0 <create_name+0x48>
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	3301      	adds	r3, #1
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	4413      	add	r3, r2
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b2f      	cmp	r3, #47	; 0x2f
 80063ba:	d0f6      	beq.n	80063aa <create_name+0x42>
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	4413      	add	r3, r2
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b5c      	cmp	r3, #92	; 0x5c
 80063c6:	d0f0      	beq.n	80063aa <create_name+0x42>
			break;
 80063c8:	e02a      	b.n	8006420 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2bfe      	cmp	r3, #254	; 0xfe
 80063ce:	d901      	bls.n	80063d4 <create_name+0x6c>
 80063d0:	2306      	movs	r3, #6
 80063d2:	e177      	b.n	80066c4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80063d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80063da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063dc:	2101      	movs	r1, #1
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 f956 	bl	8007690 <ff_convert>
 80063e4:	4603      	mov	r3, r0
 80063e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80063e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <create_name+0x8a>
 80063ee:	2306      	movs	r3, #6
 80063f0:	e168      	b.n	80066c4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80063f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063f4:	2b7f      	cmp	r3, #127	; 0x7f
 80063f6:	d809      	bhi.n	800640c <create_name+0xa4>
 80063f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063fa:	4619      	mov	r1, r3
 80063fc:	48b3      	ldr	r0, [pc, #716]	; (80066cc <create_name+0x364>)
 80063fe:	f7fe fd60 	bl	8004ec2 <chk_chr>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <create_name+0xa4>
 8006408:	2306      	movs	r3, #6
 800640a:	e15b      	b.n	80066c4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	617a      	str	r2, [r7, #20]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800641a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800641c:	e7b4      	b.n	8006388 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800641e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	441a      	add	r2, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800642a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800642c:	2b1f      	cmp	r3, #31
 800642e:	d801      	bhi.n	8006434 <create_name+0xcc>
 8006430:	2304      	movs	r3, #4
 8006432:	e000      	b.n	8006436 <create_name+0xce>
 8006434:	2300      	movs	r3, #0
 8006436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800643a:	e011      	b.n	8006460 <create_name+0xf8>
		w = lfn[di - 1];
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006442:	4413      	add	r3, r2
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800644e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006450:	2b20      	cmp	r3, #32
 8006452:	d002      	beq.n	800645a <create_name+0xf2>
 8006454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006456:	2b2e      	cmp	r3, #46	; 0x2e
 8006458:	d106      	bne.n	8006468 <create_name+0x100>
		di--;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	3b01      	subs	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1ea      	bne.n	800643c <create_name+0xd4>
 8006466:	e000      	b.n	800646a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006468:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	2200      	movs	r2, #0
 8006474:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <create_name+0x118>
 800647c:	2306      	movs	r3, #6
 800647e:	e121      	b.n	80066c4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3324      	adds	r3, #36	; 0x24
 8006484:	220b      	movs	r2, #11
 8006486:	2120      	movs	r1, #32
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe fcd8 	bl	8004e3e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800648e:	2300      	movs	r3, #0
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e002      	b.n	800649a <create_name+0x132>
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	3301      	adds	r3, #1
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d0f5      	beq.n	8006494 <create_name+0x12c>
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	2b2e      	cmp	r3, #46	; 0x2e
 80064b4:	d0ee      	beq.n	8006494 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <create_name+0x168>
 80064bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064c0:	f043 0303 	orr.w	r3, r3, #3
 80064c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80064c8:	e002      	b.n	80064d0 <create_name+0x168>
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <create_name+0x182>
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80064dc:	4413      	add	r3, r2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	2b2e      	cmp	r3, #46	; 0x2e
 80064e8:	d1ef      	bne.n	80064ca <create_name+0x162>

	i = b = 0; ni = 8;
 80064ea:	2300      	movs	r3, #0
 80064ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80064f0:	2300      	movs	r3, #0
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	2308      	movs	r3, #8
 80064f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	61ba      	str	r2, [r7, #24]
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8090 	beq.w	8006630 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006512:	2b20      	cmp	r3, #32
 8006514:	d006      	beq.n	8006524 <create_name+0x1bc>
 8006516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006518:	2b2e      	cmp	r3, #46	; 0x2e
 800651a:	d10a      	bne.n	8006532 <create_name+0x1ca>
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	429a      	cmp	r2, r3
 8006522:	d006      	beq.n	8006532 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006528:	f043 0303 	orr.w	r3, r3, #3
 800652c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006530:	e07d      	b.n	800662e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006532:	6a3a      	ldr	r2, [r7, #32]
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	429a      	cmp	r2, r3
 8006538:	d203      	bcs.n	8006542 <create_name+0x1da>
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	429a      	cmp	r2, r3
 8006540:	d123      	bne.n	800658a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	2b0b      	cmp	r3, #11
 8006546:	d106      	bne.n	8006556 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800654c:	f043 0303 	orr.w	r3, r3, #3
 8006550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006554:	e06f      	b.n	8006636 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	429a      	cmp	r2, r3
 800655c:	d005      	beq.n	800656a <create_name+0x202>
 800655e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006562:	f043 0303 	orr.w	r3, r3, #3
 8006566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	429a      	cmp	r2, r3
 8006570:	d860      	bhi.n	8006634 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	2308      	movs	r3, #8
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	230b      	movs	r3, #11
 800657c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800657e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006588:	e051      	b.n	800662e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800658a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800658c:	2b7f      	cmp	r3, #127	; 0x7f
 800658e:	d914      	bls.n	80065ba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006592:	2100      	movs	r1, #0
 8006594:	4618      	mov	r0, r3
 8006596:	f001 f87b 	bl	8007690 <ff_convert>
 800659a:	4603      	mov	r3, r0
 800659c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800659e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <create_name+0x246>
 80065a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065a6:	3b80      	subs	r3, #128	; 0x80
 80065a8:	4a49      	ldr	r2, [pc, #292]	; (80066d0 <create_name+0x368>)
 80065aa:	5cd3      	ldrb	r3, [r2, r3]
 80065ac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80065ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065b2:	f043 0302 	orr.w	r3, r3, #2
 80065b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80065ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d007      	beq.n	80065d0 <create_name+0x268>
 80065c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065c2:	4619      	mov	r1, r3
 80065c4:	4843      	ldr	r0, [pc, #268]	; (80066d4 <create_name+0x36c>)
 80065c6:	f7fe fc7c 	bl	8004ec2 <chk_chr>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80065d0:	235f      	movs	r3, #95	; 0x5f
 80065d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80065d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065d8:	f043 0303 	orr.w	r3, r3, #3
 80065dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065e0:	e01b      	b.n	800661a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80065e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d909      	bls.n	80065fc <create_name+0x294>
 80065e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065ea:	2b5a      	cmp	r3, #90	; 0x5a
 80065ec:	d806      	bhi.n	80065fc <create_name+0x294>
					b |= 2;
 80065ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065f2:	f043 0302 	orr.w	r3, r3, #2
 80065f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80065fa:	e00e      	b.n	800661a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80065fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065fe:	2b60      	cmp	r3, #96	; 0x60
 8006600:	d90b      	bls.n	800661a <create_name+0x2b2>
 8006602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006604:	2b7a      	cmp	r3, #122	; 0x7a
 8006606:	d808      	bhi.n	800661a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006608:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800660c:	f043 0301 	orr.w	r3, r3, #1
 8006610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006616:	3b20      	subs	r3, #32
 8006618:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	623a      	str	r2, [r7, #32]
 8006620:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006622:	b2d1      	uxtb	r1, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	460a      	mov	r2, r1
 800662a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800662e:	e763      	b.n	80064f8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006630:	bf00      	nop
 8006632:	e000      	b.n	8006636 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8006634:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800663c:	2be5      	cmp	r3, #229	; 0xe5
 800663e:	d103      	bne.n	8006648 <create_name+0x2e0>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2205      	movs	r2, #5
 8006644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	2b08      	cmp	r3, #8
 800664c:	d104      	bne.n	8006658 <create_name+0x2f0>
 800664e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006658:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800665c:	f003 030c 	and.w	r3, r3, #12
 8006660:	2b0c      	cmp	r3, #12
 8006662:	d005      	beq.n	8006670 <create_name+0x308>
 8006664:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	2b03      	cmp	r3, #3
 800666e:	d105      	bne.n	800667c <create_name+0x314>
 8006670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006674:	f043 0302 	orr.w	r3, r3, #2
 8006678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800667c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d117      	bne.n	80066b8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	2b01      	cmp	r3, #1
 8006692:	d105      	bne.n	80066a0 <create_name+0x338>
 8006694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006698:	f043 0310 	orr.w	r3, r3, #16
 800669c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80066a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066a4:	f003 030c 	and.w	r3, r3, #12
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d105      	bne.n	80066b8 <create_name+0x350>
 80066ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b0:	f043 0308 	orr.w	r3, r3, #8
 80066b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80066be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80066c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3728      	adds	r7, #40	; 0x28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	08008964 	.word	0x08008964
 80066d0:	080089cc 	.word	0x080089cc
 80066d4:	08008970 	.word	0x08008970

080066d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80066ec:	e002      	b.n	80066f4 <follow_path+0x1c>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b2f      	cmp	r3, #47	; 0x2f
 80066fa:	d0f8      	beq.n	80066ee <follow_path+0x16>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b5c      	cmp	r3, #92	; 0x5c
 8006702:	d0f4      	beq.n	80066ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b1f      	cmp	r3, #31
 8006710:	d80a      	bhi.n	8006728 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2280      	movs	r2, #128	; 0x80
 8006716:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800671a:	2100      	movs	r1, #0
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff f91b 	bl	8005958 <dir_sdi>
 8006722:	4603      	mov	r3, r0
 8006724:	75fb      	strb	r3, [r7, #23]
 8006726:	e043      	b.n	80067b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006728:	463b      	mov	r3, r7
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fe1b 	bl	8006368 <create_name>
 8006732:	4603      	mov	r3, r0
 8006734:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d134      	bne.n	80067a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff fc5a 	bl	8005ff6 <dir_find>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800674c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800674e:	7dfb      	ldrb	r3, [r7, #23]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	2b04      	cmp	r3, #4
 8006758:	d127      	bne.n	80067aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800675a:	7afb      	ldrb	r3, [r7, #11]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d122      	bne.n	80067aa <follow_path+0xd2>
 8006764:	2305      	movs	r3, #5
 8006766:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006768:	e01f      	b.n	80067aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11c      	bne.n	80067ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	799b      	ldrb	r3, [r3, #6]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006780:	2305      	movs	r3, #5
 8006782:	75fb      	strb	r3, [r7, #23]
 8006784:	e014      	b.n	80067b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006794:	4413      	add	r3, r2
 8006796:	4619      	mov	r1, r3
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff fa64 	bl	8005c66 <ld_clust>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067a4:	e7c0      	b.n	8006728 <follow_path+0x50>
			if (res != FR_OK) break;
 80067a6:	bf00      	nop
 80067a8:	e002      	b.n	80067b0 <follow_path+0xd8>
				break;
 80067aa:	bf00      	nop
 80067ac:	e000      	b.n	80067b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067ae:	bf00      	nop
			}
		}
	}

	return res;
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b087      	sub	sp, #28
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295
 80067c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d031      	beq.n	8006834 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	e002      	b.n	80067de <get_ldnumber+0x24>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	3301      	adds	r3, #1
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b1f      	cmp	r3, #31
 80067e4:	d903      	bls.n	80067ee <get_ldnumber+0x34>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b3a      	cmp	r3, #58	; 0x3a
 80067ec:	d1f4      	bne.n	80067d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b3a      	cmp	r3, #58	; 0x3a
 80067f4:	d11c      	bne.n	8006830 <get_ldnumber+0x76>
			tp = *path;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	60fa      	str	r2, [r7, #12]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	3b30      	subs	r3, #48	; 0x30
 8006806:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b09      	cmp	r3, #9
 800680c:	d80e      	bhi.n	800682c <get_ldnumber+0x72>
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	429a      	cmp	r2, r3
 8006814:	d10a      	bne.n	800682c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d107      	bne.n	800682c <get_ldnumber+0x72>
					vol = (int)i;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	3301      	adds	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	e002      	b.n	8006836 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006834:	693b      	ldr	r3, [r7, #16]
}
 8006836:	4618      	mov	r0, r3
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	70da      	strb	r2, [r3, #3]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fe fcfa 	bl	8005258 <move_window>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <check_fs+0x2a>
 800686a:	2304      	movs	r3, #4
 800686c:	e038      	b.n	80068e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3334      	adds	r3, #52	; 0x34
 8006872:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fa3e 	bl	8004cf8 <ld_word>
 800687c:	4603      	mov	r3, r0
 800687e:	461a      	mov	r2, r3
 8006880:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <check_fs+0x48>
 8006888:	2303      	movs	r3, #3
 800688a:	e029      	b.n	80068e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006892:	2be9      	cmp	r3, #233	; 0xe9
 8006894:	d009      	beq.n	80068aa <check_fs+0x66>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800689c:	2beb      	cmp	r3, #235	; 0xeb
 800689e:	d11e      	bne.n	80068de <check_fs+0x9a>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80068a6:	2b90      	cmp	r3, #144	; 0x90
 80068a8:	d119      	bne.n	80068de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3334      	adds	r3, #52	; 0x34
 80068ae:	3336      	adds	r3, #54	; 0x36
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe fa39 	bl	8004d28 <ld_dword>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80068bc:	4a0a      	ldr	r2, [pc, #40]	; (80068e8 <check_fs+0xa4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d101      	bne.n	80068c6 <check_fs+0x82>
 80068c2:	2300      	movs	r3, #0
 80068c4:	e00c      	b.n	80068e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3334      	adds	r3, #52	; 0x34
 80068ca:	3352      	adds	r3, #82	; 0x52
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe fa2b 	bl	8004d28 <ld_dword>
 80068d2:	4603      	mov	r3, r0
 80068d4:	4a05      	ldr	r2, [pc, #20]	; (80068ec <check_fs+0xa8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d101      	bne.n	80068de <check_fs+0x9a>
 80068da:	2300      	movs	r3, #0
 80068dc:	e000      	b.n	80068e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80068de:	2302      	movs	r3, #2
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	00544146 	.word	0x00544146
 80068ec:	33544146 	.word	0x33544146

080068f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b096      	sub	sp, #88	; 0x58
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	4613      	mov	r3, r2
 80068fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff ff58 	bl	80067ba <get_ldnumber>
 800690a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800690c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690e:	2b00      	cmp	r3, #0
 8006910:	da01      	bge.n	8006916 <find_volume+0x26>
 8006912:	230b      	movs	r3, #11
 8006914:	e231      	b.n	8006d7a <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006916:	4aa8      	ldr	r2, [pc, #672]	; (8006bb8 <find_volume+0x2c8>)
 8006918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800691e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <find_volume+0x3a>
 8006926:	230c      	movs	r3, #12
 8006928:	e227      	b.n	8006d7a <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800692e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01a      	beq.n	8006976 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe f939 	bl	8004bbc <disk_status>
 800694a:	4603      	mov	r3, r0
 800694c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10c      	bne.n	8006976 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <find_volume+0x82>
 8006962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800696e:	230a      	movs	r3, #10
 8006970:	e203      	b.n	8006d7a <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8006972:	2300      	movs	r3, #0
 8006974:	e201      	b.n	8006d7a <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800697c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697e:	b2da      	uxtb	r2, r3
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe f931 	bl	8004bf0 <disk_initialize>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006994:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80069a0:	2303      	movs	r3, #3
 80069a2:	e1ea      	b.n	8006d7a <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d007      	beq.n	80069ba <find_volume+0xca>
 80069aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80069b6:	230a      	movs	r3, #10
 80069b8:	e1df      	b.n	8006d7a <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80069be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069c2:	f7ff ff3f 	bl	8006844 <check_fs>
 80069c6:	4603      	mov	r3, r0
 80069c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80069cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d14b      	bne.n	8006a6c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80069d4:	2300      	movs	r3, #0
 80069d6:	643b      	str	r3, [r7, #64]	; 0x40
 80069d8:	e01f      	b.n	8006a1a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80069e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80069e8:	4413      	add	r3, r2
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	3304      	adds	r3, #4
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d006      	beq.n	8006a04 <find_volume+0x114>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	3308      	adds	r3, #8
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe f994 	bl	8004d28 <ld_dword>
 8006a00:	4602      	mov	r2, r0
 8006a02:	e000      	b.n	8006a06 <find_volume+0x116>
 8006a04:	2200      	movs	r2, #0
 8006a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006a0e:	440b      	add	r3, r1
 8006a10:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a16:	3301      	adds	r3, #1
 8006a18:	643b      	str	r3, [r7, #64]	; 0x40
 8006a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d9dc      	bls.n	80069da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006a20:	2300      	movs	r3, #0
 8006a22:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <find_volume+0x140>
 8006a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006a38:	4413      	add	r3, r2
 8006a3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006a3e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <find_volume+0x162>
 8006a46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a4a:	f7ff fefb 	bl	8006844 <check_fs>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	e000      	b.n	8006a54 <find_volume+0x164>
 8006a52:	2303      	movs	r3, #3
 8006a54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d905      	bls.n	8006a6c <find_volume+0x17c>
 8006a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a62:	3301      	adds	r3, #1
 8006a64:	643b      	str	r3, [r7, #64]	; 0x40
 8006a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d9e1      	bls.n	8006a30 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d101      	bne.n	8006a78 <find_volume+0x188>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e180      	b.n	8006d7a <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d901      	bls.n	8006a84 <find_volume+0x194>
 8006a80:	230d      	movs	r3, #13
 8006a82:	e17a      	b.n	8006d7a <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	3334      	adds	r3, #52	; 0x34
 8006a88:	330b      	adds	r3, #11
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe f934 	bl	8004cf8 <ld_word>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a96:	d001      	beq.n	8006a9c <find_volume+0x1ac>
 8006a98:	230d      	movs	r3, #13
 8006a9a:	e16e      	b.n	8006d7a <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	3334      	adds	r3, #52	; 0x34
 8006aa0:	3316      	adds	r3, #22
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe f928 	bl	8004cf8 <ld_word>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <find_volume+0x1d0>
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	3334      	adds	r3, #52	; 0x34
 8006ab6:	3324      	adds	r3, #36	; 0x24
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe f935 	bl	8004d28 <ld_dword>
 8006abe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ac4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	789b      	ldrb	r3, [r3, #2]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d005      	beq.n	8006ae4 <find_volume+0x1f4>
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	789b      	ldrb	r3, [r3, #2]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d001      	beq.n	8006ae4 <find_volume+0x1f4>
 8006ae0:	230d      	movs	r3, #13
 8006ae2:	e14a      	b.n	8006d7a <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	789b      	ldrb	r3, [r3, #2]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aec:	fb02 f303 	mul.w	r3, r2, r3
 8006af0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	895b      	ldrh	r3, [r3, #10]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <find_volume+0x228>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	895b      	ldrh	r3, [r3, #10]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	895b      	ldrh	r3, [r3, #10]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	4013      	ands	r3, r2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <find_volume+0x22c>
 8006b18:	230d      	movs	r3, #13
 8006b1a:	e12e      	b.n	8006d7a <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	3334      	adds	r3, #52	; 0x34
 8006b20:	3311      	adds	r3, #17
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fe f8e8 	bl	8004cf8 <ld_word>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	891b      	ldrh	r3, [r3, #8]
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <find_volume+0x252>
 8006b3e:	230d      	movs	r3, #13
 8006b40:	e11b      	b.n	8006d7a <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	3334      	adds	r3, #52	; 0x34
 8006b46:	3313      	adds	r3, #19
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fe f8d5 	bl	8004cf8 <ld_word>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <find_volume+0x276>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	3334      	adds	r3, #52	; 0x34
 8006b5c:	3320      	adds	r3, #32
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe f8e2 	bl	8004d28 <ld_dword>
 8006b64:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	3334      	adds	r3, #52	; 0x34
 8006b6a:	330e      	adds	r3, #14
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fe f8c3 	bl	8004cf8 <ld_word>
 8006b72:	4603      	mov	r3, r0
 8006b74:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006b76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <find_volume+0x290>
 8006b7c:	230d      	movs	r3, #13
 8006b7e:	e0fc      	b.n	8006d7a <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006b80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b84:	4413      	add	r3, r2
 8006b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b88:	8912      	ldrh	r2, [r2, #8]
 8006b8a:	0912      	lsrs	r2, r2, #4
 8006b8c:	b292      	uxth	r2, r2
 8006b8e:	4413      	add	r3, r2
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d201      	bcs.n	8006b9e <find_volume+0x2ae>
 8006b9a:	230d      	movs	r3, #13
 8006b9c:	e0ed      	b.n	8006d7a <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ba6:	8952      	ldrh	r2, [r2, #10]
 8006ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <find_volume+0x2cc>
 8006bb4:	230d      	movs	r3, #13
 8006bb6:	e0e0      	b.n	8006d7a <find_volume+0x48a>
 8006bb8:	200005b0 	.word	0x200005b0
		fmt = FS_FAT32;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d802      	bhi.n	8006bd2 <find_volume+0x2e2>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d802      	bhi.n	8006be2 <find_volume+0x2f2>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	1c9a      	adds	r2, r3, #2
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bee:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006bf0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf4:	441a      	add	r2, r3
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006bfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	441a      	add	r2, r3
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006c04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d11e      	bne.n	8006c4a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	3334      	adds	r3, #52	; 0x34
 8006c10:	332a      	adds	r3, #42	; 0x2a
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe f870 	bl	8004cf8 <ld_word>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <find_volume+0x332>
 8006c1e:	230d      	movs	r3, #13
 8006c20:	e0ab      	b.n	8006d7a <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	891b      	ldrh	r3, [r3, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <find_volume+0x33e>
 8006c2a:	230d      	movs	r3, #13
 8006c2c:	e0a5      	b.n	8006d7a <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	3334      	adds	r3, #52	; 0x34
 8006c32:	332c      	adds	r3, #44	; 0x2c
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fe f877 	bl	8004d28 <ld_dword>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	647b      	str	r3, [r7, #68]	; 0x44
 8006c48:	e01f      	b.n	8006c8a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	891b      	ldrh	r3, [r3, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <find_volume+0x366>
 8006c52:	230d      	movs	r3, #13
 8006c54:	e091      	b.n	8006d7a <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5c:	441a      	add	r2, r3
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d103      	bne.n	8006c72 <find_volume+0x382>
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	e00a      	b.n	8006c88 <find_volume+0x398>
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	4613      	mov	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	085a      	lsrs	r2, r3, #1
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006c88:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	69da      	ldr	r2, [r3, #28]
 8006c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c90:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006c94:	0a5b      	lsrs	r3, r3, #9
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d201      	bcs.n	8006c9e <find_volume+0x3ae>
 8006c9a:	230d      	movs	r3, #13
 8006c9c:	e06d      	b.n	8006d7a <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	615a      	str	r2, [r3, #20]
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	2280      	movs	r2, #128	; 0x80
 8006cb2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006cb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d149      	bne.n	8006d50 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbe:	3334      	adds	r3, #52	; 0x34
 8006cc0:	3330      	adds	r3, #48	; 0x30
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe f818 	bl	8004cf8 <ld_word>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d140      	bne.n	8006d50 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cd6:	f7fe fabf 	bl	8005258 <move_window>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d137      	bne.n	8006d50 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	3334      	adds	r3, #52	; 0x34
 8006cea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe f802 	bl	8004cf8 <ld_word>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d127      	bne.n	8006d50 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	3334      	adds	r3, #52	; 0x34
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fe f80f 	bl	8004d28 <ld_dword>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	4a1d      	ldr	r2, [pc, #116]	; (8006d84 <find_volume+0x494>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d11e      	bne.n	8006d50 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	3334      	adds	r3, #52	; 0x34
 8006d16:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe f804 	bl	8004d28 <ld_dword>
 8006d20:	4603      	mov	r3, r0
 8006d22:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <find_volume+0x498>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d113      	bne.n	8006d50 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	3334      	adds	r3, #52	; 0x34
 8006d2c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fd fff9 	bl	8004d28 <ld_dword>
 8006d36:	4602      	mov	r2, r0
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	3334      	adds	r3, #52	; 0x34
 8006d40:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fd ffef 	bl	8004d28 <ld_dword>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006d56:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <find_volume+0x49c>)
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <find_volume+0x49c>)
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <find_volume+0x49c>)
 8006d66:	881a      	ldrh	r2, [r3, #0]
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	4a08      	ldr	r2, [pc, #32]	; (8006d90 <find_volume+0x4a0>)
 8006d70:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006d72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d74:	f7fe fa08 	bl	8005188 <clear_lock>
#endif
	return FR_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3758      	adds	r7, #88	; 0x58
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	41615252 	.word	0x41615252
 8006d88:	61417272 	.word	0x61417272
 8006d8c:	200005b4 	.word	0x200005b4
 8006d90:	200005d8 	.word	0x200005d8

08006d94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006d9e:	2309      	movs	r3, #9
 8006da0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01c      	beq.n	8006de2 <validate+0x4e>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d018      	beq.n	8006de2 <validate+0x4e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d013      	beq.n	8006de2 <validate+0x4e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	889a      	ldrh	r2, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	88db      	ldrh	r3, [r3, #6]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d10c      	bne.n	8006de2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fd fef4 	bl	8004bbc <disk_status>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <validate+0x4e>
			res = FR_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d102      	bne.n	8006dee <validate+0x5a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	e000      	b.n	8006df0 <validate+0x5c>
 8006dee:	2300      	movs	r3, #0
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	6013      	str	r3, [r2, #0]
	return res;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e12:	f107 0310 	add.w	r3, r7, #16
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fccf 	bl	80067ba <get_ldnumber>
 8006e1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	da01      	bge.n	8006e28 <f_mount+0x28>
 8006e24:	230b      	movs	r3, #11
 8006e26:	e02b      	b.n	8006e80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e28:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <f_mount+0x88>)
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006e38:	69b8      	ldr	r0, [r7, #24]
 8006e3a:	f7fe f9a5 	bl	8005188 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	490d      	ldr	r1, [pc, #52]	; (8006e88 <f_mount+0x88>)
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <f_mount+0x66>
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d001      	beq.n	8006e6a <f_mount+0x6a>
 8006e66:	2300      	movs	r3, #0
 8006e68:	e00a      	b.n	8006e80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006e6a:	f107 010c 	add.w	r1, r7, #12
 8006e6e:	f107 0308 	add.w	r3, r7, #8
 8006e72:	2200      	movs	r2, #0
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fd3b 	bl	80068f0 <find_volume>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	200005b0 	.word	0x200005b0

08006e8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b09a      	sub	sp, #104	; 0x68
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <f_open+0x18>
 8006ea0:	2309      	movs	r3, #9
 8006ea2:	e1ad      	b.n	8007200 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eaa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006eac:	79fa      	ldrb	r2, [r7, #7]
 8006eae:	f107 0114 	add.w	r1, r7, #20
 8006eb2:	f107 0308 	add.w	r3, r7, #8
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fd1a 	bl	80068f0 <find_volume>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006ec2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 8191 	bne.w	80071ee <f_open+0x362>
		dj.obj.fs = fs;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	f107 0318 	add.w	r3, r7, #24
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff fbfd 	bl	80066d8 <follow_path>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006ee4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d11a      	bne.n	8006f22 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006eec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ef0:	b25b      	sxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da03      	bge.n	8006efe <f_open+0x72>
				res = FR_INVALID_NAME;
 8006ef6:	2306      	movs	r3, #6
 8006ef8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006efc:	e011      	b.n	8006f22 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f107 0318 	add.w	r3, r7, #24
 8006f14:	4611      	mov	r1, r2
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fd ffee 	bl	8004ef8 <chk_lock>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	f003 031c 	and.w	r3, r3, #28
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d07f      	beq.n	800702c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006f2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d017      	beq.n	8006f64 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006f34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d10e      	bne.n	8006f5a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006f3c:	f7fe f838 	bl	8004fb0 <enq_lock>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d006      	beq.n	8006f54 <f_open+0xc8>
 8006f46:	f107 0318 	add.w	r3, r7, #24
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff f914 	bl	8006178 <dir_register>
 8006f50:	4603      	mov	r3, r0
 8006f52:	e000      	b.n	8006f56 <f_open+0xca>
 8006f54:	2312      	movs	r3, #18
 8006f56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	f043 0308 	orr.w	r3, r3, #8
 8006f60:	71fb      	strb	r3, [r7, #7]
 8006f62:	e010      	b.n	8006f86 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f64:	7fbb      	ldrb	r3, [r7, #30]
 8006f66:	f003 0311 	and.w	r3, r3, #17
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <f_open+0xea>
					res = FR_DENIED;
 8006f6e:	2307      	movs	r3, #7
 8006f70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006f74:	e007      	b.n	8006f86 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <f_open+0xfa>
 8006f80:	2308      	movs	r3, #8
 8006f82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d168      	bne.n	8007060 <f_open+0x1d4>
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d063      	beq.n	8007060 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006f98:	f7fd f8d0 	bl	800413c <get_fattime>
 8006f9c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	330e      	adds	r3, #14
 8006fa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fd fefd 	bl	8004da4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	3316      	adds	r3, #22
 8006fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fd fef7 	bl	8004da4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	330b      	adds	r3, #11
 8006fba:	2220      	movs	r2, #32
 8006fbc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fe4e 	bl	8005c66 <ld_clust>
 8006fca:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe fe66 	bl	8005ca4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	331c      	adds	r3, #28
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fd fee0 	bl	8004da4 <st_dword>
					fs->wflag = 1;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d037      	beq.n	8007060 <f_open+0x1d4>
						dw = fs->winsect;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006ff6:	f107 0318 	add.w	r3, r7, #24
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fb79 	bl	80056f6 <remove_chain>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800700a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800700e:	2b00      	cmp	r3, #0
 8007010:	d126      	bne.n	8007060 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe f91e 	bl	8005258 <move_window>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007026:	3a01      	subs	r2, #1
 8007028:	611a      	str	r2, [r3, #16]
 800702a:	e019      	b.n	8007060 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800702c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007030:	2b00      	cmp	r3, #0
 8007032:	d115      	bne.n	8007060 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007034:	7fbb      	ldrb	r3, [r7, #30]
 8007036:	f003 0310 	and.w	r3, r3, #16
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <f_open+0x1ba>
					res = FR_NO_FILE;
 800703e:	2304      	movs	r3, #4
 8007040:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007044:	e00c      	b.n	8007060 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <f_open+0x1d4>
 8007050:	7fbb      	ldrb	r3, [r7, #30]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <f_open+0x1d4>
						res = FR_DENIED;
 800705a:	2307      	movs	r3, #7
 800705c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007060:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007064:	2b00      	cmp	r3, #0
 8007066:	d128      	bne.n	80070ba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007078:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	bf14      	ite	ne
 8007092:	2301      	movne	r3, #1
 8007094:	2300      	moveq	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	f107 0318 	add.w	r3, r7, #24
 800709e:	4611      	mov	r1, r2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fd ffa7 	bl	8004ff4 <inc_lock>
 80070a6:	4602      	mov	r2, r0
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d102      	bne.n	80070ba <f_open+0x22e>
 80070b4:	2302      	movs	r3, #2
 80070b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80070ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f040 8095 	bne.w	80071ee <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c8:	4611      	mov	r1, r2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fdcb 	bl	8005c66 <ld_clust>
 80070d0:	4602      	mov	r2, r0
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	331c      	adds	r3, #28
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fd fe24 	bl	8004d28 <ld_dword>
 80070e0:	4602      	mov	r2, r0
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	88da      	ldrh	r2, [r3, #6]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	79fa      	ldrb	r2, [r7, #7]
 80070fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3330      	adds	r3, #48	; 0x30
 8007116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800711a:	2100      	movs	r1, #0
 800711c:	4618      	mov	r0, r3
 800711e:	f7fd fe8e 	bl	8004e3e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d060      	beq.n	80071ee <f_open+0x362>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d05c      	beq.n	80071ee <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	895b      	ldrh	r3, [r3, #10]
 8007140:	025b      	lsls	r3, r3, #9
 8007142:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007150:	e016      	b.n	8007180 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe f939 	bl	80053ce <get_fat>
 800715c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800715e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007160:	2b01      	cmp	r3, #1
 8007162:	d802      	bhi.n	800716a <f_open+0x2de>
 8007164:	2302      	movs	r3, #2
 8007166:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800716a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d102      	bne.n	8007178 <f_open+0x2ec>
 8007172:	2301      	movs	r3, #1
 8007174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800717a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007180:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007184:	2b00      	cmp	r3, #0
 8007186:	d103      	bne.n	8007190 <f_open+0x304>
 8007188:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800718a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800718c:	429a      	cmp	r2, r3
 800718e:	d8e0      	bhi.n	8007152 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007194:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800719a:	2b00      	cmp	r3, #0
 800719c:	d127      	bne.n	80071ee <f_open+0x362>
 800719e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d022      	beq.n	80071ee <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe f8ef 	bl	8005390 <clust2sect>
 80071b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80071b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <f_open+0x336>
						res = FR_INT_ERR;
 80071ba:	2302      	movs	r3, #2
 80071bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80071c0:	e015      	b.n	80071ee <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80071c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071c4:	0a5a      	lsrs	r2, r3, #9
 80071c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c8:	441a      	add	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	7858      	ldrb	r0, [r3, #1]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1a      	ldr	r2, [r3, #32]
 80071dc:	2301      	movs	r3, #1
 80071de:	f7fd fd2d 	bl	8004c3c <disk_read>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <f_open+0x362>
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80071ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <f_open+0x370>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80071fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007200:	4618      	mov	r0, r3
 8007202:	3768      	adds	r7, #104	; 0x68
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08e      	sub	sp, #56	; 0x38
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f107 0214 	add.w	r2, r7, #20
 8007226:	4611      	mov	r1, r2
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff fdb3 	bl	8006d94 <validate>
 800722e:	4603      	mov	r3, r0
 8007230:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007238:	2b00      	cmp	r3, #0
 800723a:	d107      	bne.n	800724c <f_read+0x44>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	7d5b      	ldrb	r3, [r3, #21]
 8007240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007244:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <f_read+0x4a>
 800724c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007250:	e115      	b.n	800747e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	7d1b      	ldrb	r3, [r3, #20]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <f_read+0x5a>
 800725e:	2307      	movs	r3, #7
 8007260:	e10d      	b.n	800747e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	429a      	cmp	r2, r3
 8007274:	f240 80fe 	bls.w	8007474 <f_read+0x26c>
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800727c:	e0fa      	b.n	8007474 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007286:	2b00      	cmp	r3, #0
 8007288:	f040 80c6 	bne.w	8007418 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	0a5b      	lsrs	r3, r3, #9
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	8952      	ldrh	r2, [r2, #10]
 8007296:	3a01      	subs	r2, #1
 8007298:	4013      	ands	r3, r2
 800729a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d12f      	bne.n	8007302 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	633b      	str	r3, [r7, #48]	; 0x30
 80072b0:	e013      	b.n	80072da <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	4619      	mov	r1, r3
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f7fe fb15 	bl	80058f0 <clmt_clust>
 80072c6:	6338      	str	r0, [r7, #48]	; 0x30
 80072c8:	e007      	b.n	80072da <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f7fe f87b 	bl	80053ce <get_fat>
 80072d8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d804      	bhi.n	80072ea <f_read+0xe2>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2202      	movs	r2, #2
 80072e4:	755a      	strb	r2, [r3, #21]
 80072e6:	2302      	movs	r3, #2
 80072e8:	e0c9      	b.n	800747e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f0:	d104      	bne.n	80072fc <f_read+0xf4>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	755a      	strb	r2, [r3, #21]
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0c0      	b.n	800747e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007300:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f7fe f840 	bl	8005390 <clust2sect>
 8007310:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <f_read+0x11a>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2202      	movs	r2, #2
 800731c:	755a      	strb	r2, [r3, #21]
 800731e:	2302      	movs	r3, #2
 8007320:	e0ad      	b.n	800747e <f_read+0x276>
			sect += csect;
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	0a5b      	lsrs	r3, r3, #9
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	d039      	beq.n	80073aa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007336:	69fa      	ldr	r2, [r7, #28]
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	4413      	add	r3, r2
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	8952      	ldrh	r2, [r2, #10]
 8007340:	4293      	cmp	r3, r2
 8007342:	d905      	bls.n	8007350 <f_read+0x148>
					cc = fs->csize - csect;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	895b      	ldrh	r3, [r3, #10]
 8007348:	461a      	mov	r2, r3
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	7858      	ldrb	r0, [r3, #1]
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800735a:	f7fd fc6f 	bl	8004c3c <disk_read>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <f_read+0x166>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	755a      	strb	r2, [r3, #21]
 800736a:	2301      	movs	r3, #1
 800736c:	e087      	b.n	800747e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	7d1b      	ldrb	r3, [r3, #20]
 8007372:	b25b      	sxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	da14      	bge.n	80073a2 <f_read+0x19a>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a1a      	ldr	r2, [r3, #32]
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007382:	429a      	cmp	r2, r3
 8007384:	d90d      	bls.n	80073a2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a1a      	ldr	r2, [r3, #32]
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	025b      	lsls	r3, r3, #9
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	18d0      	adds	r0, r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3330      	adds	r3, #48	; 0x30
 8007398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800739c:	4619      	mov	r1, r3
 800739e:	f7fd fd2d 	bl	8004dfc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	025b      	lsls	r3, r3, #9
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80073a8:	e050      	b.n	800744c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d02e      	beq.n	8007412 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	7d1b      	ldrb	r3, [r3, #20]
 80073b8:	b25b      	sxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	da18      	bge.n	80073f0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	7858      	ldrb	r0, [r3, #1]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a1a      	ldr	r2, [r3, #32]
 80073cc:	2301      	movs	r3, #1
 80073ce:	f7fd fc55 	bl	8004c7c <disk_write>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d004      	beq.n	80073e2 <f_read+0x1da>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2201      	movs	r2, #1
 80073dc:	755a      	strb	r2, [r3, #21]
 80073de:	2301      	movs	r3, #1
 80073e0:	e04d      	b.n	800747e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	7d1b      	ldrb	r3, [r3, #20]
 80073e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	7858      	ldrb	r0, [r3, #1]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073fa:	2301      	movs	r3, #1
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	f7fd fc1d 	bl	8004c3c <disk_read>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d004      	beq.n	8007412 <f_read+0x20a>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	755a      	strb	r2, [r3, #21]
 800740e:	2301      	movs	r3, #1
 8007410:	e035      	b.n	800747e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007420:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007424:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	429a      	cmp	r2, r3
 800742c:	d901      	bls.n	8007432 <f_read+0x22a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007440:	4413      	add	r3, r2
 8007442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007444:	4619      	mov	r1, r3
 8007446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007448:	f7fd fcd8 	bl	8004dfc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800744c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	4413      	add	r3, r2
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	441a      	add	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	619a      	str	r2, [r3, #24]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	441a      	add	r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f47f af01 	bne.w	800727e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3738      	adds	r7, #56	; 0x38
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b086      	sub	sp, #24
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f107 0208 	add.w	r2, r7, #8
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fc7c 	bl	8006d94 <validate>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d168      	bne.n	8007578 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	7d1b      	ldrb	r3, [r3, #20]
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d062      	beq.n	8007578 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	7d1b      	ldrb	r3, [r3, #20]
 80074b6:	b25b      	sxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da15      	bge.n	80074e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	7858      	ldrb	r0, [r3, #1]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	2301      	movs	r3, #1
 80074cc:	f7fd fbd6 	bl	8004c7c <disk_write>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <f_sync+0x54>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e04f      	b.n	800757a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7d1b      	ldrb	r3, [r3, #20]
 80074de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80074e8:	f7fc fe28 	bl	800413c <get_fattime>
 80074ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	4619      	mov	r1, r3
 80074f6:	4610      	mov	r0, r2
 80074f8:	f7fd feae 	bl	8005258 <move_window>
 80074fc:	4603      	mov	r3, r0
 80074fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d138      	bne.n	8007578 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	330b      	adds	r3, #11
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	330b      	adds	r3, #11
 8007516:	f042 0220 	orr.w	r2, r2, #32
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	461a      	mov	r2, r3
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	f7fe fbbb 	bl	8005ca4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f103 021c 	add.w	r2, r3, #28
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f7fd fc32 	bl	8004da4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3316      	adds	r3, #22
 8007544:	6939      	ldr	r1, [r7, #16]
 8007546:	4618      	mov	r0, r3
 8007548:	f7fd fc2c 	bl	8004da4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3312      	adds	r3, #18
 8007550:	2100      	movs	r1, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f7fd fc0b 	bl	8004d6e <st_word>
					fs->wflag = 1;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2201      	movs	r2, #1
 800755c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4618      	mov	r0, r3
 8007562:	f7fd fea7 	bl	80052b4 <sync_fs>
 8007566:	4603      	mov	r3, r0
 8007568:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7d1b      	ldrb	r3, [r3, #20]
 800756e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007572:	b2da      	uxtb	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007578:	7dfb      	ldrb	r3, [r7, #23]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff ff7b 	bl	8007486 <f_sync>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d118      	bne.n	80075cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f107 0208 	add.w	r2, r7, #8
 80075a0:	4611      	mov	r1, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff fbf6 	bl	8006d94 <validate>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10c      	bne.n	80075cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fd fdaa 	bl	8005110 <dec_lock>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075e6:	2301      	movs	r3, #1
 80075e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075ee:	4b1f      	ldr	r3, [pc, #124]	; (800766c <FATFS_LinkDriverEx+0x94>)
 80075f0:	7a5b      	ldrb	r3, [r3, #9]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d131      	bne.n	800765c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075f8:	4b1c      	ldr	r3, [pc, #112]	; (800766c <FATFS_LinkDriverEx+0x94>)
 80075fa:	7a5b      	ldrb	r3, [r3, #9]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	4b1a      	ldr	r3, [pc, #104]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007602:	2100      	movs	r1, #0
 8007604:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007606:	4b19      	ldr	r3, [pc, #100]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007608:	7a5b      	ldrb	r3, [r3, #9]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	4a17      	ldr	r2, [pc, #92]	; (800766c <FATFS_LinkDriverEx+0x94>)
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007618:	7a5b      	ldrb	r3, [r3, #9]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	4b13      	ldr	r3, [pc, #76]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007620:	4413      	add	r3, r2
 8007622:	79fa      	ldrb	r2, [r7, #7]
 8007624:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007626:	4b11      	ldr	r3, [pc, #68]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007628:	7a5b      	ldrb	r3, [r3, #9]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	b2d1      	uxtb	r1, r2
 8007630:	4a0e      	ldr	r2, [pc, #56]	; (800766c <FATFS_LinkDriverEx+0x94>)
 8007632:	7251      	strb	r1, [r2, #9]
 8007634:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007636:	7dbb      	ldrb	r3, [r7, #22]
 8007638:	3330      	adds	r3, #48	; 0x30
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3301      	adds	r3, #1
 8007644:	223a      	movs	r2, #58	; 0x3a
 8007646:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	3302      	adds	r3, #2
 800764c:	222f      	movs	r2, #47	; 0x2f
 800764e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	3303      	adds	r3, #3
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	200007d8 	.word	0x200007d8

08007670 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800767a:	2200      	movs	r2, #0
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff ffaa 	bl	80075d8 <FATFS_LinkDriverEx>
 8007684:	4603      	mov	r3, r0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	6039      	str	r1, [r7, #0]
 800769a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	2b7f      	cmp	r3, #127	; 0x7f
 80076a0:	d802      	bhi.n	80076a8 <ff_convert+0x18>
		c = chr;
 80076a2:	88fb      	ldrh	r3, [r7, #6]
 80076a4:	81fb      	strh	r3, [r7, #14]
 80076a6:	e025      	b.n	80076f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	2bff      	cmp	r3, #255	; 0xff
 80076b2:	d805      	bhi.n	80076c0 <ff_convert+0x30>
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	3b80      	subs	r3, #128	; 0x80
 80076b8:	4a12      	ldr	r2, [pc, #72]	; (8007704 <ff_convert+0x74>)
 80076ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076be:	e000      	b.n	80076c2 <ff_convert+0x32>
 80076c0:	2300      	movs	r3, #0
 80076c2:	81fb      	strh	r3, [r7, #14]
 80076c4:	e016      	b.n	80076f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80076c6:	2300      	movs	r3, #0
 80076c8:	81fb      	strh	r3, [r7, #14]
 80076ca:	e009      	b.n	80076e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80076cc:	89fb      	ldrh	r3, [r7, #14]
 80076ce:	4a0d      	ldr	r2, [pc, #52]	; (8007704 <ff_convert+0x74>)
 80076d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076d4:	88fa      	ldrh	r2, [r7, #6]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d006      	beq.n	80076e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80076da:	89fb      	ldrh	r3, [r7, #14]
 80076dc:	3301      	adds	r3, #1
 80076de:	81fb      	strh	r3, [r7, #14]
 80076e0:	89fb      	ldrh	r3, [r7, #14]
 80076e2:	2b7f      	cmp	r3, #127	; 0x7f
 80076e4:	d9f2      	bls.n	80076cc <ff_convert+0x3c>
 80076e6:	e000      	b.n	80076ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80076e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80076ea:	89fb      	ldrh	r3, [r7, #14]
 80076ec:	3380      	adds	r3, #128	; 0x80
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80076f4:	89fb      	ldrh	r3, [r7, #14]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	08008a5c 	.word	0x08008a5c

08007708 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	d201      	bcs.n	800771e <ff_wtoupper+0x16>
 800771a:	4b3e      	ldr	r3, [pc, #248]	; (8007814 <ff_wtoupper+0x10c>)
 800771c:	e000      	b.n	8007720 <ff_wtoupper+0x18>
 800771e:	4b3e      	ldr	r3, [pc, #248]	; (8007818 <ff_wtoupper+0x110>)
 8007720:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	1c9a      	adds	r2, r3, #2
 8007726:	617a      	str	r2, [r7, #20]
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800772c:	8a7b      	ldrh	r3, [r7, #18]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d068      	beq.n	8007804 <ff_wtoupper+0xfc>
 8007732:	88fa      	ldrh	r2, [r7, #6]
 8007734:	8a7b      	ldrh	r3, [r7, #18]
 8007736:	429a      	cmp	r2, r3
 8007738:	d364      	bcc.n	8007804 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	1c9a      	adds	r2, r3, #2
 800773e:	617a      	str	r2, [r7, #20]
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	823b      	strh	r3, [r7, #16]
 8007744:	8a3b      	ldrh	r3, [r7, #16]
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	81fb      	strh	r3, [r7, #14]
 800774a:	8a3b      	ldrh	r3, [r7, #16]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	8a79      	ldrh	r1, [r7, #18]
 8007754:	8a3b      	ldrh	r3, [r7, #16]
 8007756:	440b      	add	r3, r1
 8007758:	429a      	cmp	r2, r3
 800775a:	da49      	bge.n	80077f0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800775c:	89fb      	ldrh	r3, [r7, #14]
 800775e:	2b08      	cmp	r3, #8
 8007760:	d84f      	bhi.n	8007802 <ff_wtoupper+0xfa>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <ff_wtoupper+0x60>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	0800778d 	.word	0x0800778d
 800776c:	0800779f 	.word	0x0800779f
 8007770:	080077b5 	.word	0x080077b5
 8007774:	080077bd 	.word	0x080077bd
 8007778:	080077c5 	.word	0x080077c5
 800777c:	080077cd 	.word	0x080077cd
 8007780:	080077d5 	.word	0x080077d5
 8007784:	080077dd 	.word	0x080077dd
 8007788:	080077e5 	.word	0x080077e5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800778c:	88fa      	ldrh	r2, [r7, #6]
 800778e:	8a7b      	ldrh	r3, [r7, #18]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4413      	add	r3, r2
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	80fb      	strh	r3, [r7, #6]
 800779c:	e027      	b.n	80077ee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	8a7b      	ldrh	r3, [r7, #18]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	80fb      	strh	r3, [r7, #6]
 80077b2:	e01c      	b.n	80077ee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	3b10      	subs	r3, #16
 80077b8:	80fb      	strh	r3, [r7, #6]
 80077ba:	e018      	b.n	80077ee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80077bc:	88fb      	ldrh	r3, [r7, #6]
 80077be:	3b20      	subs	r3, #32
 80077c0:	80fb      	strh	r3, [r7, #6]
 80077c2:	e014      	b.n	80077ee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80077c4:	88fb      	ldrh	r3, [r7, #6]
 80077c6:	3b30      	subs	r3, #48	; 0x30
 80077c8:	80fb      	strh	r3, [r7, #6]
 80077ca:	e010      	b.n	80077ee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	3b1a      	subs	r3, #26
 80077d0:	80fb      	strh	r3, [r7, #6]
 80077d2:	e00c      	b.n	80077ee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80077d4:	88fb      	ldrh	r3, [r7, #6]
 80077d6:	3308      	adds	r3, #8
 80077d8:	80fb      	strh	r3, [r7, #6]
 80077da:	e008      	b.n	80077ee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80077dc:	88fb      	ldrh	r3, [r7, #6]
 80077de:	3b50      	subs	r3, #80	; 0x50
 80077e0:	80fb      	strh	r3, [r7, #6]
 80077e2:	e004      	b.n	80077ee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80077ea:	80fb      	strh	r3, [r7, #6]
 80077ec:	bf00      	nop
			}
			break;
 80077ee:	e008      	b.n	8007802 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80077f0:	89fb      	ldrh	r3, [r7, #14]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d195      	bne.n	8007722 <ff_wtoupper+0x1a>
 80077f6:	8a3b      	ldrh	r3, [r7, #16]
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4413      	add	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007800:	e78f      	b.n	8007722 <ff_wtoupper+0x1a>
			break;
 8007802:	bf00      	nop
	}

	return chr;
 8007804:	88fb      	ldrh	r3, [r7, #6]
}
 8007806:	4618      	mov	r0, r3
 8007808:	371c      	adds	r7, #28
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	08008b5c 	.word	0x08008b5c
 8007818:	08008d50 	.word	0x08008d50

0800781c <__errno>:
 800781c:	4b01      	ldr	r3, [pc, #4]	; (8007824 <__errno+0x8>)
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20000028 	.word	0x20000028

08007828 <__libc_init_array>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4d0d      	ldr	r5, [pc, #52]	; (8007860 <__libc_init_array+0x38>)
 800782c:	4c0d      	ldr	r4, [pc, #52]	; (8007864 <__libc_init_array+0x3c>)
 800782e:	1b64      	subs	r4, r4, r5
 8007830:	10a4      	asrs	r4, r4, #2
 8007832:	2600      	movs	r6, #0
 8007834:	42a6      	cmp	r6, r4
 8007836:	d109      	bne.n	800784c <__libc_init_array+0x24>
 8007838:	4d0b      	ldr	r5, [pc, #44]	; (8007868 <__libc_init_array+0x40>)
 800783a:	4c0c      	ldr	r4, [pc, #48]	; (800786c <__libc_init_array+0x44>)
 800783c:	f000 ffec 	bl	8008818 <_init>
 8007840:	1b64      	subs	r4, r4, r5
 8007842:	10a4      	asrs	r4, r4, #2
 8007844:	2600      	movs	r6, #0
 8007846:	42a6      	cmp	r6, r4
 8007848:	d105      	bne.n	8007856 <__libc_init_array+0x2e>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007850:	4798      	blx	r3
 8007852:	3601      	adds	r6, #1
 8007854:	e7ee      	b.n	8007834 <__libc_init_array+0xc>
 8007856:	f855 3b04 	ldr.w	r3, [r5], #4
 800785a:	4798      	blx	r3
 800785c:	3601      	adds	r6, #1
 800785e:	e7f2      	b.n	8007846 <__libc_init_array+0x1e>
 8007860:	08008ea4 	.word	0x08008ea4
 8007864:	08008ea4 	.word	0x08008ea4
 8007868:	08008ea4 	.word	0x08008ea4
 800786c:	08008ea8 	.word	0x08008ea8

08007870 <memset>:
 8007870:	4402      	add	r2, r0
 8007872:	4603      	mov	r3, r0
 8007874:	4293      	cmp	r3, r2
 8007876:	d100      	bne.n	800787a <memset+0xa>
 8007878:	4770      	bx	lr
 800787a:	f803 1b01 	strb.w	r1, [r3], #1
 800787e:	e7f9      	b.n	8007874 <memset+0x4>

08007880 <iprintf>:
 8007880:	b40f      	push	{r0, r1, r2, r3}
 8007882:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <iprintf+0x2c>)
 8007884:	b513      	push	{r0, r1, r4, lr}
 8007886:	681c      	ldr	r4, [r3, #0]
 8007888:	b124      	cbz	r4, 8007894 <iprintf+0x14>
 800788a:	69a3      	ldr	r3, [r4, #24]
 800788c:	b913      	cbnz	r3, 8007894 <iprintf+0x14>
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fa5e 	bl	8007d50 <__sinit>
 8007894:	ab05      	add	r3, sp, #20
 8007896:	9a04      	ldr	r2, [sp, #16]
 8007898:	68a1      	ldr	r1, [r4, #8]
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	4620      	mov	r0, r4
 800789e:	f000 fc2f 	bl	8008100 <_vfiprintf_r>
 80078a2:	b002      	add	sp, #8
 80078a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a8:	b004      	add	sp, #16
 80078aa:	4770      	bx	lr
 80078ac:	20000028 	.word	0x20000028

080078b0 <_puts_r>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	460e      	mov	r6, r1
 80078b4:	4605      	mov	r5, r0
 80078b6:	b118      	cbz	r0, 80078c0 <_puts_r+0x10>
 80078b8:	6983      	ldr	r3, [r0, #24]
 80078ba:	b90b      	cbnz	r3, 80078c0 <_puts_r+0x10>
 80078bc:	f000 fa48 	bl	8007d50 <__sinit>
 80078c0:	69ab      	ldr	r3, [r5, #24]
 80078c2:	68ac      	ldr	r4, [r5, #8]
 80078c4:	b913      	cbnz	r3, 80078cc <_puts_r+0x1c>
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 fa42 	bl	8007d50 <__sinit>
 80078cc:	4b2c      	ldr	r3, [pc, #176]	; (8007980 <_puts_r+0xd0>)
 80078ce:	429c      	cmp	r4, r3
 80078d0:	d120      	bne.n	8007914 <_puts_r+0x64>
 80078d2:	686c      	ldr	r4, [r5, #4]
 80078d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078d6:	07db      	lsls	r3, r3, #31
 80078d8:	d405      	bmi.n	80078e6 <_puts_r+0x36>
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	0598      	lsls	r0, r3, #22
 80078de:	d402      	bmi.n	80078e6 <_puts_r+0x36>
 80078e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078e2:	f000 fad3 	bl	8007e8c <__retarget_lock_acquire_recursive>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	0719      	lsls	r1, r3, #28
 80078ea:	d51d      	bpl.n	8007928 <_puts_r+0x78>
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	b1db      	cbz	r3, 8007928 <_puts_r+0x78>
 80078f0:	3e01      	subs	r6, #1
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078f8:	3b01      	subs	r3, #1
 80078fa:	60a3      	str	r3, [r4, #8]
 80078fc:	bb39      	cbnz	r1, 800794e <_puts_r+0x9e>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da38      	bge.n	8007974 <_puts_r+0xc4>
 8007902:	4622      	mov	r2, r4
 8007904:	210a      	movs	r1, #10
 8007906:	4628      	mov	r0, r5
 8007908:	f000 f848 	bl	800799c <__swbuf_r>
 800790c:	3001      	adds	r0, #1
 800790e:	d011      	beq.n	8007934 <_puts_r+0x84>
 8007910:	250a      	movs	r5, #10
 8007912:	e011      	b.n	8007938 <_puts_r+0x88>
 8007914:	4b1b      	ldr	r3, [pc, #108]	; (8007984 <_puts_r+0xd4>)
 8007916:	429c      	cmp	r4, r3
 8007918:	d101      	bne.n	800791e <_puts_r+0x6e>
 800791a:	68ac      	ldr	r4, [r5, #8]
 800791c:	e7da      	b.n	80078d4 <_puts_r+0x24>
 800791e:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <_puts_r+0xd8>)
 8007920:	429c      	cmp	r4, r3
 8007922:	bf08      	it	eq
 8007924:	68ec      	ldreq	r4, [r5, #12]
 8007926:	e7d5      	b.n	80078d4 <_puts_r+0x24>
 8007928:	4621      	mov	r1, r4
 800792a:	4628      	mov	r0, r5
 800792c:	f000 f888 	bl	8007a40 <__swsetup_r>
 8007930:	2800      	cmp	r0, #0
 8007932:	d0dd      	beq.n	80078f0 <_puts_r+0x40>
 8007934:	f04f 35ff 	mov.w	r5, #4294967295
 8007938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800793a:	07da      	lsls	r2, r3, #31
 800793c:	d405      	bmi.n	800794a <_puts_r+0x9a>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	059b      	lsls	r3, r3, #22
 8007942:	d402      	bmi.n	800794a <_puts_r+0x9a>
 8007944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007946:	f000 faa2 	bl	8007e8e <__retarget_lock_release_recursive>
 800794a:	4628      	mov	r0, r5
 800794c:	bd70      	pop	{r4, r5, r6, pc}
 800794e:	2b00      	cmp	r3, #0
 8007950:	da04      	bge.n	800795c <_puts_r+0xac>
 8007952:	69a2      	ldr	r2, [r4, #24]
 8007954:	429a      	cmp	r2, r3
 8007956:	dc06      	bgt.n	8007966 <_puts_r+0xb6>
 8007958:	290a      	cmp	r1, #10
 800795a:	d004      	beq.n	8007966 <_puts_r+0xb6>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	6022      	str	r2, [r4, #0]
 8007962:	7019      	strb	r1, [r3, #0]
 8007964:	e7c5      	b.n	80078f2 <_puts_r+0x42>
 8007966:	4622      	mov	r2, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f000 f817 	bl	800799c <__swbuf_r>
 800796e:	3001      	adds	r0, #1
 8007970:	d1bf      	bne.n	80078f2 <_puts_r+0x42>
 8007972:	e7df      	b.n	8007934 <_puts_r+0x84>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	250a      	movs	r5, #10
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	6022      	str	r2, [r4, #0]
 800797c:	701d      	strb	r5, [r3, #0]
 800797e:	e7db      	b.n	8007938 <_puts_r+0x88>
 8007980:	08008e30 	.word	0x08008e30
 8007984:	08008e50 	.word	0x08008e50
 8007988:	08008e10 	.word	0x08008e10

0800798c <puts>:
 800798c:	4b02      	ldr	r3, [pc, #8]	; (8007998 <puts+0xc>)
 800798e:	4601      	mov	r1, r0
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	f7ff bf8d 	b.w	80078b0 <_puts_r>
 8007996:	bf00      	nop
 8007998:	20000028 	.word	0x20000028

0800799c <__swbuf_r>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	460e      	mov	r6, r1
 80079a0:	4614      	mov	r4, r2
 80079a2:	4605      	mov	r5, r0
 80079a4:	b118      	cbz	r0, 80079ae <__swbuf_r+0x12>
 80079a6:	6983      	ldr	r3, [r0, #24]
 80079a8:	b90b      	cbnz	r3, 80079ae <__swbuf_r+0x12>
 80079aa:	f000 f9d1 	bl	8007d50 <__sinit>
 80079ae:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <__swbuf_r+0x98>)
 80079b0:	429c      	cmp	r4, r3
 80079b2:	d12b      	bne.n	8007a0c <__swbuf_r+0x70>
 80079b4:	686c      	ldr	r4, [r5, #4]
 80079b6:	69a3      	ldr	r3, [r4, #24]
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	071a      	lsls	r2, r3, #28
 80079be:	d52f      	bpl.n	8007a20 <__swbuf_r+0x84>
 80079c0:	6923      	ldr	r3, [r4, #16]
 80079c2:	b36b      	cbz	r3, 8007a20 <__swbuf_r+0x84>
 80079c4:	6923      	ldr	r3, [r4, #16]
 80079c6:	6820      	ldr	r0, [r4, #0]
 80079c8:	1ac0      	subs	r0, r0, r3
 80079ca:	6963      	ldr	r3, [r4, #20]
 80079cc:	b2f6      	uxtb	r6, r6
 80079ce:	4283      	cmp	r3, r0
 80079d0:	4637      	mov	r7, r6
 80079d2:	dc04      	bgt.n	80079de <__swbuf_r+0x42>
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 f926 	bl	8007c28 <_fflush_r>
 80079dc:	bb30      	cbnz	r0, 8007a2c <__swbuf_r+0x90>
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	60a3      	str	r3, [r4, #8]
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	6022      	str	r2, [r4, #0]
 80079ea:	701e      	strb	r6, [r3, #0]
 80079ec:	6963      	ldr	r3, [r4, #20]
 80079ee:	3001      	adds	r0, #1
 80079f0:	4283      	cmp	r3, r0
 80079f2:	d004      	beq.n	80079fe <__swbuf_r+0x62>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	07db      	lsls	r3, r3, #31
 80079f8:	d506      	bpl.n	8007a08 <__swbuf_r+0x6c>
 80079fa:	2e0a      	cmp	r6, #10
 80079fc:	d104      	bne.n	8007a08 <__swbuf_r+0x6c>
 80079fe:	4621      	mov	r1, r4
 8007a00:	4628      	mov	r0, r5
 8007a02:	f000 f911 	bl	8007c28 <_fflush_r>
 8007a06:	b988      	cbnz	r0, 8007a2c <__swbuf_r+0x90>
 8007a08:	4638      	mov	r0, r7
 8007a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <__swbuf_r+0x9c>)
 8007a0e:	429c      	cmp	r4, r3
 8007a10:	d101      	bne.n	8007a16 <__swbuf_r+0x7a>
 8007a12:	68ac      	ldr	r4, [r5, #8]
 8007a14:	e7cf      	b.n	80079b6 <__swbuf_r+0x1a>
 8007a16:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <__swbuf_r+0xa0>)
 8007a18:	429c      	cmp	r4, r3
 8007a1a:	bf08      	it	eq
 8007a1c:	68ec      	ldreq	r4, [r5, #12]
 8007a1e:	e7ca      	b.n	80079b6 <__swbuf_r+0x1a>
 8007a20:	4621      	mov	r1, r4
 8007a22:	4628      	mov	r0, r5
 8007a24:	f000 f80c 	bl	8007a40 <__swsetup_r>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d0cb      	beq.n	80079c4 <__swbuf_r+0x28>
 8007a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a30:	e7ea      	b.n	8007a08 <__swbuf_r+0x6c>
 8007a32:	bf00      	nop
 8007a34:	08008e30 	.word	0x08008e30
 8007a38:	08008e50 	.word	0x08008e50
 8007a3c:	08008e10 	.word	0x08008e10

08007a40 <__swsetup_r>:
 8007a40:	4b32      	ldr	r3, [pc, #200]	; (8007b0c <__swsetup_r+0xcc>)
 8007a42:	b570      	push	{r4, r5, r6, lr}
 8007a44:	681d      	ldr	r5, [r3, #0]
 8007a46:	4606      	mov	r6, r0
 8007a48:	460c      	mov	r4, r1
 8007a4a:	b125      	cbz	r5, 8007a56 <__swsetup_r+0x16>
 8007a4c:	69ab      	ldr	r3, [r5, #24]
 8007a4e:	b913      	cbnz	r3, 8007a56 <__swsetup_r+0x16>
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 f97d 	bl	8007d50 <__sinit>
 8007a56:	4b2e      	ldr	r3, [pc, #184]	; (8007b10 <__swsetup_r+0xd0>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	d10f      	bne.n	8007a7c <__swsetup_r+0x3c>
 8007a5c:	686c      	ldr	r4, [r5, #4]
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a64:	0719      	lsls	r1, r3, #28
 8007a66:	d42c      	bmi.n	8007ac2 <__swsetup_r+0x82>
 8007a68:	06dd      	lsls	r5, r3, #27
 8007a6a:	d411      	bmi.n	8007a90 <__swsetup_r+0x50>
 8007a6c:	2309      	movs	r3, #9
 8007a6e:	6033      	str	r3, [r6, #0]
 8007a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7a:	e03e      	b.n	8007afa <__swsetup_r+0xba>
 8007a7c:	4b25      	ldr	r3, [pc, #148]	; (8007b14 <__swsetup_r+0xd4>)
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	d101      	bne.n	8007a86 <__swsetup_r+0x46>
 8007a82:	68ac      	ldr	r4, [r5, #8]
 8007a84:	e7eb      	b.n	8007a5e <__swsetup_r+0x1e>
 8007a86:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <__swsetup_r+0xd8>)
 8007a88:	429c      	cmp	r4, r3
 8007a8a:	bf08      	it	eq
 8007a8c:	68ec      	ldreq	r4, [r5, #12]
 8007a8e:	e7e6      	b.n	8007a5e <__swsetup_r+0x1e>
 8007a90:	0758      	lsls	r0, r3, #29
 8007a92:	d512      	bpl.n	8007aba <__swsetup_r+0x7a>
 8007a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a96:	b141      	cbz	r1, 8007aaa <__swsetup_r+0x6a>
 8007a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	d002      	beq.n	8007aa6 <__swsetup_r+0x66>
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f000 fa59 	bl	8007f58 <_free_r>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	6923      	ldr	r3, [r4, #16]
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f043 0308 	orr.w	r3, r3, #8
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	b94b      	cbnz	r3, 8007ada <__swsetup_r+0x9a>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad0:	d003      	beq.n	8007ada <__swsetup_r+0x9a>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f000 f9ff 	bl	8007ed8 <__smakebuf_r>
 8007ada:	89a0      	ldrh	r0, [r4, #12]
 8007adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ae0:	f010 0301 	ands.w	r3, r0, #1
 8007ae4:	d00a      	beq.n	8007afc <__swsetup_r+0xbc>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60a3      	str	r3, [r4, #8]
 8007aea:	6963      	ldr	r3, [r4, #20]
 8007aec:	425b      	negs	r3, r3
 8007aee:	61a3      	str	r3, [r4, #24]
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	b943      	cbnz	r3, 8007b06 <__swsetup_r+0xc6>
 8007af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007af8:	d1ba      	bne.n	8007a70 <__swsetup_r+0x30>
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	0781      	lsls	r1, r0, #30
 8007afe:	bf58      	it	pl
 8007b00:	6963      	ldrpl	r3, [r4, #20]
 8007b02:	60a3      	str	r3, [r4, #8]
 8007b04:	e7f4      	b.n	8007af0 <__swsetup_r+0xb0>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e7f7      	b.n	8007afa <__swsetup_r+0xba>
 8007b0a:	bf00      	nop
 8007b0c:	20000028 	.word	0x20000028
 8007b10:	08008e30 	.word	0x08008e30
 8007b14:	08008e50 	.word	0x08008e50
 8007b18:	08008e10 	.word	0x08008e10

08007b1c <__sflush_r>:
 8007b1c:	898a      	ldrh	r2, [r1, #12]
 8007b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b22:	4605      	mov	r5, r0
 8007b24:	0710      	lsls	r0, r2, #28
 8007b26:	460c      	mov	r4, r1
 8007b28:	d458      	bmi.n	8007bdc <__sflush_r+0xc0>
 8007b2a:	684b      	ldr	r3, [r1, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dc05      	bgt.n	8007b3c <__sflush_r+0x20>
 8007b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	dc02      	bgt.n	8007b3c <__sflush_r+0x20>
 8007b36:	2000      	movs	r0, #0
 8007b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	d0f9      	beq.n	8007b36 <__sflush_r+0x1a>
 8007b42:	2300      	movs	r3, #0
 8007b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b48:	682f      	ldr	r7, [r5, #0]
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	d032      	beq.n	8007bb4 <__sflush_r+0x98>
 8007b4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	075a      	lsls	r2, r3, #29
 8007b54:	d505      	bpl.n	8007b62 <__sflush_r+0x46>
 8007b56:	6863      	ldr	r3, [r4, #4]
 8007b58:	1ac0      	subs	r0, r0, r3
 8007b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b5c:	b10b      	cbz	r3, 8007b62 <__sflush_r+0x46>
 8007b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b60:	1ac0      	subs	r0, r0, r3
 8007b62:	2300      	movs	r3, #0
 8007b64:	4602      	mov	r2, r0
 8007b66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b68:	6a21      	ldr	r1, [r4, #32]
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	47b0      	blx	r6
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	d106      	bne.n	8007b82 <__sflush_r+0x66>
 8007b74:	6829      	ldr	r1, [r5, #0]
 8007b76:	291d      	cmp	r1, #29
 8007b78:	d82c      	bhi.n	8007bd4 <__sflush_r+0xb8>
 8007b7a:	4a2a      	ldr	r2, [pc, #168]	; (8007c24 <__sflush_r+0x108>)
 8007b7c:	40ca      	lsrs	r2, r1
 8007b7e:	07d6      	lsls	r6, r2, #31
 8007b80:	d528      	bpl.n	8007bd4 <__sflush_r+0xb8>
 8007b82:	2200      	movs	r2, #0
 8007b84:	6062      	str	r2, [r4, #4]
 8007b86:	04d9      	lsls	r1, r3, #19
 8007b88:	6922      	ldr	r2, [r4, #16]
 8007b8a:	6022      	str	r2, [r4, #0]
 8007b8c:	d504      	bpl.n	8007b98 <__sflush_r+0x7c>
 8007b8e:	1c42      	adds	r2, r0, #1
 8007b90:	d101      	bne.n	8007b96 <__sflush_r+0x7a>
 8007b92:	682b      	ldr	r3, [r5, #0]
 8007b94:	b903      	cbnz	r3, 8007b98 <__sflush_r+0x7c>
 8007b96:	6560      	str	r0, [r4, #84]	; 0x54
 8007b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b9a:	602f      	str	r7, [r5, #0]
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d0ca      	beq.n	8007b36 <__sflush_r+0x1a>
 8007ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba4:	4299      	cmp	r1, r3
 8007ba6:	d002      	beq.n	8007bae <__sflush_r+0x92>
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 f9d5 	bl	8007f58 <_free_r>
 8007bae:	2000      	movs	r0, #0
 8007bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8007bb2:	e7c1      	b.n	8007b38 <__sflush_r+0x1c>
 8007bb4:	6a21      	ldr	r1, [r4, #32]
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b0      	blx	r6
 8007bbc:	1c41      	adds	r1, r0, #1
 8007bbe:	d1c7      	bne.n	8007b50 <__sflush_r+0x34>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0c4      	beq.n	8007b50 <__sflush_r+0x34>
 8007bc6:	2b1d      	cmp	r3, #29
 8007bc8:	d001      	beq.n	8007bce <__sflush_r+0xb2>
 8007bca:	2b16      	cmp	r3, #22
 8007bcc:	d101      	bne.n	8007bd2 <__sflush_r+0xb6>
 8007bce:	602f      	str	r7, [r5, #0]
 8007bd0:	e7b1      	b.n	8007b36 <__sflush_r+0x1a>
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd8:	81a3      	strh	r3, [r4, #12]
 8007bda:	e7ad      	b.n	8007b38 <__sflush_r+0x1c>
 8007bdc:	690f      	ldr	r7, [r1, #16]
 8007bde:	2f00      	cmp	r7, #0
 8007be0:	d0a9      	beq.n	8007b36 <__sflush_r+0x1a>
 8007be2:	0793      	lsls	r3, r2, #30
 8007be4:	680e      	ldr	r6, [r1, #0]
 8007be6:	bf08      	it	eq
 8007be8:	694b      	ldreq	r3, [r1, #20]
 8007bea:	600f      	str	r7, [r1, #0]
 8007bec:	bf18      	it	ne
 8007bee:	2300      	movne	r3, #0
 8007bf0:	eba6 0807 	sub.w	r8, r6, r7
 8007bf4:	608b      	str	r3, [r1, #8]
 8007bf6:	f1b8 0f00 	cmp.w	r8, #0
 8007bfa:	dd9c      	ble.n	8007b36 <__sflush_r+0x1a>
 8007bfc:	6a21      	ldr	r1, [r4, #32]
 8007bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c00:	4643      	mov	r3, r8
 8007c02:	463a      	mov	r2, r7
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b0      	blx	r6
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	dc06      	bgt.n	8007c1a <__sflush_r+0xfe>
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	f04f 30ff 	mov.w	r0, #4294967295
 8007c18:	e78e      	b.n	8007b38 <__sflush_r+0x1c>
 8007c1a:	4407      	add	r7, r0
 8007c1c:	eba8 0800 	sub.w	r8, r8, r0
 8007c20:	e7e9      	b.n	8007bf6 <__sflush_r+0xda>
 8007c22:	bf00      	nop
 8007c24:	20400001 	.word	0x20400001

08007c28 <_fflush_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	690b      	ldr	r3, [r1, #16]
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	b913      	cbnz	r3, 8007c38 <_fflush_r+0x10>
 8007c32:	2500      	movs	r5, #0
 8007c34:	4628      	mov	r0, r5
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	b118      	cbz	r0, 8007c42 <_fflush_r+0x1a>
 8007c3a:	6983      	ldr	r3, [r0, #24]
 8007c3c:	b90b      	cbnz	r3, 8007c42 <_fflush_r+0x1a>
 8007c3e:	f000 f887 	bl	8007d50 <__sinit>
 8007c42:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <_fflush_r+0x6c>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	d11b      	bne.n	8007c80 <_fflush_r+0x58>
 8007c48:	686c      	ldr	r4, [r5, #4]
 8007c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d0ef      	beq.n	8007c32 <_fflush_r+0xa>
 8007c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c54:	07d0      	lsls	r0, r2, #31
 8007c56:	d404      	bmi.n	8007c62 <_fflush_r+0x3a>
 8007c58:	0599      	lsls	r1, r3, #22
 8007c5a:	d402      	bmi.n	8007c62 <_fflush_r+0x3a>
 8007c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c5e:	f000 f915 	bl	8007e8c <__retarget_lock_acquire_recursive>
 8007c62:	4628      	mov	r0, r5
 8007c64:	4621      	mov	r1, r4
 8007c66:	f7ff ff59 	bl	8007b1c <__sflush_r>
 8007c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c6c:	07da      	lsls	r2, r3, #31
 8007c6e:	4605      	mov	r5, r0
 8007c70:	d4e0      	bmi.n	8007c34 <_fflush_r+0xc>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	059b      	lsls	r3, r3, #22
 8007c76:	d4dd      	bmi.n	8007c34 <_fflush_r+0xc>
 8007c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c7a:	f000 f908 	bl	8007e8e <__retarget_lock_release_recursive>
 8007c7e:	e7d9      	b.n	8007c34 <_fflush_r+0xc>
 8007c80:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <_fflush_r+0x70>)
 8007c82:	429c      	cmp	r4, r3
 8007c84:	d101      	bne.n	8007c8a <_fflush_r+0x62>
 8007c86:	68ac      	ldr	r4, [r5, #8]
 8007c88:	e7df      	b.n	8007c4a <_fflush_r+0x22>
 8007c8a:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <_fflush_r+0x74>)
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	bf08      	it	eq
 8007c90:	68ec      	ldreq	r4, [r5, #12]
 8007c92:	e7da      	b.n	8007c4a <_fflush_r+0x22>
 8007c94:	08008e30 	.word	0x08008e30
 8007c98:	08008e50 	.word	0x08008e50
 8007c9c:	08008e10 	.word	0x08008e10

08007ca0 <std>:
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8007caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cae:	6083      	str	r3, [r0, #8]
 8007cb0:	8181      	strh	r1, [r0, #12]
 8007cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8007cb4:	81c2      	strh	r2, [r0, #14]
 8007cb6:	6183      	str	r3, [r0, #24]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	2208      	movs	r2, #8
 8007cbc:	305c      	adds	r0, #92	; 0x5c
 8007cbe:	f7ff fdd7 	bl	8007870 <memset>
 8007cc2:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <std+0x38>)
 8007cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <std+0x3c>)
 8007cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cca:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <std+0x40>)
 8007ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <std+0x44>)
 8007cd0:	6224      	str	r4, [r4, #32]
 8007cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	bf00      	nop
 8007cd8:	080086a9 	.word	0x080086a9
 8007cdc:	080086cb 	.word	0x080086cb
 8007ce0:	08008703 	.word	0x08008703
 8007ce4:	08008727 	.word	0x08008727

08007ce8 <_cleanup_r>:
 8007ce8:	4901      	ldr	r1, [pc, #4]	; (8007cf0 <_cleanup_r+0x8>)
 8007cea:	f000 b8af 	b.w	8007e4c <_fwalk_reent>
 8007cee:	bf00      	nop
 8007cf0:	08007c29 	.word	0x08007c29

08007cf4 <__sfmoreglue>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	1e4a      	subs	r2, r1, #1
 8007cf8:	2568      	movs	r5, #104	; 0x68
 8007cfa:	4355      	muls	r5, r2
 8007cfc:	460e      	mov	r6, r1
 8007cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d02:	f000 f979 	bl	8007ff8 <_malloc_r>
 8007d06:	4604      	mov	r4, r0
 8007d08:	b140      	cbz	r0, 8007d1c <__sfmoreglue+0x28>
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8007d10:	300c      	adds	r0, #12
 8007d12:	60a0      	str	r0, [r4, #8]
 8007d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d18:	f7ff fdaa 	bl	8007870 <memset>
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}

08007d20 <__sfp_lock_acquire>:
 8007d20:	4801      	ldr	r0, [pc, #4]	; (8007d28 <__sfp_lock_acquire+0x8>)
 8007d22:	f000 b8b3 	b.w	8007e8c <__retarget_lock_acquire_recursive>
 8007d26:	bf00      	nop
 8007d28:	2000115c 	.word	0x2000115c

08007d2c <__sfp_lock_release>:
 8007d2c:	4801      	ldr	r0, [pc, #4]	; (8007d34 <__sfp_lock_release+0x8>)
 8007d2e:	f000 b8ae 	b.w	8007e8e <__retarget_lock_release_recursive>
 8007d32:	bf00      	nop
 8007d34:	2000115c 	.word	0x2000115c

08007d38 <__sinit_lock_acquire>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__sinit_lock_acquire+0x8>)
 8007d3a:	f000 b8a7 	b.w	8007e8c <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	20001157 	.word	0x20001157

08007d44 <__sinit_lock_release>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__sinit_lock_release+0x8>)
 8007d46:	f000 b8a2 	b.w	8007e8e <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	20001157 	.word	0x20001157

08007d50 <__sinit>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	4604      	mov	r4, r0
 8007d54:	f7ff fff0 	bl	8007d38 <__sinit_lock_acquire>
 8007d58:	69a3      	ldr	r3, [r4, #24]
 8007d5a:	b11b      	cbz	r3, 8007d64 <__sinit+0x14>
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f7ff bff0 	b.w	8007d44 <__sinit_lock_release>
 8007d64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d68:	6523      	str	r3, [r4, #80]	; 0x50
 8007d6a:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <__sinit+0x68>)
 8007d6c:	4a13      	ldr	r2, [pc, #76]	; (8007dbc <__sinit+0x6c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	bf04      	itt	eq
 8007d76:	2301      	moveq	r3, #1
 8007d78:	61a3      	streq	r3, [r4, #24]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 f820 	bl	8007dc0 <__sfp>
 8007d80:	6060      	str	r0, [r4, #4]
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 f81c 	bl	8007dc0 <__sfp>
 8007d88:	60a0      	str	r0, [r4, #8]
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 f818 	bl	8007dc0 <__sfp>
 8007d90:	2200      	movs	r2, #0
 8007d92:	60e0      	str	r0, [r4, #12]
 8007d94:	2104      	movs	r1, #4
 8007d96:	6860      	ldr	r0, [r4, #4]
 8007d98:	f7ff ff82 	bl	8007ca0 <std>
 8007d9c:	68a0      	ldr	r0, [r4, #8]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	2109      	movs	r1, #9
 8007da2:	f7ff ff7d 	bl	8007ca0 <std>
 8007da6:	68e0      	ldr	r0, [r4, #12]
 8007da8:	2202      	movs	r2, #2
 8007daa:	2112      	movs	r1, #18
 8007dac:	f7ff ff78 	bl	8007ca0 <std>
 8007db0:	2301      	movs	r3, #1
 8007db2:	61a3      	str	r3, [r4, #24]
 8007db4:	e7d2      	b.n	8007d5c <__sinit+0xc>
 8007db6:	bf00      	nop
 8007db8:	08008e0c 	.word	0x08008e0c
 8007dbc:	08007ce9 	.word	0x08007ce9

08007dc0 <__sfp>:
 8007dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	f7ff ffac 	bl	8007d20 <__sfp_lock_acquire>
 8007dc8:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <__sfp+0x84>)
 8007dca:	681e      	ldr	r6, [r3, #0]
 8007dcc:	69b3      	ldr	r3, [r6, #24]
 8007dce:	b913      	cbnz	r3, 8007dd6 <__sfp+0x16>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff ffbd 	bl	8007d50 <__sinit>
 8007dd6:	3648      	adds	r6, #72	; 0x48
 8007dd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	d503      	bpl.n	8007de8 <__sfp+0x28>
 8007de0:	6833      	ldr	r3, [r6, #0]
 8007de2:	b30b      	cbz	r3, 8007e28 <__sfp+0x68>
 8007de4:	6836      	ldr	r6, [r6, #0]
 8007de6:	e7f7      	b.n	8007dd8 <__sfp+0x18>
 8007de8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dec:	b9d5      	cbnz	r5, 8007e24 <__sfp+0x64>
 8007dee:	4b16      	ldr	r3, [pc, #88]	; (8007e48 <__sfp+0x88>)
 8007df0:	60e3      	str	r3, [r4, #12]
 8007df2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007df6:	6665      	str	r5, [r4, #100]	; 0x64
 8007df8:	f000 f847 	bl	8007e8a <__retarget_lock_init_recursive>
 8007dfc:	f7ff ff96 	bl	8007d2c <__sfp_lock_release>
 8007e00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e08:	6025      	str	r5, [r4, #0]
 8007e0a:	61a5      	str	r5, [r4, #24]
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e14:	f7ff fd2c 	bl	8007870 <memset>
 8007e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e20:	4620      	mov	r0, r4
 8007e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e24:	3468      	adds	r4, #104	; 0x68
 8007e26:	e7d9      	b.n	8007ddc <__sfp+0x1c>
 8007e28:	2104      	movs	r1, #4
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	f7ff ff62 	bl	8007cf4 <__sfmoreglue>
 8007e30:	4604      	mov	r4, r0
 8007e32:	6030      	str	r0, [r6, #0]
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d1d5      	bne.n	8007de4 <__sfp+0x24>
 8007e38:	f7ff ff78 	bl	8007d2c <__sfp_lock_release>
 8007e3c:	230c      	movs	r3, #12
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	e7ee      	b.n	8007e20 <__sfp+0x60>
 8007e42:	bf00      	nop
 8007e44:	08008e0c 	.word	0x08008e0c
 8007e48:	ffff0001 	.word	0xffff0001

08007e4c <_fwalk_reent>:
 8007e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e50:	4606      	mov	r6, r0
 8007e52:	4688      	mov	r8, r1
 8007e54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e58:	2700      	movs	r7, #0
 8007e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8007e62:	d505      	bpl.n	8007e70 <_fwalk_reent+0x24>
 8007e64:	6824      	ldr	r4, [r4, #0]
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	d1f7      	bne.n	8007e5a <_fwalk_reent+0xe>
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e70:	89ab      	ldrh	r3, [r5, #12]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d907      	bls.n	8007e86 <_fwalk_reent+0x3a>
 8007e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	d003      	beq.n	8007e86 <_fwalk_reent+0x3a>
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4630      	mov	r0, r6
 8007e82:	47c0      	blx	r8
 8007e84:	4307      	orrs	r7, r0
 8007e86:	3568      	adds	r5, #104	; 0x68
 8007e88:	e7e9      	b.n	8007e5e <_fwalk_reent+0x12>

08007e8a <__retarget_lock_init_recursive>:
 8007e8a:	4770      	bx	lr

08007e8c <__retarget_lock_acquire_recursive>:
 8007e8c:	4770      	bx	lr

08007e8e <__retarget_lock_release_recursive>:
 8007e8e:	4770      	bx	lr

08007e90 <__swhatbuf_r>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	460e      	mov	r6, r1
 8007e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	b096      	sub	sp, #88	; 0x58
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	da07      	bge.n	8007eb2 <__swhatbuf_r+0x22>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	602b      	str	r3, [r5, #0]
 8007ea6:	89b3      	ldrh	r3, [r6, #12]
 8007ea8:	061a      	lsls	r2, r3, #24
 8007eaa:	d410      	bmi.n	8007ece <__swhatbuf_r+0x3e>
 8007eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb0:	e00e      	b.n	8007ed0 <__swhatbuf_r+0x40>
 8007eb2:	466a      	mov	r2, sp
 8007eb4:	f000 fc5e 	bl	8008774 <_fstat_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	dbf2      	blt.n	8007ea2 <__swhatbuf_r+0x12>
 8007ebc:	9a01      	ldr	r2, [sp, #4]
 8007ebe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ec2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ec6:	425a      	negs	r2, r3
 8007ec8:	415a      	adcs	r2, r3
 8007eca:	602a      	str	r2, [r5, #0]
 8007ecc:	e7ee      	b.n	8007eac <__swhatbuf_r+0x1c>
 8007ece:	2340      	movs	r3, #64	; 0x40
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	b016      	add	sp, #88	; 0x58
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}

08007ed8 <__smakebuf_r>:
 8007ed8:	898b      	ldrh	r3, [r1, #12]
 8007eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007edc:	079d      	lsls	r5, r3, #30
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	d507      	bpl.n	8007ef4 <__smakebuf_r+0x1c>
 8007ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	6123      	str	r3, [r4, #16]
 8007eec:	2301      	movs	r3, #1
 8007eee:	6163      	str	r3, [r4, #20]
 8007ef0:	b002      	add	sp, #8
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	ab01      	add	r3, sp, #4
 8007ef6:	466a      	mov	r2, sp
 8007ef8:	f7ff ffca 	bl	8007e90 <__swhatbuf_r>
 8007efc:	9900      	ldr	r1, [sp, #0]
 8007efe:	4605      	mov	r5, r0
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 f879 	bl	8007ff8 <_malloc_r>
 8007f06:	b948      	cbnz	r0, 8007f1c <__smakebuf_r+0x44>
 8007f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f0c:	059a      	lsls	r2, r3, #22
 8007f0e:	d4ef      	bmi.n	8007ef0 <__smakebuf_r+0x18>
 8007f10:	f023 0303 	bic.w	r3, r3, #3
 8007f14:	f043 0302 	orr.w	r3, r3, #2
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	e7e3      	b.n	8007ee4 <__smakebuf_r+0xc>
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <__smakebuf_r+0x7c>)
 8007f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	6020      	str	r0, [r4, #0]
 8007f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	6163      	str	r3, [r4, #20]
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	6120      	str	r0, [r4, #16]
 8007f32:	b15b      	cbz	r3, 8007f4c <__smakebuf_r+0x74>
 8007f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 fc2d 	bl	8008798 <_isatty_r>
 8007f3e:	b128      	cbz	r0, 8007f4c <__smakebuf_r+0x74>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	89a0      	ldrh	r0, [r4, #12]
 8007f4e:	4305      	orrs	r5, r0
 8007f50:	81a5      	strh	r5, [r4, #12]
 8007f52:	e7cd      	b.n	8007ef0 <__smakebuf_r+0x18>
 8007f54:	08007ce9 	.word	0x08007ce9

08007f58 <_free_r>:
 8007f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f5a:	2900      	cmp	r1, #0
 8007f5c:	d048      	beq.n	8007ff0 <_free_r+0x98>
 8007f5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f62:	9001      	str	r0, [sp, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f1a1 0404 	sub.w	r4, r1, #4
 8007f6a:	bfb8      	it	lt
 8007f6c:	18e4      	addlt	r4, r4, r3
 8007f6e:	f000 fc35 	bl	80087dc <__malloc_lock>
 8007f72:	4a20      	ldr	r2, [pc, #128]	; (8007ff4 <_free_r+0x9c>)
 8007f74:	9801      	ldr	r0, [sp, #4]
 8007f76:	6813      	ldr	r3, [r2, #0]
 8007f78:	4615      	mov	r5, r2
 8007f7a:	b933      	cbnz	r3, 8007f8a <_free_r+0x32>
 8007f7c:	6063      	str	r3, [r4, #4]
 8007f7e:	6014      	str	r4, [r2, #0]
 8007f80:	b003      	add	sp, #12
 8007f82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f86:	f000 bc2f 	b.w	80087e8 <__malloc_unlock>
 8007f8a:	42a3      	cmp	r3, r4
 8007f8c:	d90b      	bls.n	8007fa6 <_free_r+0x4e>
 8007f8e:	6821      	ldr	r1, [r4, #0]
 8007f90:	1862      	adds	r2, r4, r1
 8007f92:	4293      	cmp	r3, r2
 8007f94:	bf04      	itt	eq
 8007f96:	681a      	ldreq	r2, [r3, #0]
 8007f98:	685b      	ldreq	r3, [r3, #4]
 8007f9a:	6063      	str	r3, [r4, #4]
 8007f9c:	bf04      	itt	eq
 8007f9e:	1852      	addeq	r2, r2, r1
 8007fa0:	6022      	streq	r2, [r4, #0]
 8007fa2:	602c      	str	r4, [r5, #0]
 8007fa4:	e7ec      	b.n	8007f80 <_free_r+0x28>
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	b10b      	cbz	r3, 8007fb0 <_free_r+0x58>
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	d9fa      	bls.n	8007fa6 <_free_r+0x4e>
 8007fb0:	6811      	ldr	r1, [r2, #0]
 8007fb2:	1855      	adds	r5, r2, r1
 8007fb4:	42a5      	cmp	r5, r4
 8007fb6:	d10b      	bne.n	8007fd0 <_free_r+0x78>
 8007fb8:	6824      	ldr	r4, [r4, #0]
 8007fba:	4421      	add	r1, r4
 8007fbc:	1854      	adds	r4, r2, r1
 8007fbe:	42a3      	cmp	r3, r4
 8007fc0:	6011      	str	r1, [r2, #0]
 8007fc2:	d1dd      	bne.n	8007f80 <_free_r+0x28>
 8007fc4:	681c      	ldr	r4, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	6053      	str	r3, [r2, #4]
 8007fca:	4421      	add	r1, r4
 8007fcc:	6011      	str	r1, [r2, #0]
 8007fce:	e7d7      	b.n	8007f80 <_free_r+0x28>
 8007fd0:	d902      	bls.n	8007fd8 <_free_r+0x80>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	e7d3      	b.n	8007f80 <_free_r+0x28>
 8007fd8:	6825      	ldr	r5, [r4, #0]
 8007fda:	1961      	adds	r1, r4, r5
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	bf04      	itt	eq
 8007fe0:	6819      	ldreq	r1, [r3, #0]
 8007fe2:	685b      	ldreq	r3, [r3, #4]
 8007fe4:	6063      	str	r3, [r4, #4]
 8007fe6:	bf04      	itt	eq
 8007fe8:	1949      	addeq	r1, r1, r5
 8007fea:	6021      	streq	r1, [r4, #0]
 8007fec:	6054      	str	r4, [r2, #4]
 8007fee:	e7c7      	b.n	8007f80 <_free_r+0x28>
 8007ff0:	b003      	add	sp, #12
 8007ff2:	bd30      	pop	{r4, r5, pc}
 8007ff4:	200007e4 	.word	0x200007e4

08007ff8 <_malloc_r>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	1ccd      	adds	r5, r1, #3
 8007ffc:	f025 0503 	bic.w	r5, r5, #3
 8008000:	3508      	adds	r5, #8
 8008002:	2d0c      	cmp	r5, #12
 8008004:	bf38      	it	cc
 8008006:	250c      	movcc	r5, #12
 8008008:	2d00      	cmp	r5, #0
 800800a:	4606      	mov	r6, r0
 800800c:	db01      	blt.n	8008012 <_malloc_r+0x1a>
 800800e:	42a9      	cmp	r1, r5
 8008010:	d903      	bls.n	800801a <_malloc_r+0x22>
 8008012:	230c      	movs	r3, #12
 8008014:	6033      	str	r3, [r6, #0]
 8008016:	2000      	movs	r0, #0
 8008018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800801a:	f000 fbdf 	bl	80087dc <__malloc_lock>
 800801e:	4921      	ldr	r1, [pc, #132]	; (80080a4 <_malloc_r+0xac>)
 8008020:	680a      	ldr	r2, [r1, #0]
 8008022:	4614      	mov	r4, r2
 8008024:	b99c      	cbnz	r4, 800804e <_malloc_r+0x56>
 8008026:	4f20      	ldr	r7, [pc, #128]	; (80080a8 <_malloc_r+0xb0>)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	b923      	cbnz	r3, 8008036 <_malloc_r+0x3e>
 800802c:	4621      	mov	r1, r4
 800802e:	4630      	mov	r0, r6
 8008030:	f000 fb2a 	bl	8008688 <_sbrk_r>
 8008034:	6038      	str	r0, [r7, #0]
 8008036:	4629      	mov	r1, r5
 8008038:	4630      	mov	r0, r6
 800803a:	f000 fb25 	bl	8008688 <_sbrk_r>
 800803e:	1c43      	adds	r3, r0, #1
 8008040:	d123      	bne.n	800808a <_malloc_r+0x92>
 8008042:	230c      	movs	r3, #12
 8008044:	6033      	str	r3, [r6, #0]
 8008046:	4630      	mov	r0, r6
 8008048:	f000 fbce 	bl	80087e8 <__malloc_unlock>
 800804c:	e7e3      	b.n	8008016 <_malloc_r+0x1e>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	1b5b      	subs	r3, r3, r5
 8008052:	d417      	bmi.n	8008084 <_malloc_r+0x8c>
 8008054:	2b0b      	cmp	r3, #11
 8008056:	d903      	bls.n	8008060 <_malloc_r+0x68>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	441c      	add	r4, r3
 800805c:	6025      	str	r5, [r4, #0]
 800805e:	e004      	b.n	800806a <_malloc_r+0x72>
 8008060:	6863      	ldr	r3, [r4, #4]
 8008062:	42a2      	cmp	r2, r4
 8008064:	bf0c      	ite	eq
 8008066:	600b      	streq	r3, [r1, #0]
 8008068:	6053      	strne	r3, [r2, #4]
 800806a:	4630      	mov	r0, r6
 800806c:	f000 fbbc 	bl	80087e8 <__malloc_unlock>
 8008070:	f104 000b 	add.w	r0, r4, #11
 8008074:	1d23      	adds	r3, r4, #4
 8008076:	f020 0007 	bic.w	r0, r0, #7
 800807a:	1ac2      	subs	r2, r0, r3
 800807c:	d0cc      	beq.n	8008018 <_malloc_r+0x20>
 800807e:	1a1b      	subs	r3, r3, r0
 8008080:	50a3      	str	r3, [r4, r2]
 8008082:	e7c9      	b.n	8008018 <_malloc_r+0x20>
 8008084:	4622      	mov	r2, r4
 8008086:	6864      	ldr	r4, [r4, #4]
 8008088:	e7cc      	b.n	8008024 <_malloc_r+0x2c>
 800808a:	1cc4      	adds	r4, r0, #3
 800808c:	f024 0403 	bic.w	r4, r4, #3
 8008090:	42a0      	cmp	r0, r4
 8008092:	d0e3      	beq.n	800805c <_malloc_r+0x64>
 8008094:	1a21      	subs	r1, r4, r0
 8008096:	4630      	mov	r0, r6
 8008098:	f000 faf6 	bl	8008688 <_sbrk_r>
 800809c:	3001      	adds	r0, #1
 800809e:	d1dd      	bne.n	800805c <_malloc_r+0x64>
 80080a0:	e7cf      	b.n	8008042 <_malloc_r+0x4a>
 80080a2:	bf00      	nop
 80080a4:	200007e4 	.word	0x200007e4
 80080a8:	200007e8 	.word	0x200007e8

080080ac <__sfputc_r>:
 80080ac:	6893      	ldr	r3, [r2, #8]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	b410      	push	{r4}
 80080b4:	6093      	str	r3, [r2, #8]
 80080b6:	da08      	bge.n	80080ca <__sfputc_r+0x1e>
 80080b8:	6994      	ldr	r4, [r2, #24]
 80080ba:	42a3      	cmp	r3, r4
 80080bc:	db01      	blt.n	80080c2 <__sfputc_r+0x16>
 80080be:	290a      	cmp	r1, #10
 80080c0:	d103      	bne.n	80080ca <__sfputc_r+0x1e>
 80080c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080c6:	f7ff bc69 	b.w	800799c <__swbuf_r>
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	1c58      	adds	r0, r3, #1
 80080ce:	6010      	str	r0, [r2, #0]
 80080d0:	7019      	strb	r1, [r3, #0]
 80080d2:	4608      	mov	r0, r1
 80080d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d8:	4770      	bx	lr

080080da <__sfputs_r>:
 80080da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080dc:	4606      	mov	r6, r0
 80080de:	460f      	mov	r7, r1
 80080e0:	4614      	mov	r4, r2
 80080e2:	18d5      	adds	r5, r2, r3
 80080e4:	42ac      	cmp	r4, r5
 80080e6:	d101      	bne.n	80080ec <__sfputs_r+0x12>
 80080e8:	2000      	movs	r0, #0
 80080ea:	e007      	b.n	80080fc <__sfputs_r+0x22>
 80080ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f0:	463a      	mov	r2, r7
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7ff ffda 	bl	80080ac <__sfputc_r>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d1f3      	bne.n	80080e4 <__sfputs_r+0xa>
 80080fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008100 <_vfiprintf_r>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	460d      	mov	r5, r1
 8008106:	b09d      	sub	sp, #116	; 0x74
 8008108:	4614      	mov	r4, r2
 800810a:	4698      	mov	r8, r3
 800810c:	4606      	mov	r6, r0
 800810e:	b118      	cbz	r0, 8008118 <_vfiprintf_r+0x18>
 8008110:	6983      	ldr	r3, [r0, #24]
 8008112:	b90b      	cbnz	r3, 8008118 <_vfiprintf_r+0x18>
 8008114:	f7ff fe1c 	bl	8007d50 <__sinit>
 8008118:	4b89      	ldr	r3, [pc, #548]	; (8008340 <_vfiprintf_r+0x240>)
 800811a:	429d      	cmp	r5, r3
 800811c:	d11b      	bne.n	8008156 <_vfiprintf_r+0x56>
 800811e:	6875      	ldr	r5, [r6, #4]
 8008120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008122:	07d9      	lsls	r1, r3, #31
 8008124:	d405      	bmi.n	8008132 <_vfiprintf_r+0x32>
 8008126:	89ab      	ldrh	r3, [r5, #12]
 8008128:	059a      	lsls	r2, r3, #22
 800812a:	d402      	bmi.n	8008132 <_vfiprintf_r+0x32>
 800812c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800812e:	f7ff fead 	bl	8007e8c <__retarget_lock_acquire_recursive>
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	071b      	lsls	r3, r3, #28
 8008136:	d501      	bpl.n	800813c <_vfiprintf_r+0x3c>
 8008138:	692b      	ldr	r3, [r5, #16]
 800813a:	b9eb      	cbnz	r3, 8008178 <_vfiprintf_r+0x78>
 800813c:	4629      	mov	r1, r5
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff fc7e 	bl	8007a40 <__swsetup_r>
 8008144:	b1c0      	cbz	r0, 8008178 <_vfiprintf_r+0x78>
 8008146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008148:	07dc      	lsls	r4, r3, #31
 800814a:	d50e      	bpl.n	800816a <_vfiprintf_r+0x6a>
 800814c:	f04f 30ff 	mov.w	r0, #4294967295
 8008150:	b01d      	add	sp, #116	; 0x74
 8008152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008156:	4b7b      	ldr	r3, [pc, #492]	; (8008344 <_vfiprintf_r+0x244>)
 8008158:	429d      	cmp	r5, r3
 800815a:	d101      	bne.n	8008160 <_vfiprintf_r+0x60>
 800815c:	68b5      	ldr	r5, [r6, #8]
 800815e:	e7df      	b.n	8008120 <_vfiprintf_r+0x20>
 8008160:	4b79      	ldr	r3, [pc, #484]	; (8008348 <_vfiprintf_r+0x248>)
 8008162:	429d      	cmp	r5, r3
 8008164:	bf08      	it	eq
 8008166:	68f5      	ldreq	r5, [r6, #12]
 8008168:	e7da      	b.n	8008120 <_vfiprintf_r+0x20>
 800816a:	89ab      	ldrh	r3, [r5, #12]
 800816c:	0598      	lsls	r0, r3, #22
 800816e:	d4ed      	bmi.n	800814c <_vfiprintf_r+0x4c>
 8008170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008172:	f7ff fe8c 	bl	8007e8e <__retarget_lock_release_recursive>
 8008176:	e7e9      	b.n	800814c <_vfiprintf_r+0x4c>
 8008178:	2300      	movs	r3, #0
 800817a:	9309      	str	r3, [sp, #36]	; 0x24
 800817c:	2320      	movs	r3, #32
 800817e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008182:	f8cd 800c 	str.w	r8, [sp, #12]
 8008186:	2330      	movs	r3, #48	; 0x30
 8008188:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800834c <_vfiprintf_r+0x24c>
 800818c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008190:	f04f 0901 	mov.w	r9, #1
 8008194:	4623      	mov	r3, r4
 8008196:	469a      	mov	sl, r3
 8008198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800819c:	b10a      	cbz	r2, 80081a2 <_vfiprintf_r+0xa2>
 800819e:	2a25      	cmp	r2, #37	; 0x25
 80081a0:	d1f9      	bne.n	8008196 <_vfiprintf_r+0x96>
 80081a2:	ebba 0b04 	subs.w	fp, sl, r4
 80081a6:	d00b      	beq.n	80081c0 <_vfiprintf_r+0xc0>
 80081a8:	465b      	mov	r3, fp
 80081aa:	4622      	mov	r2, r4
 80081ac:	4629      	mov	r1, r5
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff ff93 	bl	80080da <__sfputs_r>
 80081b4:	3001      	adds	r0, #1
 80081b6:	f000 80aa 	beq.w	800830e <_vfiprintf_r+0x20e>
 80081ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081bc:	445a      	add	r2, fp
 80081be:	9209      	str	r2, [sp, #36]	; 0x24
 80081c0:	f89a 3000 	ldrb.w	r3, [sl]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 80a2 	beq.w	800830e <_vfiprintf_r+0x20e>
 80081ca:	2300      	movs	r3, #0
 80081cc:	f04f 32ff 	mov.w	r2, #4294967295
 80081d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081d4:	f10a 0a01 	add.w	sl, sl, #1
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	9307      	str	r3, [sp, #28]
 80081dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081e0:	931a      	str	r3, [sp, #104]	; 0x68
 80081e2:	4654      	mov	r4, sl
 80081e4:	2205      	movs	r2, #5
 80081e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ea:	4858      	ldr	r0, [pc, #352]	; (800834c <_vfiprintf_r+0x24c>)
 80081ec:	f7f8 f878 	bl	80002e0 <memchr>
 80081f0:	9a04      	ldr	r2, [sp, #16]
 80081f2:	b9d8      	cbnz	r0, 800822c <_vfiprintf_r+0x12c>
 80081f4:	06d1      	lsls	r1, r2, #27
 80081f6:	bf44      	itt	mi
 80081f8:	2320      	movmi	r3, #32
 80081fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081fe:	0713      	lsls	r3, r2, #28
 8008200:	bf44      	itt	mi
 8008202:	232b      	movmi	r3, #43	; 0x2b
 8008204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008208:	f89a 3000 	ldrb.w	r3, [sl]
 800820c:	2b2a      	cmp	r3, #42	; 0x2a
 800820e:	d015      	beq.n	800823c <_vfiprintf_r+0x13c>
 8008210:	9a07      	ldr	r2, [sp, #28]
 8008212:	4654      	mov	r4, sl
 8008214:	2000      	movs	r0, #0
 8008216:	f04f 0c0a 	mov.w	ip, #10
 800821a:	4621      	mov	r1, r4
 800821c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008220:	3b30      	subs	r3, #48	; 0x30
 8008222:	2b09      	cmp	r3, #9
 8008224:	d94e      	bls.n	80082c4 <_vfiprintf_r+0x1c4>
 8008226:	b1b0      	cbz	r0, 8008256 <_vfiprintf_r+0x156>
 8008228:	9207      	str	r2, [sp, #28]
 800822a:	e014      	b.n	8008256 <_vfiprintf_r+0x156>
 800822c:	eba0 0308 	sub.w	r3, r0, r8
 8008230:	fa09 f303 	lsl.w	r3, r9, r3
 8008234:	4313      	orrs	r3, r2
 8008236:	9304      	str	r3, [sp, #16]
 8008238:	46a2      	mov	sl, r4
 800823a:	e7d2      	b.n	80081e2 <_vfiprintf_r+0xe2>
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	1d19      	adds	r1, r3, #4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	9103      	str	r1, [sp, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	bfbb      	ittet	lt
 8008248:	425b      	neglt	r3, r3
 800824a:	f042 0202 	orrlt.w	r2, r2, #2
 800824e:	9307      	strge	r3, [sp, #28]
 8008250:	9307      	strlt	r3, [sp, #28]
 8008252:	bfb8      	it	lt
 8008254:	9204      	strlt	r2, [sp, #16]
 8008256:	7823      	ldrb	r3, [r4, #0]
 8008258:	2b2e      	cmp	r3, #46	; 0x2e
 800825a:	d10c      	bne.n	8008276 <_vfiprintf_r+0x176>
 800825c:	7863      	ldrb	r3, [r4, #1]
 800825e:	2b2a      	cmp	r3, #42	; 0x2a
 8008260:	d135      	bne.n	80082ce <_vfiprintf_r+0x1ce>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	1d1a      	adds	r2, r3, #4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	9203      	str	r2, [sp, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	bfb8      	it	lt
 800826e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008272:	3402      	adds	r4, #2
 8008274:	9305      	str	r3, [sp, #20]
 8008276:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800835c <_vfiprintf_r+0x25c>
 800827a:	7821      	ldrb	r1, [r4, #0]
 800827c:	2203      	movs	r2, #3
 800827e:	4650      	mov	r0, sl
 8008280:	f7f8 f82e 	bl	80002e0 <memchr>
 8008284:	b140      	cbz	r0, 8008298 <_vfiprintf_r+0x198>
 8008286:	2340      	movs	r3, #64	; 0x40
 8008288:	eba0 000a 	sub.w	r0, r0, sl
 800828c:	fa03 f000 	lsl.w	r0, r3, r0
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	4303      	orrs	r3, r0
 8008294:	3401      	adds	r4, #1
 8008296:	9304      	str	r3, [sp, #16]
 8008298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829c:	482c      	ldr	r0, [pc, #176]	; (8008350 <_vfiprintf_r+0x250>)
 800829e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082a2:	2206      	movs	r2, #6
 80082a4:	f7f8 f81c 	bl	80002e0 <memchr>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d03f      	beq.n	800832c <_vfiprintf_r+0x22c>
 80082ac:	4b29      	ldr	r3, [pc, #164]	; (8008354 <_vfiprintf_r+0x254>)
 80082ae:	bb1b      	cbnz	r3, 80082f8 <_vfiprintf_r+0x1f8>
 80082b0:	9b03      	ldr	r3, [sp, #12]
 80082b2:	3307      	adds	r3, #7
 80082b4:	f023 0307 	bic.w	r3, r3, #7
 80082b8:	3308      	adds	r3, #8
 80082ba:	9303      	str	r3, [sp, #12]
 80082bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082be:	443b      	add	r3, r7
 80082c0:	9309      	str	r3, [sp, #36]	; 0x24
 80082c2:	e767      	b.n	8008194 <_vfiprintf_r+0x94>
 80082c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80082c8:	460c      	mov	r4, r1
 80082ca:	2001      	movs	r0, #1
 80082cc:	e7a5      	b.n	800821a <_vfiprintf_r+0x11a>
 80082ce:	2300      	movs	r3, #0
 80082d0:	3401      	adds	r4, #1
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	4619      	mov	r1, r3
 80082d6:	f04f 0c0a 	mov.w	ip, #10
 80082da:	4620      	mov	r0, r4
 80082dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e0:	3a30      	subs	r2, #48	; 0x30
 80082e2:	2a09      	cmp	r2, #9
 80082e4:	d903      	bls.n	80082ee <_vfiprintf_r+0x1ee>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0c5      	beq.n	8008276 <_vfiprintf_r+0x176>
 80082ea:	9105      	str	r1, [sp, #20]
 80082ec:	e7c3      	b.n	8008276 <_vfiprintf_r+0x176>
 80082ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f2:	4604      	mov	r4, r0
 80082f4:	2301      	movs	r3, #1
 80082f6:	e7f0      	b.n	80082da <_vfiprintf_r+0x1da>
 80082f8:	ab03      	add	r3, sp, #12
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	462a      	mov	r2, r5
 80082fe:	4b16      	ldr	r3, [pc, #88]	; (8008358 <_vfiprintf_r+0x258>)
 8008300:	a904      	add	r1, sp, #16
 8008302:	4630      	mov	r0, r6
 8008304:	f3af 8000 	nop.w
 8008308:	4607      	mov	r7, r0
 800830a:	1c78      	adds	r0, r7, #1
 800830c:	d1d6      	bne.n	80082bc <_vfiprintf_r+0x1bc>
 800830e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008310:	07d9      	lsls	r1, r3, #31
 8008312:	d405      	bmi.n	8008320 <_vfiprintf_r+0x220>
 8008314:	89ab      	ldrh	r3, [r5, #12]
 8008316:	059a      	lsls	r2, r3, #22
 8008318:	d402      	bmi.n	8008320 <_vfiprintf_r+0x220>
 800831a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800831c:	f7ff fdb7 	bl	8007e8e <__retarget_lock_release_recursive>
 8008320:	89ab      	ldrh	r3, [r5, #12]
 8008322:	065b      	lsls	r3, r3, #25
 8008324:	f53f af12 	bmi.w	800814c <_vfiprintf_r+0x4c>
 8008328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800832a:	e711      	b.n	8008150 <_vfiprintf_r+0x50>
 800832c:	ab03      	add	r3, sp, #12
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	462a      	mov	r2, r5
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <_vfiprintf_r+0x258>)
 8008334:	a904      	add	r1, sp, #16
 8008336:	4630      	mov	r0, r6
 8008338:	f000 f880 	bl	800843c <_printf_i>
 800833c:	e7e4      	b.n	8008308 <_vfiprintf_r+0x208>
 800833e:	bf00      	nop
 8008340:	08008e30 	.word	0x08008e30
 8008344:	08008e50 	.word	0x08008e50
 8008348:	08008e10 	.word	0x08008e10
 800834c:	08008e70 	.word	0x08008e70
 8008350:	08008e7a 	.word	0x08008e7a
 8008354:	00000000 	.word	0x00000000
 8008358:	080080db 	.word	0x080080db
 800835c:	08008e76 	.word	0x08008e76

08008360 <_printf_common>:
 8008360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	4616      	mov	r6, r2
 8008366:	4699      	mov	r9, r3
 8008368:	688a      	ldr	r2, [r1, #8]
 800836a:	690b      	ldr	r3, [r1, #16]
 800836c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008370:	4293      	cmp	r3, r2
 8008372:	bfb8      	it	lt
 8008374:	4613      	movlt	r3, r2
 8008376:	6033      	str	r3, [r6, #0]
 8008378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800837c:	4607      	mov	r7, r0
 800837e:	460c      	mov	r4, r1
 8008380:	b10a      	cbz	r2, 8008386 <_printf_common+0x26>
 8008382:	3301      	adds	r3, #1
 8008384:	6033      	str	r3, [r6, #0]
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	0699      	lsls	r1, r3, #26
 800838a:	bf42      	ittt	mi
 800838c:	6833      	ldrmi	r3, [r6, #0]
 800838e:	3302      	addmi	r3, #2
 8008390:	6033      	strmi	r3, [r6, #0]
 8008392:	6825      	ldr	r5, [r4, #0]
 8008394:	f015 0506 	ands.w	r5, r5, #6
 8008398:	d106      	bne.n	80083a8 <_printf_common+0x48>
 800839a:	f104 0a19 	add.w	sl, r4, #25
 800839e:	68e3      	ldr	r3, [r4, #12]
 80083a0:	6832      	ldr	r2, [r6, #0]
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	42ab      	cmp	r3, r5
 80083a6:	dc26      	bgt.n	80083f6 <_printf_common+0x96>
 80083a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083ac:	1e13      	subs	r3, r2, #0
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	bf18      	it	ne
 80083b2:	2301      	movne	r3, #1
 80083b4:	0692      	lsls	r2, r2, #26
 80083b6:	d42b      	bmi.n	8008410 <_printf_common+0xb0>
 80083b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083bc:	4649      	mov	r1, r9
 80083be:	4638      	mov	r0, r7
 80083c0:	47c0      	blx	r8
 80083c2:	3001      	adds	r0, #1
 80083c4:	d01e      	beq.n	8008404 <_printf_common+0xa4>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	68e5      	ldr	r5, [r4, #12]
 80083ca:	6832      	ldr	r2, [r6, #0]
 80083cc:	f003 0306 	and.w	r3, r3, #6
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	bf08      	it	eq
 80083d4:	1aad      	subeq	r5, r5, r2
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	6922      	ldr	r2, [r4, #16]
 80083da:	bf0c      	ite	eq
 80083dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e0:	2500      	movne	r5, #0
 80083e2:	4293      	cmp	r3, r2
 80083e4:	bfc4      	itt	gt
 80083e6:	1a9b      	subgt	r3, r3, r2
 80083e8:	18ed      	addgt	r5, r5, r3
 80083ea:	2600      	movs	r6, #0
 80083ec:	341a      	adds	r4, #26
 80083ee:	42b5      	cmp	r5, r6
 80083f0:	d11a      	bne.n	8008428 <_printf_common+0xc8>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e008      	b.n	8008408 <_printf_common+0xa8>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4652      	mov	r2, sl
 80083fa:	4649      	mov	r1, r9
 80083fc:	4638      	mov	r0, r7
 80083fe:	47c0      	blx	r8
 8008400:	3001      	adds	r0, #1
 8008402:	d103      	bne.n	800840c <_printf_common+0xac>
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840c:	3501      	adds	r5, #1
 800840e:	e7c6      	b.n	800839e <_printf_common+0x3e>
 8008410:	18e1      	adds	r1, r4, r3
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	2030      	movs	r0, #48	; 0x30
 8008416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800841a:	4422      	add	r2, r4
 800841c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008424:	3302      	adds	r3, #2
 8008426:	e7c7      	b.n	80083b8 <_printf_common+0x58>
 8008428:	2301      	movs	r3, #1
 800842a:	4622      	mov	r2, r4
 800842c:	4649      	mov	r1, r9
 800842e:	4638      	mov	r0, r7
 8008430:	47c0      	blx	r8
 8008432:	3001      	adds	r0, #1
 8008434:	d0e6      	beq.n	8008404 <_printf_common+0xa4>
 8008436:	3601      	adds	r6, #1
 8008438:	e7d9      	b.n	80083ee <_printf_common+0x8e>
	...

0800843c <_printf_i>:
 800843c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	460c      	mov	r4, r1
 8008442:	4691      	mov	r9, r2
 8008444:	7e27      	ldrb	r7, [r4, #24]
 8008446:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008448:	2f78      	cmp	r7, #120	; 0x78
 800844a:	4680      	mov	r8, r0
 800844c:	469a      	mov	sl, r3
 800844e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008452:	d807      	bhi.n	8008464 <_printf_i+0x28>
 8008454:	2f62      	cmp	r7, #98	; 0x62
 8008456:	d80a      	bhi.n	800846e <_printf_i+0x32>
 8008458:	2f00      	cmp	r7, #0
 800845a:	f000 80d8 	beq.w	800860e <_printf_i+0x1d2>
 800845e:	2f58      	cmp	r7, #88	; 0x58
 8008460:	f000 80a3 	beq.w	80085aa <_printf_i+0x16e>
 8008464:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800846c:	e03a      	b.n	80084e4 <_printf_i+0xa8>
 800846e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008472:	2b15      	cmp	r3, #21
 8008474:	d8f6      	bhi.n	8008464 <_printf_i+0x28>
 8008476:	a001      	add	r0, pc, #4	; (adr r0, 800847c <_printf_i+0x40>)
 8008478:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084e9 	.word	0x080084e9
 8008484:	08008465 	.word	0x08008465
 8008488:	08008465 	.word	0x08008465
 800848c:	08008465 	.word	0x08008465
 8008490:	08008465 	.word	0x08008465
 8008494:	080084e9 	.word	0x080084e9
 8008498:	08008465 	.word	0x08008465
 800849c:	08008465 	.word	0x08008465
 80084a0:	08008465 	.word	0x08008465
 80084a4:	08008465 	.word	0x08008465
 80084a8:	080085f5 	.word	0x080085f5
 80084ac:	08008519 	.word	0x08008519
 80084b0:	080085d7 	.word	0x080085d7
 80084b4:	08008465 	.word	0x08008465
 80084b8:	08008465 	.word	0x08008465
 80084bc:	08008617 	.word	0x08008617
 80084c0:	08008465 	.word	0x08008465
 80084c4:	08008519 	.word	0x08008519
 80084c8:	08008465 	.word	0x08008465
 80084cc:	08008465 	.word	0x08008465
 80084d0:	080085df 	.word	0x080085df
 80084d4:	680b      	ldr	r3, [r1, #0]
 80084d6:	1d1a      	adds	r2, r3, #4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	600a      	str	r2, [r1, #0]
 80084dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e4:	2301      	movs	r3, #1
 80084e6:	e0a3      	b.n	8008630 <_printf_i+0x1f4>
 80084e8:	6825      	ldr	r5, [r4, #0]
 80084ea:	6808      	ldr	r0, [r1, #0]
 80084ec:	062e      	lsls	r6, r5, #24
 80084ee:	f100 0304 	add.w	r3, r0, #4
 80084f2:	d50a      	bpl.n	800850a <_printf_i+0xce>
 80084f4:	6805      	ldr	r5, [r0, #0]
 80084f6:	600b      	str	r3, [r1, #0]
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	da03      	bge.n	8008504 <_printf_i+0xc8>
 80084fc:	232d      	movs	r3, #45	; 0x2d
 80084fe:	426d      	negs	r5, r5
 8008500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008504:	485e      	ldr	r0, [pc, #376]	; (8008680 <_printf_i+0x244>)
 8008506:	230a      	movs	r3, #10
 8008508:	e019      	b.n	800853e <_printf_i+0x102>
 800850a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800850e:	6805      	ldr	r5, [r0, #0]
 8008510:	600b      	str	r3, [r1, #0]
 8008512:	bf18      	it	ne
 8008514:	b22d      	sxthne	r5, r5
 8008516:	e7ef      	b.n	80084f8 <_printf_i+0xbc>
 8008518:	680b      	ldr	r3, [r1, #0]
 800851a:	6825      	ldr	r5, [r4, #0]
 800851c:	1d18      	adds	r0, r3, #4
 800851e:	6008      	str	r0, [r1, #0]
 8008520:	0628      	lsls	r0, r5, #24
 8008522:	d501      	bpl.n	8008528 <_printf_i+0xec>
 8008524:	681d      	ldr	r5, [r3, #0]
 8008526:	e002      	b.n	800852e <_printf_i+0xf2>
 8008528:	0669      	lsls	r1, r5, #25
 800852a:	d5fb      	bpl.n	8008524 <_printf_i+0xe8>
 800852c:	881d      	ldrh	r5, [r3, #0]
 800852e:	4854      	ldr	r0, [pc, #336]	; (8008680 <_printf_i+0x244>)
 8008530:	2f6f      	cmp	r7, #111	; 0x6f
 8008532:	bf0c      	ite	eq
 8008534:	2308      	moveq	r3, #8
 8008536:	230a      	movne	r3, #10
 8008538:	2100      	movs	r1, #0
 800853a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800853e:	6866      	ldr	r6, [r4, #4]
 8008540:	60a6      	str	r6, [r4, #8]
 8008542:	2e00      	cmp	r6, #0
 8008544:	bfa2      	ittt	ge
 8008546:	6821      	ldrge	r1, [r4, #0]
 8008548:	f021 0104 	bicge.w	r1, r1, #4
 800854c:	6021      	strge	r1, [r4, #0]
 800854e:	b90d      	cbnz	r5, 8008554 <_printf_i+0x118>
 8008550:	2e00      	cmp	r6, #0
 8008552:	d04d      	beq.n	80085f0 <_printf_i+0x1b4>
 8008554:	4616      	mov	r6, r2
 8008556:	fbb5 f1f3 	udiv	r1, r5, r3
 800855a:	fb03 5711 	mls	r7, r3, r1, r5
 800855e:	5dc7      	ldrb	r7, [r0, r7]
 8008560:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008564:	462f      	mov	r7, r5
 8008566:	42bb      	cmp	r3, r7
 8008568:	460d      	mov	r5, r1
 800856a:	d9f4      	bls.n	8008556 <_printf_i+0x11a>
 800856c:	2b08      	cmp	r3, #8
 800856e:	d10b      	bne.n	8008588 <_printf_i+0x14c>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	07df      	lsls	r7, r3, #31
 8008574:	d508      	bpl.n	8008588 <_printf_i+0x14c>
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	6861      	ldr	r1, [r4, #4]
 800857a:	4299      	cmp	r1, r3
 800857c:	bfde      	ittt	le
 800857e:	2330      	movle	r3, #48	; 0x30
 8008580:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008584:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008588:	1b92      	subs	r2, r2, r6
 800858a:	6122      	str	r2, [r4, #16]
 800858c:	f8cd a000 	str.w	sl, [sp]
 8008590:	464b      	mov	r3, r9
 8008592:	aa03      	add	r2, sp, #12
 8008594:	4621      	mov	r1, r4
 8008596:	4640      	mov	r0, r8
 8008598:	f7ff fee2 	bl	8008360 <_printf_common>
 800859c:	3001      	adds	r0, #1
 800859e:	d14c      	bne.n	800863a <_printf_i+0x1fe>
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	b004      	add	sp, #16
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	4835      	ldr	r0, [pc, #212]	; (8008680 <_printf_i+0x244>)
 80085ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	680e      	ldr	r6, [r1, #0]
 80085b4:	061f      	lsls	r7, r3, #24
 80085b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80085ba:	600e      	str	r6, [r1, #0]
 80085bc:	d514      	bpl.n	80085e8 <_printf_i+0x1ac>
 80085be:	07d9      	lsls	r1, r3, #31
 80085c0:	bf44      	itt	mi
 80085c2:	f043 0320 	orrmi.w	r3, r3, #32
 80085c6:	6023      	strmi	r3, [r4, #0]
 80085c8:	b91d      	cbnz	r5, 80085d2 <_printf_i+0x196>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	f023 0320 	bic.w	r3, r3, #32
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	2310      	movs	r3, #16
 80085d4:	e7b0      	b.n	8008538 <_printf_i+0xfc>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	f043 0320 	orr.w	r3, r3, #32
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	2378      	movs	r3, #120	; 0x78
 80085e0:	4828      	ldr	r0, [pc, #160]	; (8008684 <_printf_i+0x248>)
 80085e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085e6:	e7e3      	b.n	80085b0 <_printf_i+0x174>
 80085e8:	065e      	lsls	r6, r3, #25
 80085ea:	bf48      	it	mi
 80085ec:	b2ad      	uxthmi	r5, r5
 80085ee:	e7e6      	b.n	80085be <_printf_i+0x182>
 80085f0:	4616      	mov	r6, r2
 80085f2:	e7bb      	b.n	800856c <_printf_i+0x130>
 80085f4:	680b      	ldr	r3, [r1, #0]
 80085f6:	6826      	ldr	r6, [r4, #0]
 80085f8:	6960      	ldr	r0, [r4, #20]
 80085fa:	1d1d      	adds	r5, r3, #4
 80085fc:	600d      	str	r5, [r1, #0]
 80085fe:	0635      	lsls	r5, r6, #24
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	d501      	bpl.n	8008608 <_printf_i+0x1cc>
 8008604:	6018      	str	r0, [r3, #0]
 8008606:	e002      	b.n	800860e <_printf_i+0x1d2>
 8008608:	0671      	lsls	r1, r6, #25
 800860a:	d5fb      	bpl.n	8008604 <_printf_i+0x1c8>
 800860c:	8018      	strh	r0, [r3, #0]
 800860e:	2300      	movs	r3, #0
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	4616      	mov	r6, r2
 8008614:	e7ba      	b.n	800858c <_printf_i+0x150>
 8008616:	680b      	ldr	r3, [r1, #0]
 8008618:	1d1a      	adds	r2, r3, #4
 800861a:	600a      	str	r2, [r1, #0]
 800861c:	681e      	ldr	r6, [r3, #0]
 800861e:	6862      	ldr	r2, [r4, #4]
 8008620:	2100      	movs	r1, #0
 8008622:	4630      	mov	r0, r6
 8008624:	f7f7 fe5c 	bl	80002e0 <memchr>
 8008628:	b108      	cbz	r0, 800862e <_printf_i+0x1f2>
 800862a:	1b80      	subs	r0, r0, r6
 800862c:	6060      	str	r0, [r4, #4]
 800862e:	6863      	ldr	r3, [r4, #4]
 8008630:	6123      	str	r3, [r4, #16]
 8008632:	2300      	movs	r3, #0
 8008634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008638:	e7a8      	b.n	800858c <_printf_i+0x150>
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	4632      	mov	r2, r6
 800863e:	4649      	mov	r1, r9
 8008640:	4640      	mov	r0, r8
 8008642:	47d0      	blx	sl
 8008644:	3001      	adds	r0, #1
 8008646:	d0ab      	beq.n	80085a0 <_printf_i+0x164>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	079b      	lsls	r3, r3, #30
 800864c:	d413      	bmi.n	8008676 <_printf_i+0x23a>
 800864e:	68e0      	ldr	r0, [r4, #12]
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	4298      	cmp	r0, r3
 8008654:	bfb8      	it	lt
 8008656:	4618      	movlt	r0, r3
 8008658:	e7a4      	b.n	80085a4 <_printf_i+0x168>
 800865a:	2301      	movs	r3, #1
 800865c:	4632      	mov	r2, r6
 800865e:	4649      	mov	r1, r9
 8008660:	4640      	mov	r0, r8
 8008662:	47d0      	blx	sl
 8008664:	3001      	adds	r0, #1
 8008666:	d09b      	beq.n	80085a0 <_printf_i+0x164>
 8008668:	3501      	adds	r5, #1
 800866a:	68e3      	ldr	r3, [r4, #12]
 800866c:	9903      	ldr	r1, [sp, #12]
 800866e:	1a5b      	subs	r3, r3, r1
 8008670:	42ab      	cmp	r3, r5
 8008672:	dcf2      	bgt.n	800865a <_printf_i+0x21e>
 8008674:	e7eb      	b.n	800864e <_printf_i+0x212>
 8008676:	2500      	movs	r5, #0
 8008678:	f104 0619 	add.w	r6, r4, #25
 800867c:	e7f5      	b.n	800866a <_printf_i+0x22e>
 800867e:	bf00      	nop
 8008680:	08008e81 	.word	0x08008e81
 8008684:	08008e92 	.word	0x08008e92

08008688 <_sbrk_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d06      	ldr	r5, [pc, #24]	; (80086a4 <_sbrk_r+0x1c>)
 800868c:	2300      	movs	r3, #0
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	602b      	str	r3, [r5, #0]
 8008694:	f7f8 fbee 	bl	8000e74 <_sbrk>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_sbrk_r+0x1a>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_sbrk_r+0x1a>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	20001160 	.word	0x20001160

080086a8 <__sread>:
 80086a8:	b510      	push	{r4, lr}
 80086aa:	460c      	mov	r4, r1
 80086ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b0:	f000 f8a0 	bl	80087f4 <_read_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	bfab      	itete	ge
 80086b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086ba:	89a3      	ldrhlt	r3, [r4, #12]
 80086bc:	181b      	addge	r3, r3, r0
 80086be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086c2:	bfac      	ite	ge
 80086c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80086c6:	81a3      	strhlt	r3, [r4, #12]
 80086c8:	bd10      	pop	{r4, pc}

080086ca <__swrite>:
 80086ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ce:	461f      	mov	r7, r3
 80086d0:	898b      	ldrh	r3, [r1, #12]
 80086d2:	05db      	lsls	r3, r3, #23
 80086d4:	4605      	mov	r5, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	4616      	mov	r6, r2
 80086da:	d505      	bpl.n	80086e8 <__swrite+0x1e>
 80086dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e0:	2302      	movs	r3, #2
 80086e2:	2200      	movs	r2, #0
 80086e4:	f000 f868 	bl	80087b8 <_lseek_r>
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	4632      	mov	r2, r6
 80086f6:	463b      	mov	r3, r7
 80086f8:	4628      	mov	r0, r5
 80086fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086fe:	f000 b817 	b.w	8008730 <_write_r>

08008702 <__sseek>:
 8008702:	b510      	push	{r4, lr}
 8008704:	460c      	mov	r4, r1
 8008706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870a:	f000 f855 	bl	80087b8 <_lseek_r>
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	bf15      	itete	ne
 8008714:	6560      	strne	r0, [r4, #84]	; 0x54
 8008716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800871a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800871e:	81a3      	strheq	r3, [r4, #12]
 8008720:	bf18      	it	ne
 8008722:	81a3      	strhne	r3, [r4, #12]
 8008724:	bd10      	pop	{r4, pc}

08008726 <__sclose>:
 8008726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872a:	f000 b813 	b.w	8008754 <_close_r>
	...

08008730 <_write_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4d07      	ldr	r5, [pc, #28]	; (8008750 <_write_r+0x20>)
 8008734:	4604      	mov	r4, r0
 8008736:	4608      	mov	r0, r1
 8008738:	4611      	mov	r1, r2
 800873a:	2200      	movs	r2, #0
 800873c:	602a      	str	r2, [r5, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	f7f8 fb47 	bl	8000dd2 <_write>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_write_r+0x1e>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_write_r+0x1e>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	20001160 	.word	0x20001160

08008754 <_close_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4d06      	ldr	r5, [pc, #24]	; (8008770 <_close_r+0x1c>)
 8008758:	2300      	movs	r3, #0
 800875a:	4604      	mov	r4, r0
 800875c:	4608      	mov	r0, r1
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	f7f8 fb53 	bl	8000e0a <_close>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_close_r+0x1a>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_close_r+0x1a>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	20001160 	.word	0x20001160

08008774 <_fstat_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d07      	ldr	r5, [pc, #28]	; (8008794 <_fstat_r+0x20>)
 8008778:	2300      	movs	r3, #0
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	4611      	mov	r1, r2
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	f7f8 fb4e 	bl	8000e22 <_fstat>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	d102      	bne.n	8008790 <_fstat_r+0x1c>
 800878a:	682b      	ldr	r3, [r5, #0]
 800878c:	b103      	cbz	r3, 8008790 <_fstat_r+0x1c>
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	bd38      	pop	{r3, r4, r5, pc}
 8008792:	bf00      	nop
 8008794:	20001160 	.word	0x20001160

08008798 <_isatty_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_isatty_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f8 fb4d 	bl	8000e42 <_isatty>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_isatty_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_isatty_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20001160 	.word	0x20001160

080087b8 <_lseek_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4d07      	ldr	r5, [pc, #28]	; (80087d8 <_lseek_r+0x20>)
 80087bc:	4604      	mov	r4, r0
 80087be:	4608      	mov	r0, r1
 80087c0:	4611      	mov	r1, r2
 80087c2:	2200      	movs	r2, #0
 80087c4:	602a      	str	r2, [r5, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	f7f8 fb46 	bl	8000e58 <_lseek>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_lseek_r+0x1e>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_lseek_r+0x1e>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	20001160 	.word	0x20001160

080087dc <__malloc_lock>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__malloc_lock+0x8>)
 80087de:	f7ff bb55 	b.w	8007e8c <__retarget_lock_acquire_recursive>
 80087e2:	bf00      	nop
 80087e4:	20001158 	.word	0x20001158

080087e8 <__malloc_unlock>:
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__malloc_unlock+0x8>)
 80087ea:	f7ff bb50 	b.w	8007e8e <__retarget_lock_release_recursive>
 80087ee:	bf00      	nop
 80087f0:	20001158 	.word	0x20001158

080087f4 <_read_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	4d07      	ldr	r5, [pc, #28]	; (8008814 <_read_r+0x20>)
 80087f8:	4604      	mov	r4, r0
 80087fa:	4608      	mov	r0, r1
 80087fc:	4611      	mov	r1, r2
 80087fe:	2200      	movs	r2, #0
 8008800:	602a      	str	r2, [r5, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	f7f8 fac8 	bl	8000d98 <_read>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d102      	bne.n	8008812 <_read_r+0x1e>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	b103      	cbz	r3, 8008812 <_read_r+0x1e>
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	bd38      	pop	{r3, r4, r5, pc}
 8008814:	20001160 	.word	0x20001160

08008818 <_init>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr

08008824 <_fini>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr
